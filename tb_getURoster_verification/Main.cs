/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getURoster_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir702 = null;
        public BindDirection bind_dir703 = null;
        public BindDirection bind_dir704 = null;
        public BindDirection bind_dir705 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir706 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir707 = null;
        public BindDirection bind_dir708 = null;
        public BindDirection bind_dir709 = null;
        public BindDirection bind_dir710 = null;
        public BindDirection bind_dir711 = null;
        public BindDirection bind_dir712 = null;
        public BindDirection bind_dir713 = null;
        public BindDirection bind_dir714 = null;
        public BindDirection bind_dir715 = null;
        public BindDirection bind_dir716 = null;
        public BindDirection bind_dir717 = null;
        public BindDirection bind_dir718 = null;
        public BindDirection bind_dir719 = null;
        public BindDirection bind_dir720 = null;
        public BindDirection bind_dir721 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity265 = null;
        public BindDirection bind_dir722 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity265_Policy = null;
        public BindDirection bind_dir723 = null;
        public BindDirection bind_dir724 = null;
        public BindDirection bind_dir725 = null;
        public BindDirection bind_dir726 = null;
        public BindDirection bind_dir727 = null;
        public BindDirection bind_dir728 = null;
        public BindDirection bind_dir729 = null;
        public BindDirection bind_dir730 = null;
        public BindDirection bind_dir731 = null;
        public BindDirection bind_dir732 = null;
        public BindDirection bind_dir733 = null;
        public BindDirection bind_dir734 = null;
        public BindDirection bind_dir735 = null;
        public BindDirection bind_dir736 = null;
        public BindDirection bind_dir737 = null;
        public BindDirection bind_dir738 = null;
        public BindDirection bind_dir739 = null;
        public BindDirection bind_dir740 = null;
        public BindDirection bind_dir741 = null;
        public BindDirection bind_dir742 = null;
        public BindDirection bind_dir743 = null;
        public BindDirection bind_dir744 = null;
        public BindDirection bind_dir745 = null;
        public BindDirection bind_dir746 = null;
        public BindDirection bind_dir747 = null;
        public BindDirection bind_dir748 = null;
        public BindDirection bind_dir749 = null;
        public BindDirection bind_dir750 = null;
        public BindDirection bind_dir751 = null;
        public BindDirection bind_dir752 = null;
        public BindDirection bind_dir753 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity260 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity260");
            _flow.DataFetchActivity257 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity257");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity259 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity259");
            _flow.DataExporterActivity262 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity262");
            _flow.DataExporterCloseActivity263 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity263");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity258 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity258");
            _flow.DataDisconnectActivity261 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity261");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity265 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity265");
            this.DataCursorActivity265_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence256 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence256");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity260.Comment = @"";
            _flow.DataFetchActivity260.IconPath = @"";
            _flow.DataFetchActivity260.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity260.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity260_QueryParameters_Document = new XmlDocument();
            DataFetchActivity260_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity260Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity260_QueryParameters_Document.LoadXml(xmlDataFetchActivity260Params);
            _flow.DataFetchActivity260.QueryParameters = DataFetchActivity260_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity260);
            this.Activities.Add (_flow.DataFetchActivity260);
            _flow.DataFetchActivity257.Comment = @"";
            _flow.DataFetchActivity257.IconPath = @"";
            _flow.DataFetchActivity257.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity257.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity257_QueryParameters_Document = new XmlDocument();
            DataFetchActivity257_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity257Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity257_QueryParameters_Document.LoadXml(xmlDataFetchActivity257Params);
            _flow.DataFetchActivity257.QueryParameters = DataFetchActivity257_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity257);
            this.Activities.Add (_flow.DataFetchActivity257);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity264);
            _flow.Loop2.Activities.Add (_flow.Sequence255);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity259.Comment = @"";
            _flow.DataExporterActivity259.IconPath = @"";
            VTDPropertyInfoBase pi1429 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter728 = new VTDObjectGetter(pi1429);
            VTDPropertyInfoBase pi1430 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter702 = new VTDObjectSetter(pi1430);
            binding_setter702 = new StringFormaterDecorator(binding_setter702,"{Step.DataFetchActivity257.OutTable}");
            bind_dir702 = new BindDirection(_flow.DataFetchActivity257,binding_getter728,binding_setter702,BindTargetType.ToInProperty);
            _flow.DataExporterActivity259.InDirections.Add(bind_dir702);
            this.Activities.Add (_flow.DataExporterActivity259);
            _flow.DataExporterActivity262.Comment = @"";
            _flow.DataExporterActivity262.IconPath = @"";
            VTDPropertyInfoBase pi1431 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter729 = new VTDObjectGetter(pi1431);
            VTDPropertyInfoBase pi1432 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter703 = new VTDObjectSetter(pi1432);
            binding_setter703 = new StringFormaterDecorator(binding_setter703,"{Step.DataFetchActivity260.OutTable}");
            bind_dir703 = new BindDirection(_flow.DataFetchActivity260,binding_getter729,binding_setter703,BindTargetType.ToInProperty);
            _flow.DataExporterActivity262.InDirections.Add(bind_dir703);
            this.Activities.Add (_flow.DataExporterActivity262);
            _flow.DataExporterCloseActivity263.Comment = @"";
            _flow.DataExporterCloseActivity263.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity263);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity258.Comment = @"";
            _flow.DataDisconnectActivity258.IconPath = @"";
            VTDPropertyInfoBase pi1433 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter730 = new VTDObjectGetter(pi1433);
            VTDPropertyInfoBase pi1434 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter704 = new VTDObjectSetter(pi1434);
            binding_setter704 = new StringFormaterDecorator(binding_setter704,"{Step.DataFetchActivity257.OutTable}");
            bind_dir704 = new BindDirection(_flow.DataFetchActivity257,binding_getter730,binding_setter704,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity258.InDirections.Add(bind_dir704);
            this.Activities.Add (_flow.DataDisconnectActivity258);
            _flow.DataDisconnectActivity261.Comment = @"";
            _flow.DataDisconnectActivity261.IconPath = @"";
            VTDPropertyInfoBase pi1435 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter731 = new VTDObjectGetter(pi1435);
            VTDPropertyInfoBase pi1436 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter705 = new VTDObjectSetter(pi1436);
            binding_setter705 = new StringFormaterDecorator(binding_setter705,"{Step.DataFetchActivity260.OutTable}");
            bind_dir705 = new BindDirection(_flow.DataFetchActivity260,binding_getter731,binding_setter705,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity261.InDirections.Add(bind_dir705);
            this.Activities.Add (_flow.DataDisconnectActivity261);
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1437 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter732 = new VTDObjectGetter(pi1437);
            VTDPropertyInfoBase pi1438 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter706 = new VTDObjectSetter(pi1438);
            binding_setter706 = new StringFormaterDecorator(binding_setter706,"{Step.DataFetchActivity257.OutTable}");
            bind_dir706 = new BindDirection(_flow.DataFetchActivity257,binding_getter732,binding_setter706,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir706);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence255.Activities.Add (_flow.Loop56);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getURoster_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_getURoster_verification表有效行数";
            VTDPropertyInfoBase pi1439 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter733 = new VTDObjectGetter(pi1439);
            VTDPropertyInfoBase pi1440 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter707 = new VTDObjectSetter(pi1440);
            bind_dir707 = new BindDirection(_flow.DbOpenConnection39,binding_getter733,binding_setter707,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir707);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中xsid";
            VTDPropertyInfoBase pi1441 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter734 = new VTDObjectGetter(pi1441);
            VTDPropertyInfoBase pi1442 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter708 = new VTDObjectSetter(pi1442);
            bind_dir708 = new BindDirection(_flow.DbOpenConnection39,binding_getter734,binding_setter708,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir708);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop56.NumberOfIterations = (int)0;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getURoster_verification中的测试用例";
            VTDPropertyInfoBase pi1443 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter735 = new VTDXPathGetter(pi1443,XmlTypeCode.Long);
            binding_getter735 = new XPathGetterDecorator(binding_getter735,"{Array0}",1);
            VTDPropertyInfoBase pi1444 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter709 = new VTDObjectSetter(pi1444);
            bind_dir709 = new BindDirection(_flow.DbFetchData58,binding_getter735,binding_setter709,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir709);
            _flow.Loop56.Activities.Add (this.DataCursorActivity265);
            _flow.Loop56.Activities.Add (_flow.Sequence256);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comUrNSdyzmTB' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/iq/getRoster.php接口token实行加密";
            VTDPropertyInfoBase pi1445 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter736 = new VTDObjectGetter(pi1445);
            VTDPropertyInfoBase pi1446 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter710 = new VTDObjectSetter(pi1446);
            binding_setter710 = new StringFormaterDecorator(binding_setter710,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir710 = new BindDirection(this.DataCursorActivity264,binding_getter736,binding_setter710,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir710);
            VTDPropertyInfoBase pi1447 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter737 = new VTDObjectGetter(pi1447);
            VTDPropertyInfoBase pi1448 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter711 = new VTDObjectSetter(pi1448);
            bind_dir711 = new BindDirection(_flow.DbOpenConnection39,binding_getter737,binding_setter711,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir711);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1449 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter738 = new VTDObjectGetter(pi1449);
            VTDPropertyInfoBase pi1450 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter712 = new VTDObjectSetter(pi1450);
            bind_dir712 = new BindDirection(_flow.DbOpenConnection39,binding_getter738,binding_setter712,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir712);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}&Jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getURoster}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/iq/getURoster.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi1451 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter739 = new VTDObjectGetter(pi1451);
            VTDPropertyInfoBase pi1452 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter713 = new VTDObjectSetter(pi1452);
            binding_setter713 = new StringFormaterDecorator(binding_setter713,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir713 = new BindDirection(this.DataCursorActivity264,binding_getter739,binding_setter713,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir713);
            VTDPropertyInfoBase pi1453 = new VTDPropertyInfoBase("getURoster");
            VTDBaseGetter binding_getter740 = new VTDObjectGetter(pi1453);
            VTDPropertyInfoBase pi1454 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter714 = new VTDObjectSetter(pi1454);
            binding_setter714 = new StringFormaterDecorator(binding_setter714,"{DataSource.tb_global_table.getURoster}");
            bind_dir714 = new BindDirection(this.DataCursorActivity264,binding_getter740,binding_setter714,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir714);
            VTDPropertyInfoBase pi1455 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter741 = new VTDObjectGetter(pi1455);
            VTDPropertyInfoBase pi1456 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter715 = new VTDObjectSetter(pi1456);
            binding_setter715 = new StringFormaterDecorator(binding_setter715,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir715 = new BindDirection(this.DataCursorActivity264,binding_getter741,binding_setter715,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir715);
            VTDPropertyInfoBase pi1457 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter742 = new VTDObjectGetter(pi1457);
            VTDPropertyInfoBase pi1458 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter716 = new VTDObjectSetter(pi1458);
            binding_setter716 = new StringFormaterDecorator(binding_setter716,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir716 = new BindDirection(this.DataCursorActivity264,binding_getter742,binding_setter716,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir716);
            VTDPropertyInfoBase pi1459 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter743 = new VTDXPathGetter(pi1459,XmlTypeCode.String);
            binding_getter743 = new XPathGetterDecorator(binding_getter743,"{Array0}",1);
            VTDPropertyInfoBase pi1460 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter717 = new VTDObjectSetter(pi1460);
            binding_setter717 = new StringFormaterDecorator(binding_setter717,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir717 = new BindDirection(_flow.DbFetchData248,binding_getter743,binding_setter717,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir717);
            VTDPropertyInfoBase pi1461 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter744 = new VTDObjectGetter(pi1461);
            VTDPropertyInfoBase pi1462 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter718 = new VTDObjectSetter(pi1462);
            binding_setter718 = new StringFormaterDecorator(binding_setter718,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir718 = new BindDirection(this.DataCursorActivity264,binding_getter744,binding_setter718,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir718);
            VTDPropertyInfoBase pi1463 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter745 = new VTDXPathGetter(pi1463,XmlTypeCode.String);
            binding_getter745 = new XPathGetterDecorator(binding_getter745,"{Array0}",1);
            VTDPropertyInfoBase pi1464 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter719 = new VTDObjectSetter(pi1464);
            binding_setter719 = new StringFormaterDecorator(binding_setter719,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir719 = new BindDirection(_flow.DbFetchData76,binding_getter745,binding_setter719,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir719);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/getURoster.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1465 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter746 = new VTDObjectGetter(pi1465);
            VTDPropertyInfoBase pi1466 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter720 = new VTDObjectSetter(pi1466);
            binding_setter720 = new StringFormaterDecorator(binding_setter720,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir720 = new BindDirection(_flow.HTTPActivity73,binding_getter746,binding_setter720,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir720);
            VTDPropertyInfoBase pi1467 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter747 = new VTDObjectGetter(pi1467);
            VTDPropertyInfoBase pi1468 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter721 = new VTDObjectSetter(pi1468);
            bind_dir721 = new BindDirection(_flow.DbOpenConnection39,binding_getter747,binding_setter721,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir721);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity265.Comment = @"";
            this.DataCursorActivity265.IconPath = @"";
            VTDPropertyInfoBase pi1469 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter748 = new VTDObjectGetter(pi1469);
            VTDPropertyInfoBase pi1470 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter722 = new VTDObjectSetter(pi1470);
            binding_setter722 = new StringFormaterDecorator(binding_setter722,"{Step.DataFetchActivity257.OutTable}");
            bind_dir722 = new BindDirection(_flow.DataFetchActivity257,binding_getter748,binding_setter722,BindTargetType.ToInProperty);
            this.DataCursorActivity265.InDirections.Add(bind_dir722);
            this.DataCursorActivity265_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity265_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.StartCondition.Value = "";
            this.DataCursorActivity265_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity265_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.EndCondition.Value = "";
            this.DataCursorActivity265_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity265_Policy.StepSize = 1;
            this.DataCursorActivity265_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity265.Policy = this.DataCursorActivity265_Policy;
            this.DataCursorActivity265.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity265.ResetCursor;
            _flow.Sequence256.Comment = @"";
            _flow.Sequence256.IconPath = @"";
            _flow.Sequence256.Name = @"序列256";
            _flow.Sequence256.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence256.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence256.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence256.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence256.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence256.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence256.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,Jid,token from tb_getURoster_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getRoster_verification表中字段信息";
            VTDPropertyInfoBase pi1471 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter749 = new VTDObjectGetter(pi1471);
            VTDPropertyInfoBase pi1472 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter723 = new VTDObjectSetter(pi1472);
            binding_setter723 = new StringFormaterDecorator(binding_setter723,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir723 = new BindDirection(_flow.Loop56,binding_getter749,binding_setter723,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir723);
            VTDPropertyInfoBase pi1473 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter750 = new VTDObjectGetter(pi1473);
            VTDPropertyInfoBase pi1474 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter724 = new VTDObjectSetter(pi1474);
            bind_dir724 = new BindDirection(_flow.DbOpenConnection39,binding_getter750,binding_setter724,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir724);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><Jid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将本地表的xsid更新";
            VTDPropertyInfoBase pi1475 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter751 = new VTDXPathGetter(pi1475,XmlTypeCode.String);
            binding_getter751 = new XPathGetterDecorator(binding_getter751,"{Array0}",1);
            VTDPropertyInfoBase pi1476 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter725 = new VTDObjectSetter(pi1476);
            binding_setter725 = new StringFormaterDecorator(binding_setter725,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir725 = new BindDirection(_flow.DbFetchData57,binding_getter751,binding_setter725,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir725);
            VTDPropertyInfoBase pi1477 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter752 = new VTDXPathGetter(pi1477,XmlTypeCode.String);
            binding_getter752 = new XPathGetterDecorator(binding_getter752,"{Array0}",1);
            VTDPropertyInfoBase pi1478 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter726 = new VTDObjectSetter(pi1478);
            binding_setter726 = new StringFormaterDecorator(binding_setter726,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir726 = new BindDirection(_flow.DbFetchData248,binding_getter752,binding_setter726,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir726);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}UrNSdyzmTB' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi1479 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter753 = new VTDXPathGetter(pi1479,XmlTypeCode.String);
            binding_getter753 = new XPathGetterDecorator(binding_getter753,"{Array0}",1);
            VTDPropertyInfoBase pi1480 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter727 = new VTDObjectSetter(pi1480);
            binding_setter727 = new StringFormaterDecorator(binding_setter727,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir727 = new BindDirection(_flow.DbFetchData57,binding_getter753,binding_setter727,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir727);
            VTDPropertyInfoBase pi1481 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter754 = new VTDObjectGetter(pi1481);
            VTDPropertyInfoBase pi1482 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter728 = new VTDObjectSetter(pi1482);
            bind_dir728 = new BindDirection(_flow.DbOpenConnection39,binding_getter754,binding_setter728,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir728);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi1483 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter755 = new VTDObjectGetter(pi1483);
            VTDPropertyInfoBase pi1484 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter729 = new VTDObjectSetter(pi1484);
            bind_dir729 = new BindDirection(_flow.DbOpenConnection39,binding_getter755,binding_setter729,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir729);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"305bbc2b43542b3d0203daffe9073c3cba5b47d9";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi1485 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter756 = new VTDXPathGetter(pi1485,XmlTypeCode.String);
            binding_getter756 = new XPathGetterDecorator(binding_getter756,"{Array0}",1);
            VTDPropertyInfoBase pi1486 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter730 = new VTDObjectSetter(pi1486);
            binding_setter730 = new StringFormaterDecorator(binding_setter730,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir730 = new BindDirection(_flow.DbFetchData57,binding_getter756,binding_setter730,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir730);
            VTDPropertyInfoBase pi1487 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter757 = new VTDXPathGetter(pi1487,XmlTypeCode.String);
            binding_getter757 = new XPathGetterDecorator(binding_getter757,"{Array0}",1);
            VTDPropertyInfoBase pi1488 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter731 = new VTDObjectSetter(pi1488);
            binding_setter731 = new StringFormaterDecorator(binding_setter731,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir731 = new BindDirection(_flow.DbFetchData252,binding_getter757,binding_setter731,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir731);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&Jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getURoster}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/getURoster.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi1489 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter758 = new VTDObjectGetter(pi1489);
            VTDPropertyInfoBase pi1490 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter732 = new VTDObjectSetter(pi1490);
            binding_setter732 = new StringFormaterDecorator(binding_setter732,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir732 = new BindDirection(this.DataCursorActivity265,binding_getter758,binding_setter732,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir732);
            VTDPropertyInfoBase pi1491 = new VTDPropertyInfoBase("getURoster");
            VTDBaseGetter binding_getter759 = new VTDObjectGetter(pi1491);
            VTDPropertyInfoBase pi1492 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter733 = new VTDObjectSetter(pi1492);
            binding_setter733 = new StringFormaterDecorator(binding_setter733,"{DataSource.tb_global_table.getURoster}");
            bind_dir733 = new BindDirection(this.DataCursorActivity265,binding_getter759,binding_setter733,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir733);
            VTDPropertyInfoBase pi1493 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter760 = new VTDObjectGetter(pi1493);
            VTDPropertyInfoBase pi1494 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter734 = new VTDObjectSetter(pi1494);
            binding_setter734 = new StringFormaterDecorator(binding_setter734,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir734 = new BindDirection(this.DataCursorActivity265,binding_getter760,binding_setter734,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir734);
            VTDPropertyInfoBase pi1495 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter761 = new VTDObjectGetter(pi1495);
            VTDPropertyInfoBase pi1496 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter735 = new VTDObjectSetter(pi1496);
            binding_setter735 = new StringFormaterDecorator(binding_setter735,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir735 = new BindDirection(this.DataCursorActivity265,binding_getter761,binding_setter735,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir735);
            VTDPropertyInfoBase pi1497 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter762 = new VTDObjectGetter(pi1497);
            VTDPropertyInfoBase pi1498 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter736 = new VTDObjectSetter(pi1498);
            binding_setter736 = new StringFormaterDecorator(binding_setter736,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir736 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter762,binding_setter736,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir736);
            VTDPropertyInfoBase pi1499 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter763 = new VTDXPathGetter(pi1499,XmlTypeCode.String);
            binding_getter763 = new XPathGetterDecorator(binding_getter763,"{Array0}",1);
            VTDPropertyInfoBase pi1500 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter737 = new VTDObjectSetter(pi1500);
            binding_setter737 = new StringFormaterDecorator(binding_setter737,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir737 = new BindDirection(_flow.DbFetchData57,binding_getter763,binding_setter737,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir737);
            VTDPropertyInfoBase pi1501 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter764 = new VTDObjectGetter(pi1501);
            VTDPropertyInfoBase pi1502 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter738 = new VTDObjectSetter(pi1502);
            binding_setter738 = new StringFormaterDecorator(binding_setter738,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir738 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter764,binding_setter738,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir738);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1503 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter765 = new VTDObjectGetter(pi1503);
            VTDPropertyInfoBase pi1504 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter739 = new VTDObjectSetter(pi1504);
            binding_setter739 = new StringFormaterDecorator(binding_setter739,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir739 = new BindDirection(_flow.HTTPActivity59,binding_getter765,binding_setter739,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir739);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getURoster_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi1505 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter766 = new VTDObjectGetter(pi1505);
            VTDPropertyInfoBase pi1506 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter740 = new VTDObjectSetter(pi1506);
            binding_setter740 = new StringFormaterDecorator(binding_setter740,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir740 = new BindDirection(_flow.HTTPActivity59,binding_getter766,binding_setter740,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir740);
            VTDPropertyInfoBase pi1507 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter767 = new VTDObjectGetter(pi1507);
            VTDPropertyInfoBase pi1508 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter741 = new VTDObjectSetter(pi1508);
            binding_setter741 = new StringFormaterDecorator(binding_setter741,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir741 = new BindDirection(_flow.Loop56,binding_getter767,binding_setter741,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir741);
            VTDPropertyInfoBase pi1509 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter768 = new VTDObjectGetter(pi1509);
            VTDPropertyInfoBase pi1510 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter742 = new VTDObjectSetter(pi1510);
            bind_dir742 = new BindDirection(_flow.DbOpenConnection39,binding_getter768,binding_setter742,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir742);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getURoster_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1511 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter769 = new VTDJsonGetter(pi1511);
            VTDPropertyInfoBase pi1512 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter743 = new VTDObjectSetter(pi1512);
            binding_setter743 = new StringFormaterDecorator(binding_setter743,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir743 = new BindDirection(_flow.StringToJsonActivity60,binding_getter769,binding_setter743,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir743);
            VTDPropertyInfoBase pi1513 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter770 = new VTDObjectGetter(pi1513);
            VTDPropertyInfoBase pi1514 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter744 = new VTDObjectSetter(pi1514);
            binding_setter744 = new StringFormaterDecorator(binding_setter744,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir744 = new BindDirection(_flow.Loop56,binding_getter770,binding_setter744,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir744);
            VTDPropertyInfoBase pi1515 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter771 = new VTDObjectGetter(pi1515);
            VTDPropertyInfoBase pi1516 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter745 = new VTDObjectSetter(pi1516);
            bind_dir745 = new BindDirection(_flow.DbOpenConnection39,binding_getter771,binding_setter745,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir745);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getURoster_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1517 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter772 = new VTDObjectGetter(pi1517);
            VTDPropertyInfoBase pi1518 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter746 = new VTDObjectSetter(pi1518);
            binding_setter746 = new StringFormaterDecorator(binding_setter746,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir746 = new BindDirection(_flow.Loop56,binding_getter772,binding_setter746,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir746);
            VTDPropertyInfoBase pi1519 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter773 = new VTDObjectGetter(pi1519);
            VTDPropertyInfoBase pi1520 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter747 = new VTDObjectSetter(pi1520);
            bind_dir747 = new BindDirection(_flow.DbOpenConnection39,binding_getter773,binding_setter747,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir747);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getURoster_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1521 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter774 = new VTDObjectGetter(pi1521);
            VTDPropertyInfoBase pi1522 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter748 = new VTDObjectSetter(pi1522);
            binding_setter748 = new StringFormaterDecorator(binding_setter748,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir748 = new BindDirection(_flow.Loop56,binding_getter774,binding_setter748,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir748);
            VTDPropertyInfoBase pi1523 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter775 = new VTDObjectGetter(pi1523);
            VTDPropertyInfoBase pi1524 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter749 = new VTDObjectSetter(pi1524);
            bind_dir749 = new BindDirection(_flow.DbOpenConnection39,binding_getter775,binding_setter749,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir749);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1525 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter776 = new VTDXPathGetter(pi1525,XmlTypeCode.String);
            binding_getter776 = new XPathGetterDecorator(binding_getter776,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter776),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1526 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter777 = new VTDXPathGetter(pi1526,XmlTypeCode.String);
            binding_getter777 = new XPathGetterDecorator(binding_getter777,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter777),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getURoster_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1527 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter778 = new VTDObjectGetter(pi1527);
            VTDPropertyInfoBase pi1528 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter750 = new VTDObjectSetter(pi1528);
            binding_setter750 = new StringFormaterDecorator(binding_setter750,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir750 = new BindDirection(_flow.Loop56,binding_getter778,binding_setter750,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir750);
            VTDPropertyInfoBase pi1529 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter779 = new VTDObjectGetter(pi1529);
            VTDPropertyInfoBase pi1530 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter751 = new VTDObjectSetter(pi1530);
            bind_dir751 = new BindDirection(_flow.DbOpenConnection39,binding_getter779,binding_setter751,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir751);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getURoster_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1531 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter780 = new VTDObjectGetter(pi1531);
            VTDPropertyInfoBase pi1532 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter752 = new VTDObjectSetter(pi1532);
            binding_setter752 = new StringFormaterDecorator(binding_setter752,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir752 = new BindDirection(_flow.Loop56,binding_getter780,binding_setter752,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir752);
            VTDPropertyInfoBase pi1533 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter781 = new VTDObjectGetter(pi1533);
            VTDPropertyInfoBase pi1534 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter753 = new VTDObjectSetter(pi1534);
            bind_dir753 = new BindDirection(_flow.DbOpenConnection39,binding_getter781,binding_setter753,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir753);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    