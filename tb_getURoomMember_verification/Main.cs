/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getURoomMember_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir806 = null;
        public BindDirection bind_dir807 = null;
        public BindDirection bind_dir808 = null;
        public BindDirection bind_dir809 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity265 = null;
        public BindDirection bind_dir810 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity265_Policy = null;
        public BindDirection bind_dir811 = null;
        public BindDirection bind_dir812 = null;
        public BindDirection bind_dir813 = null;
        public BindDirection bind_dir814 = null;
        public BindDirection bind_dir815 = null;
        public BindDirection bind_dir816 = null;
        public BindDirection bind_dir817 = null;
        public BindDirection bind_dir818 = null;
        public BindDirection bind_dir819 = null;
        public BindDirection bind_dir820 = null;
        public BindDirection bind_dir821 = null;
        public BindDirection bind_dir822 = null;
        public BindDirection bind_dir823 = null;
        public BindDirection bind_dir824 = null;
        public BindDirection bind_dir825 = null;
        public BindDirection bind_dir826 = null;
        public BindDirection bind_dir827 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity266 = null;
        public BindDirection bind_dir828 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity266_Policy = null;
        public BindDirection bind_dir829 = null;
        public BindDirection bind_dir830 = null;
        public BindDirection bind_dir831 = null;
        public BindDirection bind_dir832 = null;
        public BindDirection bind_dir833 = null;
        public BindDirection bind_dir834 = null;
        public BindDirection bind_dir835 = null;
        public BindDirection bind_dir836 = null;
        public BindDirection bind_dir837 = null;
        public BindDirection bind_dir838 = null;
        public BindDirection bind_dir839 = null;
        public BindDirection bind_dir840 = null;
        public BindDirection bind_dir841 = null;
        public BindDirection bind_dir842 = null;
        public BindDirection bind_dir843 = null;
        public BindDirection bind_dir844 = null;
        public BindDirection bind_dir845 = null;
        public BindDirection bind_dir846 = null;
        public BindDirection bind_dir847 = null;
        public BindDirection bind_dir848 = null;
        public BindDirection bind_dir849 = null;
        public BindDirection bind_dir850 = null;
        public BindDirection bind_dir851 = null;
        public BindDirection bind_dir852 = null;
        public BindDirection bind_dir853 = null;
        public BindDirection bind_dir854 = null;
        public BindDirection bind_dir855 = null;
        public BindDirection bind_dir856 = null;
        public BindDirection bind_dir857 = null;
        public BindDirection bind_dir858 = null;
        public BindDirection bind_dir859 = null;
        public BindDirection bind_dir860 = null;
        public BindDirection bind_dir861 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity261 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity261");
            _flow.DataFetchActivity258 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity258");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity260 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity260");
            _flow.DataExporterActivity263 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity263");
            _flow.DataExporterCloseActivity264 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity264");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity259 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity259");
            _flow.DataDisconnectActivity262 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity262");
            this.DataCursorActivity265 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity265");
            this.DataCursorActivity265_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence256 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence256");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData254 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData254");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity266 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity266");
            this.DataCursorActivity266_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence257 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence257");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity261.Comment = @"";
            _flow.DataFetchActivity261.IconPath = @"";
            _flow.DataFetchActivity261.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity261.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity261_QueryParameters_Document = new XmlDocument();
            DataFetchActivity261_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity261Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity261_QueryParameters_Document.LoadXml(xmlDataFetchActivity261Params);
            _flow.DataFetchActivity261.QueryParameters = DataFetchActivity261_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity261);
            this.Activities.Add (_flow.DataFetchActivity261);
            _flow.DataFetchActivity258.Comment = @"";
            _flow.DataFetchActivity258.IconPath = @"";
            _flow.DataFetchActivity258.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity258.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity258_QueryParameters_Document = new XmlDocument();
            DataFetchActivity258_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity258Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity258_QueryParameters_Document.LoadXml(xmlDataFetchActivity258Params);
            _flow.DataFetchActivity258.QueryParameters = DataFetchActivity258_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity258);
            this.Activities.Add (_flow.DataFetchActivity258);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity265);
            _flow.Loop2.Activities.Add (_flow.Sequence256);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity260.Comment = @"";
            _flow.DataExporterActivity260.IconPath = @"";
            VTDPropertyInfoBase pi1641 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter836 = new VTDObjectGetter(pi1641);
            VTDPropertyInfoBase pi1642 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter806 = new VTDObjectSetter(pi1642);
            binding_setter806 = new StringFormaterDecorator(binding_setter806,"{Step.DataFetchActivity258.OutTable}");
            bind_dir806 = new BindDirection(_flow.DataFetchActivity258,binding_getter836,binding_setter806,BindTargetType.ToInProperty);
            _flow.DataExporterActivity260.InDirections.Add(bind_dir806);
            this.Activities.Add (_flow.DataExporterActivity260);
            _flow.DataExporterActivity263.Comment = @"";
            _flow.DataExporterActivity263.IconPath = @"";
            VTDPropertyInfoBase pi1643 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter837 = new VTDObjectGetter(pi1643);
            VTDPropertyInfoBase pi1644 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter807 = new VTDObjectSetter(pi1644);
            binding_setter807 = new StringFormaterDecorator(binding_setter807,"{Step.DataFetchActivity261.OutTable}");
            bind_dir807 = new BindDirection(_flow.DataFetchActivity261,binding_getter837,binding_setter807,BindTargetType.ToInProperty);
            _flow.DataExporterActivity263.InDirections.Add(bind_dir807);
            this.Activities.Add (_flow.DataExporterActivity263);
            _flow.DataExporterCloseActivity264.Comment = @"";
            _flow.DataExporterCloseActivity264.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity264);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity259.Comment = @"";
            _flow.DataDisconnectActivity259.IconPath = @"";
            VTDPropertyInfoBase pi1645 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter838 = new VTDObjectGetter(pi1645);
            VTDPropertyInfoBase pi1646 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter808 = new VTDObjectSetter(pi1646);
            binding_setter808 = new StringFormaterDecorator(binding_setter808,"{Step.DataFetchActivity258.OutTable}");
            bind_dir808 = new BindDirection(_flow.DataFetchActivity258,binding_getter838,binding_setter808,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity259.InDirections.Add(bind_dir808);
            this.Activities.Add (_flow.DataDisconnectActivity259);
            _flow.DataDisconnectActivity262.Comment = @"";
            _flow.DataDisconnectActivity262.IconPath = @"";
            VTDPropertyInfoBase pi1647 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter839 = new VTDObjectGetter(pi1647);
            VTDPropertyInfoBase pi1648 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter809 = new VTDObjectSetter(pi1648);
            binding_setter809 = new StringFormaterDecorator(binding_setter809,"{Step.DataFetchActivity261.OutTable}");
            bind_dir809 = new BindDirection(_flow.DataFetchActivity261,binding_getter839,binding_setter809,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity262.InDirections.Add(bind_dir809);
            this.Activities.Add (_flow.DataDisconnectActivity262);
            this.DataCursorActivity265.Comment = @"";
            this.DataCursorActivity265.IconPath = @"";
            VTDPropertyInfoBase pi1649 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter840 = new VTDObjectGetter(pi1649);
            VTDPropertyInfoBase pi1650 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter810 = new VTDObjectSetter(pi1650);
            binding_setter810 = new StringFormaterDecorator(binding_setter810,"{Step.DataFetchActivity258.OutTable}");
            bind_dir810 = new BindDirection(_flow.DataFetchActivity258,binding_getter840,binding_setter810,BindTargetType.ToInProperty);
            this.DataCursorActivity265.InDirections.Add(bind_dir810);
            this.DataCursorActivity265_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity265_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.StartCondition.Value = "";
            this.DataCursorActivity265_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity265_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.EndCondition.Value = "";
            this.DataCursorActivity265_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity265_Policy.StepSize = 1;
            this.DataCursorActivity265_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity265.Policy = this.DataCursorActivity265_Policy;
            this.DataCursorActivity265.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity265.ResetCursor;
            _flow.Sequence256.Comment = @"";
            _flow.Sequence256.IconPath = @"";
            _flow.Sequence256.Name = @"序列256";
            _flow.Sequence256.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData254);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence256.Activities.Add (_flow.Loop56);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence256.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence256.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getURoomMember_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取tb_getURoomMember_verification表有效行数";
            VTDPropertyInfoBase pi1651 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter841 = new VTDObjectGetter(pi1651);
            VTDPropertyInfoBase pi1652 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter811 = new VTDObjectSetter(pi1652);
            bind_dir811 = new BindDirection(_flow.DbOpenConnection39,binding_getter841,binding_setter811,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir811);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData254.QueryString = @"select groupJid from tb_global_table where TestCase = 1";
            _flow.DbFetchData254.Timeout = (int)30;
            _flow.DbFetchData254.Comment = @"";
            _flow.DbFetchData254.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData254.Name = @"获取全局表中groupJid";
            VTDPropertyInfoBase pi1653 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter842 = new VTDObjectGetter(pi1653);
            VTDPropertyInfoBase pi1654 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter812 = new VTDObjectSetter(pi1654);
            bind_dir812 = new BindDirection(_flow.DbOpenConnection39,binding_getter842,binding_setter812,BindTargetType.ToInProperty);
            _flow.DbFetchData254.InDirections.Add(bind_dir812);
            XmlDocument DbFetchData254_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData254_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData254_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><groupJid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData254.ExpectedOutputProperties = DbFetchData254_ExpectedOutputProperties_Document;
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中xsid";
            VTDPropertyInfoBase pi1655 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter843 = new VTDObjectGetter(pi1655);
            VTDPropertyInfoBase pi1656 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter813 = new VTDObjectSetter(pi1656);
            bind_dir813 = new BindDirection(_flow.DbOpenConnection39,binding_getter843,binding_setter813,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir813);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop56.NumberOfIterations = (int)1;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getURoomMember_verification中的测试用例";
            _flow.Loop56.Activities.Add (this.DataCursorActivity266);
            _flow.Loop56.Activities.Add (_flow.Sequence257);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDcVvwMFWs5{Step.OutputProperties.DbFetchData254.ResultTable.Row[1].groupJid}' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/iq/getRoomMember.php接口token实行加密";
            VTDPropertyInfoBase pi1657 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter844 = new VTDObjectGetter(pi1657);
            VTDPropertyInfoBase pi1658 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter814 = new VTDObjectSetter(pi1658);
            binding_setter814 = new StringFormaterDecorator(binding_setter814,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir814 = new BindDirection(this.DataCursorActivity265,binding_getter844,binding_setter814,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir814);
            VTDPropertyInfoBase pi1659 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter845 = new VTDXPathGetter(pi1659,XmlTypeCode.String);
            binding_getter845 = new XPathGetterDecorator(binding_getter845,"{Array0}",1);
            VTDPropertyInfoBase pi1660 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter815 = new VTDObjectSetter(pi1660);
            binding_setter815 = new StringFormaterDecorator(binding_setter815,"{Step.OutputProperties.DbFetchData254.ResultTable.Row[1].groupJid}");
            bind_dir815 = new BindDirection(_flow.DbFetchData254,binding_getter845,binding_setter815,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir815);
            VTDPropertyInfoBase pi1661 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter846 = new VTDObjectGetter(pi1661);
            VTDPropertyInfoBase pi1662 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter816 = new VTDObjectSetter(pi1662);
            bind_dir816 = new BindDirection(_flow.DbOpenConnection39,binding_getter846,binding_setter816,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir816);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1663 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter847 = new VTDObjectGetter(pi1663);
            VTDPropertyInfoBase pi1664 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter817 = new VTDObjectSetter(pi1664);
            bind_dir817 = new BindDirection(_flow.DbOpenConnection39,binding_getter847,binding_setter817,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir817);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}&myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&roomJid={Step.OutputProperties.DbFetchData254.ResultTable.Row[1].groupJid}&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getURoomMember}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/iq/getURoomMember.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi1665 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter848 = new VTDObjectGetter(pi1665);
            VTDPropertyInfoBase pi1666 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter818 = new VTDObjectSetter(pi1666);
            binding_setter818 = new StringFormaterDecorator(binding_setter818,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir818 = new BindDirection(this.DataCursorActivity265,binding_getter848,binding_setter818,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir818);
            VTDPropertyInfoBase pi1667 = new VTDPropertyInfoBase("getURoomMember");
            VTDBaseGetter binding_getter849 = new VTDObjectGetter(pi1667);
            VTDPropertyInfoBase pi1668 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter819 = new VTDObjectSetter(pi1668);
            binding_setter819 = new StringFormaterDecorator(binding_setter819,"{DataSource.tb_global_table.getURoomMember}");
            bind_dir819 = new BindDirection(this.DataCursorActivity265,binding_getter849,binding_setter819,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir819);
            VTDPropertyInfoBase pi1669 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter850 = new VTDObjectGetter(pi1669);
            VTDPropertyInfoBase pi1670 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter820 = new VTDObjectSetter(pi1670);
            binding_setter820 = new StringFormaterDecorator(binding_setter820,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir820 = new BindDirection(this.DataCursorActivity265,binding_getter850,binding_setter820,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir820);
            VTDPropertyInfoBase pi1671 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter851 = new VTDObjectGetter(pi1671);
            VTDPropertyInfoBase pi1672 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter821 = new VTDObjectSetter(pi1672);
            binding_setter821 = new StringFormaterDecorator(binding_setter821,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir821 = new BindDirection(this.DataCursorActivity265,binding_getter851,binding_setter821,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir821);
            VTDPropertyInfoBase pi1673 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter852 = new VTDXPathGetter(pi1673,XmlTypeCode.String);
            binding_getter852 = new XPathGetterDecorator(binding_getter852,"{Array0}",1);
            VTDPropertyInfoBase pi1674 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter822 = new VTDObjectSetter(pi1674);
            binding_setter822 = new StringFormaterDecorator(binding_setter822,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir822 = new BindDirection(_flow.DbFetchData248,binding_getter852,binding_setter822,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir822);
            VTDPropertyInfoBase pi1675 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter853 = new VTDObjectGetter(pi1675);
            VTDPropertyInfoBase pi1676 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter823 = new VTDObjectSetter(pi1676);
            binding_setter823 = new StringFormaterDecorator(binding_setter823,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir823 = new BindDirection(this.DataCursorActivity265,binding_getter853,binding_setter823,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir823);
            VTDPropertyInfoBase pi1677 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter854 = new VTDXPathGetter(pi1677,XmlTypeCode.String);
            binding_getter854 = new XPathGetterDecorator(binding_getter854,"{Array0}",1);
            VTDPropertyInfoBase pi1678 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter824 = new VTDObjectSetter(pi1678);
            binding_setter824 = new StringFormaterDecorator(binding_setter824,"{Step.OutputProperties.DbFetchData254.ResultTable.Row[1].groupJid}");
            bind_dir824 = new BindDirection(_flow.DbFetchData254,binding_getter854,binding_setter824,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir824);
            VTDPropertyInfoBase pi1679 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter855 = new VTDXPathGetter(pi1679,XmlTypeCode.String);
            binding_getter855 = new XPathGetterDecorator(binding_getter855,"{Array0}",1);
            VTDPropertyInfoBase pi1680 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter825 = new VTDObjectSetter(pi1680);
            binding_setter825 = new StringFormaterDecorator(binding_setter825,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir825 = new BindDirection(_flow.DbFetchData76,binding_getter855,binding_setter825,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir825);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/getURoomMember.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1681 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter856 = new VTDObjectGetter(pi1681);
            VTDPropertyInfoBase pi1682 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter826 = new VTDObjectSetter(pi1682);
            binding_setter826 = new StringFormaterDecorator(binding_setter826,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir826 = new BindDirection(_flow.HTTPActivity73,binding_getter856,binding_setter826,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir826);
            VTDPropertyInfoBase pi1683 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter857 = new VTDObjectGetter(pi1683);
            VTDPropertyInfoBase pi1684 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter827 = new VTDObjectSetter(pi1684);
            bind_dir827 = new BindDirection(_flow.DbOpenConnection39,binding_getter857,binding_setter827,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir827);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity266.Comment = @"";
            this.DataCursorActivity266.IconPath = @"";
            VTDPropertyInfoBase pi1685 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter858 = new VTDObjectGetter(pi1685);
            VTDPropertyInfoBase pi1686 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter828 = new VTDObjectSetter(pi1686);
            binding_setter828 = new StringFormaterDecorator(binding_setter828,"{Step.DataFetchActivity258.OutTable}");
            bind_dir828 = new BindDirection(_flow.DataFetchActivity258,binding_getter858,binding_setter828,BindTargetType.ToInProperty);
            this.DataCursorActivity266.InDirections.Add(bind_dir828);
            this.DataCursorActivity266_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity266_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.StartCondition.Value = "";
            this.DataCursorActivity266_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity266_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.EndCondition.Value = "";
            this.DataCursorActivity266_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity266_Policy.StepSize = 1;
            this.DataCursorActivity266_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity266.Policy = this.DataCursorActivity266_Policy;
            this.DataCursorActivity266.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity266.ResetCursor;
            _flow.Sequence257.Comment = @"";
            _flow.Sequence257.IconPath = @"";
            _flow.Sequence257.Name = @"序列257";
            _flow.Sequence257.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence257.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence257.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence257.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence257.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence257.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence257.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,myJid,roomJid,token from tb_getRoomMember_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getRoomMember_verification表中字段信息";
            VTDPropertyInfoBase pi1687 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter859 = new VTDObjectGetter(pi1687);
            VTDPropertyInfoBase pi1688 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter829 = new VTDObjectSetter(pi1688);
            binding_setter829 = new StringFormaterDecorator(binding_setter829,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir829 = new BindDirection(_flow.Loop56,binding_getter859,binding_setter829,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir829);
            VTDPropertyInfoBase pi1689 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter860 = new VTDObjectGetter(pi1689);
            VTDPropertyInfoBase pi1690 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter830 = new VTDObjectSetter(pi1690);
            bind_dir830 = new BindDirection(_flow.DbOpenConnection39,binding_getter860,binding_setter830,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir830);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><myJid /><roomJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将本地表的xsid更新";
            VTDPropertyInfoBase pi1691 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter861 = new VTDXPathGetter(pi1691,XmlTypeCode.String);
            binding_getter861 = new XPathGetterDecorator(binding_getter861,"{Array0}",1);
            VTDPropertyInfoBase pi1692 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter831 = new VTDObjectSetter(pi1692);
            binding_setter831 = new StringFormaterDecorator(binding_setter831,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir831 = new BindDirection(_flow.DbFetchData57,binding_getter861,binding_setter831,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir831);
            VTDPropertyInfoBase pi1693 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter862 = new VTDXPathGetter(pi1693,XmlTypeCode.String);
            binding_getter862 = new XPathGetterDecorator(binding_getter862,"{Array0}",1);
            VTDPropertyInfoBase pi1694 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter832 = new VTDObjectSetter(pi1694);
            binding_setter832 = new StringFormaterDecorator(binding_setter832,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir832 = new BindDirection(_flow.DbFetchData248,binding_getter862,binding_setter832,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir832);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}DcVvwMFWs5{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi1695 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter863 = new VTDXPathGetter(pi1695,XmlTypeCode.String);
            binding_getter863 = new XPathGetterDecorator(binding_getter863,"{Array0}",1);
            VTDPropertyInfoBase pi1696 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter833 = new VTDObjectSetter(pi1696);
            binding_setter833 = new StringFormaterDecorator(binding_setter833,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir833 = new BindDirection(_flow.DbFetchData57,binding_getter863,binding_setter833,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir833);
            VTDPropertyInfoBase pi1697 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='roomJid'][1]");
            VTDBaseGetter binding_getter864 = new VTDXPathGetter(pi1697,XmlTypeCode.String);
            binding_getter864 = new XPathGetterDecorator(binding_getter864,"{Array0}",1);
            VTDPropertyInfoBase pi1698 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter834 = new VTDObjectSetter(pi1698);
            binding_setter834 = new StringFormaterDecorator(binding_setter834,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}");
            bind_dir834 = new BindDirection(_flow.DbFetchData57,binding_getter864,binding_setter834,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir834);
            VTDPropertyInfoBase pi1699 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter865 = new VTDObjectGetter(pi1699);
            VTDPropertyInfoBase pi1700 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter835 = new VTDObjectSetter(pi1700);
            bind_dir835 = new BindDirection(_flow.DbOpenConnection39,binding_getter865,binding_setter835,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir835);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi1701 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter866 = new VTDObjectGetter(pi1701);
            VTDPropertyInfoBase pi1702 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter836 = new VTDObjectSetter(pi1702);
            bind_dir836 = new BindDirection(_flow.DbOpenConnection39,binding_getter866,binding_setter836,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir836);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"72738f03c2eb66d693992576857807ee7718b2fc";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi1703 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter867 = new VTDXPathGetter(pi1703,XmlTypeCode.String);
            binding_getter867 = new XPathGetterDecorator(binding_getter867,"{Array0}",1);
            VTDPropertyInfoBase pi1704 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter837 = new VTDObjectSetter(pi1704);
            binding_setter837 = new StringFormaterDecorator(binding_setter837,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir837 = new BindDirection(_flow.DbFetchData57,binding_getter867,binding_setter837,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir837);
            VTDPropertyInfoBase pi1705 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter868 = new VTDXPathGetter(pi1705,XmlTypeCode.String);
            binding_getter868 = new XPathGetterDecorator(binding_getter868,"{Array0}",1);
            VTDPropertyInfoBase pi1706 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter838 = new VTDObjectSetter(pi1706);
            binding_setter838 = new StringFormaterDecorator(binding_setter838,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir838 = new BindDirection(_flow.DbFetchData252,binding_getter868,binding_setter838,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir838);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&myJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}&roomJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getURoomMember}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/getURoomMember.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi1707 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter869 = new VTDObjectGetter(pi1707);
            VTDPropertyInfoBase pi1708 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter839 = new VTDObjectSetter(pi1708);
            binding_setter839 = new StringFormaterDecorator(binding_setter839,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir839 = new BindDirection(this.DataCursorActivity266,binding_getter869,binding_setter839,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir839);
            VTDPropertyInfoBase pi1709 = new VTDPropertyInfoBase("getURoomMember");
            VTDBaseGetter binding_getter870 = new VTDObjectGetter(pi1709);
            VTDPropertyInfoBase pi1710 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter840 = new VTDObjectSetter(pi1710);
            binding_setter840 = new StringFormaterDecorator(binding_setter840,"{DataSource.tb_global_table.getURoomMember}");
            bind_dir840 = new BindDirection(this.DataCursorActivity266,binding_getter870,binding_setter840,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir840);
            VTDPropertyInfoBase pi1711 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter871 = new VTDObjectGetter(pi1711);
            VTDPropertyInfoBase pi1712 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter841 = new VTDObjectSetter(pi1712);
            binding_setter841 = new StringFormaterDecorator(binding_setter841,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir841 = new BindDirection(this.DataCursorActivity266,binding_getter871,binding_setter841,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir841);
            VTDPropertyInfoBase pi1713 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter872 = new VTDObjectGetter(pi1713);
            VTDPropertyInfoBase pi1714 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter842 = new VTDObjectSetter(pi1714);
            binding_setter842 = new StringFormaterDecorator(binding_setter842,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir842 = new BindDirection(this.DataCursorActivity266,binding_getter872,binding_setter842,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir842);
            VTDPropertyInfoBase pi1715 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter873 = new VTDObjectGetter(pi1715);
            VTDPropertyInfoBase pi1716 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter843 = new VTDObjectSetter(pi1716);
            binding_setter843 = new StringFormaterDecorator(binding_setter843,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir843 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter873,binding_setter843,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir843);
            VTDPropertyInfoBase pi1717 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter874 = new VTDXPathGetter(pi1717,XmlTypeCode.String);
            binding_getter874 = new XPathGetterDecorator(binding_getter874,"{Array0}",1);
            VTDPropertyInfoBase pi1718 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter844 = new VTDObjectSetter(pi1718);
            binding_setter844 = new StringFormaterDecorator(binding_setter844,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir844 = new BindDirection(_flow.DbFetchData57,binding_getter874,binding_setter844,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir844);
            VTDPropertyInfoBase pi1719 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='roomJid'][1]");
            VTDBaseGetter binding_getter875 = new VTDXPathGetter(pi1719,XmlTypeCode.String);
            binding_getter875 = new XPathGetterDecorator(binding_getter875,"{Array0}",1);
            VTDPropertyInfoBase pi1720 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter845 = new VTDObjectSetter(pi1720);
            binding_setter845 = new StringFormaterDecorator(binding_setter845,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}");
            bind_dir845 = new BindDirection(_flow.DbFetchData57,binding_getter875,binding_setter845,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir845);
            VTDPropertyInfoBase pi1721 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter876 = new VTDObjectGetter(pi1721);
            VTDPropertyInfoBase pi1722 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter846 = new VTDObjectSetter(pi1722);
            binding_setter846 = new StringFormaterDecorator(binding_setter846,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir846 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter876,binding_setter846,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir846);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1723 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter877 = new VTDObjectGetter(pi1723);
            VTDPropertyInfoBase pi1724 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter847 = new VTDObjectSetter(pi1724);
            binding_setter847 = new StringFormaterDecorator(binding_setter847,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir847 = new BindDirection(_flow.HTTPActivity59,binding_getter877,binding_setter847,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir847);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getURoomMember_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi1725 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter878 = new VTDObjectGetter(pi1725);
            VTDPropertyInfoBase pi1726 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter848 = new VTDObjectSetter(pi1726);
            binding_setter848 = new StringFormaterDecorator(binding_setter848,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir848 = new BindDirection(_flow.HTTPActivity59,binding_getter878,binding_setter848,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir848);
            VTDPropertyInfoBase pi1727 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter879 = new VTDObjectGetter(pi1727);
            VTDPropertyInfoBase pi1728 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter849 = new VTDObjectSetter(pi1728);
            binding_setter849 = new StringFormaterDecorator(binding_setter849,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir849 = new BindDirection(_flow.Loop56,binding_getter879,binding_setter849,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir849);
            VTDPropertyInfoBase pi1729 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter880 = new VTDObjectGetter(pi1729);
            VTDPropertyInfoBase pi1730 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter850 = new VTDObjectSetter(pi1730);
            bind_dir850 = new BindDirection(_flow.DbOpenConnection39,binding_getter880,binding_setter850,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir850);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getURoomMember_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1731 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter881 = new VTDJsonGetter(pi1731);
            VTDPropertyInfoBase pi1732 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter851 = new VTDObjectSetter(pi1732);
            binding_setter851 = new StringFormaterDecorator(binding_setter851,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir851 = new BindDirection(_flow.StringToJsonActivity60,binding_getter881,binding_setter851,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir851);
            VTDPropertyInfoBase pi1733 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter882 = new VTDObjectGetter(pi1733);
            VTDPropertyInfoBase pi1734 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter852 = new VTDObjectSetter(pi1734);
            binding_setter852 = new StringFormaterDecorator(binding_setter852,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir852 = new BindDirection(_flow.Loop56,binding_getter882,binding_setter852,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir852);
            VTDPropertyInfoBase pi1735 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter883 = new VTDObjectGetter(pi1735);
            VTDPropertyInfoBase pi1736 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter853 = new VTDObjectSetter(pi1736);
            bind_dir853 = new BindDirection(_flow.DbOpenConnection39,binding_getter883,binding_setter853,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir853);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getURoomMember_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1737 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter884 = new VTDObjectGetter(pi1737);
            VTDPropertyInfoBase pi1738 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter854 = new VTDObjectSetter(pi1738);
            binding_setter854 = new StringFormaterDecorator(binding_setter854,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir854 = new BindDirection(_flow.Loop56,binding_getter884,binding_setter854,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir854);
            VTDPropertyInfoBase pi1739 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter885 = new VTDObjectGetter(pi1739);
            VTDPropertyInfoBase pi1740 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter855 = new VTDObjectSetter(pi1740);
            bind_dir855 = new BindDirection(_flow.DbOpenConnection39,binding_getter885,binding_setter855,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir855);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getURoomMember_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1741 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter886 = new VTDObjectGetter(pi1741);
            VTDPropertyInfoBase pi1742 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter856 = new VTDObjectSetter(pi1742);
            binding_setter856 = new StringFormaterDecorator(binding_setter856,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir856 = new BindDirection(_flow.Loop56,binding_getter886,binding_setter856,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir856);
            VTDPropertyInfoBase pi1743 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter887 = new VTDObjectGetter(pi1743);
            VTDPropertyInfoBase pi1744 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter857 = new VTDObjectSetter(pi1744);
            bind_dir857 = new BindDirection(_flow.DbOpenConnection39,binding_getter887,binding_setter857,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir857);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1745 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter888 = new VTDXPathGetter(pi1745,XmlTypeCode.String);
            binding_getter888 = new XPathGetterDecorator(binding_getter888,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter888),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1746 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter889 = new VTDXPathGetter(pi1746,XmlTypeCode.String);
            binding_getter889 = new XPathGetterDecorator(binding_getter889,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter889),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getURoomMember_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1747 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter890 = new VTDObjectGetter(pi1747);
            VTDPropertyInfoBase pi1748 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter858 = new VTDObjectSetter(pi1748);
            binding_setter858 = new StringFormaterDecorator(binding_setter858,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir858 = new BindDirection(_flow.Loop56,binding_getter890,binding_setter858,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir858);
            VTDPropertyInfoBase pi1749 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter891 = new VTDObjectGetter(pi1749);
            VTDPropertyInfoBase pi1750 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter859 = new VTDObjectSetter(pi1750);
            bind_dir859 = new BindDirection(_flow.DbOpenConnection39,binding_getter891,binding_setter859,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir859);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getURoomMember_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1751 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter892 = new VTDObjectGetter(pi1751);
            VTDPropertyInfoBase pi1752 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter860 = new VTDObjectSetter(pi1752);
            binding_setter860 = new StringFormaterDecorator(binding_setter860,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir860 = new BindDirection(_flow.Loop56,binding_getter892,binding_setter860,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir860);
            VTDPropertyInfoBase pi1753 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter893 = new VTDObjectGetter(pi1753);
            VTDPropertyInfoBase pi1754 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter861 = new VTDObjectSetter(pi1754);
            bind_dir861 = new BindDirection(_flow.DbOpenConnection39,binding_getter893,binding_setter861,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir861);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    