/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_sso_authorize_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1 = null;
        public BindDirection bind_dir2 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity256 = null;
        public BindDirection bind_dir3 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity256_Policy = null;
        public BindDirection bind_dir4 = null;
        public BindDirection bind_dir5 = null;
        public BindDirection bind_dir6 = null;
        public BindDirection bind_dir7 = null;
        public BindDirection bind_dir8 = null;
        public BindDirection bind_dir9 = null;
        public BindDirection bind_dir10 = null;
        public BindDirection bind_dir11 = null;
        public BindDirection bind_dir12 = null;
        public BindDirection bind_dir13 = null;
        public BindDirection bind_dir14 = null;
        public BindDirection bind_dir15 = null;
        public BindDirection bind_dir16 = null;
        public BindDirection bind_dir17 = null;
        public BindDirection bind_dir18 = null;
        public BindDirection bind_dir19 = null;
        public BindDirection bind_dir20 = null;
        public BindDirection bind_dir21 = null;
        public BindDirection bind_dir22 = null;
        public BindDirection bind_dir23 = null;
        public BindDirection bind_dir24 = null;
        public BindDirection bind_dir25 = null;
        public BindDirection bind_dir26 = null;
        public BindDirection bind_dir27 = null;
        public BindDirection bind_dir28 = null;
        public BindDirection bind_dir29 = null;
        public BindDirection bind_dir30 = null;
        public BindDirection bind_dir31 = null;
        public BindDirection bind_dir32 = null;
        public BindDirection bind_dir33 = null;
        public BindDirection bind_dir34 = null;
        public BindDirection bind_dir35 = null;
        public BindDirection bind_dir36 = null;
        public BindDirection bind_dir37 = null;
        public BindDirection bind_dir38 = null;
        public BindDirection bind_dir39 = null;
        public BindDirection bind_dir40 = null;
        public BindDirection bind_dir41 = null;
        public BindDirection bind_dir42 = null;
        public BindDirection bind_dir43 = null;
        public BindDirection bind_dir44 = null;
        public BindDirection bind_dir45 = null;
        public BindDirection bind_dir46 = null;
        public BindDirection bind_dir47 = null;
        public BindDirection bind_dir48 = null;
        public BindDirection bind_dir49 = null;
        public BindDirection bind_dir50 = null;
        public BindDirection bind_dir51 = null;
        public BindDirection bind_dir52 = null;
        public BindDirection bind_dir53 = null;
        public BindDirection bind_dir54 = null;
        public BindDirection bind_dir55 = null;
        public BindDirection bind_dir56 = null;
        public BindDirection bind_dir57 = null;
        public BindDirection bind_dir58 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity252 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity252");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity254 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity254");
            _flow.DataExporterCloseActivity255 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity255");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity253 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity253");
            this.DataCursorActivity256 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity256");
            this.DataCursorActivity256_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence250 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence250");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData40 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData40");
            _flow.Loop31 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop31Input>(_context,"Loop31",LoopType.For);
            _flow.DbFetchData23 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData23");
            _flow.CallQTPTest19 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest19");
            _flow.DbFetchData29 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData29");
            _flow.HTTPActivity4 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity4");
            _flow.DbFetchData71 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData71");
            _flow.StringToJsonActivity10 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity10");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.HTTPActivity247 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity247");
            _flow.StringToJsonActivity248 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity248");
            _flow.DbFetchData249 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData249");
            _flow.Sequence251 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence251");
            _flow.DbFetchData34 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData34");
            _flow.HTTPActivity32 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity32");
            _flow.StringToJsonActivity37 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity37");
            _flow.ReplaceStringActivity48 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity48");
            _flow.DbFetchData41 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData41");
            _flow.DbFetchData42 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData42");
            _flow.DbFetchData55 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData55");
            _flow.DbFetchData52 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData52");
            _flow.IfElse49 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse49Input>(_context,"IfElse49");
            _flow.IfElseBranch50 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch50");
            _flow.IfElseBranch51 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch51");
            _flow.DbFetchData53 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData53");
            _flow.DbFetchData54 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData54");
            _flow.DataFetchActivity252.Comment = @"";
            _flow.DataFetchActivity252.IconPath = @"";
            _flow.DataFetchActivity252.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity252.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity252_QueryParameters_Document = new XmlDocument();
            DataFetchActivity252_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity252Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>nS9jToOb4zLJent8hCRcVg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity252_QueryParameters_Document.LoadXml(xmlDataFetchActivity252Params);
            _flow.DataFetchActivity252.QueryParameters = DataFetchActivity252_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity252);
            this.Activities.Add (_flow.DataFetchActivity252);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity256);
            _flow.Loop2.Activities.Add (_flow.Sequence250);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity254.Comment = @"";
            _flow.DataExporterActivity254.IconPath = @"";
            VTDPropertyInfoBase pi1 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1 = new VTDObjectGetter(pi1);
            VTDPropertyInfoBase pi2 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1 = new VTDObjectSetter(pi2);
            binding_setter1 = new StringFormaterDecorator(binding_setter1,"{Step.DataFetchActivity252.OutTable}");
            bind_dir1 = new BindDirection(_flow.DataFetchActivity252,binding_getter1,binding_setter1,BindTargetType.ToInProperty);
            _flow.DataExporterActivity254.InDirections.Add(bind_dir1);
            this.Activities.Add (_flow.DataExporterActivity254);
            _flow.DataExporterCloseActivity255.Comment = @"";
            _flow.DataExporterCloseActivity255.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity255);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity253.Comment = @"";
            _flow.DataDisconnectActivity253.IconPath = @"";
            VTDPropertyInfoBase pi3 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2 = new VTDObjectGetter(pi3);
            VTDPropertyInfoBase pi4 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2 = new VTDObjectSetter(pi4);
            binding_setter2 = new StringFormaterDecorator(binding_setter2,"{Step.DataFetchActivity252.OutTable}");
            bind_dir2 = new BindDirection(_flow.DataFetchActivity252,binding_getter2,binding_setter2,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity253.InDirections.Add(bind_dir2);
            this.Activities.Add (_flow.DataDisconnectActivity253);
            this.DataCursorActivity256.Comment = @"";
            this.DataCursorActivity256.IconPath = @"";
            VTDPropertyInfoBase pi5 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter3 = new VTDObjectGetter(pi5);
            VTDPropertyInfoBase pi6 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter3 = new VTDObjectSetter(pi6);
            binding_setter3 = new StringFormaterDecorator(binding_setter3,"{Step.DataFetchActivity252.OutTable}");
            bind_dir3 = new BindDirection(_flow.DataFetchActivity252,binding_getter3,binding_setter3,BindTargetType.ToInProperty);
            this.DataCursorActivity256.InDirections.Add(bind_dir3);
            this.DataCursorActivity256_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity256_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity256_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity256_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity256_Policy.StartCondition.Value = "";
            this.DataCursorActivity256_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity256_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity256_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity256_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity256_Policy.EndCondition.Value = "";
            this.DataCursorActivity256_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity256_Policy.StepSize = 1;
            this.DataCursorActivity256_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity256.Policy = this.DataCursorActivity256_Policy;
            this.DataCursorActivity256.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity256.ResetCursor;
            _flow.Sequence250.Comment = @"";
            _flow.Sequence250.IconPath = @"";
            _flow.Sequence250.Name = @"序列250";
            _flow.Sequence250.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData40);
            _flow.Sequence250.Activities.Add (_flow.Loop31);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData23);
            _flow.Sequence250.Activities.Add (_flow.CallQTPTest19);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData29);
            _flow.Sequence250.Activities.Add (_flow.HTTPActivity4);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData71);
            _flow.Sequence250.Activities.Add (_flow.StringToJsonActivity10);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence250.Activities.Add (_flow.HTTPActivity247);
            _flow.Sequence250.Activities.Add (_flow.StringToJsonActivity248);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData249);
            _flow.DbOpenConnection39.ConnectionString = @"{DataSource.tb_global_table.MysqlOdbc}";
            _flow.DbOpenConnection39.Password = @"nS9jToOb4zLJent8hCRcVg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            VTDPropertyInfoBase pi7 = new VTDPropertyInfoBase("MysqlOdbc");
            VTDBaseGetter binding_getter4 = new VTDObjectGetter(pi7);
            VTDPropertyInfoBase pi8 = new VTDPropertyInfoBase("ConnectionString");
            VTDBaseSetter binding_setter4 = new VTDObjectSetter(pi8);
            binding_setter4 = new StringFormaterDecorator(binding_setter4,"{DataSource.tb_global_table.MysqlOdbc}");
            bind_dir4 = new BindDirection(this.DataCursorActivity256,binding_getter4,binding_setter4,BindTargetType.ToInProperty);
            _flow.DbOpenConnection39.InDirections.Add(bind_dir4);
            _flow.DbFetchData40.QueryString = @"select count(*) as 'Row' from tb_sso_authorize_verification";
            _flow.DbFetchData40.Timeout = (int)30;
            _flow.DbFetchData40.Comment = @"";
            _flow.DbFetchData40.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData40.Name = @"获取到tb_sso_authorize_verification表有效行数";
            VTDPropertyInfoBase pi9 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter5 = new VTDObjectGetter(pi9);
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter5 = new VTDObjectSetter(pi10);
            bind_dir5 = new BindDirection(_flow.DbOpenConnection39,binding_getter5,binding_setter5,BindTargetType.ToInProperty);
            _flow.DbFetchData40.InDirections.Add(bind_dir5);
            XmlDocument DbFetchData40_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData40_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData40_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count>1</Count><Result>true</Result><ResultMessage>成功</ResultMessage><ResultTable><Row><Row>6</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData40.ExpectedOutputProperties = DbFetchData40_ExpectedOutputProperties_Document;
            _flow.Loop31.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop31.NumberOfIterations = (int)1;
            _flow.Loop31.Comment = @"";
            _flow.Loop31.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop31.Name = @"循环执行tb_sso_authorize_verification中的测试用例";
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter6 = new VTDXPathGetter(pi11,XmlTypeCode.Long);
            binding_getter6 = new XPathGetterDecorator(binding_getter6,"{Array0}",1);
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter6 = new VTDObjectSetter(pi12);
            bind_dir6 = new BindDirection(_flow.DbFetchData40,binding_getter6,binding_setter6,BindTargetType.ToInProperty);
            _flow.Loop31.InDirections.Add(bind_dir6);
            _flow.Loop31.Activities.Add (_flow.Sequence251);
            _flow.DbFetchData23.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginPassword}' where TestCase = '1'";
            _flow.DbFetchData23.Timeout = (int)30;
            _flow.DbFetchData23.Comment = @"";
            _flow.DbFetchData23.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData23.Name = @"将密码同步到EncryptionStr字段中";
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("LoginPassword");
            VTDBaseGetter binding_getter7 = new VTDObjectGetter(pi13);
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter7 = new VTDObjectSetter(pi14);
            binding_setter7 = new StringFormaterDecorator(binding_setter7,"{DataSource.tb_global_table.LoginPassword}");
            bind_dir7 = new BindDirection(this.DataCursorActivity256,binding_getter7,binding_setter7,BindTargetType.ToInProperty);
            _flow.DbFetchData23.InDirections.Add(bind_dir7);
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter8 = new VTDObjectGetter(pi15);
            VTDPropertyInfoBase pi16 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter8 = new VTDObjectSetter(pi16);
            bind_dir8 = new BindDirection(_flow.DbOpenConnection39,binding_getter8,binding_setter8,BindTargetType.ToInProperty);
            _flow.DbFetchData23.InDirections.Add(bind_dir8);
            XmlDocument DbFetchData23_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData23_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData23_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData23.ExpectedOutputProperties = DbFetchData23_ExpectedOutputProperties_Document;
            _flow.CallQTPTest19.Comment = @"";
            _flow.CallQTPTest19.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest19.Name = @"Encryption.SHA1";
            _flow.CallQTPTest19.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.ScriptPath}");
            _flow.CallQTPTest19.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.ActionName}");
            _flow.CallQTPTest19.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.Description}");
            _flow.CallQTPTest19.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.IsActionSelected}");
            _flow.CallQTPTest19.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.ResultLocation}");
            _flow.CallQTPTest19.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest19.QCScriptPath}");
            _flow.DbFetchData29.QueryString = @"select EncryptionResult from tb_global_table where TestCase = '1'";
            _flow.DbFetchData29.Timeout = (int)30;
            _flow.DbFetchData29.Comment = @"";
            _flow.DbFetchData29.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData29.Name = @"查询SHA1加密后密码";
            VTDPropertyInfoBase pi17 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter9 = new VTDObjectGetter(pi17);
            VTDPropertyInfoBase pi18 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter9 = new VTDObjectSetter(pi18);
            bind_dir9 = new BindDirection(_flow.DbOpenConnection39,binding_getter9,binding_setter9,BindTargetType.ToInProperty);
            _flow.DbFetchData29.InDirections.Add(bind_dir9);
            XmlDocument DbFetchData29_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData29_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData29_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData29.ExpectedOutputProperties = DbFetchData29_ExpectedOutputProperties_Document;
            _flow.HTTPActivity4.TextBody = @"username={DataSource.tb_global_table.LoginTeacherUsername}&response_type=xsid&sha1shadow={Step.OutputProperties.DbFetchData29.ResultTable.Row[1].EncryptionResult}&logintype=username&ver=2.6.9&client_id=ime_android&password=hjkj";
            _flow.HTTPActivity4.TextXmlBody = @"";
            _flow.HTTPActivity4.FileBody = @"";
            _flow.HTTPActivity4.PostBody = @"";
            _flow.HTTPActivity4.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.login}";
            _flow.HTTPActivity4.HttpMethod = @"POST";
            _flow.HTTPActivity4.HttpVersion = @"1.1";
            _flow.HTTPActivity4.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity4.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity4.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity4.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity4.Comment = @"";
            _flow.HTTPActivity4.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity4.RequestBodyType = @"Text";
            _flow.HTTPActivity4.ResponseType = @"Text";
            _flow.HTTPActivity4.Name = @"登录接口sso/authorize";
            _flow.HTTPActivity4.Proxy.Server = @"";
            _flow.HTTPActivity4.Proxy.Username = @"";
            _flow.HTTPActivity4.Proxy.Password = @"";
            _flow.HTTPActivity4.Authentication.Username = @"";
            _flow.HTTPActivity4.Authentication.Password = @"";
            _flow.HTTPActivity4.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity4.Timeout = (int)100000;
            _flow.HTTPActivity4.ClientCertificate.Password = @"";
            _flow.HTTPActivity4.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity4.UseClientCertificate = false;
            _flow.HTTPActivity4.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity4.AllowRedirections = true;
            _flow.HTTPActivity4.ReuseCookies = false;
            _flow.HTTPActivity4.ExpectServerError = false;
            XmlDocument HTTPActivity4_XMLBody_Document = new XmlDocument();
            HTTPActivity4_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity4_XMLBody_Document.LoadXml("<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.XMLBody = HTTPActivity4_XMLBody_Document;
            XmlDocument HTTPActivity4_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity4_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity4_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity4.RequestMultipartInfoXml = HTTPActivity4_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity4.Multipart=false;
            VTDPropertyInfoBase pi19 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter10 = new VTDObjectGetter(pi19);
            VTDPropertyInfoBase pi20 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter10 = new VTDObjectSetter(pi20);
            binding_setter10 = new StringFormaterDecorator(binding_setter10,"{DataSource.tb_global_table.qdHost}");
            bind_dir10 = new BindDirection(this.DataCursorActivity256,binding_getter10,binding_setter10,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir10);
            VTDPropertyInfoBase pi21 = new VTDPropertyInfoBase("login");
            VTDBaseGetter binding_getter11 = new VTDObjectGetter(pi21);
            VTDPropertyInfoBase pi22 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter11 = new VTDObjectSetter(pi22);
            binding_setter11 = new StringFormaterDecorator(binding_setter11,"{DataSource.tb_global_table.login}");
            bind_dir11 = new BindDirection(this.DataCursorActivity256,binding_getter11,binding_setter11,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir11);
            VTDPropertyInfoBase pi23 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter12 = new VTDObjectGetter(pi23);
            VTDPropertyInfoBase pi24 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter12 = new VTDObjectSetter(pi24);
            binding_setter12 = new StringFormaterDecorator(binding_setter12,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir12 = new BindDirection(this.DataCursorActivity256,binding_getter12,binding_setter12,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir12);
            VTDPropertyInfoBase pi25 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter13 = new VTDObjectGetter(pi25);
            VTDPropertyInfoBase pi26 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter13 = new VTDObjectSetter(pi26);
            binding_setter13 = new StringFormaterDecorator(binding_setter13,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir13 = new BindDirection(this.DataCursorActivity256,binding_getter13,binding_setter13,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir13);
            VTDPropertyInfoBase pi27 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter14 = new VTDObjectGetter(pi27);
            VTDPropertyInfoBase pi28 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter14 = new VTDObjectSetter(pi28);
            binding_setter14 = new StringFormaterDecorator(binding_setter14,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir14 = new BindDirection(this.DataCursorActivity256,binding_getter14,binding_setter14,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir14);
            VTDPropertyInfoBase pi29 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter15 = new VTDXPathGetter(pi29,XmlTypeCode.String);
            binding_getter15 = new XPathGetterDecorator(binding_getter15,"{Array0}",1);
            VTDPropertyInfoBase pi30 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter15 = new VTDObjectSetter(pi30);
            binding_setter15 = new StringFormaterDecorator(binding_setter15,"{Step.OutputProperties.DbFetchData29.ResultTable.Row[1].EncryptionResult}");
            bind_dir15 = new BindDirection(_flow.DbFetchData29,binding_getter15,binding_setter15,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir15);
            XmlDocument HTTPActivity4_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseXmlBody = HTTPActivity4_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity4_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseJsonBody = HTTPActivity4_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity4.ExpectedOutputProperties = HTTPActivity4_ExpectedOutputProperties_Document;
            _flow.DbFetchData71.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity4.ResponseBody}' where InterfaceName = '/sso/authorize'";
            _flow.DbFetchData71.Timeout = (int)30;
            _flow.DbFetchData71.Comment = @"";
            _flow.DbFetchData71.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData71.Name = @"更新tb_result_table表中/sso/authorize接口ResponseJson";
            VTDPropertyInfoBase pi31 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter16 = new VTDObjectGetter(pi31);
            VTDPropertyInfoBase pi32 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter16 = new VTDObjectSetter(pi32);
            binding_setter16 = new StringFormaterDecorator(binding_setter16,"{Step.OutputProperties.HTTPActivity4.ResponseBody}");
            bind_dir16 = new BindDirection(_flow.HTTPActivity4,binding_getter16,binding_setter16,BindTargetType.ToInProperty);
            _flow.DbFetchData71.InDirections.Add(bind_dir16);
            VTDPropertyInfoBase pi33 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter17 = new VTDObjectGetter(pi33);
            VTDPropertyInfoBase pi34 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter17 = new VTDObjectSetter(pi34);
            bind_dir17 = new BindDirection(_flow.DbOpenConnection39,binding_getter17,binding_setter17,BindTargetType.ToInProperty);
            _flow.DbFetchData71.InDirections.Add(bind_dir17);
            XmlDocument DbFetchData71_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData71_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData71_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData71.ExpectedOutputProperties = DbFetchData71_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity10.InputString = @"{Step.OutputProperties.HTTPActivity4.ResponseBody}";
            _flow.StringToJsonActivity10.Comment = @"";
            _flow.StringToJsonActivity10.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity10.Name = @"获取sso/authorize接口的返回值转换为JSON";
            VTDPropertyInfoBase pi35 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter18 = new VTDObjectGetter(pi35);
            VTDPropertyInfoBase pi36 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter18 = new VTDObjectSetter(pi36);
            binding_setter18 = new StringFormaterDecorator(binding_setter18,"{Step.OutputProperties.HTTPActivity4.ResponseBody}");
            bind_dir18 = new BindDirection(_flow.HTTPActivity4,binding_getter18,binding_setter18,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity10.InDirections.Add(bind_dir18);
            _flow.DbFetchData246.QueryString = @"update tb_global_table set ResponseXsid = '{Step.JsonContent.StringToJsonActivity10.xsid}' where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"将xsid更新到全局表中";
            VTDPropertyInfoBase pi37 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter19 = new VTDJsonGetter(pi37);
            VTDPropertyInfoBase pi38 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter19 = new VTDObjectSetter(pi38);
            binding_setter19 = new StringFormaterDecorator(binding_setter19,"{Step.JsonContent.StringToJsonActivity10.xsid}");
            bind_dir19 = new BindDirection(_flow.StringToJsonActivity10,binding_getter19,binding_setter19,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir19);
            VTDPropertyInfoBase pi39 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter20 = new VTDObjectGetter(pi39);
            VTDPropertyInfoBase pi40 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter20 = new VTDObjectSetter(pi40);
            bind_dir20 = new BindDirection(_flow.DbOpenConnection39,binding_getter20,binding_setter20,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir20);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.HTTPActivity247.TextBody = @"username={DataSource.tb_global_table.LoginStudentUsername}&response_type=xsid&sha1shadow={Step.OutputProperties.DbFetchData29.ResultTable.Row[1].EncryptionResult}&logintype=username&ver=2.6.9&client_id=ime_android&password=hjkj";
            _flow.HTTPActivity247.TextXmlBody = @"";
            _flow.HTTPActivity247.FileBody = @"";
            _flow.HTTPActivity247.PostBody = @"";
            _flow.HTTPActivity247.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.login}";
            _flow.HTTPActivity247.HttpMethod = @"POST";
            _flow.HTTPActivity247.HttpVersion = @"1.1";
            _flow.HTTPActivity247.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity247.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity247.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity247.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity247.Comment = @"";
            _flow.HTTPActivity247.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity247.RequestBodyType = @"Text";
            _flow.HTTPActivity247.ResponseType = @"Text";
            _flow.HTTPActivity247.Name = @"学生登录";
            _flow.HTTPActivity247.Proxy.Server = @"";
            _flow.HTTPActivity247.Proxy.Username = @"";
            _flow.HTTPActivity247.Proxy.Password = @"";
            _flow.HTTPActivity247.Authentication.Username = @"";
            _flow.HTTPActivity247.Authentication.Password = @"";
            _flow.HTTPActivity247.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity247.Timeout = (int)100000;
            _flow.HTTPActivity247.ClientCertificate.Password = @"";
            _flow.HTTPActivity247.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity247.UseClientCertificate = false;
            _flow.HTTPActivity247.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity247.AllowRedirections = true;
            _flow.HTTPActivity247.ReuseCookies = false;
            _flow.HTTPActivity247.ExpectServerError = false;
            XmlDocument HTTPActivity247_XMLBody_Document = new XmlDocument();
            HTTPActivity247_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity247_XMLBody_Document.LoadXml("<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity247.XMLBody = HTTPActivity247_XMLBody_Document;
            XmlDocument HTTPActivity247_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity247_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity247_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity247.RequestMultipartInfoXml = HTTPActivity247_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity247.Multipart=false;
            VTDPropertyInfoBase pi41 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter21 = new VTDObjectGetter(pi41);
            VTDPropertyInfoBase pi42 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter21 = new VTDObjectSetter(pi42);
            binding_setter21 = new StringFormaterDecorator(binding_setter21,"{DataSource.tb_global_table.qdHost}");
            bind_dir21 = new BindDirection(this.DataCursorActivity256,binding_getter21,binding_setter21,BindTargetType.ToInProperty);
            _flow.HTTPActivity247.InDirections.Add(bind_dir21);
            VTDPropertyInfoBase pi43 = new VTDPropertyInfoBase("login");
            VTDBaseGetter binding_getter22 = new VTDObjectGetter(pi43);
            VTDPropertyInfoBase pi44 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter22 = new VTDObjectSetter(pi44);
            binding_setter22 = new StringFormaterDecorator(binding_setter22,"{DataSource.tb_global_table.login}");
            bind_dir22 = new BindDirection(this.DataCursorActivity256,binding_getter22,binding_setter22,BindTargetType.ToInProperty);
            _flow.HTTPActivity247.InDirections.Add(bind_dir22);
            VTDPropertyInfoBase pi45 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter23 = new VTDObjectGetter(pi45);
            VTDPropertyInfoBase pi46 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter23 = new VTDObjectSetter(pi46);
            binding_setter23 = new StringFormaterDecorator(binding_setter23,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir23 = new BindDirection(this.DataCursorActivity256,binding_getter23,binding_setter23,BindTargetType.ToInProperty);
            _flow.HTTPActivity247.InDirections.Add(bind_dir23);
            VTDPropertyInfoBase pi47 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter24 = new VTDObjectGetter(pi47);
            VTDPropertyInfoBase pi48 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter24 = new VTDObjectSetter(pi48);
            binding_setter24 = new StringFormaterDecorator(binding_setter24,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir24 = new BindDirection(this.DataCursorActivity256,binding_getter24,binding_setter24,BindTargetType.ToInProperty);
            _flow.HTTPActivity247.InDirections.Add(bind_dir24);
            VTDPropertyInfoBase pi49 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter25 = new VTDObjectGetter(pi49);
            VTDPropertyInfoBase pi50 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter25 = new VTDObjectSetter(pi50);
            binding_setter25 = new StringFormaterDecorator(binding_setter25,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir25 = new BindDirection(this.DataCursorActivity256,binding_getter25,binding_setter25,BindTargetType.ToInProperty);
            _flow.HTTPActivity247.InDirections.Add(bind_dir25);
            VTDPropertyInfoBase pi51 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter26 = new VTDXPathGetter(pi51,XmlTypeCode.String);
            binding_getter26 = new XPathGetterDecorator(binding_getter26,"{Array0}",1);
            VTDPropertyInfoBase pi52 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter26 = new VTDObjectSetter(pi52);
            binding_setter26 = new StringFormaterDecorator(binding_setter26,"{Step.OutputProperties.DbFetchData29.ResultTable.Row[1].EncryptionResult}");
            bind_dir26 = new BindDirection(_flow.DbFetchData29,binding_getter26,binding_setter26,BindTargetType.ToInProperty);
            _flow.HTTPActivity247.InDirections.Add(bind_dir26);
            XmlDocument HTTPActivity247_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity247_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity247_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity247.ExpectedResponseXmlBody = HTTPActivity247_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity247_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity247_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity247_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity247.ExpectedResponseJsonBody = HTTPActivity247_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity247_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity247_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity247.ExpectedOutputProperties = HTTPActivity247_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity248.InputString = @"{Step.OutputProperties.HTTPActivity247.ResponseBody}";
            _flow.StringToJsonActivity248.Comment = @"";
            _flow.StringToJsonActivity248.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity248.Name = @"获取sso/authorize接口的返回值转换为JSON";
            VTDPropertyInfoBase pi53 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter27 = new VTDObjectGetter(pi53);
            VTDPropertyInfoBase pi54 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter27 = new VTDObjectSetter(pi54);
            binding_setter27 = new StringFormaterDecorator(binding_setter27,"{Step.OutputProperties.HTTPActivity247.ResponseBody}");
            bind_dir27 = new BindDirection(_flow.HTTPActivity247,binding_getter27,binding_setter27,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity248.InDirections.Add(bind_dir27);
            _flow.DbFetchData249.QueryString = @"update tb_global_table set StudentsXsid = '{Step.JsonContent.StringToJsonActivity248.xsid}' where TestCase = 1";
            _flow.DbFetchData249.Timeout = (int)30;
            _flow.DbFetchData249.Comment = @"";
            _flow.DbFetchData249.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData249.Name = @"将xsid更新到全局表中";
            VTDPropertyInfoBase pi55 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter28 = new VTDJsonGetter(pi55);
            VTDPropertyInfoBase pi56 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter28 = new VTDObjectSetter(pi56);
            binding_setter28 = new StringFormaterDecorator(binding_setter28,"{Step.JsonContent.StringToJsonActivity248.xsid}");
            bind_dir28 = new BindDirection(_flow.StringToJsonActivity248,binding_getter28,binding_setter28,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir28);
            VTDPropertyInfoBase pi57 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter29 = new VTDObjectGetter(pi57);
            VTDPropertyInfoBase pi58 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter29 = new VTDObjectSetter(pi58);
            bind_dir29 = new BindDirection(_flow.DbOpenConnection39,binding_getter29,binding_setter29,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir29);
            XmlDocument DbFetchData249_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData249_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData249_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData249.ExpectedOutputProperties = DbFetchData249_ExpectedOutputProperties_Document;
            _flow.Sequence251.Comment = @"";
            _flow.Sequence251.IconPath = @"";
            _flow.Sequence251.Name = @"序列251";
            _flow.Sequence251.Activities.Add (_flow.DbFetchData34);
            _flow.Sequence251.Activities.Add (_flow.HTTPActivity32);
            _flow.Sequence251.Activities.Add (_flow.StringToJsonActivity37);
            _flow.Sequence251.Activities.Add (_flow.ReplaceStringActivity48);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData41);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData42);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData55);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData52);
            _flow.Sequence251.Activities.Add (_flow.IfElse49);
            _flow.DbFetchData34.QueryString = @"select client_id,response_type,password,md5shadow,sha1shadow,logintype,username from tb_sso_authorize_verification where TestCase = {Step.OutputProperties.Loop31.CurrentIterationNumber}";
            _flow.DbFetchData34.Timeout = (int)30;
            _flow.DbFetchData34.Comment = @"";
            _flow.DbFetchData34.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData34.Name = @"查询tb_sso_authorize_verification表中字段信息";
            VTDPropertyInfoBase pi59 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter30 = new VTDObjectGetter(pi59);
            VTDPropertyInfoBase pi60 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter30 = new VTDObjectSetter(pi60);
            binding_setter30 = new StringFormaterDecorator(binding_setter30,"{Step.OutputProperties.Loop31.CurrentIterationNumber}");
            bind_dir30 = new BindDirection(_flow.Loop31,binding_getter30,binding_setter30,BindTargetType.ToInProperty);
            _flow.DbFetchData34.InDirections.Add(bind_dir30);
            VTDPropertyInfoBase pi61 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter31 = new VTDObjectGetter(pi61);
            VTDPropertyInfoBase pi62 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter31 = new VTDObjectSetter(pi62);
            bind_dir31 = new BindDirection(_flow.DbOpenConnection39,binding_getter31,binding_setter31,BindTargetType.ToInProperty);
            _flow.DbFetchData34.InDirections.Add(bind_dir31);
            XmlDocument DbFetchData34_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData34_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData34_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><client_id /><response_type /><password /><md5shadow /><sha1shadow /><logintype /><username /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData34.ExpectedOutputProperties = DbFetchData34_ExpectedOutputProperties_Document;
            _flow.HTTPActivity32.TextBody = @"username={Step.OutputProperties.DbFetchData34.ResultTable.Row[1].username}&response_type={Step.OutputProperties.DbFetchData34.ResultTable.Row[1].response_type}&sha1shadow={Step.OutputProperties.DbFetchData34.ResultTable.Row[1].sha1shadow}&logintype={Step.OutputProperties.DbFetchData34.ResultTable.Row[1].logintype}&ver=2.6.9&client_id={Step.OutputProperties.DbFetchData34.ResultTable.Row[1].client_id}&password={Step.OutputProperties.DbFetchData34.ResultTable.Row[1].password}&md5shadow={Step.OutputProperties.DbFetchData34.ResultTable.Row[1].md5shadow}";
            _flow.HTTPActivity32.TextXmlBody = @"";
            _flow.HTTPActivity32.FileBody = @"";
            _flow.HTTPActivity32.PostBody = @"";
            _flow.HTTPActivity32.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.login}";
            _flow.HTTPActivity32.HttpMethod = @"POST";
            _flow.HTTPActivity32.HttpVersion = @"1.1";
            _flow.HTTPActivity32.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity32.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity32.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity32.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity32.Comment = @"";
            _flow.HTTPActivity32.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity32.RequestBodyType = @"Text";
            _flow.HTTPActivity32.ResponseType = @"Text";
            _flow.HTTPActivity32.Name = @"调用sso/authorize";
            _flow.HTTPActivity32.Proxy.Server = @"";
            _flow.HTTPActivity32.Proxy.Username = @"";
            _flow.HTTPActivity32.Proxy.Password = @"";
            _flow.HTTPActivity32.Authentication.Username = @"";
            _flow.HTTPActivity32.Authentication.Password = @"";
            _flow.HTTPActivity32.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity32.Timeout = (int)100000;
            _flow.HTTPActivity32.ClientCertificate.Password = @"";
            _flow.HTTPActivity32.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity32.UseClientCertificate = false;
            _flow.HTTPActivity32.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity32.AllowRedirections = true;
            _flow.HTTPActivity32.ReuseCookies = false;
            _flow.HTTPActivity32.ExpectServerError = false;
            XmlDocument HTTPActivity32_XMLBody_Document = new XmlDocument();
            HTTPActivity32_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity32_XMLBody_Document.LoadXml("<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity32.XMLBody = HTTPActivity32_XMLBody_Document;
            XmlDocument HTTPActivity32_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity32_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity32_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity32.RequestMultipartInfoXml = HTTPActivity32_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity32.Multipart=false;
            VTDPropertyInfoBase pi63 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter32 = new VTDObjectGetter(pi63);
            VTDPropertyInfoBase pi64 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter32 = new VTDObjectSetter(pi64);
            binding_setter32 = new StringFormaterDecorator(binding_setter32,"{DataSource.tb_global_table.qdHost}");
            bind_dir32 = new BindDirection(this.DataCursorActivity256,binding_getter32,binding_setter32,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir32);
            VTDPropertyInfoBase pi65 = new VTDPropertyInfoBase("login");
            VTDBaseGetter binding_getter33 = new VTDObjectGetter(pi65);
            VTDPropertyInfoBase pi66 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter33 = new VTDObjectSetter(pi66);
            binding_setter33 = new StringFormaterDecorator(binding_setter33,"{DataSource.tb_global_table.login}");
            bind_dir33 = new BindDirection(this.DataCursorActivity256,binding_getter33,binding_setter33,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir33);
            VTDPropertyInfoBase pi67 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter34 = new VTDObjectGetter(pi67);
            VTDPropertyInfoBase pi68 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter34 = new VTDObjectSetter(pi68);
            binding_setter34 = new StringFormaterDecorator(binding_setter34,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir34 = new BindDirection(this.DataCursorActivity256,binding_getter34,binding_setter34,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir34);
            VTDPropertyInfoBase pi69 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter35 = new VTDObjectGetter(pi69);
            VTDPropertyInfoBase pi70 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter35 = new VTDObjectSetter(pi70);
            binding_setter35 = new StringFormaterDecorator(binding_setter35,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir35 = new BindDirection(this.DataCursorActivity256,binding_getter35,binding_setter35,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir35);
            VTDPropertyInfoBase pi71 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='username'][1]");
            VTDBaseGetter binding_getter36 = new VTDXPathGetter(pi71,XmlTypeCode.String);
            binding_getter36 = new XPathGetterDecorator(binding_getter36,"{Array0}",1);
            VTDPropertyInfoBase pi72 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter36 = new VTDObjectSetter(pi72);
            binding_setter36 = new StringFormaterDecorator(binding_setter36,"{Step.OutputProperties.DbFetchData34.ResultTable.Row[1].username}");
            bind_dir36 = new BindDirection(_flow.DbFetchData34,binding_getter36,binding_setter36,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir36);
            VTDPropertyInfoBase pi73 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='response_type'][1]");
            VTDBaseGetter binding_getter37 = new VTDXPathGetter(pi73,XmlTypeCode.String);
            binding_getter37 = new XPathGetterDecorator(binding_getter37,"{Array0}",1);
            VTDPropertyInfoBase pi74 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter37 = new VTDObjectSetter(pi74);
            binding_setter37 = new StringFormaterDecorator(binding_setter37,"{Step.OutputProperties.DbFetchData34.ResultTable.Row[1].response_type}");
            bind_dir37 = new BindDirection(_flow.DbFetchData34,binding_getter37,binding_setter37,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir37);
            VTDPropertyInfoBase pi75 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='sha1shadow'][1]");
            VTDBaseGetter binding_getter38 = new VTDXPathGetter(pi75,XmlTypeCode.String);
            binding_getter38 = new XPathGetterDecorator(binding_getter38,"{Array0}",1);
            VTDPropertyInfoBase pi76 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter38 = new VTDObjectSetter(pi76);
            binding_setter38 = new StringFormaterDecorator(binding_setter38,"{Step.OutputProperties.DbFetchData34.ResultTable.Row[1].sha1shadow}");
            bind_dir38 = new BindDirection(_flow.DbFetchData34,binding_getter38,binding_setter38,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir38);
            VTDPropertyInfoBase pi77 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='logintype'][1]");
            VTDBaseGetter binding_getter39 = new VTDXPathGetter(pi77,XmlTypeCode.String);
            binding_getter39 = new XPathGetterDecorator(binding_getter39,"{Array0}",1);
            VTDPropertyInfoBase pi78 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter39 = new VTDObjectSetter(pi78);
            binding_setter39 = new StringFormaterDecorator(binding_setter39,"{Step.OutputProperties.DbFetchData34.ResultTable.Row[1].logintype}");
            bind_dir39 = new BindDirection(_flow.DbFetchData34,binding_getter39,binding_setter39,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir39);
            VTDPropertyInfoBase pi79 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='client_id'][1]");
            VTDBaseGetter binding_getter40 = new VTDXPathGetter(pi79,XmlTypeCode.String);
            binding_getter40 = new XPathGetterDecorator(binding_getter40,"{Array0}",1);
            VTDPropertyInfoBase pi80 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter40 = new VTDObjectSetter(pi80);
            binding_setter40 = new StringFormaterDecorator(binding_setter40,"{Step.OutputProperties.DbFetchData34.ResultTable.Row[1].client_id}");
            bind_dir40 = new BindDirection(_flow.DbFetchData34,binding_getter40,binding_setter40,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir40);
            VTDPropertyInfoBase pi81 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='password'][1]");
            VTDBaseGetter binding_getter41 = new VTDXPathGetter(pi81,XmlTypeCode.String);
            binding_getter41 = new XPathGetterDecorator(binding_getter41,"{Array0}",1);
            VTDPropertyInfoBase pi82 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter41 = new VTDObjectSetter(pi82);
            binding_setter41 = new StringFormaterDecorator(binding_setter41,"{Step.OutputProperties.DbFetchData34.ResultTable.Row[1].password}");
            bind_dir41 = new BindDirection(_flow.DbFetchData34,binding_getter41,binding_setter41,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir41);
            VTDPropertyInfoBase pi83 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='md5shadow'][1]");
            VTDBaseGetter binding_getter42 = new VTDXPathGetter(pi83,XmlTypeCode.String);
            binding_getter42 = new XPathGetterDecorator(binding_getter42,"{Array0}",1);
            VTDPropertyInfoBase pi84 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter42 = new VTDObjectSetter(pi84);
            binding_setter42 = new StringFormaterDecorator(binding_setter42,"{Step.OutputProperties.DbFetchData34.ResultTable.Row[1].md5shadow}");
            bind_dir42 = new BindDirection(_flow.DbFetchData34,binding_getter42,binding_setter42,BindTargetType.ToInProperty);
            _flow.HTTPActivity32.InDirections.Add(bind_dir42);
            XmlDocument HTTPActivity32_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity32_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity32_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity32.ExpectedResponseXmlBody = HTTPActivity32_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity32_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity32_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity32_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity32.ExpectedResponseJsonBody = HTTPActivity32_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity32_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity32_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity32_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity32.ExpectedOutputProperties = HTTPActivity32_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity37.InputString = @"{Step.OutputProperties.HTTPActivity32.ResponseBody}";
            _flow.StringToJsonActivity37.Comment = @"";
            _flow.StringToJsonActivity37.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity37.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi85 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter43 = new VTDObjectGetter(pi85);
            VTDPropertyInfoBase pi86 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter43 = new VTDObjectSetter(pi86);
            binding_setter43 = new StringFormaterDecorator(binding_setter43,"{Step.OutputProperties.HTTPActivity32.ResponseBody}");
            bind_dir43 = new BindDirection(_flow.HTTPActivity32,binding_getter43,binding_setter43,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity37.InDirections.Add(bind_dir43);
            _flow.ReplaceStringActivity48.SourceString = @"{Step.OutputProperties.HTTPActivity32.ResponseBody}";
            _flow.ReplaceStringActivity48.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity48.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity48.SearchReplaceString[0].Key = @"u";
            _flow.ReplaceStringActivity48.SearchReplaceString[0].Value = @"\u";
            _flow.ReplaceStringActivity48.CaseSensitive = true;
            _flow.ReplaceStringActivity48.Comment = @"";
            _flow.ReplaceStringActivity48.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity48.Name = @"替换JSON加密信息";
            VTDPropertyInfoBase pi87 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter44 = new VTDObjectGetter(pi87);
            VTDPropertyInfoBase pi88 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter44 = new VTDObjectSetter(pi88);
            binding_setter44 = new StringFormaterDecorator(binding_setter44,"{Step.OutputProperties.HTTPActivity32.ResponseBody}");
            bind_dir44 = new BindDirection(_flow.HTTPActivity32,binding_getter44,binding_setter44,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity48.InDirections.Add(bind_dir44);
            _flow.DbFetchData41.QueryString = @"update tb_sso_authorize_verification set InterfaceResponse = '{Step.OutputProperties.ReplaceStringActivity48.Result}' where TestCase = {Step.OutputProperties.Loop31.CurrentIterationNumber}";
            _flow.DbFetchData41.Timeout = (int)30;
            _flow.DbFetchData41.Comment = @"";
            _flow.DbFetchData41.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData41.Name = @"将接口返回的JSON信息更新到表中";
            VTDPropertyInfoBase pi89 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter45 = new VTDObjectGetter(pi89);
            VTDPropertyInfoBase pi90 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter45 = new VTDObjectSetter(pi90);
            binding_setter45 = new StringFormaterDecorator(binding_setter45,"{Step.OutputProperties.ReplaceStringActivity48.Result}");
            bind_dir45 = new BindDirection(_flow.ReplaceStringActivity48,binding_getter45,binding_setter45,BindTargetType.ToInProperty);
            _flow.DbFetchData41.InDirections.Add(bind_dir45);
            VTDPropertyInfoBase pi91 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter46 = new VTDObjectGetter(pi91);
            VTDPropertyInfoBase pi92 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter46 = new VTDObjectSetter(pi92);
            binding_setter46 = new StringFormaterDecorator(binding_setter46,"{Step.OutputProperties.Loop31.CurrentIterationNumber}");
            bind_dir46 = new BindDirection(_flow.Loop31,binding_getter46,binding_setter46,BindTargetType.ToInProperty);
            _flow.DbFetchData41.InDirections.Add(bind_dir46);
            VTDPropertyInfoBase pi93 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter47 = new VTDObjectGetter(pi93);
            VTDPropertyInfoBase pi94 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter47 = new VTDObjectSetter(pi94);
            bind_dir47 = new BindDirection(_flow.DbOpenConnection39,binding_getter47,binding_setter47,BindTargetType.ToInProperty);
            _flow.DbFetchData41.InDirections.Add(bind_dir47);
            XmlDocument DbFetchData41_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData41_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData41_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData41.ExpectedOutputProperties = DbFetchData41_ExpectedOutputProperties_Document;
            _flow.DbFetchData42.QueryString = @"update tb_sso_authorize_verification set OutputValue = 'ErrorCode={Step.JsonContent.StringToJsonActivity37.error}' where TestCase = {Step.OutputProperties.Loop31.CurrentIterationNumber}";
            _flow.DbFetchData42.Timeout = (int)30;
            _flow.DbFetchData42.Comment = @"";
            _flow.DbFetchData42.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData42.Name = @"将获取到的errorcode插入到sql中";
            VTDPropertyInfoBase pi95 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='error'][1]");
            VTDBaseGetter binding_getter48 = new VTDJsonGetter(pi95);
            VTDPropertyInfoBase pi96 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter48 = new VTDObjectSetter(pi96);
            binding_setter48 = new StringFormaterDecorator(binding_setter48,"{Step.JsonContent.StringToJsonActivity37.error}");
            binding_setter48 = new VTDXMLToStringDecorator(binding_setter48);
            bind_dir48 = new BindDirection(_flow.StringToJsonActivity37,binding_getter48,binding_setter48,BindTargetType.ToInProperty);
            _flow.DbFetchData42.InDirections.Add(bind_dir48);
            VTDPropertyInfoBase pi97 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter49 = new VTDObjectGetter(pi97);
            VTDPropertyInfoBase pi98 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter49 = new VTDObjectSetter(pi98);
            binding_setter49 = new StringFormaterDecorator(binding_setter49,"{Step.OutputProperties.Loop31.CurrentIterationNumber}");
            bind_dir49 = new BindDirection(_flow.Loop31,binding_getter49,binding_setter49,BindTargetType.ToInProperty);
            _flow.DbFetchData42.InDirections.Add(bind_dir49);
            VTDPropertyInfoBase pi99 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter50 = new VTDObjectGetter(pi99);
            VTDPropertyInfoBase pi100 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter50 = new VTDObjectSetter(pi100);
            bind_dir50 = new BindDirection(_flow.DbOpenConnection39,binding_getter50,binding_setter50,BindTargetType.ToInProperty);
            _flow.DbFetchData42.InDirections.Add(bind_dir50);
            XmlDocument DbFetchData42_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData42_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData42_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData42.ExpectedOutputProperties = DbFetchData42_ExpectedOutputProperties_Document;
            _flow.DbFetchData55.QueryString = @"select OutputValue from tb_sso_authorize_verification where TestCase = {Step.OutputProperties.Loop31.CurrentIterationNumber}";
            _flow.DbFetchData55.Timeout = (int)30;
            _flow.DbFetchData55.Comment = @"";
            _flow.DbFetchData55.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData55.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi101 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter51 = new VTDObjectGetter(pi101);
            VTDPropertyInfoBase pi102 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter51 = new VTDObjectSetter(pi102);
            binding_setter51 = new StringFormaterDecorator(binding_setter51,"{Step.OutputProperties.Loop31.CurrentIterationNumber}");
            bind_dir51 = new BindDirection(_flow.Loop31,binding_getter51,binding_setter51,BindTargetType.ToInProperty);
            _flow.DbFetchData55.InDirections.Add(bind_dir51);
            VTDPropertyInfoBase pi103 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter52 = new VTDObjectGetter(pi103);
            VTDPropertyInfoBase pi104 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter52 = new VTDObjectSetter(pi104);
            bind_dir52 = new BindDirection(_flow.DbOpenConnection39,binding_getter52,binding_setter52,BindTargetType.ToInProperty);
            _flow.DbFetchData55.InDirections.Add(bind_dir52);
            XmlDocument DbFetchData55_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData55_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData55_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count>1</Count><Result>true</Result><ResultMessage>成功</ResultMessage><ResultTable><Row><OutputValue>ErrorCode=1</OutputValue></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData55.ExpectedOutputProperties = DbFetchData55_ExpectedOutputProperties_Document;
            _flow.DbFetchData52.QueryString = @"select ExpectationValue from tb_sso_authorize_verification where TestCase = {Step.OutputProperties.Loop31.CurrentIterationNumber}";
            _flow.DbFetchData52.Timeout = (int)30;
            _flow.DbFetchData52.Comment = @"";
            _flow.DbFetchData52.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData52.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi105 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter53 = new VTDObjectGetter(pi105);
            VTDPropertyInfoBase pi106 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter53 = new VTDObjectSetter(pi106);
            binding_setter53 = new StringFormaterDecorator(binding_setter53,"{Step.OutputProperties.Loop31.CurrentIterationNumber}");
            bind_dir53 = new BindDirection(_flow.Loop31,binding_getter53,binding_setter53,BindTargetType.ToInProperty);
            _flow.DbFetchData52.InDirections.Add(bind_dir53);
            VTDPropertyInfoBase pi107 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter54 = new VTDObjectGetter(pi107);
            VTDPropertyInfoBase pi108 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter54 = new VTDObjectSetter(pi108);
            bind_dir54 = new BindDirection(_flow.DbOpenConnection39,binding_getter54,binding_setter54,BindTargetType.ToInProperty);
            _flow.DbFetchData52.InDirections.Add(bind_dir54);
            XmlDocument DbFetchData52_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData52_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData52_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData52.ExpectedOutputProperties = DbFetchData52_ExpectedOutputProperties_Document;
            _flow.IfElse49.ConditionAsString = @"{Step.OutputProperties.DbFetchData55.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData52.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse49.Comment = @"";
            _flow.IfElse49.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse49.Name = @"填写Result";
            _flow.IfElse49.Activities.Add (_flow.IfElseBranch50);
            _flow.IfElse49.Activities.Add (_flow.IfElseBranch51);
            _flow.IfElseBranch50.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi109 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter55 = new VTDXPathGetter(pi109,XmlTypeCode.String);
            binding_getter55 = new XPathGetterDecorator(binding_getter55,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData55.GetParam(binding_getter55),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi110 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter56 = new VTDXPathGetter(pi110,XmlTypeCode.String);
            binding_getter56 = new XPathGetterDecorator(binding_getter56,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData52.GetParam(binding_getter56),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch50.Comment = @"";
            _flow.IfElseBranch50.IconPath = @"";
            _flow.IfElseBranch50.Name = @"是";
            _flow.IfElseBranch50.Activities.Add (_flow.DbFetchData53);
            _flow.IfElseBranch51.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch51.Comment = @"";
            _flow.IfElseBranch51.IconPath = @"";
            _flow.IfElseBranch51.Name = @"否";
            _flow.IfElseBranch51.Activities.Add (_flow.DbFetchData54);
            _flow.DbFetchData53.QueryString = @"update tb_sso_authorize_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop31.CurrentIterationNumber}";
            _flow.DbFetchData53.Timeout = (int)30;
            _flow.DbFetchData53.Comment = @"";
            _flow.DbFetchData53.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData53.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi111 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter57 = new VTDObjectGetter(pi111);
            VTDPropertyInfoBase pi112 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter55 = new VTDObjectSetter(pi112);
            binding_setter55 = new StringFormaterDecorator(binding_setter55,"{Step.OutputProperties.Loop31.CurrentIterationNumber}");
            bind_dir55 = new BindDirection(_flow.Loop31,binding_getter57,binding_setter55,BindTargetType.ToInProperty);
            _flow.DbFetchData53.InDirections.Add(bind_dir55);
            VTDPropertyInfoBase pi113 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter58 = new VTDObjectGetter(pi113);
            VTDPropertyInfoBase pi114 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter56 = new VTDObjectSetter(pi114);
            bind_dir56 = new BindDirection(_flow.DbOpenConnection39,binding_getter58,binding_setter56,BindTargetType.ToInProperty);
            _flow.DbFetchData53.InDirections.Add(bind_dir56);
            XmlDocument DbFetchData53_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData53_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData53_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData53.ExpectedOutputProperties = DbFetchData53_ExpectedOutputProperties_Document;
            _flow.DbFetchData54.QueryString = @"update tb_sso_authorize_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop31.CurrentIterationNumber}";
            _flow.DbFetchData54.Timeout = (int)30;
            _flow.DbFetchData54.Comment = @"";
            _flow.DbFetchData54.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData54.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi115 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter59 = new VTDObjectGetter(pi115);
            VTDPropertyInfoBase pi116 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter57 = new VTDObjectSetter(pi116);
            binding_setter57 = new StringFormaterDecorator(binding_setter57,"{Step.OutputProperties.Loop31.CurrentIterationNumber}");
            bind_dir57 = new BindDirection(_flow.Loop31,binding_getter59,binding_setter57,BindTargetType.ToInProperty);
            _flow.DbFetchData54.InDirections.Add(bind_dir57);
            VTDPropertyInfoBase pi117 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter60 = new VTDObjectGetter(pi117);
            VTDPropertyInfoBase pi118 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter58 = new VTDObjectSetter(pi118);
            bind_dir58 = new BindDirection(_flow.DbOpenConnection39,binding_getter60,binding_setter58,BindTargetType.ToInProperty);
            _flow.DbFetchData54.InDirections.Add(bind_dir58);
            XmlDocument DbFetchData54_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData54_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData54_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData54.ExpectedOutputProperties = DbFetchData54_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    