/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_hismsg_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir440 = null;
        public BindDirection bind_dir441 = null;
        public BindDirection bind_dir442 = null;
        public BindDirection bind_dir443 = null;
        public BindDirection bind_dir444 = null;
        public BindDirection bind_dir445 = null;
        public BindDirection bind_dir446 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity27 = null;
        public BindDirection bind_dir447 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity27_Policy = null;
        public BindDirection bind_dir448 = null;
        public BindDirection bind_dir449 = null;
        public BindDirection bind_dir450 = null;
        public BindDirection bind_dir451 = null;
        public BindDirection bind_dir452 = null;
        public BindDirection bind_dir453 = null;
        public BindDirection bind_dir454 = null;
        public BindDirection bind_dir455 = null;
        public BindDirection bind_dir456 = null;
        public BindDirection bind_dir457 = null;
        public BindDirection bind_dir458 = null;
        public BindDirection bind_dir459 = null;
        public BindDirection bind_dir460 = null;
        public BindDirection bind_dir461 = null;
        public BindDirection bind_dir462 = null;
        public BindDirection bind_dir463 = null;
        public BindDirection bind_dir464 = null;
        public BindDirection bind_dir465 = null;
        public BindDirection bind_dir466 = null;
        public BindDirection bind_dir467 = null;
        public BindDirection bind_dir468 = null;
        public BindDirection bind_dir469 = null;
        public BindDirection bind_dir470 = null;
        public BindDirection bind_dir471 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity23 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity23");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity25 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity25");
            _flow.DataExporterCloseActivity26 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity26");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity24 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity24");
            _flow.Sequence21 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence21");
            _flow.DbOpenConnection4 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection4");
            _flow.DbFetchData5 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData5");
            _flow.DbFetchData8 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData8");
            _flow.DbFetchData9 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData9");
            _flow.DbFetchData10 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData10");
            _flow.Loop6 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop6Input>(_context,"Loop6",LoopType.For);
            this.DataCursorActivity27 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity27");
            this.DataCursorActivity27_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence22 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence22");
            _flow.DbFetchData7 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData7");
            _flow.ReplaceStringActivity12 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity12");
            _flow.ReplaceStringActivity13 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity13");
            _flow.ReplaceStringActivity14 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity14");
            _flow.DbFetchData15 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData15");
            _flow.CallQTPTest16 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest16");
            _flow.DbFetchData17 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData17");
            _flow.ReplaceStringActivity18 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity18");
            _flow.HTTPActivity19 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity19");
            _flow.StringToJsonActivity20 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity20");
            _flow.DataFetchActivity23.Comment = @"";
            _flow.DataFetchActivity23.IconPath = @"";
            _flow.DataFetchActivity23.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity23.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity23_QueryParameters_Document = new XmlDocument();
            DataFetchActivity23_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity23Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>7a43cc71-323f-4939-a214-e941f2a11520</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>nS9jToOb4zLJent8hCRcVg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity23_QueryParameters_Document.LoadXml(xmlDataFetchActivity23Params);
            _flow.DataFetchActivity23.QueryParameters = DataFetchActivity23_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity23);
            this.Activities.Add (_flow.DataFetchActivity23);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (_flow.Sequence21);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity25.Comment = @"";
            _flow.DataExporterActivity25.IconPath = @"";
            VTDPropertyInfoBase pi893 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter454 = new VTDObjectGetter(pi893);
            VTDPropertyInfoBase pi894 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter440 = new VTDObjectSetter(pi894);
            binding_setter440 = new StringFormaterDecorator(binding_setter440,"{Step.DataFetchActivity23.OutTable}");
            bind_dir440 = new BindDirection(_flow.DataFetchActivity23,binding_getter454,binding_setter440,BindTargetType.ToInProperty);
            _flow.DataExporterActivity25.InDirections.Add(bind_dir440);
            this.Activities.Add (_flow.DataExporterActivity25);
            _flow.DataExporterCloseActivity26.Comment = @"";
            _flow.DataExporterCloseActivity26.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity26);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity24.Comment = @"";
            _flow.DataDisconnectActivity24.IconPath = @"";
            VTDPropertyInfoBase pi895 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter455 = new VTDObjectGetter(pi895);
            VTDPropertyInfoBase pi896 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter441 = new VTDObjectSetter(pi896);
            binding_setter441 = new StringFormaterDecorator(binding_setter441,"{Step.DataFetchActivity23.OutTable}");
            bind_dir441 = new BindDirection(_flow.DataFetchActivity23,binding_getter455,binding_setter441,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity24.InDirections.Add(bind_dir441);
            this.Activities.Add (_flow.DataDisconnectActivity24);
            _flow.Sequence21.Comment = @"";
            _flow.Sequence21.IconPath = @"";
            _flow.Sequence21.Name = @"序列21";
            _flow.Sequence21.Activities.Add (_flow.DbOpenConnection4);
            _flow.Sequence21.Activities.Add (_flow.DbFetchData5);
            _flow.Sequence21.Activities.Add (_flow.DbFetchData8);
            _flow.Sequence21.Activities.Add (_flow.DbFetchData9);
            _flow.Sequence21.Activities.Add (_flow.DbFetchData10);
            _flow.Sequence21.Activities.Add (_flow.Loop6);
            _flow.DbOpenConnection4.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection4.Password = @"";
            _flow.DbOpenConnection4.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection4.Comment = @"";
            _flow.DbOpenConnection4.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection4.Name = @"链接mySql";
            _flow.DbFetchData5.QueryString = @"select count(*) as 'Row' from tb_hismsg_verification";
            _flow.DbFetchData5.Timeout = (int)30;
            _flow.DbFetchData5.Comment = @"";
            _flow.DbFetchData5.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData5.Name = @"查询tb_hismsg_verification表中有多少条数据";
            VTDPropertyInfoBase pi897 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter456 = new VTDObjectGetter(pi897);
            VTDPropertyInfoBase pi898 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter442 = new VTDObjectSetter(pi898);
            bind_dir442 = new BindDirection(_flow.DbOpenConnection4,binding_getter456,binding_setter442,BindTargetType.ToInProperty);
            _flow.DbFetchData5.InDirections.Add(bind_dir442);
            XmlDocument DbFetchData5_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData5_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData5_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData5.ExpectedOutputProperties = DbFetchData5_ExpectedOutputProperties_Document;
            _flow.DbFetchData8.QueryString = @"select LoginStudentUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData8.Timeout = (int)30;
            _flow.DbFetchData8.Comment = @"";
            _flow.DbFetchData8.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData8.Name = @"查询出LoginStudentUsername的值";
            VTDPropertyInfoBase pi899 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter457 = new VTDObjectGetter(pi899);
            VTDPropertyInfoBase pi900 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter443 = new VTDObjectSetter(pi900);
            bind_dir443 = new BindDirection(_flow.DbOpenConnection4,binding_getter457,binding_setter443,BindTargetType.ToInProperty);
            _flow.DbFetchData8.InDirections.Add(bind_dir443);
            XmlDocument DbFetchData8_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData8_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData8_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginStudentUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData8.ExpectedOutputProperties = DbFetchData8_ExpectedOutputProperties_Document;
            _flow.DbFetchData9.QueryString = @"select LoginTeacherUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData9.Timeout = (int)30;
            _flow.DbFetchData9.Comment = @"";
            _flow.DbFetchData9.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData9.Name = @"查询出LoginTeacherUsername的值";
            VTDPropertyInfoBase pi901 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter458 = new VTDObjectGetter(pi901);
            VTDPropertyInfoBase pi902 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter444 = new VTDObjectSetter(pi902);
            bind_dir444 = new BindDirection(_flow.DbOpenConnection4,binding_getter458,binding_setter444,BindTargetType.ToInProperty);
            _flow.DbFetchData9.InDirections.Add(bind_dir444);
            XmlDocument DbFetchData9_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData9_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData9_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginTeacherUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData9.ExpectedOutputProperties = DbFetchData9_ExpectedOutputProperties_Document;
            _flow.DbFetchData10.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData10.Timeout = (int)30;
            _flow.DbFetchData10.Comment = @"";
            _flow.DbFetchData10.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData10.Name = @"查询出ResponseXsid的值";
            VTDPropertyInfoBase pi903 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter459 = new VTDObjectGetter(pi903);
            VTDPropertyInfoBase pi904 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter445 = new VTDObjectSetter(pi904);
            bind_dir445 = new BindDirection(_flow.DbOpenConnection4,binding_getter459,binding_setter445,BindTargetType.ToInProperty);
            _flow.DbFetchData10.InDirections.Add(bind_dir445);
            XmlDocument DbFetchData10_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData10_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData10_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData10.ExpectedOutputProperties = DbFetchData10_ExpectedOutputProperties_Document;
            _flow.Loop6.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop6.NumberOfIterations = (int)1;
            _flow.Loop6.Comment = @"";
            _flow.Loop6.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop6.Name = @"循环取出tb_hismsg_verification表中数据";
            VTDPropertyInfoBase pi905 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter460 = new VTDXPathGetter(pi905,XmlTypeCode.Long);
            binding_getter460 = new XPathGetterDecorator(binding_getter460,"{Array0}",1);
            VTDPropertyInfoBase pi906 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter446 = new VTDObjectSetter(pi906);
            bind_dir446 = new BindDirection(_flow.DbFetchData5,binding_getter460,binding_setter446,BindTargetType.ToInProperty);
            _flow.Loop6.InDirections.Add(bind_dir446);
            _flow.Loop6.Activities.Add (this.DataCursorActivity27);
            _flow.Loop6.Activities.Add (_flow.Sequence22);
            this.DataCursorActivity27.Comment = @"";
            this.DataCursorActivity27.IconPath = @"";
            VTDPropertyInfoBase pi907 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter461 = new VTDObjectGetter(pi907);
            VTDPropertyInfoBase pi908 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter447 = new VTDObjectSetter(pi908);
            binding_setter447 = new StringFormaterDecorator(binding_setter447,"{Step.DataFetchActivity23.OutTable}");
            bind_dir447 = new BindDirection(_flow.DataFetchActivity23,binding_getter461,binding_setter447,BindTargetType.ToInProperty);
            this.DataCursorActivity27.InDirections.Add(bind_dir447);
            this.DataCursorActivity27_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity27_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity27_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity27_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity27_Policy.StartCondition.Value = "";
            this.DataCursorActivity27_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity27_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity27_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity27_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity27_Policy.EndCondition.Value = "";
            this.DataCursorActivity27_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity27_Policy.StepSize = 1;
            this.DataCursorActivity27_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity27.Policy = this.DataCursorActivity27_Policy;
            this.DataCursorActivity27.ReportStepData = false;
            _flow.Loop6.BeforeExecuteStepEvent += this.DataCursorActivity27.ResetCursor;
            _flow.Sequence22.Comment = @"";
            _flow.Sequence22.IconPath = @"";
            _flow.Sequence22.Name = @"序列22";
            _flow.Sequence22.Activities.Add (_flow.DbFetchData7);
            _flow.Sequence22.Activities.Add (_flow.ReplaceStringActivity12);
            _flow.Sequence22.Activities.Add (_flow.ReplaceStringActivity13);
            _flow.Sequence22.Activities.Add (_flow.ReplaceStringActivity14);
            _flow.Sequence22.Activities.Add (_flow.DbFetchData15);
            _flow.Sequence22.Activities.Add (_flow.CallQTPTest16);
            _flow.Sequence22.Activities.Add (_flow.DbFetchData17);
            _flow.Sequence22.Activities.Add (_flow.ReplaceStringActivity18);
            _flow.Sequence22.Activities.Add (_flow.HTTPActivity19);
            _flow.Sequence22.Activities.Add (_flow.StringToJsonActivity20);
            _flow.DbFetchData7.QueryString = @"select Jid,fromJid,xsid,limitstr,token from tb_hismsg_verification where TestCase = {Step.OutputProperties.DbFetchData5.ResultTable.Row[1].Row}";
            _flow.DbFetchData7.Timeout = (int)31;
            _flow.DbFetchData7.Comment = @"";
            _flow.DbFetchData7.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData7.Name = @"查询出当前数据表中字段值";
            VTDPropertyInfoBase pi909 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter462 = new VTDXPathGetter(pi909,XmlTypeCode.Long);
            binding_getter462 = new XPathGetterDecorator(binding_getter462,"{Array0}",1);
            VTDPropertyInfoBase pi910 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter448 = new VTDObjectSetter(pi910);
            binding_setter448 = new StringFormaterDecorator(binding_setter448,"{Step.OutputProperties.DbFetchData5.ResultTable.Row[1].Row}");
            bind_dir448 = new BindDirection(_flow.DbFetchData5,binding_getter462,binding_setter448,BindTargetType.ToInProperty);
            _flow.DbFetchData7.InDirections.Add(bind_dir448);
            VTDPropertyInfoBase pi911 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter463 = new VTDObjectGetter(pi911);
            VTDPropertyInfoBase pi912 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter449 = new VTDObjectSetter(pi912);
            bind_dir449 = new BindDirection(_flow.DbOpenConnection4,binding_getter463,binding_setter449,BindTargetType.ToInProperty);
            _flow.DbFetchData7.InDirections.Add(bind_dir449);
            XmlDocument DbFetchData7_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData7_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData7_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Jid /><fromJid /><xsid /><limitstr /><token /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData7.ExpectedOutputProperties = DbFetchData7_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity12.SourceString = @"{Step.OutputProperties.DbFetchData7.ResultTable.Row[1].fromJid}";
            _flow.ReplaceStringActivity12.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity12.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity12.SearchReplaceString[0].Key = @"77401169";
            _flow.ReplaceStringActivity12.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData9.ResultTable.Row[1].LoginTeacherUsername}";
            _flow.ReplaceStringActivity12.CaseSensitive = true;
            _flow.ReplaceStringActivity12.Comment = @"";
            _flow.ReplaceStringActivity12.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity12.Name = @"将fromjid更新至最新";
            VTDPropertyInfoBase pi913 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='fromJid'][1]");
            VTDBaseGetter binding_getter464 = new VTDXPathGetter(pi913,XmlTypeCode.String);
            binding_getter464 = new XPathGetterDecorator(binding_getter464,"{Array0}",1);
            VTDPropertyInfoBase pi914 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter450 = new VTDObjectSetter(pi914);
            binding_setter450 = new StringFormaterDecorator(binding_setter450,"{Step.OutputProperties.DbFetchData7.ResultTable.Row[1].fromJid}");
            bind_dir450 = new BindDirection(_flow.DbFetchData7,binding_getter464,binding_setter450,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity12.InDirections.Add(bind_dir450);
            VTDPropertyInfoBase pi915 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='LoginTeacherUsername'][1]");
            VTDBaseGetter binding_getter465 = new VTDXPathGetter(pi915,XmlTypeCode.String);
            binding_getter465 = new XPathGetterDecorator(binding_getter465,"{Array0}",1);
            VTDPropertyInfoBase pi916 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter451 = new VTDObjectSetter(pi916);
            binding_setter451 = new StringFormaterDecorator(binding_setter451,"{Step.OutputProperties.DbFetchData9.ResultTable.Row[1].LoginTeacherUsername}");
            bind_dir451 = new BindDirection(_flow.DbFetchData9,binding_getter465,binding_setter451,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity12.InDirections.Add(bind_dir451);
            _flow.ReplaceStringActivity13.SourceString = @"{Step.OutputProperties.DbFetchData7.ResultTable.Row[1].Jid}";
            _flow.ReplaceStringActivity13.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity13.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity13.SearchReplaceString[0].Key = @"77401170";
            _flow.ReplaceStringActivity13.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData8.ResultTable.Row[1].LoginStudentUsername}";
            _flow.ReplaceStringActivity13.CaseSensitive = true;
            _flow.ReplaceStringActivity13.Comment = @"";
            _flow.ReplaceStringActivity13.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity13.Name = @"将jid更新至最新";
            VTDPropertyInfoBase pi917 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter466 = new VTDXPathGetter(pi917,XmlTypeCode.String);
            binding_getter466 = new XPathGetterDecorator(binding_getter466,"{Array0}",1);
            VTDPropertyInfoBase pi918 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter452 = new VTDObjectSetter(pi918);
            binding_setter452 = new StringFormaterDecorator(binding_setter452,"{Step.OutputProperties.DbFetchData7.ResultTable.Row[1].Jid}");
            bind_dir452 = new BindDirection(_flow.DbFetchData7,binding_getter466,binding_setter452,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity13.InDirections.Add(bind_dir452);
            VTDPropertyInfoBase pi919 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='LoginStudentUsername'][1]");
            VTDBaseGetter binding_getter467 = new VTDXPathGetter(pi919,XmlTypeCode.String);
            binding_getter467 = new XPathGetterDecorator(binding_getter467,"{Array0}",1);
            VTDPropertyInfoBase pi920 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter453 = new VTDObjectSetter(pi920);
            binding_setter453 = new StringFormaterDecorator(binding_setter453,"{Step.OutputProperties.DbFetchData8.ResultTable.Row[1].LoginStudentUsername}");
            bind_dir453 = new BindDirection(_flow.DbFetchData8,binding_getter467,binding_setter453,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity13.InDirections.Add(bind_dir453);
            _flow.ReplaceStringActivity14.SourceString = @"{Step.OutputProperties.DbFetchData7.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity14.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity14.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity14.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity14.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity14.CaseSensitive = true;
            _flow.ReplaceStringActivity14.Comment = @"";
            _flow.ReplaceStringActivity14.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity14.Name = @"将xsid更新至最新";
            VTDPropertyInfoBase pi921 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter468 = new VTDXPathGetter(pi921,XmlTypeCode.String);
            binding_getter468 = new XPathGetterDecorator(binding_getter468,"{Array0}",1);
            VTDPropertyInfoBase pi922 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter454 = new VTDObjectSetter(pi922);
            binding_setter454 = new StringFormaterDecorator(binding_setter454,"{Step.OutputProperties.DbFetchData7.ResultTable.Row[1].xsid}");
            bind_dir454 = new BindDirection(_flow.DbFetchData7,binding_getter468,binding_setter454,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity14.InDirections.Add(bind_dir454);
            VTDPropertyInfoBase pi923 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter469 = new VTDXPathGetter(pi923,XmlTypeCode.String);
            binding_getter469 = new XPathGetterDecorator(binding_getter469,"{Array0}",1);
            VTDPropertyInfoBase pi924 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter455 = new VTDObjectSetter(pi924);
            binding_setter455 = new StringFormaterDecorator(binding_setter455,"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].ResponseXsid}");
            bind_dir455 = new BindDirection(_flow.DbFetchData10,binding_getter469,binding_setter455,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity14.InDirections.Add(bind_dir455);
            _flow.DbFetchData15.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.ReplaceStringActivity12.Result}Z5VD3jAEJS{Step.OutputProperties.ReplaceStringActivity13.Result}' where TestCase = 1";
            _flow.DbFetchData15.Timeout = (int)30;
            _flow.DbFetchData15.Comment = @"";
            _flow.DbFetchData15.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData15.Name = @"将要加密的信息更新到EncryptionStr";
            VTDPropertyInfoBase pi925 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter470 = new VTDObjectGetter(pi925);
            VTDPropertyInfoBase pi926 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter456 = new VTDObjectSetter(pi926);
            binding_setter456 = new StringFormaterDecorator(binding_setter456,"{Step.OutputProperties.ReplaceStringActivity12.Result}");
            bind_dir456 = new BindDirection(_flow.ReplaceStringActivity12,binding_getter470,binding_setter456,BindTargetType.ToInProperty);
            _flow.DbFetchData15.InDirections.Add(bind_dir456);
            VTDPropertyInfoBase pi927 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter471 = new VTDObjectGetter(pi927);
            VTDPropertyInfoBase pi928 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter457 = new VTDObjectSetter(pi928);
            binding_setter457 = new StringFormaterDecorator(binding_setter457,"{Step.OutputProperties.ReplaceStringActivity13.Result}");
            bind_dir457 = new BindDirection(_flow.ReplaceStringActivity13,binding_getter471,binding_setter457,BindTargetType.ToInProperty);
            _flow.DbFetchData15.InDirections.Add(bind_dir457);
            VTDPropertyInfoBase pi929 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter472 = new VTDObjectGetter(pi929);
            VTDPropertyInfoBase pi930 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter458 = new VTDObjectSetter(pi930);
            bind_dir458 = new BindDirection(_flow.DbOpenConnection4,binding_getter472,binding_setter458,BindTargetType.ToInProperty);
            _flow.DbFetchData15.InDirections.Add(bind_dir458);
            XmlDocument DbFetchData15_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData15_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData15_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData15.ExpectedOutputProperties = DbFetchData15_ExpectedOutputProperties_Document;
            _flow.CallQTPTest16.Comment = @"";
            _flow.CallQTPTest16.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest16.Name = @"Encryption.SHA1";
            _flow.CallQTPTest16.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.ScriptPath}");
            _flow.CallQTPTest16.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.ActionName}");
            _flow.CallQTPTest16.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.Description}");
            _flow.CallQTPTest16.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.IsActionSelected}");
            _flow.CallQTPTest16.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.ResultLocation}");
            _flow.CallQTPTest16.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest16.QCScriptPath}");
            _flow.DbFetchData17.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData17.Timeout = (int)30;
            _flow.DbFetchData17.Comment = @"";
            _flow.DbFetchData17.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData17.Name = @"获取加密后的信息";
            VTDPropertyInfoBase pi931 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter473 = new VTDObjectGetter(pi931);
            VTDPropertyInfoBase pi932 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter459 = new VTDObjectSetter(pi932);
            bind_dir459 = new BindDirection(_flow.DbOpenConnection4,binding_getter473,binding_setter459,BindTargetType.ToInProperty);
            _flow.DbFetchData17.InDirections.Add(bind_dir459);
            XmlDocument DbFetchData17_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData17_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData17_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData17.ExpectedOutputProperties = DbFetchData17_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity18.SourceString = @"{Step.OutputProperties.DbFetchData7.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity18.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity18.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity18.SearchReplaceString[0].Key = @"Z5VD3jAEJS";
            _flow.ReplaceStringActivity18.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData17.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity18.CaseSensitive = true;
            _flow.ReplaceStringActivity18.Comment = @"";
            _flow.ReplaceStringActivity18.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity18.Name = @"将token更新至最新";
            VTDPropertyInfoBase pi933 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter474 = new VTDXPathGetter(pi933,XmlTypeCode.String);
            binding_getter474 = new XPathGetterDecorator(binding_getter474,"{Array0}",1);
            VTDPropertyInfoBase pi934 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter460 = new VTDObjectSetter(pi934);
            binding_setter460 = new StringFormaterDecorator(binding_setter460,"{Step.OutputProperties.DbFetchData7.ResultTable.Row[1].token}");
            bind_dir460 = new BindDirection(_flow.DbFetchData7,binding_getter474,binding_setter460,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity18.InDirections.Add(bind_dir460);
            VTDPropertyInfoBase pi935 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter475 = new VTDXPathGetter(pi935,XmlTypeCode.String);
            binding_getter475 = new XPathGetterDecorator(binding_getter475,"{Array0}",1);
            VTDPropertyInfoBase pi936 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter461 = new VTDObjectSetter(pi936);
            binding_setter461 = new StringFormaterDecorator(binding_setter461,"{Step.OutputProperties.DbFetchData17.ResultTable.Row[1].EncryptionResult}");
            bind_dir461 = new BindDirection(_flow.DbFetchData17,binding_getter475,binding_setter461,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity18.InDirections.Add(bind_dir461);
            _flow.HTTPActivity19.TextBody = @"Jid={Step.OutputProperties.ReplaceStringActivity13.Result}&fromJid={Step.OutputProperties.ReplaceStringActivity12.Result}&xsid={Step.OutputProperties.ReplaceStringActivity14.Result}&limit={Step.OutputProperties.DbFetchData7.ResultTable.Row[1].limitstr}&token={Step.OutputProperties.ReplaceStringActivity18.Result}" + Environment.NewLine + @"";
            _flow.HTTPActivity19.TextXmlBody = @"";
            _flow.HTTPActivity19.FileBody = @"";
            _flow.HTTPActivity19.PostBody = @"";
            _flow.HTTPActivity19.Url = @"{DataSource.tb_global_table.msgHost}{DataSource.tb_global_table.hismsg}";
            _flow.HTTPActivity19.HttpMethod = @"POST";
            _flow.HTTPActivity19.HttpVersion = @"1.1";
            _flow.HTTPActivity19.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity19.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity19.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity19.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity19.Comment = @"";
            _flow.HTTPActivity19.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity19.RequestBodyType = @"Text";
            _flow.HTTPActivity19.ResponseType = @"Text";
            _flow.HTTPActivity19.Name = @"调用hisMsg接口";
            _flow.HTTPActivity19.Proxy.Server = @"";
            _flow.HTTPActivity19.Proxy.Username = @"";
            _flow.HTTPActivity19.Proxy.Password = @"";
            _flow.HTTPActivity19.Authentication.Username = @"";
            _flow.HTTPActivity19.Authentication.Password = @"";
            _flow.HTTPActivity19.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity19.Timeout = (int)100000;
            _flow.HTTPActivity19.ClientCertificate.Password = @"";
            _flow.HTTPActivity19.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity19.UseClientCertificate = false;
            _flow.HTTPActivity19.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity19.AllowRedirections = true;
            _flow.HTTPActivity19.ReuseCookies = false;
            _flow.HTTPActivity19.ExpectServerError = false;
            XmlDocument HTTPActivity19_XMLBody_Document = new XmlDocument();
            HTTPActivity19_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity19_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity19.XMLBody = HTTPActivity19_XMLBody_Document;
            XmlDocument HTTPActivity19_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity19_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity19_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity19.RequestMultipartInfoXml = HTTPActivity19_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity19.Multipart=false;
            VTDPropertyInfoBase pi937 = new VTDPropertyInfoBase("msgHost");
            VTDBaseGetter binding_getter476 = new VTDObjectGetter(pi937);
            VTDPropertyInfoBase pi938 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter462 = new VTDObjectSetter(pi938);
            binding_setter462 = new StringFormaterDecorator(binding_setter462,"{DataSource.tb_global_table.msgHost}");
            bind_dir462 = new BindDirection(this.DataCursorActivity27,binding_getter476,binding_setter462,BindTargetType.ToInProperty);
            _flow.HTTPActivity19.InDirections.Add(bind_dir462);
            VTDPropertyInfoBase pi939 = new VTDPropertyInfoBase("hismsg");
            VTDBaseGetter binding_getter477 = new VTDObjectGetter(pi939);
            VTDPropertyInfoBase pi940 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter463 = new VTDObjectSetter(pi940);
            binding_setter463 = new StringFormaterDecorator(binding_setter463,"{DataSource.tb_global_table.hismsg}");
            bind_dir463 = new BindDirection(this.DataCursorActivity27,binding_getter477,binding_setter463,BindTargetType.ToInProperty);
            _flow.HTTPActivity19.InDirections.Add(bind_dir463);
            VTDPropertyInfoBase pi941 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter478 = new VTDObjectGetter(pi941);
            VTDPropertyInfoBase pi942 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter464 = new VTDObjectSetter(pi942);
            binding_setter464 = new StringFormaterDecorator(binding_setter464,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir464 = new BindDirection(this.DataCursorActivity27,binding_getter478,binding_setter464,BindTargetType.ToInProperty);
            _flow.HTTPActivity19.InDirections.Add(bind_dir464);
            VTDPropertyInfoBase pi943 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter479 = new VTDObjectGetter(pi943);
            VTDPropertyInfoBase pi944 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter465 = new VTDObjectSetter(pi944);
            binding_setter465 = new StringFormaterDecorator(binding_setter465,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir465 = new BindDirection(this.DataCursorActivity27,binding_getter479,binding_setter465,BindTargetType.ToInProperty);
            _flow.HTTPActivity19.InDirections.Add(bind_dir465);
            VTDPropertyInfoBase pi945 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter480 = new VTDObjectGetter(pi945);
            VTDPropertyInfoBase pi946 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter466 = new VTDObjectSetter(pi946);
            binding_setter466 = new StringFormaterDecorator(binding_setter466,"{Step.OutputProperties.ReplaceStringActivity13.Result}");
            bind_dir466 = new BindDirection(_flow.ReplaceStringActivity13,binding_getter480,binding_setter466,BindTargetType.ToInProperty);
            _flow.HTTPActivity19.InDirections.Add(bind_dir466);
            VTDPropertyInfoBase pi947 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter481 = new VTDObjectGetter(pi947);
            VTDPropertyInfoBase pi948 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter467 = new VTDObjectSetter(pi948);
            binding_setter467 = new StringFormaterDecorator(binding_setter467,"{Step.OutputProperties.ReplaceStringActivity12.Result}");
            bind_dir467 = new BindDirection(_flow.ReplaceStringActivity12,binding_getter481,binding_setter467,BindTargetType.ToInProperty);
            _flow.HTTPActivity19.InDirections.Add(bind_dir467);
            VTDPropertyInfoBase pi949 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter482 = new VTDObjectGetter(pi949);
            VTDPropertyInfoBase pi950 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter468 = new VTDObjectSetter(pi950);
            binding_setter468 = new StringFormaterDecorator(binding_setter468,"{Step.OutputProperties.ReplaceStringActivity14.Result}");
            bind_dir468 = new BindDirection(_flow.ReplaceStringActivity14,binding_getter482,binding_setter468,BindTargetType.ToInProperty);
            _flow.HTTPActivity19.InDirections.Add(bind_dir468);
            VTDPropertyInfoBase pi951 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='limitstr'][1]");
            VTDBaseGetter binding_getter483 = new VTDXPathGetter(pi951,XmlTypeCode.String);
            binding_getter483 = new XPathGetterDecorator(binding_getter483,"{Array0}",1);
            VTDPropertyInfoBase pi952 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter469 = new VTDObjectSetter(pi952);
            binding_setter469 = new StringFormaterDecorator(binding_setter469,"{Step.OutputProperties.DbFetchData7.ResultTable.Row[1].limitstr}");
            bind_dir469 = new BindDirection(_flow.DbFetchData7,binding_getter483,binding_setter469,BindTargetType.ToInProperty);
            _flow.HTTPActivity19.InDirections.Add(bind_dir469);
            VTDPropertyInfoBase pi953 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter484 = new VTDObjectGetter(pi953);
            VTDPropertyInfoBase pi954 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter470 = new VTDObjectSetter(pi954);
            binding_setter470 = new StringFormaterDecorator(binding_setter470,"{Step.OutputProperties.ReplaceStringActivity18.Result}");
            bind_dir470 = new BindDirection(_flow.ReplaceStringActivity18,binding_getter484,binding_setter470,BindTargetType.ToInProperty);
            _flow.HTTPActivity19.InDirections.Add(bind_dir470);
            XmlDocument HTTPActivity19_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity19_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity19_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity19.ExpectedResponseXmlBody = HTTPActivity19_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity19_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity19_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity19_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity19.ExpectedResponseJsonBody = HTTPActivity19_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity19_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity19_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity19_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity19.ExpectedOutputProperties = HTTPActivity19_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity20.InputString = @"{Step.OutputProperties.HTTPActivity19.ResponseBody}";
            _flow.StringToJsonActivity20.Comment = @"";
            _flow.StringToJsonActivity20.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity20.Name = @"将response返回的字符串转换为JSON";
            VTDPropertyInfoBase pi955 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter485 = new VTDObjectGetter(pi955);
            VTDPropertyInfoBase pi956 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter471 = new VTDObjectSetter(pi956);
            binding_setter471 = new StringFormaterDecorator(binding_setter471,"{Step.OutputProperties.HTTPActivity19.ResponseBody}");
            bind_dir471 = new BindDirection(_flow.HTTPActivity19,binding_getter485,binding_setter471,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity20.InDirections.Add(bind_dir471);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    