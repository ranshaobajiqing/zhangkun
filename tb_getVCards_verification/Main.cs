/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getVCards_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir170 = null;
        public BindDirection bind_dir171 = null;
        public BindDirection bind_dir172 = null;
        public BindDirection bind_dir173 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity258 = null;
        public BindDirection bind_dir174 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity258_Policy = null;
        public BindDirection bind_dir175 = null;
        public BindDirection bind_dir176 = null;
        public BindDirection bind_dir177 = null;
        public BindDirection bind_dir178 = null;
        public BindDirection bind_dir179 = null;
        public BindDirection bind_dir180 = null;
        public BindDirection bind_dir181 = null;
        public BindDirection bind_dir182 = null;
        public BindDirection bind_dir183 = null;
        public BindDirection bind_dir184 = null;
        public BindDirection bind_dir185 = null;
        public BindDirection bind_dir186 = null;
        public BindDirection bind_dir187 = null;
        public BindDirection bind_dir188 = null;
        public BindDirection bind_dir189 = null;
        public BindDirection bind_dir190 = null;
        public BindDirection bind_dir191 = null;
        public BindDirection bind_dir192 = null;
        public BindDirection bind_dir193 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity259 = null;
        public BindDirection bind_dir194 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity259_Policy = null;
        public BindDirection bind_dir195 = null;
        public BindDirection bind_dir196 = null;
        public BindDirection bind_dir197 = null;
        public BindDirection bind_dir198 = null;
        public BindDirection bind_dir199 = null;
        public BindDirection bind_dir200 = null;
        public BindDirection bind_dir201 = null;
        public BindDirection bind_dir202 = null;
        public BindDirection bind_dir203 = null;
        public BindDirection bind_dir204 = null;
        public BindDirection bind_dir205 = null;
        public BindDirection bind_dir206 = null;
        public BindDirection bind_dir207 = null;
        public BindDirection bind_dir208 = null;
        public BindDirection bind_dir209 = null;
        public BindDirection bind_dir210 = null;
        public BindDirection bind_dir211 = null;
        public BindDirection bind_dir212 = null;
        public BindDirection bind_dir213 = null;
        public BindDirection bind_dir214 = null;
        public BindDirection bind_dir215 = null;
        public BindDirection bind_dir216 = null;
        public BindDirection bind_dir217 = null;
        public BindDirection bind_dir218 = null;
        public BindDirection bind_dir219 = null;
        public BindDirection bind_dir220 = null;
        public BindDirection bind_dir221 = null;
        public BindDirection bind_dir222 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity254 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity254");
            _flow.DataFetchActivity251 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity251");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity253 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity253");
            _flow.DataExporterActivity256 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity256");
            _flow.DataExporterCloseActivity257 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity257");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity252 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity252");
            _flow.DataDisconnectActivity255 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity255");
            this.DataCursorActivity258 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity258");
            this.DataCursorActivity258_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence249 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence249");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData180 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData180");
            _flow.Loop181 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop181Input>(_context,"Loop181",LoopType.For);
            _flow.DbFetchData194 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData194");
            _flow.CallQTPTest195 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest195");
            _flow.DbFetchData196 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData196");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.HTTPActivity197 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity197");
            _flow.StringToJsonActivity198 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity198");
            _flow.DbFetchData199 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData199");
            this.DataCursorActivity259 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity259");
            this.DataCursorActivity259_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence250 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence250");
            _flow.DbFetchData182 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData182");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.ReplaceStringActivity248 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity248");
            _flow.HTTPActivity183 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity183");
            _flow.StringToJsonActivity184 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity184");
            _flow.DbFetchData185 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData185");
            _flow.DbFetchData186 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData186");
            _flow.DbFetchData187 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData187");
            _flow.DbFetchData188 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData188");
            _flow.IfElse189 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse189Input>(_context,"IfElse189");
            _flow.IfElseBranch190 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch190");
            _flow.IfElseBranch192 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch192");
            _flow.DbFetchData191 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData191");
            _flow.DbFetchData193 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData193");
            _flow.DataFetchActivity254.Comment = @"";
            _flow.DataFetchActivity254.IconPath = @"";
            _flow.DataFetchActivity254.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity254.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity254_QueryParameters_Document = new XmlDocument();
            DataFetchActivity254_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity254Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity254_QueryParameters_Document.LoadXml(xmlDataFetchActivity254Params);
            _flow.DataFetchActivity254.QueryParameters = DataFetchActivity254_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity254);
            this.Activities.Add (_flow.DataFetchActivity254);
            _flow.DataFetchActivity251.Comment = @"";
            _flow.DataFetchActivity251.IconPath = @"";
            _flow.DataFetchActivity251.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity251.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity251_QueryParameters_Document = new XmlDocument();
            DataFetchActivity251_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity251Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity251_QueryParameters_Document.LoadXml(xmlDataFetchActivity251Params);
            _flow.DataFetchActivity251.QueryParameters = DataFetchActivity251_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity251);
            this.Activities.Add (_flow.DataFetchActivity251);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity258);
            _flow.Loop2.Activities.Add (_flow.Sequence249);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity253.Comment = @"";
            _flow.DataExporterActivity253.IconPath = @"";
            VTDPropertyInfoBase pi345 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter176 = new VTDObjectGetter(pi345);
            VTDPropertyInfoBase pi346 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter170 = new VTDObjectSetter(pi346);
            binding_setter170 = new StringFormaterDecorator(binding_setter170,"{Step.DataFetchActivity251.OutTable}");
            bind_dir170 = new BindDirection(_flow.DataFetchActivity251,binding_getter176,binding_setter170,BindTargetType.ToInProperty);
            _flow.DataExporterActivity253.InDirections.Add(bind_dir170);
            this.Activities.Add (_flow.DataExporterActivity253);
            _flow.DataExporterActivity256.Comment = @"";
            _flow.DataExporterActivity256.IconPath = @"";
            VTDPropertyInfoBase pi347 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter177 = new VTDObjectGetter(pi347);
            VTDPropertyInfoBase pi348 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter171 = new VTDObjectSetter(pi348);
            binding_setter171 = new StringFormaterDecorator(binding_setter171,"{Step.DataFetchActivity254.OutTable}");
            bind_dir171 = new BindDirection(_flow.DataFetchActivity254,binding_getter177,binding_setter171,BindTargetType.ToInProperty);
            _flow.DataExporterActivity256.InDirections.Add(bind_dir171);
            this.Activities.Add (_flow.DataExporterActivity256);
            _flow.DataExporterCloseActivity257.Comment = @"";
            _flow.DataExporterCloseActivity257.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity257);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity252.Comment = @"";
            _flow.DataDisconnectActivity252.IconPath = @"";
            VTDPropertyInfoBase pi349 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter178 = new VTDObjectGetter(pi349);
            VTDPropertyInfoBase pi350 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter172 = new VTDObjectSetter(pi350);
            binding_setter172 = new StringFormaterDecorator(binding_setter172,"{Step.DataFetchActivity251.OutTable}");
            bind_dir172 = new BindDirection(_flow.DataFetchActivity251,binding_getter178,binding_setter172,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity252.InDirections.Add(bind_dir172);
            this.Activities.Add (_flow.DataDisconnectActivity252);
            _flow.DataDisconnectActivity255.Comment = @"";
            _flow.DataDisconnectActivity255.IconPath = @"";
            VTDPropertyInfoBase pi351 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter179 = new VTDObjectGetter(pi351);
            VTDPropertyInfoBase pi352 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter173 = new VTDObjectSetter(pi352);
            binding_setter173 = new StringFormaterDecorator(binding_setter173,"{Step.DataFetchActivity254.OutTable}");
            bind_dir173 = new BindDirection(_flow.DataFetchActivity254,binding_getter179,binding_setter173,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity255.InDirections.Add(bind_dir173);
            this.Activities.Add (_flow.DataDisconnectActivity255);
            this.DataCursorActivity258.Comment = @"";
            this.DataCursorActivity258.IconPath = @"";
            VTDPropertyInfoBase pi353 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter180 = new VTDObjectGetter(pi353);
            VTDPropertyInfoBase pi354 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter174 = new VTDObjectSetter(pi354);
            binding_setter174 = new StringFormaterDecorator(binding_setter174,"{Step.DataFetchActivity251.OutTable}");
            bind_dir174 = new BindDirection(_flow.DataFetchActivity251,binding_getter180,binding_setter174,BindTargetType.ToInProperty);
            this.DataCursorActivity258.InDirections.Add(bind_dir174);
            this.DataCursorActivity258_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity258_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity258_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity258_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity258_Policy.StartCondition.Value = "";
            this.DataCursorActivity258_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity258_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity258_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity258_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity258_Policy.EndCondition.Value = "";
            this.DataCursorActivity258_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity258_Policy.StepSize = 1;
            this.DataCursorActivity258_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity258.Policy = this.DataCursorActivity258_Policy;
            this.DataCursorActivity258.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity258.ResetCursor;
            _flow.Sequence249.Comment = @"";
            _flow.Sequence249.IconPath = @"";
            _flow.Sequence249.Name = @"序列249";
            _flow.Sequence249.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData180);
            _flow.Sequence249.Activities.Add (_flow.Loop181);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData194);
            _flow.Sequence249.Activities.Add (_flow.CallQTPTest195);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData196);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence249.Activities.Add (_flow.HTTPActivity197);
            _flow.Sequence249.Activities.Add (_flow.StringToJsonActivity198);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData199);
            _flow.DbOpenConnection39.ConnectionString = @"{DataSource.tb_global_table.MysqlOdbc}";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            VTDPropertyInfoBase pi355 = new VTDPropertyInfoBase("MysqlOdbc");
            VTDBaseGetter binding_getter181 = new VTDObjectGetter(pi355);
            VTDPropertyInfoBase pi356 = new VTDPropertyInfoBase("ConnectionString");
            VTDBaseSetter binding_setter175 = new VTDObjectSetter(pi356);
            binding_setter175 = new StringFormaterDecorator(binding_setter175,"{DataSource.tb_global_table.MysqlOdbc}");
            bind_dir175 = new BindDirection(this.DataCursorActivity258,binding_getter181,binding_setter175,BindTargetType.ToInProperty);
            _flow.DbOpenConnection39.InDirections.Add(bind_dir175);
            _flow.DbFetchData180.QueryString = @"select count(*) as 'Row' from tb_getvcards_verification";
            _flow.DbFetchData180.Timeout = (int)30;
            _flow.DbFetchData180.Comment = @"";
            _flow.DbFetchData180.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData180.Name = @"获取到tb_getVCards_verification表有效行数";
            VTDPropertyInfoBase pi357 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter182 = new VTDObjectGetter(pi357);
            VTDPropertyInfoBase pi358 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter176 = new VTDObjectSetter(pi358);
            bind_dir176 = new BindDirection(_flow.DbOpenConnection39,binding_getter182,binding_setter176,BindTargetType.ToInProperty);
            _flow.DbFetchData180.InDirections.Add(bind_dir176);
            XmlDocument DbFetchData180_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData180_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData180_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData180.ExpectedOutputProperties = DbFetchData180_ExpectedOutputProperties_Document;
            _flow.Loop181.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop181.NumberOfIterations = (int)1;
            _flow.Loop181.Comment = @"";
            _flow.Loop181.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop181.Name = @"循环执行tb_getVCards_verification中的测试用例";
            VTDPropertyInfoBase pi359 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter183 = new VTDXPathGetter(pi359,XmlTypeCode.Long);
            binding_getter183 = new XPathGetterDecorator(binding_getter183,"{Array0}",1);
            VTDPropertyInfoBase pi360 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter177 = new VTDObjectSetter(pi360);
            bind_dir177 = new BindDirection(_flow.DbFetchData180,binding_getter183,binding_setter177,BindTargetType.ToInProperty);
            _flow.Loop181.InDirections.Add(bind_dir177);
            _flow.Loop181.Activities.Add (this.DataCursorActivity259);
            _flow.Loop181.Activities.Add (_flow.Sequence250);
            _flow.DbFetchData194.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginStudentUsername}@365ime.comzvTmwWDXP3{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData194.Timeout = (int)30;
            _flow.DbFetchData194.Comment = @"";
            _flow.DbFetchData194.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData194.Name = @"对/iq/getVCards.php接口token实行加密";
            VTDPropertyInfoBase pi361 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter184 = new VTDObjectGetter(pi361);
            VTDPropertyInfoBase pi362 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter178 = new VTDObjectSetter(pi362);
            binding_setter178 = new StringFormaterDecorator(binding_setter178,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir178 = new BindDirection(this.DataCursorActivity258,binding_getter184,binding_setter178,BindTargetType.ToInProperty);
            _flow.DbFetchData194.InDirections.Add(bind_dir178);
            VTDPropertyInfoBase pi363 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter185 = new VTDObjectGetter(pi363);
            VTDPropertyInfoBase pi364 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter179 = new VTDObjectSetter(pi364);
            binding_setter179 = new StringFormaterDecorator(binding_setter179,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir179 = new BindDirection(this.DataCursorActivity258,binding_getter185,binding_setter179,BindTargetType.ToInProperty);
            _flow.DbFetchData194.InDirections.Add(bind_dir179);
            VTDPropertyInfoBase pi365 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter186 = new VTDObjectGetter(pi365);
            VTDPropertyInfoBase pi366 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter180 = new VTDObjectSetter(pi366);
            bind_dir180 = new BindDirection(_flow.DbOpenConnection39,binding_getter186,binding_setter180,BindTargetType.ToInProperty);
            _flow.DbFetchData194.InDirections.Add(bind_dir180);
            XmlDocument DbFetchData194_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData194_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData194_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData194.ExpectedOutputProperties = DbFetchData194_ExpectedOutputProperties_Document;
            _flow.CallQTPTest195.Comment = @"";
            _flow.CallQTPTest195.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest195.Name = @"Encryption.SHA1";
            _flow.CallQTPTest195.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ScriptPath}");
            _flow.CallQTPTest195.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ActionName}");
            _flow.CallQTPTest195.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.Description}");
            _flow.CallQTPTest195.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.IsActionSelected}");
            _flow.CallQTPTest195.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ResultLocation}");
            _flow.CallQTPTest195.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.QCScriptPath}");
            _flow.DbFetchData196.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData196.Timeout = (int)30;
            _flow.DbFetchData196.Comment = @"";
            _flow.DbFetchData196.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData196.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi367 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter187 = new VTDObjectGetter(pi367);
            VTDPropertyInfoBase pi368 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter181 = new VTDObjectSetter(pi368);
            bind_dir181 = new BindDirection(_flow.DbOpenConnection39,binding_getter187,binding_setter181,BindTargetType.ToInProperty);
            _flow.DbFetchData196.InDirections.Add(bind_dir181);
            XmlDocument DbFetchData196_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData196_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData196_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData196.ExpectedOutputProperties = DbFetchData196_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi369 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter188 = new VTDObjectGetter(pi369);
            VTDPropertyInfoBase pi370 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter182 = new VTDObjectSetter(pi370);
            bind_dir182 = new BindDirection(_flow.DbOpenConnection39,binding_getter188,binding_setter182,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir182);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.HTTPActivity197.TextBody = @"myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&toJid={DataSource.tb_global_table.LoginStudentUsername}@365ime.com&token={Step.OutputProperties.DbFetchData196.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity197.TextXmlBody = @"";
            _flow.HTTPActivity197.FileBody = @"";
            _flow.HTTPActivity197.PostBody = @"";
            _flow.HTTPActivity197.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getVCards}";
            _flow.HTTPActivity197.HttpMethod = @"POST";
            _flow.HTTPActivity197.HttpVersion = @"1.1";
            _flow.HTTPActivity197.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity197.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity197.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity197.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity197.Comment = @"";
            _flow.HTTPActivity197.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity197.RequestBodyType = @"Text";
            _flow.HTTPActivity197.ResponseType = @"Text";
            _flow.HTTPActivity197.Name = @"调用tb_getVCards_verification";
            _flow.HTTPActivity197.Proxy.Server = @"";
            _flow.HTTPActivity197.Proxy.Username = @"";
            _flow.HTTPActivity197.Proxy.Password = @"";
            _flow.HTTPActivity197.Authentication.Username = @"";
            _flow.HTTPActivity197.Authentication.Password = @"";
            _flow.HTTPActivity197.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity197.Timeout = (int)100000;
            _flow.HTTPActivity197.ClientCertificate.Password = @"";
            _flow.HTTPActivity197.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity197.UseClientCertificate = false;
            _flow.HTTPActivity197.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity197.AllowRedirections = true;
            _flow.HTTPActivity197.ReuseCookies = false;
            _flow.HTTPActivity197.ExpectServerError = false;
            XmlDocument HTTPActivity197_XMLBody_Document = new XmlDocument();
            HTTPActivity197_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity197_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity197.XMLBody = HTTPActivity197_XMLBody_Document;
            XmlDocument HTTPActivity197_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity197_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity197_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity197.RequestMultipartInfoXml = HTTPActivity197_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity197.Multipart=false;
            VTDPropertyInfoBase pi371 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter189 = new VTDObjectGetter(pi371);
            VTDPropertyInfoBase pi372 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter183 = new VTDObjectSetter(pi372);
            binding_setter183 = new StringFormaterDecorator(binding_setter183,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir183 = new BindDirection(this.DataCursorActivity258,binding_getter189,binding_setter183,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir183);
            VTDPropertyInfoBase pi373 = new VTDPropertyInfoBase("getVCards");
            VTDBaseGetter binding_getter190 = new VTDObjectGetter(pi373);
            VTDPropertyInfoBase pi374 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter184 = new VTDObjectSetter(pi374);
            binding_setter184 = new StringFormaterDecorator(binding_setter184,"{DataSource.tb_global_table.getVCards}");
            bind_dir184 = new BindDirection(this.DataCursorActivity258,binding_getter190,binding_setter184,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir184);
            VTDPropertyInfoBase pi375 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter191 = new VTDObjectGetter(pi375);
            VTDPropertyInfoBase pi376 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter185 = new VTDObjectSetter(pi376);
            binding_setter185 = new StringFormaterDecorator(binding_setter185,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir185 = new BindDirection(this.DataCursorActivity258,binding_getter191,binding_setter185,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir185);
            VTDPropertyInfoBase pi377 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter192 = new VTDObjectGetter(pi377);
            VTDPropertyInfoBase pi378 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter186 = new VTDObjectSetter(pi378);
            binding_setter186 = new StringFormaterDecorator(binding_setter186,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir186 = new BindDirection(this.DataCursorActivity258,binding_getter192,binding_setter186,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir186);
            VTDPropertyInfoBase pi379 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter193 = new VTDObjectGetter(pi379);
            VTDPropertyInfoBase pi380 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter187 = new VTDObjectSetter(pi380);
            binding_setter187 = new StringFormaterDecorator(binding_setter187,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir187 = new BindDirection(this.DataCursorActivity258,binding_getter193,binding_setter187,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir187);
            VTDPropertyInfoBase pi381 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter194 = new VTDXPathGetter(pi381,XmlTypeCode.String);
            binding_getter194 = new XPathGetterDecorator(binding_getter194,"{Array0}",1);
            VTDPropertyInfoBase pi382 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter188 = new VTDObjectSetter(pi382);
            binding_setter188 = new StringFormaterDecorator(binding_setter188,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir188 = new BindDirection(_flow.DbFetchData246,binding_getter194,binding_setter188,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir188);
            VTDPropertyInfoBase pi383 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter195 = new VTDObjectGetter(pi383);
            VTDPropertyInfoBase pi384 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter189 = new VTDObjectSetter(pi384);
            binding_setter189 = new StringFormaterDecorator(binding_setter189,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir189 = new BindDirection(this.DataCursorActivity258,binding_getter195,binding_setter189,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir189);
            VTDPropertyInfoBase pi385 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter196 = new VTDXPathGetter(pi385,XmlTypeCode.String);
            binding_getter196 = new XPathGetterDecorator(binding_getter196,"{Array0}",1);
            VTDPropertyInfoBase pi386 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter190 = new VTDObjectSetter(pi386);
            binding_setter190 = new StringFormaterDecorator(binding_setter190,"{Step.OutputProperties.DbFetchData196.ResultTable.Row[1].EncryptionResult}");
            bind_dir190 = new BindDirection(_flow.DbFetchData196,binding_getter196,binding_setter190,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir190);
            XmlDocument HTTPActivity197_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity197_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity197_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity197.ExpectedResponseXmlBody = HTTPActivity197_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity197_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity197_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity197_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity197.ExpectedResponseJsonBody = HTTPActivity197_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity197_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity197_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity197_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity197.ExpectedOutputProperties = HTTPActivity197_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity198.InputString = @"{Step.OutputProperties.HTTPActivity197.ResponseBody}";
            _flow.StringToJsonActivity198.Comment = @"";
            _flow.StringToJsonActivity198.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity198.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi387 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter197 = new VTDObjectGetter(pi387);
            VTDPropertyInfoBase pi388 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter191 = new VTDObjectSetter(pi388);
            binding_setter191 = new StringFormaterDecorator(binding_setter191,"{Step.OutputProperties.HTTPActivity197.ResponseBody}");
            bind_dir191 = new BindDirection(_flow.HTTPActivity197,binding_getter197,binding_setter191,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity198.InDirections.Add(bind_dir191);
            _flow.DbFetchData199.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity197.ResponseBody}' where InterfaceName = '/iq/getVCards.php'";
            _flow.DbFetchData199.Timeout = (int)30;
            _flow.DbFetchData199.Comment = @"";
            _flow.DbFetchData199.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData199.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi389 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter198 = new VTDObjectGetter(pi389);
            VTDPropertyInfoBase pi390 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter192 = new VTDObjectSetter(pi390);
            binding_setter192 = new StringFormaterDecorator(binding_setter192,"{Step.OutputProperties.HTTPActivity197.ResponseBody}");
            bind_dir192 = new BindDirection(_flow.HTTPActivity197,binding_getter198,binding_setter192,BindTargetType.ToInProperty);
            _flow.DbFetchData199.InDirections.Add(bind_dir192);
            VTDPropertyInfoBase pi391 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter199 = new VTDObjectGetter(pi391);
            VTDPropertyInfoBase pi392 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter193 = new VTDObjectSetter(pi392);
            bind_dir193 = new BindDirection(_flow.DbOpenConnection39,binding_getter199,binding_setter193,BindTargetType.ToInProperty);
            _flow.DbFetchData199.InDirections.Add(bind_dir193);
            XmlDocument DbFetchData199_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData199_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData199_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData199.ExpectedOutputProperties = DbFetchData199_ExpectedOutputProperties_Document;
            this.DataCursorActivity259.Comment = @"";
            this.DataCursorActivity259.IconPath = @"";
            VTDPropertyInfoBase pi393 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter200 = new VTDObjectGetter(pi393);
            VTDPropertyInfoBase pi394 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter194 = new VTDObjectSetter(pi394);
            binding_setter194 = new StringFormaterDecorator(binding_setter194,"{Step.DataFetchActivity251.OutTable}");
            bind_dir194 = new BindDirection(_flow.DataFetchActivity251,binding_getter200,binding_setter194,BindTargetType.ToInProperty);
            this.DataCursorActivity259.InDirections.Add(bind_dir194);
            this.DataCursorActivity259_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity259_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity259_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity259_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity259_Policy.StartCondition.Value = "";
            this.DataCursorActivity259_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity259_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity259_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity259_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity259_Policy.EndCondition.Value = "";
            this.DataCursorActivity259_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity259_Policy.StepSize = 1;
            this.DataCursorActivity259_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity259.Policy = this.DataCursorActivity259_Policy;
            this.DataCursorActivity259.ReportStepData = false;
            _flow.Loop181.BeforeExecuteStepEvent += this.DataCursorActivity259.ResetCursor;
            _flow.Sequence250.Comment = @"";
            _flow.Sequence250.IconPath = @"";
            _flow.Sequence250.Name = @"序列250";
            _flow.Sequence250.Activities.Add (_flow.DbFetchData182);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence250.Activities.Add (_flow.ReplaceStringActivity248);
            _flow.Sequence250.Activities.Add (_flow.HTTPActivity183);
            _flow.Sequence250.Activities.Add (_flow.StringToJsonActivity184);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData185);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData186);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData187);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData188);
            _flow.Sequence250.Activities.Add (_flow.IfElse189);
            _flow.DbFetchData182.QueryString = @"select xsid,myJid,toJid,token from tb_getvcards_verification where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData182.Timeout = (int)30;
            _flow.DbFetchData182.Comment = @"";
            _flow.DbFetchData182.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData182.Name = @"查询tb_getVCards_verification表中数据";
            VTDPropertyInfoBase pi395 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter201 = new VTDObjectGetter(pi395);
            VTDPropertyInfoBase pi396 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter195 = new VTDObjectSetter(pi396);
            binding_setter195 = new StringFormaterDecorator(binding_setter195,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir195 = new BindDirection(_flow.Loop181,binding_getter201,binding_setter195,BindTargetType.ToInProperty);
            _flow.DbFetchData182.InDirections.Add(bind_dir195);
            VTDPropertyInfoBase pi397 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter202 = new VTDObjectGetter(pi397);
            VTDPropertyInfoBase pi398 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter196 = new VTDObjectSetter(pi398);
            bind_dir196 = new BindDirection(_flow.DbOpenConnection39,binding_getter202,binding_setter196,BindTargetType.ToInProperty);
            _flow.DbFetchData182.InDirections.Add(bind_dir196);
            XmlDocument DbFetchData182_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData182_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData182_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><myJid /><toJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData182.ExpectedOutputProperties = DbFetchData182_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi399 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter203 = new VTDObjectGetter(pi399);
            VTDPropertyInfoBase pi400 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter197 = new VTDObjectSetter(pi400);
            bind_dir197 = new BindDirection(_flow.DbOpenConnection39,binding_getter203,binding_setter197,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir197);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity248.SourceString = @"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity248.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity248.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity248.CaseSensitive = true;
            _flow.ReplaceStringActivity248.Comment = @"";
            _flow.ReplaceStringActivity248.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity248.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi401 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter204 = new VTDXPathGetter(pi401,XmlTypeCode.String);
            binding_getter204 = new XPathGetterDecorator(binding_getter204,"{Array0}",1);
            VTDPropertyInfoBase pi402 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter198 = new VTDObjectSetter(pi402);
            binding_setter198 = new StringFormaterDecorator(binding_setter198,"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].xsid}");
            bind_dir198 = new BindDirection(_flow.DbFetchData182,binding_getter204,binding_setter198,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir198);
            VTDPropertyInfoBase pi403 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter205 = new VTDXPathGetter(pi403,XmlTypeCode.String);
            binding_getter205 = new XPathGetterDecorator(binding_getter205,"{Array0}",1);
            VTDPropertyInfoBase pi404 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter199 = new VTDObjectSetter(pi404);
            binding_setter199 = new StringFormaterDecorator(binding_setter199,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir199 = new BindDirection(_flow.DbFetchData247,binding_getter205,binding_setter199,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir199);
            _flow.HTTPActivity183.TextBody = @"myJid={Step.OutputProperties.DbFetchData182.ResultTable.Row[1].myJid}&xsid={Step.OutputProperties.ReplaceStringActivity248.Result}&toJid={Step.OutputProperties.DbFetchData182.ResultTable.Row[1].toJid}&token={Step.OutputProperties.DbFetchData182.ResultTable.Row[1].token}";
            _flow.HTTPActivity183.TextXmlBody = @"";
            _flow.HTTPActivity183.FileBody = @"";
            _flow.HTTPActivity183.PostBody = @"";
            _flow.HTTPActivity183.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getVCards}";
            _flow.HTTPActivity183.HttpMethod = @"POST";
            _flow.HTTPActivity183.HttpVersion = @"1.1";
            _flow.HTTPActivity183.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity183.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity183.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity183.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity183.Comment = @"";
            _flow.HTTPActivity183.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity183.RequestBodyType = @"Text";
            _flow.HTTPActivity183.ResponseType = @"Text";
            _flow.HTTPActivity183.Name = @"调用tb_getVCards_verification";
            _flow.HTTPActivity183.Proxy.Server = @"";
            _flow.HTTPActivity183.Proxy.Username = @"";
            _flow.HTTPActivity183.Proxy.Password = @"";
            _flow.HTTPActivity183.Authentication.Username = @"";
            _flow.HTTPActivity183.Authentication.Password = @"";
            _flow.HTTPActivity183.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity183.Timeout = (int)100000;
            _flow.HTTPActivity183.ClientCertificate.Password = @"";
            _flow.HTTPActivity183.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity183.UseClientCertificate = false;
            _flow.HTTPActivity183.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity183.AllowRedirections = true;
            _flow.HTTPActivity183.ReuseCookies = false;
            _flow.HTTPActivity183.ExpectServerError = false;
            XmlDocument HTTPActivity183_XMLBody_Document = new XmlDocument();
            HTTPActivity183_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity183_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity183.XMLBody = HTTPActivity183_XMLBody_Document;
            XmlDocument HTTPActivity183_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity183_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity183_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity183.RequestMultipartInfoXml = HTTPActivity183_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity183.Multipart=false;
            VTDPropertyInfoBase pi405 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter206 = new VTDObjectGetter(pi405);
            VTDPropertyInfoBase pi406 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter200 = new VTDObjectSetter(pi406);
            binding_setter200 = new StringFormaterDecorator(binding_setter200,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir200 = new BindDirection(this.DataCursorActivity259,binding_getter206,binding_setter200,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir200);
            VTDPropertyInfoBase pi407 = new VTDPropertyInfoBase("getVCards");
            VTDBaseGetter binding_getter207 = new VTDObjectGetter(pi407);
            VTDPropertyInfoBase pi408 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter201 = new VTDObjectSetter(pi408);
            binding_setter201 = new StringFormaterDecorator(binding_setter201,"{DataSource.tb_global_table.getVCards}");
            bind_dir201 = new BindDirection(this.DataCursorActivity259,binding_getter207,binding_setter201,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir201);
            VTDPropertyInfoBase pi409 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter208 = new VTDObjectGetter(pi409);
            VTDPropertyInfoBase pi410 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter202 = new VTDObjectSetter(pi410);
            binding_setter202 = new StringFormaterDecorator(binding_setter202,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir202 = new BindDirection(this.DataCursorActivity259,binding_getter208,binding_setter202,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir202);
            VTDPropertyInfoBase pi411 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter209 = new VTDObjectGetter(pi411);
            VTDPropertyInfoBase pi412 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter203 = new VTDObjectSetter(pi412);
            binding_setter203 = new StringFormaterDecorator(binding_setter203,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir203 = new BindDirection(this.DataCursorActivity259,binding_getter209,binding_setter203,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir203);
            VTDPropertyInfoBase pi413 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter210 = new VTDXPathGetter(pi413,XmlTypeCode.String);
            binding_getter210 = new XPathGetterDecorator(binding_getter210,"{Array0}",1);
            VTDPropertyInfoBase pi414 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter204 = new VTDObjectSetter(pi414);
            binding_setter204 = new StringFormaterDecorator(binding_setter204,"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].myJid}");
            bind_dir204 = new BindDirection(_flow.DbFetchData182,binding_getter210,binding_setter204,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir204);
            VTDPropertyInfoBase pi415 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter211 = new VTDObjectGetter(pi415);
            VTDPropertyInfoBase pi416 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter205 = new VTDObjectSetter(pi416);
            binding_setter205 = new StringFormaterDecorator(binding_setter205,"{Step.OutputProperties.ReplaceStringActivity248.Result}");
            bind_dir205 = new BindDirection(_flow.ReplaceStringActivity248,binding_getter211,binding_setter205,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir205);
            VTDPropertyInfoBase pi417 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='toJid'][1]");
            VTDBaseGetter binding_getter212 = new VTDXPathGetter(pi417,XmlTypeCode.String);
            binding_getter212 = new XPathGetterDecorator(binding_getter212,"{Array0}",1);
            VTDPropertyInfoBase pi418 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter206 = new VTDObjectSetter(pi418);
            binding_setter206 = new StringFormaterDecorator(binding_setter206,"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].toJid}");
            bind_dir206 = new BindDirection(_flow.DbFetchData182,binding_getter212,binding_setter206,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir206);
            VTDPropertyInfoBase pi419 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter213 = new VTDXPathGetter(pi419,XmlTypeCode.String);
            binding_getter213 = new XPathGetterDecorator(binding_getter213,"{Array0}",1);
            VTDPropertyInfoBase pi420 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter207 = new VTDObjectSetter(pi420);
            binding_setter207 = new StringFormaterDecorator(binding_setter207,"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].token}");
            bind_dir207 = new BindDirection(_flow.DbFetchData182,binding_getter213,binding_setter207,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir207);
            XmlDocument HTTPActivity183_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity183_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity183_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity183.ExpectedResponseXmlBody = HTTPActivity183_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity183_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity183_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity183_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity183.ExpectedResponseJsonBody = HTTPActivity183_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity183_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity183_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity183_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity183.ExpectedOutputProperties = HTTPActivity183_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity184.InputString = @"{Step.OutputProperties.HTTPActivity183.ResponseBody}";
            _flow.StringToJsonActivity184.Comment = @"";
            _flow.StringToJsonActivity184.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity184.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi421 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter214 = new VTDObjectGetter(pi421);
            VTDPropertyInfoBase pi422 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter208 = new VTDObjectSetter(pi422);
            binding_setter208 = new StringFormaterDecorator(binding_setter208,"{Step.OutputProperties.HTTPActivity183.ResponseBody}");
            bind_dir208 = new BindDirection(_flow.HTTPActivity183,binding_getter214,binding_setter208,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity184.InDirections.Add(bind_dir208);
            _flow.DbFetchData185.QueryString = @"UPDATE tb_getvcards_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity183.ResponseBody}' where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData185.Timeout = (int)30;
            _flow.DbFetchData185.Comment = @"";
            _flow.DbFetchData185.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData185.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi423 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter215 = new VTDObjectGetter(pi423);
            VTDPropertyInfoBase pi424 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter209 = new VTDObjectSetter(pi424);
            binding_setter209 = new StringFormaterDecorator(binding_setter209,"{Step.OutputProperties.HTTPActivity183.ResponseBody}");
            bind_dir209 = new BindDirection(_flow.HTTPActivity183,binding_getter215,binding_setter209,BindTargetType.ToInProperty);
            _flow.DbFetchData185.InDirections.Add(bind_dir209);
            VTDPropertyInfoBase pi425 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter216 = new VTDObjectGetter(pi425);
            VTDPropertyInfoBase pi426 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter210 = new VTDObjectSetter(pi426);
            binding_setter210 = new StringFormaterDecorator(binding_setter210,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir210 = new BindDirection(_flow.Loop181,binding_getter216,binding_setter210,BindTargetType.ToInProperty);
            _flow.DbFetchData185.InDirections.Add(bind_dir210);
            VTDPropertyInfoBase pi427 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter217 = new VTDObjectGetter(pi427);
            VTDPropertyInfoBase pi428 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter211 = new VTDObjectSetter(pi428);
            bind_dir211 = new BindDirection(_flow.DbOpenConnection39,binding_getter217,binding_setter211,BindTargetType.ToInProperty);
            _flow.DbFetchData185.InDirections.Add(bind_dir211);
            XmlDocument DbFetchData185_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData185_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData185_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData185.ExpectedOutputProperties = DbFetchData185_ExpectedOutputProperties_Document;
            _flow.DbFetchData186.QueryString = @"update tb_getvcards_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity184.errorCode}' where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData186.Timeout = (int)30;
            _flow.DbFetchData186.Comment = @"";
            _flow.DbFetchData186.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData186.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi429 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter218 = new VTDJsonGetter(pi429);
            VTDPropertyInfoBase pi430 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter212 = new VTDObjectSetter(pi430);
            binding_setter212 = new StringFormaterDecorator(binding_setter212,"{Step.JsonContent.StringToJsonActivity184.errorCode}");
            bind_dir212 = new BindDirection(_flow.StringToJsonActivity184,binding_getter218,binding_setter212,BindTargetType.ToInProperty);
            _flow.DbFetchData186.InDirections.Add(bind_dir212);
            VTDPropertyInfoBase pi431 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter219 = new VTDObjectGetter(pi431);
            VTDPropertyInfoBase pi432 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter213 = new VTDObjectSetter(pi432);
            binding_setter213 = new StringFormaterDecorator(binding_setter213,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir213 = new BindDirection(_flow.Loop181,binding_getter219,binding_setter213,BindTargetType.ToInProperty);
            _flow.DbFetchData186.InDirections.Add(bind_dir213);
            VTDPropertyInfoBase pi433 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter220 = new VTDObjectGetter(pi433);
            VTDPropertyInfoBase pi434 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter214 = new VTDObjectSetter(pi434);
            bind_dir214 = new BindDirection(_flow.DbOpenConnection39,binding_getter220,binding_setter214,BindTargetType.ToInProperty);
            _flow.DbFetchData186.InDirections.Add(bind_dir214);
            XmlDocument DbFetchData186_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData186_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData186_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData186.ExpectedOutputProperties = DbFetchData186_ExpectedOutputProperties_Document;
            _flow.DbFetchData187.QueryString = @"select OutputValue from tb_getvcards_verification where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData187.Timeout = (int)30;
            _flow.DbFetchData187.Comment = @"";
            _flow.DbFetchData187.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData187.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi435 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter221 = new VTDObjectGetter(pi435);
            VTDPropertyInfoBase pi436 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter215 = new VTDObjectSetter(pi436);
            binding_setter215 = new StringFormaterDecorator(binding_setter215,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir215 = new BindDirection(_flow.Loop181,binding_getter221,binding_setter215,BindTargetType.ToInProperty);
            _flow.DbFetchData187.InDirections.Add(bind_dir215);
            VTDPropertyInfoBase pi437 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter222 = new VTDObjectGetter(pi437);
            VTDPropertyInfoBase pi438 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter216 = new VTDObjectSetter(pi438);
            bind_dir216 = new BindDirection(_flow.DbOpenConnection39,binding_getter222,binding_setter216,BindTargetType.ToInProperty);
            _flow.DbFetchData187.InDirections.Add(bind_dir216);
            XmlDocument DbFetchData187_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData187_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData187_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData187.ExpectedOutputProperties = DbFetchData187_ExpectedOutputProperties_Document;
            _flow.DbFetchData188.QueryString = @"select ExpectationValue from tb_getvcards_verification where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData188.Timeout = (int)30;
            _flow.DbFetchData188.Comment = @"";
            _flow.DbFetchData188.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData188.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi439 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter223 = new VTDObjectGetter(pi439);
            VTDPropertyInfoBase pi440 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter217 = new VTDObjectSetter(pi440);
            binding_setter217 = new StringFormaterDecorator(binding_setter217,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir217 = new BindDirection(_flow.Loop181,binding_getter223,binding_setter217,BindTargetType.ToInProperty);
            _flow.DbFetchData188.InDirections.Add(bind_dir217);
            VTDPropertyInfoBase pi441 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter224 = new VTDObjectGetter(pi441);
            VTDPropertyInfoBase pi442 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter218 = new VTDObjectSetter(pi442);
            bind_dir218 = new BindDirection(_flow.DbOpenConnection39,binding_getter224,binding_setter218,BindTargetType.ToInProperty);
            _flow.DbFetchData188.InDirections.Add(bind_dir218);
            XmlDocument DbFetchData188_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData188_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData188_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData188.ExpectedOutputProperties = DbFetchData188_ExpectedOutputProperties_Document;
            _flow.IfElse189.ConditionAsString = @"{Step.OutputProperties.DbFetchData187.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData188.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse189.Comment = @"";
            _flow.IfElse189.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse189.Name = @"填写Result";
            _flow.IfElse189.Activities.Add (_flow.IfElseBranch190);
            _flow.IfElse189.Activities.Add (_flow.IfElseBranch192);
            _flow.IfElseBranch190.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi443 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter225 = new VTDXPathGetter(pi443,XmlTypeCode.String);
            binding_getter225 = new XPathGetterDecorator(binding_getter225,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData187.GetParam(binding_getter225),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi444 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter226 = new VTDXPathGetter(pi444,XmlTypeCode.String);
            binding_getter226 = new XPathGetterDecorator(binding_getter226,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData188.GetParam(binding_getter226),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch190.Comment = @"";
            _flow.IfElseBranch190.IconPath = @"";
            _flow.IfElseBranch190.Name = @"是";
            _flow.IfElseBranch190.Activities.Add (_flow.DbFetchData191);
            _flow.IfElseBranch192.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch192.Comment = @"";
            _flow.IfElseBranch192.IconPath = @"";
            _flow.IfElseBranch192.Name = @"否";
            _flow.IfElseBranch192.Activities.Add (_flow.DbFetchData193);
            _flow.DbFetchData191.QueryString = @"update tb_getvcards_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData191.Timeout = (int)30;
            _flow.DbFetchData191.Comment = @"";
            _flow.DbFetchData191.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData191.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi445 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter227 = new VTDObjectGetter(pi445);
            VTDPropertyInfoBase pi446 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter219 = new VTDObjectSetter(pi446);
            binding_setter219 = new StringFormaterDecorator(binding_setter219,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir219 = new BindDirection(_flow.Loop181,binding_getter227,binding_setter219,BindTargetType.ToInProperty);
            _flow.DbFetchData191.InDirections.Add(bind_dir219);
            VTDPropertyInfoBase pi447 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter228 = new VTDObjectGetter(pi447);
            VTDPropertyInfoBase pi448 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter220 = new VTDObjectSetter(pi448);
            bind_dir220 = new BindDirection(_flow.DbOpenConnection39,binding_getter228,binding_setter220,BindTargetType.ToInProperty);
            _flow.DbFetchData191.InDirections.Add(bind_dir220);
            XmlDocument DbFetchData191_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData191_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData191_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData191.ExpectedOutputProperties = DbFetchData191_ExpectedOutputProperties_Document;
            _flow.DbFetchData193.QueryString = @"update tb_getvcards_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData193.Timeout = (int)30;
            _flow.DbFetchData193.Comment = @"";
            _flow.DbFetchData193.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData193.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi449 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter229 = new VTDObjectGetter(pi449);
            VTDPropertyInfoBase pi450 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter221 = new VTDObjectSetter(pi450);
            binding_setter221 = new StringFormaterDecorator(binding_setter221,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir221 = new BindDirection(_flow.Loop181,binding_getter229,binding_setter221,BindTargetType.ToInProperty);
            _flow.DbFetchData193.InDirections.Add(bind_dir221);
            VTDPropertyInfoBase pi451 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter230 = new VTDObjectGetter(pi451);
            VTDPropertyInfoBase pi452 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter222 = new VTDObjectSetter(pi452);
            bind_dir222 = new BindDirection(_flow.DbOpenConnection39,binding_getter230,binding_setter222,BindTargetType.ToInProperty);
            _flow.DbFetchData193.InDirections.Add(bind_dir222);
            XmlDocument DbFetchData193_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData193_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData193_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData193.ExpectedOutputProperties = DbFetchData193_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    