/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getVCards_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1628 = null;
        public BindDirection bind_dir1629 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity263 = null;
        public BindDirection bind_dir1630 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity263_Policy = null;
        public BindDirection bind_dir1631 = null;
        public BindDirection bind_dir1632 = null;
        public BindDirection bind_dir1633 = null;
        public BindDirection bind_dir1634 = null;
        public BindDirection bind_dir1635 = null;
        public BindDirection bind_dir1636 = null;
        public BindDirection bind_dir1637 = null;
        public BindDirection bind_dir1638 = null;
        public BindDirection bind_dir1639 = null;
        public BindDirection bind_dir1640 = null;
        public BindDirection bind_dir1641 = null;
        public BindDirection bind_dir1642 = null;
        public BindDirection bind_dir1643 = null;
        public BindDirection bind_dir1644 = null;
        public BindDirection bind_dir1645 = null;
        public BindDirection bind_dir1646 = null;
        public BindDirection bind_dir1647 = null;
        public BindDirection bind_dir1648 = null;
        public BindDirection bind_dir1649 = null;
        public BindDirection bind_dir1650 = null;
        public BindDirection bind_dir1651 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir1652 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir1653 = null;
        public BindDirection bind_dir1654 = null;
        public BindDirection bind_dir1655 = null;
        public BindDirection bind_dir1656 = null;
        public BindDirection bind_dir1657 = null;
        public BindDirection bind_dir1658 = null;
        public BindDirection bind_dir1659 = null;
        public BindDirection bind_dir1660 = null;
        public BindDirection bind_dir1661 = null;
        public BindDirection bind_dir1662 = null;
        public BindDirection bind_dir1663 = null;
        public BindDirection bind_dir1664 = null;
        public BindDirection bind_dir1665 = null;
        public BindDirection bind_dir1666 = null;
        public BindDirection bind_dir1667 = null;
        public BindDirection bind_dir1668 = null;
        public BindDirection bind_dir1669 = null;
        public BindDirection bind_dir1670 = null;
        public BindDirection bind_dir1671 = null;
        public BindDirection bind_dir1672 = null;
        public BindDirection bind_dir1673 = null;
        public BindDirection bind_dir1674 = null;
        public BindDirection bind_dir1675 = null;
        public BindDirection bind_dir1676 = null;
        public BindDirection bind_dir1677 = null;
        public BindDirection bind_dir1678 = null;
        public BindDirection bind_dir1679 = null;
        public BindDirection bind_dir1680 = null;
        public BindDirection bind_dir1681 = null;
        public BindDirection bind_dir1682 = null;
        public BindDirection bind_dir1683 = null;
        public BindDirection bind_dir1684 = null;
        public BindDirection bind_dir1685 = null;
        public BindDirection bind_dir1686 = null;
        public BindDirection bind_dir1687 = null;
        public BindDirection bind_dir1688 = null;
        public BindDirection bind_dir1689 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity259 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity259");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity261 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity261");
            _flow.DataExporterCloseActivity262 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity262");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity260 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity260");
            this.DataCursorActivity263 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity263");
            this.DataCursorActivity263_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence257 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence257");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData180 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData180");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.DbFetchData249 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.Loop181 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop181Input>(_context,"Loop181",LoopType.For);
            _flow.DbFetchData194 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData194");
            _flow.CallQTPTest195 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest195");
            _flow.DbFetchData196 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData196");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.HTTPActivity197 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity197");
            _flow.StringToJsonActivity198 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity198");
            _flow.DbFetchData199 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData199");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence258 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence258");
            _flow.DbFetchData182 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData182");
            _flow.ReplaceStringActivity248 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity248");
            _flow.ReplaceStringActivity251 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity251");
            _flow.ReplaceStringActivity252 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity252");
            _flow.DbFetchData253 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData253");
            _flow.CallQTPTest254 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest254");
            _flow.DbFetchData255 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData255");
            _flow.ReplaceStringActivity256 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity256");
            _flow.HTTPActivity183 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity183");
            _flow.StringToJsonActivity184 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity184");
            _flow.DbFetchData185 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData185");
            _flow.DbFetchData186 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData186");
            _flow.DbFetchData187 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData187");
            _flow.DbFetchData188 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData188");
            _flow.IfElse189 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse189Input>(_context,"IfElse189");
            _flow.IfElseBranch190 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch190");
            _flow.IfElseBranch192 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch192");
            _flow.DbFetchData191 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData191");
            _flow.DbFetchData193 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData193");
            _flow.DataFetchActivity259.Comment = @"";
            _flow.DataFetchActivity259.IconPath = @"";
            _flow.DataFetchActivity259.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity259.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity259_QueryParameters_Document = new XmlDocument();
            DataFetchActivity259_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity259Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity259_QueryParameters_Document.LoadXml(xmlDataFetchActivity259Params);
            _flow.DataFetchActivity259.QueryParameters = DataFetchActivity259_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity259);
            this.Activities.Add (_flow.DataFetchActivity259);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity263);
            _flow.Loop2.Activities.Add (_flow.Sequence257);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity261.Comment = @"";
            _flow.DataExporterActivity261.IconPath = @"";
            VTDPropertyInfoBase pi3309 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1682 = new VTDObjectGetter(pi3309);
            VTDPropertyInfoBase pi3310 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1628 = new VTDObjectSetter(pi3310);
            binding_setter1628 = new StringFormaterDecorator(binding_setter1628,"{Step.DataFetchActivity259.OutTable}");
            bind_dir1628 = new BindDirection(_flow.DataFetchActivity259,binding_getter1682,binding_setter1628,BindTargetType.ToInProperty);
            _flow.DataExporterActivity261.InDirections.Add(bind_dir1628);
            this.Activities.Add (_flow.DataExporterActivity261);
            _flow.DataExporterCloseActivity262.Comment = @"";
            _flow.DataExporterCloseActivity262.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity262);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity260.Comment = @"";
            _flow.DataDisconnectActivity260.IconPath = @"";
            VTDPropertyInfoBase pi3311 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1683 = new VTDObjectGetter(pi3311);
            VTDPropertyInfoBase pi3312 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1629 = new VTDObjectSetter(pi3312);
            binding_setter1629 = new StringFormaterDecorator(binding_setter1629,"{Step.DataFetchActivity259.OutTable}");
            bind_dir1629 = new BindDirection(_flow.DataFetchActivity259,binding_getter1683,binding_setter1629,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity260.InDirections.Add(bind_dir1629);
            this.Activities.Add (_flow.DataDisconnectActivity260);
            this.DataCursorActivity263.Comment = @"";
            this.DataCursorActivity263.IconPath = @"";
            VTDPropertyInfoBase pi3313 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1684 = new VTDObjectGetter(pi3313);
            VTDPropertyInfoBase pi3314 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1630 = new VTDObjectSetter(pi3314);
            binding_setter1630 = new StringFormaterDecorator(binding_setter1630,"{Step.DataFetchActivity259.OutTable}");
            bind_dir1630 = new BindDirection(_flow.DataFetchActivity259,binding_getter1684,binding_setter1630,BindTargetType.ToInProperty);
            this.DataCursorActivity263.InDirections.Add(bind_dir1630);
            this.DataCursorActivity263_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity263_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.StartCondition.Value = "";
            this.DataCursorActivity263_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity263_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.EndCondition.Value = "";
            this.DataCursorActivity263_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity263_Policy.StepSize = 1;
            this.DataCursorActivity263_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity263.Policy = this.DataCursorActivity263_Policy;
            this.DataCursorActivity263.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity263.ResetCursor;
            _flow.Sequence257.Comment = @"";
            _flow.Sequence257.IconPath = @"";
            _flow.Sequence257.Name = @"序列257";
            _flow.Sequence257.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData180);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData249);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence257.Activities.Add (_flow.Loop181);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData194);
            _flow.Sequence257.Activities.Add (_flow.CallQTPTest195);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData196);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence257.Activities.Add (_flow.HTTPActivity197);
            _flow.Sequence257.Activities.Add (_flow.StringToJsonActivity198);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData199);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData180.QueryString = @"select count(*) as 'Row' from tb_getvcards_verification";
            _flow.DbFetchData180.Timeout = (int)30;
            _flow.DbFetchData180.Comment = @"";
            _flow.DbFetchData180.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData180.Name = @"获取到tb_getVCards_verification表有效行数";
            VTDPropertyInfoBase pi3315 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1685 = new VTDObjectGetter(pi3315);
            VTDPropertyInfoBase pi3316 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1631 = new VTDObjectSetter(pi3316);
            bind_dir1631 = new BindDirection(_flow.DbOpenConnection39,binding_getter1685,binding_setter1631,BindTargetType.ToInProperty);
            _flow.DbFetchData180.InDirections.Add(bind_dir1631);
            XmlDocument DbFetchData180_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData180_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData180_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData180.ExpectedOutputProperties = DbFetchData180_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3317 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1686 = new VTDObjectGetter(pi3317);
            VTDPropertyInfoBase pi3318 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1632 = new VTDObjectSetter(pi3318);
            bind_dir1632 = new BindDirection(_flow.DbOpenConnection39,binding_getter1686,binding_setter1632,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir1632);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.DbFetchData249.QueryString = @"select LoginStudentUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData249.Timeout = (int)30;
            _flow.DbFetchData249.Comment = @"";
            _flow.DbFetchData249.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData249.Name = @"查询tb_global_table表中LoginStudentUsername值";
            VTDPropertyInfoBase pi3319 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1687 = new VTDObjectGetter(pi3319);
            VTDPropertyInfoBase pi3320 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1633 = new VTDObjectSetter(pi3320);
            bind_dir1633 = new BindDirection(_flow.DbOpenConnection39,binding_getter1687,binding_setter1633,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir1633);
            XmlDocument DbFetchData249_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData249_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData249_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginStudentUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData249.ExpectedOutputProperties = DbFetchData249_ExpectedOutputProperties_Document;
            _flow.DbFetchData250.QueryString = @"select LoginTeacherUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"查询tb_global_table表中LoginTeacherUsername值";
            VTDPropertyInfoBase pi3321 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1688 = new VTDObjectGetter(pi3321);
            VTDPropertyInfoBase pi3322 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1634 = new VTDObjectSetter(pi3322);
            bind_dir1634 = new BindDirection(_flow.DbOpenConnection39,binding_getter1688,binding_setter1634,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir1634);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginTeacherUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.Loop181.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop181.NumberOfIterations = (int)1;
            _flow.Loop181.Comment = @"";
            _flow.Loop181.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop181.Name = @"循环执行tb_getVCards_verification中的测试用例";
            VTDPropertyInfoBase pi3323 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter1689 = new VTDXPathGetter(pi3323,XmlTypeCode.Long);
            binding_getter1689 = new XPathGetterDecorator(binding_getter1689,"{Array0}",1);
            VTDPropertyInfoBase pi3324 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter1635 = new VTDObjectSetter(pi3324);
            bind_dir1635 = new BindDirection(_flow.DbFetchData180,binding_getter1689,binding_setter1635,BindTargetType.ToInProperty);
            _flow.Loop181.InDirections.Add(bind_dir1635);
            _flow.Loop181.Activities.Add (this.DataCursorActivity264);
            _flow.Loop181.Activities.Add (_flow.Sequence258);
            _flow.DbFetchData194.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginStudentUsername}@365ime.comzvTmwWDXP3{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData194.Timeout = (int)30;
            _flow.DbFetchData194.Comment = @"";
            _flow.DbFetchData194.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData194.Name = @"对/iq/getVCards.php接口token实行加密";
            VTDPropertyInfoBase pi3325 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter1690 = new VTDObjectGetter(pi3325);
            VTDPropertyInfoBase pi3326 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1636 = new VTDObjectSetter(pi3326);
            binding_setter1636 = new StringFormaterDecorator(binding_setter1636,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1636 = new BindDirection(this.DataCursorActivity263,binding_getter1690,binding_setter1636,BindTargetType.ToInProperty);
            _flow.DbFetchData194.InDirections.Add(bind_dir1636);
            VTDPropertyInfoBase pi3327 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1691 = new VTDObjectGetter(pi3327);
            VTDPropertyInfoBase pi3328 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1637 = new VTDObjectSetter(pi3328);
            binding_setter1637 = new StringFormaterDecorator(binding_setter1637,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1637 = new BindDirection(this.DataCursorActivity263,binding_getter1691,binding_setter1637,BindTargetType.ToInProperty);
            _flow.DbFetchData194.InDirections.Add(bind_dir1637);
            VTDPropertyInfoBase pi3329 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1692 = new VTDObjectGetter(pi3329);
            VTDPropertyInfoBase pi3330 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1638 = new VTDObjectSetter(pi3330);
            bind_dir1638 = new BindDirection(_flow.DbOpenConnection39,binding_getter1692,binding_setter1638,BindTargetType.ToInProperty);
            _flow.DbFetchData194.InDirections.Add(bind_dir1638);
            XmlDocument DbFetchData194_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData194_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData194_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData194.ExpectedOutputProperties = DbFetchData194_ExpectedOutputProperties_Document;
            _flow.CallQTPTest195.Comment = @"";
            _flow.CallQTPTest195.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest195.Name = @"Encryption.SHA1";
            _flow.CallQTPTest195.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ScriptPath}");
            _flow.CallQTPTest195.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ActionName}");
            _flow.CallQTPTest195.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.Description}");
            _flow.CallQTPTest195.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.IsActionSelected}");
            _flow.CallQTPTest195.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.ResultLocation}");
            _flow.CallQTPTest195.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest195.QCScriptPath}");
            _flow.DbFetchData196.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData196.Timeout = (int)30;
            _flow.DbFetchData196.Comment = @"";
            _flow.DbFetchData196.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData196.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi3331 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1693 = new VTDObjectGetter(pi3331);
            VTDPropertyInfoBase pi3332 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1639 = new VTDObjectSetter(pi3332);
            bind_dir1639 = new BindDirection(_flow.DbOpenConnection39,binding_getter1693,binding_setter1639,BindTargetType.ToInProperty);
            _flow.DbFetchData196.InDirections.Add(bind_dir1639);
            XmlDocument DbFetchData196_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData196_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData196_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData196.ExpectedOutputProperties = DbFetchData196_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3333 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1694 = new VTDObjectGetter(pi3333);
            VTDPropertyInfoBase pi3334 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1640 = new VTDObjectSetter(pi3334);
            bind_dir1640 = new BindDirection(_flow.DbOpenConnection39,binding_getter1694,binding_setter1640,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir1640);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.HTTPActivity197.TextBody = @"myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&toJid={DataSource.tb_global_table.LoginStudentUsername}@365ime.com&token={Step.OutputProperties.DbFetchData196.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity197.TextXmlBody = @"";
            _flow.HTTPActivity197.FileBody = @"";
            _flow.HTTPActivity197.PostBody = @"";
            _flow.HTTPActivity197.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getVCards}";
            _flow.HTTPActivity197.HttpMethod = @"POST";
            _flow.HTTPActivity197.HttpVersion = @"1.1";
            _flow.HTTPActivity197.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity197.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity197.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity197.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity197.Comment = @"";
            _flow.HTTPActivity197.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity197.RequestBodyType = @"Text";
            _flow.HTTPActivity197.ResponseType = @"Text";
            _flow.HTTPActivity197.Name = @"调用tb_getVCards_verification";
            _flow.HTTPActivity197.Proxy.Server = @"";
            _flow.HTTPActivity197.Proxy.Username = @"";
            _flow.HTTPActivity197.Proxy.Password = @"";
            _flow.HTTPActivity197.Authentication.Username = @"";
            _flow.HTTPActivity197.Authentication.Password = @"";
            _flow.HTTPActivity197.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity197.Timeout = (int)100000;
            _flow.HTTPActivity197.ClientCertificate.Password = @"";
            _flow.HTTPActivity197.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity197.UseClientCertificate = false;
            _flow.HTTPActivity197.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity197.AllowRedirections = true;
            _flow.HTTPActivity197.ReuseCookies = false;
            _flow.HTTPActivity197.ExpectServerError = false;
            XmlDocument HTTPActivity197_XMLBody_Document = new XmlDocument();
            HTTPActivity197_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity197_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity197.XMLBody = HTTPActivity197_XMLBody_Document;
            XmlDocument HTTPActivity197_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity197_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity197_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity197.RequestMultipartInfoXml = HTTPActivity197_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity197.Multipart=false;
            VTDPropertyInfoBase pi3335 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter1695 = new VTDObjectGetter(pi3335);
            VTDPropertyInfoBase pi3336 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1641 = new VTDObjectSetter(pi3336);
            binding_setter1641 = new StringFormaterDecorator(binding_setter1641,"{DataSource.tb_global_table.IQHost}");
            bind_dir1641 = new BindDirection(this.DataCursorActivity263,binding_getter1695,binding_setter1641,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir1641);
            VTDPropertyInfoBase pi3337 = new VTDPropertyInfoBase("getVCards");
            VTDBaseGetter binding_getter1696 = new VTDObjectGetter(pi3337);
            VTDPropertyInfoBase pi3338 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1642 = new VTDObjectSetter(pi3338);
            binding_setter1642 = new StringFormaterDecorator(binding_setter1642,"{DataSource.tb_global_table.getVCards}");
            bind_dir1642 = new BindDirection(this.DataCursorActivity263,binding_getter1696,binding_setter1642,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir1642);
            VTDPropertyInfoBase pi3339 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1697 = new VTDObjectGetter(pi3339);
            VTDPropertyInfoBase pi3340 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1643 = new VTDObjectSetter(pi3340);
            binding_setter1643 = new StringFormaterDecorator(binding_setter1643,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1643 = new BindDirection(this.DataCursorActivity263,binding_getter1697,binding_setter1643,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir1643);
            VTDPropertyInfoBase pi3341 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1698 = new VTDObjectGetter(pi3341);
            VTDPropertyInfoBase pi3342 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1644 = new VTDObjectSetter(pi3342);
            binding_setter1644 = new StringFormaterDecorator(binding_setter1644,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1644 = new BindDirection(this.DataCursorActivity263,binding_getter1698,binding_setter1644,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir1644);
            VTDPropertyInfoBase pi3343 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1699 = new VTDObjectGetter(pi3343);
            VTDPropertyInfoBase pi3344 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1645 = new VTDObjectSetter(pi3344);
            binding_setter1645 = new StringFormaterDecorator(binding_setter1645,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1645 = new BindDirection(this.DataCursorActivity263,binding_getter1699,binding_setter1645,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir1645);
            VTDPropertyInfoBase pi3345 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1700 = new VTDXPathGetter(pi3345,XmlTypeCode.String);
            binding_getter1700 = new XPathGetterDecorator(binding_getter1700,"{Array0}",1);
            VTDPropertyInfoBase pi3346 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1646 = new VTDObjectSetter(pi3346);
            binding_setter1646 = new StringFormaterDecorator(binding_setter1646,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir1646 = new BindDirection(_flow.DbFetchData246,binding_getter1700,binding_setter1646,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir1646);
            VTDPropertyInfoBase pi3347 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter1701 = new VTDObjectGetter(pi3347);
            VTDPropertyInfoBase pi3348 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1647 = new VTDObjectSetter(pi3348);
            binding_setter1647 = new StringFormaterDecorator(binding_setter1647,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1647 = new BindDirection(this.DataCursorActivity263,binding_getter1701,binding_setter1647,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir1647);
            VTDPropertyInfoBase pi3349 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1702 = new VTDXPathGetter(pi3349,XmlTypeCode.String);
            binding_getter1702 = new XPathGetterDecorator(binding_getter1702,"{Array0}",1);
            VTDPropertyInfoBase pi3350 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1648 = new VTDObjectSetter(pi3350);
            binding_setter1648 = new StringFormaterDecorator(binding_setter1648,"{Step.OutputProperties.DbFetchData196.ResultTable.Row[1].EncryptionResult}");
            bind_dir1648 = new BindDirection(_flow.DbFetchData196,binding_getter1702,binding_setter1648,BindTargetType.ToInProperty);
            _flow.HTTPActivity197.InDirections.Add(bind_dir1648);
            XmlDocument HTTPActivity197_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity197_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity197_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity197.ExpectedResponseXmlBody = HTTPActivity197_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity197_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity197_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity197_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity197.ExpectedResponseJsonBody = HTTPActivity197_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity197_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity197_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity197_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity197.ExpectedOutputProperties = HTTPActivity197_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity198.InputString = @"{Step.OutputProperties.HTTPActivity197.ResponseBody}";
            _flow.StringToJsonActivity198.Comment = @"";
            _flow.StringToJsonActivity198.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity198.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi3351 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1703 = new VTDObjectGetter(pi3351);
            VTDPropertyInfoBase pi3352 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1649 = new VTDObjectSetter(pi3352);
            binding_setter1649 = new StringFormaterDecorator(binding_setter1649,"{Step.OutputProperties.HTTPActivity197.ResponseBody}");
            bind_dir1649 = new BindDirection(_flow.HTTPActivity197,binding_getter1703,binding_setter1649,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity198.InDirections.Add(bind_dir1649);
            _flow.DbFetchData199.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity197.ResponseBody}' where InterfaceName = '/iq/getVCards.php'";
            _flow.DbFetchData199.Timeout = (int)30;
            _flow.DbFetchData199.Comment = @"";
            _flow.DbFetchData199.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData199.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi3353 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1704 = new VTDObjectGetter(pi3353);
            VTDPropertyInfoBase pi3354 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1650 = new VTDObjectSetter(pi3354);
            binding_setter1650 = new StringFormaterDecorator(binding_setter1650,"{Step.OutputProperties.HTTPActivity197.ResponseBody}");
            bind_dir1650 = new BindDirection(_flow.HTTPActivity197,binding_getter1704,binding_setter1650,BindTargetType.ToInProperty);
            _flow.DbFetchData199.InDirections.Add(bind_dir1650);
            VTDPropertyInfoBase pi3355 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1705 = new VTDObjectGetter(pi3355);
            VTDPropertyInfoBase pi3356 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1651 = new VTDObjectSetter(pi3356);
            bind_dir1651 = new BindDirection(_flow.DbOpenConnection39,binding_getter1705,binding_setter1651,BindTargetType.ToInProperty);
            _flow.DbFetchData199.InDirections.Add(bind_dir1651);
            XmlDocument DbFetchData199_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData199_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData199_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData199.ExpectedOutputProperties = DbFetchData199_ExpectedOutputProperties_Document;
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi3357 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1706 = new VTDObjectGetter(pi3357);
            VTDPropertyInfoBase pi3358 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1652 = new VTDObjectSetter(pi3358);
            binding_setter1652 = new StringFormaterDecorator(binding_setter1652,"{Step.DataFetchActivity259.OutTable}");
            bind_dir1652 = new BindDirection(_flow.DataFetchActivity259,binding_getter1706,binding_setter1652,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir1652);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = false;
            _flow.Loop181.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence258.Comment = @"";
            _flow.Sequence258.IconPath = @"";
            _flow.Sequence258.Name = @"序列258";
            _flow.Sequence258.Activities.Add (_flow.DbFetchData182);
            _flow.Sequence258.Activities.Add (_flow.ReplaceStringActivity248);
            _flow.Sequence258.Activities.Add (_flow.ReplaceStringActivity251);
            _flow.Sequence258.Activities.Add (_flow.ReplaceStringActivity252);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData253);
            _flow.Sequence258.Activities.Add (_flow.CallQTPTest254);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData255);
            _flow.Sequence258.Activities.Add (_flow.ReplaceStringActivity256);
            _flow.Sequence258.Activities.Add (_flow.HTTPActivity183);
            _flow.Sequence258.Activities.Add (_flow.StringToJsonActivity184);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData185);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData186);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData187);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData188);
            _flow.Sequence258.Activities.Add (_flow.IfElse189);
            _flow.DbFetchData182.QueryString = @"select xsid,myJid,toJid,token from tb_getvcards_verification where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData182.Timeout = (int)30;
            _flow.DbFetchData182.Comment = @"";
            _flow.DbFetchData182.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData182.Name = @"查询tb_getVCards_verification表中数据";
            VTDPropertyInfoBase pi3359 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1707 = new VTDObjectGetter(pi3359);
            VTDPropertyInfoBase pi3360 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1653 = new VTDObjectSetter(pi3360);
            binding_setter1653 = new StringFormaterDecorator(binding_setter1653,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir1653 = new BindDirection(_flow.Loop181,binding_getter1707,binding_setter1653,BindTargetType.ToInProperty);
            _flow.DbFetchData182.InDirections.Add(bind_dir1653);
            VTDPropertyInfoBase pi3361 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1708 = new VTDObjectGetter(pi3361);
            VTDPropertyInfoBase pi3362 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1654 = new VTDObjectSetter(pi3362);
            bind_dir1654 = new BindDirection(_flow.DbOpenConnection39,binding_getter1708,binding_setter1654,BindTargetType.ToInProperty);
            _flow.DbFetchData182.InDirections.Add(bind_dir1654);
            XmlDocument DbFetchData182_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData182_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData182_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><myJid /><toJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData182.ExpectedOutputProperties = DbFetchData182_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity248.SourceString = @"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity248.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity248.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity248.CaseSensitive = true;
            _flow.ReplaceStringActivity248.Comment = @"";
            _flow.ReplaceStringActivity248.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity248.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi3363 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter1709 = new VTDXPathGetter(pi3363,XmlTypeCode.String);
            binding_getter1709 = new XPathGetterDecorator(binding_getter1709,"{Array0}",1);
            VTDPropertyInfoBase pi3364 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1655 = new VTDObjectSetter(pi3364);
            binding_setter1655 = new StringFormaterDecorator(binding_setter1655,"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].xsid}");
            bind_dir1655 = new BindDirection(_flow.DbFetchData182,binding_getter1709,binding_setter1655,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir1655);
            VTDPropertyInfoBase pi3365 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1710 = new VTDXPathGetter(pi3365,XmlTypeCode.String);
            binding_getter1710 = new XPathGetterDecorator(binding_getter1710,"{Array0}",1);
            VTDPropertyInfoBase pi3366 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1656 = new VTDObjectSetter(pi3366);
            binding_setter1656 = new StringFormaterDecorator(binding_setter1656,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1656 = new BindDirection(_flow.DbFetchData247,binding_getter1710,binding_setter1656,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir1656);
            _flow.ReplaceStringActivity251.SourceString = @"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].myJid}";
            _flow.ReplaceStringActivity251.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity251.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity251.SearchReplaceString[0].Key = @"77401169";
            _flow.ReplaceStringActivity251.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].LoginTeacherUsername}";
            _flow.ReplaceStringActivity251.CaseSensitive = true;
            _flow.ReplaceStringActivity251.Comment = @"";
            _flow.ReplaceStringActivity251.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity251.Name = @"将myjid更新至最新值";
            VTDPropertyInfoBase pi3367 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter1711 = new VTDXPathGetter(pi3367,XmlTypeCode.String);
            binding_getter1711 = new XPathGetterDecorator(binding_getter1711,"{Array0}",1);
            VTDPropertyInfoBase pi3368 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1657 = new VTDObjectSetter(pi3368);
            binding_setter1657 = new StringFormaterDecorator(binding_setter1657,"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].myJid}");
            bind_dir1657 = new BindDirection(_flow.DbFetchData182,binding_getter1711,binding_setter1657,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity251.InDirections.Add(bind_dir1657);
            VTDPropertyInfoBase pi3369 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='LoginTeacherUsername'][1]");
            VTDBaseGetter binding_getter1712 = new VTDXPathGetter(pi3369,XmlTypeCode.String);
            binding_getter1712 = new XPathGetterDecorator(binding_getter1712,"{Array0}",1);
            VTDPropertyInfoBase pi3370 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1658 = new VTDObjectSetter(pi3370);
            binding_setter1658 = new StringFormaterDecorator(binding_setter1658,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].LoginTeacherUsername}");
            bind_dir1658 = new BindDirection(_flow.DbFetchData250,binding_getter1712,binding_setter1658,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity251.InDirections.Add(bind_dir1658);
            _flow.ReplaceStringActivity252.SourceString = @"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].toJid}";
            _flow.ReplaceStringActivity252.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity252.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity252.SearchReplaceString[0].Key = @"249901780";
            _flow.ReplaceStringActivity252.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData249.ResultTable.Row[1].LoginStudentUsername}";
            _flow.ReplaceStringActivity252.CaseSensitive = true;
            _flow.ReplaceStringActivity252.Comment = @"";
            _flow.ReplaceStringActivity252.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity252.Name = @"将tojid更新至最新值";
            VTDPropertyInfoBase pi3371 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='toJid'][1]");
            VTDBaseGetter binding_getter1713 = new VTDXPathGetter(pi3371,XmlTypeCode.String);
            binding_getter1713 = new XPathGetterDecorator(binding_getter1713,"{Array0}",1);
            VTDPropertyInfoBase pi3372 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1659 = new VTDObjectSetter(pi3372);
            binding_setter1659 = new StringFormaterDecorator(binding_setter1659,"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].toJid}");
            bind_dir1659 = new BindDirection(_flow.DbFetchData182,binding_getter1713,binding_setter1659,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity252.InDirections.Add(bind_dir1659);
            VTDPropertyInfoBase pi3373 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='LoginStudentUsername'][1]");
            VTDBaseGetter binding_getter1714 = new VTDXPathGetter(pi3373,XmlTypeCode.String);
            binding_getter1714 = new XPathGetterDecorator(binding_getter1714,"{Array0}",1);
            VTDPropertyInfoBase pi3374 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1660 = new VTDObjectSetter(pi3374);
            binding_setter1660 = new StringFormaterDecorator(binding_setter1660,"{Step.OutputProperties.DbFetchData249.ResultTable.Row[1].LoginStudentUsername}");
            bind_dir1660 = new BindDirection(_flow.DbFetchData249,binding_getter1714,binding_setter1660,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity252.InDirections.Add(bind_dir1660);
            _flow.DbFetchData253.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.ReplaceStringActivity252.Result}zvTmwWDXP3{Step.OutputProperties.ReplaceStringActivity251.Result}' where TestCase = 1";
            _flow.DbFetchData253.Timeout = (int)30;
            _flow.DbFetchData253.Comment = @"";
            _flow.DbFetchData253.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData253.Name = @"将需要加密的字符串更新至EncryptionStr字段";
            VTDPropertyInfoBase pi3375 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1715 = new VTDObjectGetter(pi3375);
            VTDPropertyInfoBase pi3376 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1661 = new VTDObjectSetter(pi3376);
            binding_setter1661 = new StringFormaterDecorator(binding_setter1661,"{Step.OutputProperties.ReplaceStringActivity252.Result}");
            bind_dir1661 = new BindDirection(_flow.ReplaceStringActivity252,binding_getter1715,binding_setter1661,BindTargetType.ToInProperty);
            _flow.DbFetchData253.InDirections.Add(bind_dir1661);
            VTDPropertyInfoBase pi3377 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1716 = new VTDObjectGetter(pi3377);
            VTDPropertyInfoBase pi3378 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1662 = new VTDObjectSetter(pi3378);
            binding_setter1662 = new StringFormaterDecorator(binding_setter1662,"{Step.OutputProperties.ReplaceStringActivity251.Result}");
            bind_dir1662 = new BindDirection(_flow.ReplaceStringActivity251,binding_getter1716,binding_setter1662,BindTargetType.ToInProperty);
            _flow.DbFetchData253.InDirections.Add(bind_dir1662);
            VTDPropertyInfoBase pi3379 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1717 = new VTDObjectGetter(pi3379);
            VTDPropertyInfoBase pi3380 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1663 = new VTDObjectSetter(pi3380);
            bind_dir1663 = new BindDirection(_flow.DbOpenConnection39,binding_getter1717,binding_setter1663,BindTargetType.ToInProperty);
            _flow.DbFetchData253.InDirections.Add(bind_dir1663);
            XmlDocument DbFetchData253_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData253_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData253_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData253.ExpectedOutputProperties = DbFetchData253_ExpectedOutputProperties_Document;
            _flow.CallQTPTest254.Comment = @"";
            _flow.CallQTPTest254.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest254.Name = @"Encryption.SHA1";
            _flow.CallQTPTest254.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.ScriptPath}");
            _flow.CallQTPTest254.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.ActionName}");
            _flow.CallQTPTest254.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.Description}");
            _flow.CallQTPTest254.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.IsActionSelected}");
            _flow.CallQTPTest254.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.ResultLocation}");
            _flow.CallQTPTest254.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest254.QCScriptPath}");
            _flow.DbFetchData255.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData255.Timeout = (int)30;
            _flow.DbFetchData255.Comment = @"";
            _flow.DbFetchData255.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData255.Name = @"获取加密后的字符串";
            VTDPropertyInfoBase pi3381 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1718 = new VTDObjectGetter(pi3381);
            VTDPropertyInfoBase pi3382 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1664 = new VTDObjectSetter(pi3382);
            bind_dir1664 = new BindDirection(_flow.DbOpenConnection39,binding_getter1718,binding_setter1664,BindTargetType.ToInProperty);
            _flow.DbFetchData255.InDirections.Add(bind_dir1664);
            XmlDocument DbFetchData255_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData255_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData255_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData255.ExpectedOutputProperties = DbFetchData255_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity256.SourceString = @"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity256.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity256.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity256.SearchReplaceString[0].Key = @"87b9ceea95320d0f0bf513ce12fe82593b8c2956";
            _flow.ReplaceStringActivity256.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData255.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity256.CaseSensitive = true;
            _flow.ReplaceStringActivity256.Comment = @"";
            _flow.ReplaceStringActivity256.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity256.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi3383 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter1719 = new VTDXPathGetter(pi3383,XmlTypeCode.String);
            binding_getter1719 = new XPathGetterDecorator(binding_getter1719,"{Array0}",1);
            VTDPropertyInfoBase pi3384 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1665 = new VTDObjectSetter(pi3384);
            binding_setter1665 = new StringFormaterDecorator(binding_setter1665,"{Step.OutputProperties.DbFetchData182.ResultTable.Row[1].token}");
            bind_dir1665 = new BindDirection(_flow.DbFetchData182,binding_getter1719,binding_setter1665,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity256.InDirections.Add(bind_dir1665);
            VTDPropertyInfoBase pi3385 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1720 = new VTDXPathGetter(pi3385,XmlTypeCode.String);
            binding_getter1720 = new XPathGetterDecorator(binding_getter1720,"{Array0}",1);
            VTDPropertyInfoBase pi3386 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1666 = new VTDObjectSetter(pi3386);
            binding_setter1666 = new StringFormaterDecorator(binding_setter1666,"{Step.OutputProperties.DbFetchData255.ResultTable.Row[1].EncryptionResult}");
            bind_dir1666 = new BindDirection(_flow.DbFetchData255,binding_getter1720,binding_setter1666,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity256.InDirections.Add(bind_dir1666);
            _flow.HTTPActivity183.TextBody = @"myJid={Step.OutputProperties.ReplaceStringActivity251.Result}&xsid={Step.OutputProperties.ReplaceStringActivity248.Result}&toJid={Step.OutputProperties.ReplaceStringActivity252.Result}&token={Step.OutputProperties.ReplaceStringActivity256.Result}";
            _flow.HTTPActivity183.TextXmlBody = @"";
            _flow.HTTPActivity183.FileBody = @"";
            _flow.HTTPActivity183.PostBody = @"";
            _flow.HTTPActivity183.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getVCards}";
            _flow.HTTPActivity183.HttpMethod = @"POST";
            _flow.HTTPActivity183.HttpVersion = @"1.1";
            _flow.HTTPActivity183.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity183.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity183.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity183.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity183.Comment = @"";
            _flow.HTTPActivity183.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity183.RequestBodyType = @"Text";
            _flow.HTTPActivity183.ResponseType = @"Text";
            _flow.HTTPActivity183.Name = @"调用tb_getVCards_verification";
            _flow.HTTPActivity183.Proxy.Server = @"";
            _flow.HTTPActivity183.Proxy.Username = @"";
            _flow.HTTPActivity183.Proxy.Password = @"";
            _flow.HTTPActivity183.Authentication.Username = @"";
            _flow.HTTPActivity183.Authentication.Password = @"";
            _flow.HTTPActivity183.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity183.Timeout = (int)100000;
            _flow.HTTPActivity183.ClientCertificate.Password = @"";
            _flow.HTTPActivity183.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity183.UseClientCertificate = false;
            _flow.HTTPActivity183.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity183.AllowRedirections = true;
            _flow.HTTPActivity183.ReuseCookies = false;
            _flow.HTTPActivity183.ExpectServerError = false;
            XmlDocument HTTPActivity183_XMLBody_Document = new XmlDocument();
            HTTPActivity183_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity183_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity183.XMLBody = HTTPActivity183_XMLBody_Document;
            XmlDocument HTTPActivity183_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity183_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity183_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity183.RequestMultipartInfoXml = HTTPActivity183_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity183.Multipart=false;
            VTDPropertyInfoBase pi3387 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter1721 = new VTDObjectGetter(pi3387);
            VTDPropertyInfoBase pi3388 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1667 = new VTDObjectSetter(pi3388);
            binding_setter1667 = new StringFormaterDecorator(binding_setter1667,"{DataSource.tb_global_table.IQHost}");
            bind_dir1667 = new BindDirection(this.DataCursorActivity264,binding_getter1721,binding_setter1667,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir1667);
            VTDPropertyInfoBase pi3389 = new VTDPropertyInfoBase("getVCards");
            VTDBaseGetter binding_getter1722 = new VTDObjectGetter(pi3389);
            VTDPropertyInfoBase pi3390 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1668 = new VTDObjectSetter(pi3390);
            binding_setter1668 = new StringFormaterDecorator(binding_setter1668,"{DataSource.tb_global_table.getVCards}");
            bind_dir1668 = new BindDirection(this.DataCursorActivity264,binding_getter1722,binding_setter1668,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir1668);
            VTDPropertyInfoBase pi3391 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1723 = new VTDObjectGetter(pi3391);
            VTDPropertyInfoBase pi3392 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1669 = new VTDObjectSetter(pi3392);
            binding_setter1669 = new StringFormaterDecorator(binding_setter1669,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1669 = new BindDirection(this.DataCursorActivity264,binding_getter1723,binding_setter1669,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir1669);
            VTDPropertyInfoBase pi3393 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1724 = new VTDObjectGetter(pi3393);
            VTDPropertyInfoBase pi3394 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1670 = new VTDObjectSetter(pi3394);
            binding_setter1670 = new StringFormaterDecorator(binding_setter1670,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1670 = new BindDirection(this.DataCursorActivity264,binding_getter1724,binding_setter1670,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir1670);
            VTDPropertyInfoBase pi3395 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1725 = new VTDObjectGetter(pi3395);
            VTDPropertyInfoBase pi3396 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1671 = new VTDObjectSetter(pi3396);
            binding_setter1671 = new StringFormaterDecorator(binding_setter1671,"{Step.OutputProperties.ReplaceStringActivity251.Result}");
            bind_dir1671 = new BindDirection(_flow.ReplaceStringActivity251,binding_getter1725,binding_setter1671,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir1671);
            VTDPropertyInfoBase pi3397 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1726 = new VTDObjectGetter(pi3397);
            VTDPropertyInfoBase pi3398 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1672 = new VTDObjectSetter(pi3398);
            binding_setter1672 = new StringFormaterDecorator(binding_setter1672,"{Step.OutputProperties.ReplaceStringActivity248.Result}");
            bind_dir1672 = new BindDirection(_flow.ReplaceStringActivity248,binding_getter1726,binding_setter1672,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir1672);
            VTDPropertyInfoBase pi3399 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1727 = new VTDObjectGetter(pi3399);
            VTDPropertyInfoBase pi3400 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1673 = new VTDObjectSetter(pi3400);
            binding_setter1673 = new StringFormaterDecorator(binding_setter1673,"{Step.OutputProperties.ReplaceStringActivity252.Result}");
            bind_dir1673 = new BindDirection(_flow.ReplaceStringActivity252,binding_getter1727,binding_setter1673,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir1673);
            VTDPropertyInfoBase pi3401 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1728 = new VTDObjectGetter(pi3401);
            VTDPropertyInfoBase pi3402 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1674 = new VTDObjectSetter(pi3402);
            binding_setter1674 = new StringFormaterDecorator(binding_setter1674,"{Step.OutputProperties.ReplaceStringActivity256.Result}");
            bind_dir1674 = new BindDirection(_flow.ReplaceStringActivity256,binding_getter1728,binding_setter1674,BindTargetType.ToInProperty);
            _flow.HTTPActivity183.InDirections.Add(bind_dir1674);
            XmlDocument HTTPActivity183_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity183_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity183_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity183.ExpectedResponseXmlBody = HTTPActivity183_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity183_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity183_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity183_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity183.ExpectedResponseJsonBody = HTTPActivity183_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity183_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity183_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity183_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity183.ExpectedOutputProperties = HTTPActivity183_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity184.InputString = @"{Step.OutputProperties.HTTPActivity183.ResponseBody}";
            _flow.StringToJsonActivity184.Comment = @"";
            _flow.StringToJsonActivity184.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity184.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi3403 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1729 = new VTDObjectGetter(pi3403);
            VTDPropertyInfoBase pi3404 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1675 = new VTDObjectSetter(pi3404);
            binding_setter1675 = new StringFormaterDecorator(binding_setter1675,"{Step.OutputProperties.HTTPActivity183.ResponseBody}");
            bind_dir1675 = new BindDirection(_flow.HTTPActivity183,binding_getter1729,binding_setter1675,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity184.InDirections.Add(bind_dir1675);
            _flow.DbFetchData185.QueryString = @"UPDATE tb_getvcards_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity183.ResponseBody}' where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData185.Timeout = (int)30;
            _flow.DbFetchData185.Comment = @"";
            _flow.DbFetchData185.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData185.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi3405 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1730 = new VTDObjectGetter(pi3405);
            VTDPropertyInfoBase pi3406 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1676 = new VTDObjectSetter(pi3406);
            binding_setter1676 = new StringFormaterDecorator(binding_setter1676,"{Step.OutputProperties.HTTPActivity183.ResponseBody}");
            bind_dir1676 = new BindDirection(_flow.HTTPActivity183,binding_getter1730,binding_setter1676,BindTargetType.ToInProperty);
            _flow.DbFetchData185.InDirections.Add(bind_dir1676);
            VTDPropertyInfoBase pi3407 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1731 = new VTDObjectGetter(pi3407);
            VTDPropertyInfoBase pi3408 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1677 = new VTDObjectSetter(pi3408);
            binding_setter1677 = new StringFormaterDecorator(binding_setter1677,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir1677 = new BindDirection(_flow.Loop181,binding_getter1731,binding_setter1677,BindTargetType.ToInProperty);
            _flow.DbFetchData185.InDirections.Add(bind_dir1677);
            VTDPropertyInfoBase pi3409 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1732 = new VTDObjectGetter(pi3409);
            VTDPropertyInfoBase pi3410 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1678 = new VTDObjectSetter(pi3410);
            bind_dir1678 = new BindDirection(_flow.DbOpenConnection39,binding_getter1732,binding_setter1678,BindTargetType.ToInProperty);
            _flow.DbFetchData185.InDirections.Add(bind_dir1678);
            XmlDocument DbFetchData185_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData185_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData185_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData185.ExpectedOutputProperties = DbFetchData185_ExpectedOutputProperties_Document;
            _flow.DbFetchData186.QueryString = @"update tb_getvcards_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity184.errorCode}' where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData186.Timeout = (int)30;
            _flow.DbFetchData186.Comment = @"";
            _flow.DbFetchData186.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData186.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi3411 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1733 = new VTDJsonGetter(pi3411);
            VTDPropertyInfoBase pi3412 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1679 = new VTDObjectSetter(pi3412);
            binding_setter1679 = new StringFormaterDecorator(binding_setter1679,"{Step.JsonContent.StringToJsonActivity184.errorCode}");
            bind_dir1679 = new BindDirection(_flow.StringToJsonActivity184,binding_getter1733,binding_setter1679,BindTargetType.ToInProperty);
            _flow.DbFetchData186.InDirections.Add(bind_dir1679);
            VTDPropertyInfoBase pi3413 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1734 = new VTDObjectGetter(pi3413);
            VTDPropertyInfoBase pi3414 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1680 = new VTDObjectSetter(pi3414);
            binding_setter1680 = new StringFormaterDecorator(binding_setter1680,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir1680 = new BindDirection(_flow.Loop181,binding_getter1734,binding_setter1680,BindTargetType.ToInProperty);
            _flow.DbFetchData186.InDirections.Add(bind_dir1680);
            VTDPropertyInfoBase pi3415 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1735 = new VTDObjectGetter(pi3415);
            VTDPropertyInfoBase pi3416 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1681 = new VTDObjectSetter(pi3416);
            bind_dir1681 = new BindDirection(_flow.DbOpenConnection39,binding_getter1735,binding_setter1681,BindTargetType.ToInProperty);
            _flow.DbFetchData186.InDirections.Add(bind_dir1681);
            XmlDocument DbFetchData186_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData186_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData186_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData186.ExpectedOutputProperties = DbFetchData186_ExpectedOutputProperties_Document;
            _flow.DbFetchData187.QueryString = @"select OutputValue from tb_getvcards_verification where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData187.Timeout = (int)30;
            _flow.DbFetchData187.Comment = @"";
            _flow.DbFetchData187.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData187.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi3417 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1736 = new VTDObjectGetter(pi3417);
            VTDPropertyInfoBase pi3418 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1682 = new VTDObjectSetter(pi3418);
            binding_setter1682 = new StringFormaterDecorator(binding_setter1682,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir1682 = new BindDirection(_flow.Loop181,binding_getter1736,binding_setter1682,BindTargetType.ToInProperty);
            _flow.DbFetchData187.InDirections.Add(bind_dir1682);
            VTDPropertyInfoBase pi3419 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1737 = new VTDObjectGetter(pi3419);
            VTDPropertyInfoBase pi3420 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1683 = new VTDObjectSetter(pi3420);
            bind_dir1683 = new BindDirection(_flow.DbOpenConnection39,binding_getter1737,binding_setter1683,BindTargetType.ToInProperty);
            _flow.DbFetchData187.InDirections.Add(bind_dir1683);
            XmlDocument DbFetchData187_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData187_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData187_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData187.ExpectedOutputProperties = DbFetchData187_ExpectedOutputProperties_Document;
            _flow.DbFetchData188.QueryString = @"select ExpectationValue from tb_getvcards_verification where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData188.Timeout = (int)30;
            _flow.DbFetchData188.Comment = @"";
            _flow.DbFetchData188.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData188.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi3421 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1738 = new VTDObjectGetter(pi3421);
            VTDPropertyInfoBase pi3422 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1684 = new VTDObjectSetter(pi3422);
            binding_setter1684 = new StringFormaterDecorator(binding_setter1684,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir1684 = new BindDirection(_flow.Loop181,binding_getter1738,binding_setter1684,BindTargetType.ToInProperty);
            _flow.DbFetchData188.InDirections.Add(bind_dir1684);
            VTDPropertyInfoBase pi3423 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1739 = new VTDObjectGetter(pi3423);
            VTDPropertyInfoBase pi3424 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1685 = new VTDObjectSetter(pi3424);
            bind_dir1685 = new BindDirection(_flow.DbOpenConnection39,binding_getter1739,binding_setter1685,BindTargetType.ToInProperty);
            _flow.DbFetchData188.InDirections.Add(bind_dir1685);
            XmlDocument DbFetchData188_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData188_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData188_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData188.ExpectedOutputProperties = DbFetchData188_ExpectedOutputProperties_Document;
            _flow.IfElse189.ConditionAsString = @"{Step.OutputProperties.DbFetchData187.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData188.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse189.Comment = @"";
            _flow.IfElse189.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse189.Name = @"填写Result";
            _flow.IfElse189.Activities.Add (_flow.IfElseBranch190);
            _flow.IfElse189.Activities.Add (_flow.IfElseBranch192);
            _flow.IfElseBranch190.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi3425 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1740 = new VTDXPathGetter(pi3425,XmlTypeCode.String);
            binding_getter1740 = new XPathGetterDecorator(binding_getter1740,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData187.GetParam(binding_getter1740),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi3426 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1741 = new VTDXPathGetter(pi3426,XmlTypeCode.String);
            binding_getter1741 = new XPathGetterDecorator(binding_getter1741,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData188.GetParam(binding_getter1741),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch190.Comment = @"";
            _flow.IfElseBranch190.IconPath = @"";
            _flow.IfElseBranch190.Name = @"是";
            _flow.IfElseBranch190.Activities.Add (_flow.DbFetchData191);
            _flow.IfElseBranch192.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch192.Comment = @"";
            _flow.IfElseBranch192.IconPath = @"";
            _flow.IfElseBranch192.Name = @"否";
            _flow.IfElseBranch192.Activities.Add (_flow.DbFetchData193);
            _flow.DbFetchData191.QueryString = @"update tb_getvcards_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData191.Timeout = (int)30;
            _flow.DbFetchData191.Comment = @"";
            _flow.DbFetchData191.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData191.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi3427 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1742 = new VTDObjectGetter(pi3427);
            VTDPropertyInfoBase pi3428 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1686 = new VTDObjectSetter(pi3428);
            binding_setter1686 = new StringFormaterDecorator(binding_setter1686,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir1686 = new BindDirection(_flow.Loop181,binding_getter1742,binding_setter1686,BindTargetType.ToInProperty);
            _flow.DbFetchData191.InDirections.Add(bind_dir1686);
            VTDPropertyInfoBase pi3429 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1743 = new VTDObjectGetter(pi3429);
            VTDPropertyInfoBase pi3430 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1687 = new VTDObjectSetter(pi3430);
            bind_dir1687 = new BindDirection(_flow.DbOpenConnection39,binding_getter1743,binding_setter1687,BindTargetType.ToInProperty);
            _flow.DbFetchData191.InDirections.Add(bind_dir1687);
            XmlDocument DbFetchData191_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData191_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData191_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData191.ExpectedOutputProperties = DbFetchData191_ExpectedOutputProperties_Document;
            _flow.DbFetchData193.QueryString = @"update tb_getvcards_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop181.CurrentIterationNumber}";
            _flow.DbFetchData193.Timeout = (int)30;
            _flow.DbFetchData193.Comment = @"";
            _flow.DbFetchData193.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData193.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi3431 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1744 = new VTDObjectGetter(pi3431);
            VTDPropertyInfoBase pi3432 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1688 = new VTDObjectSetter(pi3432);
            binding_setter1688 = new StringFormaterDecorator(binding_setter1688,"{Step.OutputProperties.Loop181.CurrentIterationNumber}");
            bind_dir1688 = new BindDirection(_flow.Loop181,binding_getter1744,binding_setter1688,BindTargetType.ToInProperty);
            _flow.DbFetchData193.InDirections.Add(bind_dir1688);
            VTDPropertyInfoBase pi3433 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1745 = new VTDObjectGetter(pi3433);
            VTDPropertyInfoBase pi3434 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1689 = new VTDObjectSetter(pi3434);
            bind_dir1689 = new BindDirection(_flow.DbOpenConnection39,binding_getter1745,binding_setter1689,BindTargetType.ToInProperty);
            _flow.DbFetchData193.InDirections.Add(bind_dir1689);
            XmlDocument DbFetchData193_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData193_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData193_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData193.ExpectedOutputProperties = DbFetchData193_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    