/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_sendhttpmessage_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir59 = null;
        public BindDirection bind_dir60 = null;
        public BindDirection bind_dir61 = null;
        public BindDirection bind_dir62 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity276 = null;
        public BindDirection bind_dir63 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity276_Policy = null;
        public BindDirection bind_dir64 = null;
        public BindDirection bind_dir65 = null;
        public BindDirection bind_dir66 = null;
        public BindDirection bind_dir67 = null;
        public BindDirection bind_dir68 = null;
        public BindDirection bind_dir69 = null;
        public BindDirection bind_dir70 = null;
        public BindDirection bind_dir71 = null;
        public BindDirection bind_dir72 = null;
        public BindDirection bind_dir73 = null;
        public BindDirection bind_dir74 = null;
        public BindDirection bind_dir75 = null;
        public BindDirection bind_dir76 = null;
        public BindDirection bind_dir77 = null;
        public BindDirection bind_dir78 = null;
        public BindDirection bind_dir79 = null;
        public BindDirection bind_dir80 = null;
        public BindDirection bind_dir81 = null;
        public BindDirection bind_dir82 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity277 = null;
        public BindDirection bind_dir83 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity277_Policy = null;
        public BindDirection bind_dir84 = null;
        public BindDirection bind_dir85 = null;
        public BindDirection bind_dir86 = null;
        public BindDirection bind_dir87 = null;
        public BindDirection bind_dir88 = null;
        public BindDirection bind_dir89 = null;
        public BindDirection bind_dir90 = null;
        public BindDirection bind_dir91 = null;
        public BindDirection bind_dir92 = null;
        public BindDirection bind_dir93 = null;
        public BindDirection bind_dir94 = null;
        public BindDirection bind_dir95 = null;
        public BindDirection bind_dir96 = null;
        public BindDirection bind_dir97 = null;
        public BindDirection bind_dir98 = null;
        public BindDirection bind_dir99 = null;
        public BindDirection bind_dir100 = null;
        public BindDirection bind_dir101 = null;
        public BindDirection bind_dir102 = null;
        public BindDirection bind_dir103 = null;
        public BindDirection bind_dir104 = null;
        public BindDirection bind_dir105 = null;
        public BindDirection bind_dir106 = null;
        public BindDirection bind_dir107 = null;
        public BindDirection bind_dir108 = null;
        public BindDirection bind_dir109 = null;
        public BindDirection bind_dir110 = null;
        public BindDirection bind_dir111 = null;
        public BindDirection bind_dir112 = null;
        public BindDirection bind_dir113 = null;
        public BindDirection bind_dir114 = null;
        public BindDirection bind_dir115 = null;
        public BindDirection bind_dir116 = null;
        public BindDirection bind_dir117 = null;
        public BindDirection bind_dir118 = null;
        public BindDirection bind_dir119 = null;
        public BindDirection bind_dir120 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity272 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity272");
            _flow.DataFetchActivity269 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity269");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity271 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity271");
            _flow.DataExporterActivity274 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity274");
            _flow.DataExporterCloseActivity275 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity275");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity270 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity270");
            _flow.DataDisconnectActivity273 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity273");
            this.DataCursorActivity276 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity276");
            this.DataCursorActivity276_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence267 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence267");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData256 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData256");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.CallQTPTest262 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest262");
            _flow.DbFetchData263 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData263");
            _flow.ReplaceStringActivity265 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity265");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity277 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity277");
            this.DataCursorActivity277_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence268 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence268");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.CallQTPTest259 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest259");
            _flow.DbFetchData260 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData260");
            _flow.ReplaceStringActivity261 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity261");
            _flow.ReplaceStringActivity258 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity258");
            _flow.ReplaceStringActivity266 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity266");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity272.Comment = @"";
            _flow.DataFetchActivity272.IconPath = @"";
            _flow.DataFetchActivity272.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity272.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity272_QueryParameters_Document = new XmlDocument();
            DataFetchActivity272_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity272Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity272_QueryParameters_Document.LoadXml(xmlDataFetchActivity272Params);
            _flow.DataFetchActivity272.QueryParameters = DataFetchActivity272_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity272);
            this.Activities.Add (_flow.DataFetchActivity272);
            _flow.DataFetchActivity269.Comment = @"";
            _flow.DataFetchActivity269.IconPath = @"";
            _flow.DataFetchActivity269.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity269.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity269_QueryParameters_Document = new XmlDocument();
            DataFetchActivity269_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity269Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity269_QueryParameters_Document.LoadXml(xmlDataFetchActivity269Params);
            _flow.DataFetchActivity269.QueryParameters = DataFetchActivity269_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity269);
            this.Activities.Add (_flow.DataFetchActivity269);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity276);
            _flow.Loop2.Activities.Add (_flow.Sequence267);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity271.Comment = @"";
            _flow.DataExporterActivity271.IconPath = @"";
            VTDPropertyInfoBase pi119 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter61 = new VTDObjectGetter(pi119);
            VTDPropertyInfoBase pi120 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter59 = new VTDObjectSetter(pi120);
            binding_setter59 = new StringFormaterDecorator(binding_setter59,"{Step.DataFetchActivity269.OutTable}");
            bind_dir59 = new BindDirection(_flow.DataFetchActivity269,binding_getter61,binding_setter59,BindTargetType.ToInProperty);
            _flow.DataExporterActivity271.InDirections.Add(bind_dir59);
            this.Activities.Add (_flow.DataExporterActivity271);
            _flow.DataExporterActivity274.Comment = @"";
            _flow.DataExporterActivity274.IconPath = @"";
            VTDPropertyInfoBase pi121 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter62 = new VTDObjectGetter(pi121);
            VTDPropertyInfoBase pi122 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter60 = new VTDObjectSetter(pi122);
            binding_setter60 = new StringFormaterDecorator(binding_setter60,"{Step.DataFetchActivity272.OutTable}");
            bind_dir60 = new BindDirection(_flow.DataFetchActivity272,binding_getter62,binding_setter60,BindTargetType.ToInProperty);
            _flow.DataExporterActivity274.InDirections.Add(bind_dir60);
            this.Activities.Add (_flow.DataExporterActivity274);
            _flow.DataExporterCloseActivity275.Comment = @"";
            _flow.DataExporterCloseActivity275.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity275);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity270.Comment = @"";
            _flow.DataDisconnectActivity270.IconPath = @"";
            VTDPropertyInfoBase pi123 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter63 = new VTDObjectGetter(pi123);
            VTDPropertyInfoBase pi124 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter61 = new VTDObjectSetter(pi124);
            binding_setter61 = new StringFormaterDecorator(binding_setter61,"{Step.DataFetchActivity269.OutTable}");
            bind_dir61 = new BindDirection(_flow.DataFetchActivity269,binding_getter63,binding_setter61,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity270.InDirections.Add(bind_dir61);
            this.Activities.Add (_flow.DataDisconnectActivity270);
            _flow.DataDisconnectActivity273.Comment = @"";
            _flow.DataDisconnectActivity273.IconPath = @"";
            VTDPropertyInfoBase pi125 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter64 = new VTDObjectGetter(pi125);
            VTDPropertyInfoBase pi126 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter62 = new VTDObjectSetter(pi126);
            binding_setter62 = new StringFormaterDecorator(binding_setter62,"{Step.DataFetchActivity272.OutTable}");
            bind_dir62 = new BindDirection(_flow.DataFetchActivity272,binding_getter64,binding_setter62,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity273.InDirections.Add(bind_dir62);
            this.Activities.Add (_flow.DataDisconnectActivity273);
            this.DataCursorActivity276.Comment = @"";
            this.DataCursorActivity276.IconPath = @"";
            VTDPropertyInfoBase pi127 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter65 = new VTDObjectGetter(pi127);
            VTDPropertyInfoBase pi128 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter63 = new VTDObjectSetter(pi128);
            binding_setter63 = new StringFormaterDecorator(binding_setter63,"{Step.DataFetchActivity269.OutTable}");
            bind_dir63 = new BindDirection(_flow.DataFetchActivity269,binding_getter65,binding_setter63,BindTargetType.ToInProperty);
            this.DataCursorActivity276.InDirections.Add(bind_dir63);
            this.DataCursorActivity276_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity276_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity276_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity276_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity276_Policy.StartCondition.Value = "";
            this.DataCursorActivity276_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity276_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity276_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity276_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity276_Policy.EndCondition.Value = "";
            this.DataCursorActivity276_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity276_Policy.StepSize = 1;
            this.DataCursorActivity276_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity276.Policy = this.DataCursorActivity276_Policy;
            this.DataCursorActivity276.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity276.ResetCursor;
            _flow.Sequence267.Comment = @"";
            _flow.Sequence267.IconPath = @"";
            _flow.Sequence267.Name = @"序列267";
            _flow.Sequence267.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence267.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence267.Activities.Add (_flow.DbFetchData256);
            _flow.Sequence267.Activities.Add (_flow.Loop56);
            _flow.Sequence267.Activities.Add (_flow.CallQTPTest262);
            _flow.Sequence267.Activities.Add (_flow.DbFetchData263);
            _flow.Sequence267.Activities.Add (_flow.ReplaceStringActivity265);
            _flow.Sequence267.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence267.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"{DataSource.tb_global_table.MysqlOdbc}";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            VTDPropertyInfoBase pi129 = new VTDPropertyInfoBase("MysqlOdbc");
            VTDBaseGetter binding_getter66 = new VTDObjectGetter(pi129);
            VTDPropertyInfoBase pi130 = new VTDPropertyInfoBase("ConnectionString");
            VTDBaseSetter binding_setter64 = new VTDObjectSetter(pi130);
            binding_setter64 = new StringFormaterDecorator(binding_setter64,"{DataSource.tb_global_table.MysqlOdbc}");
            bind_dir64 = new BindDirection(this.DataCursorActivity276,binding_getter66,binding_setter64,BindTargetType.ToInProperty);
            _flow.DbOpenConnection39.InDirections.Add(bind_dir64);
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_sendhttpmessage_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取tb_sendhttpmessage_verification表有效行数";
            VTDPropertyInfoBase pi131 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter67 = new VTDObjectGetter(pi131);
            VTDPropertyInfoBase pi132 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter65 = new VTDObjectSetter(pi132);
            bind_dir65 = new BindDirection(_flow.DbOpenConnection39,binding_getter67,binding_setter65,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir65);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData256.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData256.Timeout = (int)30;
            _flow.DbFetchData256.Comment = @"";
            _flow.DbFetchData256.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData256.Name = @"获取全局表中xsid值";
            VTDPropertyInfoBase pi133 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter68 = new VTDObjectGetter(pi133);
            VTDPropertyInfoBase pi134 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter66 = new VTDObjectSetter(pi134);
            bind_dir66 = new BindDirection(_flow.DbOpenConnection39,binding_getter68,binding_setter66,BindTargetType.ToInProperty);
            _flow.DbFetchData256.InDirections.Add(bind_dir66);
            XmlDocument DbFetchData256_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData256_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData256_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData256.ExpectedOutputProperties = DbFetchData256_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 6 个迭代";
            _flow.Loop56.NumberOfIterations = (int)6;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_sendhttpmessage_verification中的测试用例";
            VTDPropertyInfoBase pi135 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter69 = new VTDXPathGetter(pi135,XmlTypeCode.Long);
            binding_getter69 = new XPathGetterDecorator(binding_getter69,"{Array0}",1);
            VTDPropertyInfoBase pi136 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter67 = new VTDObjectSetter(pi136);
            bind_dir67 = new BindDirection(_flow.DbFetchData58,binding_getter69,binding_setter67,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir67);
            _flow.Loop56.Activities.Add (this.DataCursorActivity277);
            _flow.Loop56.Activities.Add (_flow.Sequence268);
            _flow.CallQTPTest262.Comment = @"";
            _flow.CallQTPTest262.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest262.Name = @"Encryption.timestamps";
            _flow.CallQTPTest262.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.ScriptPath}");
            _flow.CallQTPTest262.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.ActionName}")) ? @"timestamps" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.ActionName}");
            _flow.CallQTPTest262.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.Description}");
            _flow.CallQTPTest262.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.IsActionSelected}");
            _flow.CallQTPTest262.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.ResultLocation}");
            _flow.CallQTPTest262.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest262.QCScriptPath}");
            _flow.DbFetchData263.QueryString = @"select timestamps from tb_global_table where TestCase = 1";
            _flow.DbFetchData263.Timeout = (int)30;
            _flow.DbFetchData263.Comment = @"";
            _flow.DbFetchData263.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData263.Name = @"获取全局表中时间戳";
            VTDPropertyInfoBase pi137 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter70 = new VTDObjectGetter(pi137);
            VTDPropertyInfoBase pi138 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter68 = new VTDObjectSetter(pi138);
            bind_dir68 = new BindDirection(_flow.DbOpenConnection39,binding_getter70,binding_setter68,BindTargetType.ToInProperty);
            _flow.DbFetchData263.InDirections.Add(bind_dir68);
            XmlDocument DbFetchData263_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData263_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData263_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><timestamps /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData263.ExpectedOutputProperties = DbFetchData263_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity265.SourceString = @"message={""content"":""测试"",""to"":""77401171@365ime.com"",""time"":1439108449,""from"":""77401169@365ime.com"",""messageID"":""{sourceType:0}_77401169_1439108449178"",""messageType"":""text\/markup"",""type"":""chat""}" + Environment.NewLine + @"";
            _flow.ReplaceStringActivity265.SearchReplaceString = new Pair<string, string>[4];
            _flow.ReplaceStringActivity265.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity265.SearchReplaceString[0].Key = @"77401171";
            _flow.ReplaceStringActivity265.SearchReplaceString[0].Value = @"{DataSource.tb_global_table.LoginStudentUsername}";
            _flow.ReplaceStringActivity265.SearchReplaceString[1] = new Pair<string, string>();
            _flow.ReplaceStringActivity265.SearchReplaceString[1].Key = @"1439108449";
            _flow.ReplaceStringActivity265.SearchReplaceString[1].Value = @"{Step.OutputProperties.DbFetchData263.ResultTable.Row[1].timestamps}";
            _flow.ReplaceStringActivity265.SearchReplaceString[2] = new Pair<string, string>();
            _flow.ReplaceStringActivity265.SearchReplaceString[2].Key = @"77401169";
            _flow.ReplaceStringActivity265.SearchReplaceString[2].Value = @"{DataSource.tb_global_table.LoginTeacherUsername}";
            _flow.ReplaceStringActivity265.SearchReplaceString[3] = new Pair<string, string>();
            _flow.ReplaceStringActivity265.SearchReplaceString[3].Key = @"{sourceType:0}_77401169_1439108449178";
            _flow.ReplaceStringActivity265.SearchReplaceString[3].Value = @"{sourceType:0}_{DataSource.tb_global_table.LoginTeacherUsername}_{Step.OutputProperties.DbFetchData263.ResultTable.Row[1].timestamps}178";
            _flow.ReplaceStringActivity265.CaseSensitive = true;
            _flow.ReplaceStringActivity265.Comment = @"";
            _flow.ReplaceStringActivity265.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity265.Name = @"更换Json里头的信息";
            VTDPropertyInfoBase pi139 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter71 = new VTDObjectGetter(pi139);
            VTDPropertyInfoBase pi140 = new VTDPropertyInfoBase("SearchReplaceString[3].Value");
            VTDBaseSetter binding_setter69 = new VTDObjectSetter(pi140);
            binding_setter69 = new StringFormaterDecorator(binding_setter69,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir69 = new BindDirection(this.DataCursorActivity276,binding_getter71,binding_setter69,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity265.InDirections.Add(bind_dir69);
            VTDPropertyInfoBase pi141 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='timestamps'][1]");
            VTDBaseGetter binding_getter72 = new VTDXPathGetter(pi141,XmlTypeCode.String);
            binding_getter72 = new XPathGetterDecorator(binding_getter72,"{Array0}",1);
            VTDPropertyInfoBase pi142 = new VTDPropertyInfoBase("SearchReplaceString[3].Value");
            VTDBaseSetter binding_setter70 = new VTDObjectSetter(pi142);
            binding_setter70 = new StringFormaterDecorator(binding_setter70,"{Step.OutputProperties.DbFetchData263.ResultTable.Row[1].timestamps}");
            bind_dir70 = new BindDirection(_flow.DbFetchData263,binding_getter72,binding_setter70,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity265.InDirections.Add(bind_dir70);
            VTDPropertyInfoBase pi143 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter73 = new VTDObjectGetter(pi143);
            VTDPropertyInfoBase pi144 = new VTDPropertyInfoBase("SearchReplaceString[2].Value");
            VTDBaseSetter binding_setter71 = new VTDObjectSetter(pi144);
            binding_setter71 = new StringFormaterDecorator(binding_setter71,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir71 = new BindDirection(this.DataCursorActivity276,binding_getter73,binding_setter71,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity265.InDirections.Add(bind_dir71);
            VTDPropertyInfoBase pi145 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='timestamps'][1]");
            VTDBaseGetter binding_getter74 = new VTDXPathGetter(pi145,XmlTypeCode.String);
            binding_getter74 = new XPathGetterDecorator(binding_getter74,"{Array0}",1);
            VTDPropertyInfoBase pi146 = new VTDPropertyInfoBase("SearchReplaceString[1].Value");
            VTDBaseSetter binding_setter72 = new VTDObjectSetter(pi146);
            binding_setter72 = new StringFormaterDecorator(binding_setter72,"{Step.OutputProperties.DbFetchData263.ResultTable.Row[1].timestamps}");
            bind_dir72 = new BindDirection(_flow.DbFetchData263,binding_getter74,binding_setter72,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity265.InDirections.Add(bind_dir72);
            VTDPropertyInfoBase pi147 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter75 = new VTDObjectGetter(pi147);
            VTDPropertyInfoBase pi148 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter73 = new VTDObjectSetter(pi148);
            binding_setter73 = new StringFormaterDecorator(binding_setter73,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir73 = new BindDirection(this.DataCursorActivity276,binding_getter75,binding_setter73,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity265.InDirections.Add(bind_dir73);
            _flow.HTTPActivity73.TextBody = @"{Step.OutputProperties.ReplaceStringActivity265.Result}&chatID={DataSource.tb_global_table.LoginStudentUsername}@365ime.com&xsid={Step.OutputProperties.DbFetchData256.ResultTable.Row[1].ResponseXsid}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTHost}{DataSource.tb_global_table.SendHttpMessage}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用调用/Msg/SendHttpMessage";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi149 = new VTDPropertyInfoBase("JXTHost");
            VTDBaseGetter binding_getter76 = new VTDObjectGetter(pi149);
            VTDPropertyInfoBase pi150 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter74 = new VTDObjectSetter(pi150);
            binding_setter74 = new StringFormaterDecorator(binding_setter74,"{DataSource.tb_global_table.JXTHost}");
            bind_dir74 = new BindDirection(this.DataCursorActivity276,binding_getter76,binding_setter74,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir74);
            VTDPropertyInfoBase pi151 = new VTDPropertyInfoBase("SendHttpMessage");
            VTDBaseGetter binding_getter77 = new VTDObjectGetter(pi151);
            VTDPropertyInfoBase pi152 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter75 = new VTDObjectSetter(pi152);
            binding_setter75 = new StringFormaterDecorator(binding_setter75,"{DataSource.tb_global_table.SendHttpMessage}");
            bind_dir75 = new BindDirection(this.DataCursorActivity276,binding_getter77,binding_setter75,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir75);
            VTDPropertyInfoBase pi153 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter78 = new VTDObjectGetter(pi153);
            VTDPropertyInfoBase pi154 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter76 = new VTDObjectSetter(pi154);
            binding_setter76 = new StringFormaterDecorator(binding_setter76,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir76 = new BindDirection(this.DataCursorActivity276,binding_getter78,binding_setter76,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir76);
            VTDPropertyInfoBase pi155 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter79 = new VTDObjectGetter(pi155);
            VTDPropertyInfoBase pi156 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter77 = new VTDObjectSetter(pi156);
            binding_setter77 = new StringFormaterDecorator(binding_setter77,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir77 = new BindDirection(this.DataCursorActivity276,binding_getter79,binding_setter77,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir77);
            VTDPropertyInfoBase pi157 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter80 = new VTDObjectGetter(pi157);
            VTDPropertyInfoBase pi158 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter78 = new VTDObjectSetter(pi158);
            binding_setter78 = new StringFormaterDecorator(binding_setter78,"{Step.OutputProperties.ReplaceStringActivity265.Result}");
            bind_dir78 = new BindDirection(_flow.ReplaceStringActivity265,binding_getter80,binding_setter78,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir78);
            VTDPropertyInfoBase pi159 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter81 = new VTDObjectGetter(pi159);
            VTDPropertyInfoBase pi160 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter79 = new VTDObjectSetter(pi160);
            binding_setter79 = new StringFormaterDecorator(binding_setter79,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir79 = new BindDirection(this.DataCursorActivity276,binding_getter81,binding_setter79,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir79);
            VTDPropertyInfoBase pi161 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter82 = new VTDXPathGetter(pi161,XmlTypeCode.String);
            binding_getter82 = new XPathGetterDecorator(binding_getter82,"{Array0}",1);
            VTDPropertyInfoBase pi162 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter80 = new VTDObjectSetter(pi162);
            binding_setter80 = new StringFormaterDecorator(binding_setter80,"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].ResponseXsid}");
            bind_dir80 = new BindDirection(_flow.DbFetchData256,binding_getter82,binding_setter80,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir80);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/Msg/SendHttpMessage'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi163 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter83 = new VTDObjectGetter(pi163);
            VTDPropertyInfoBase pi164 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter81 = new VTDObjectSetter(pi164);
            binding_setter81 = new StringFormaterDecorator(binding_setter81,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir81 = new BindDirection(_flow.HTTPActivity73,binding_getter83,binding_setter81,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir81);
            VTDPropertyInfoBase pi165 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter84 = new VTDObjectGetter(pi165);
            VTDPropertyInfoBase pi166 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter82 = new VTDObjectSetter(pi166);
            bind_dir82 = new BindDirection(_flow.DbOpenConnection39,binding_getter84,binding_setter82,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir82);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity277.Comment = @"";
            this.DataCursorActivity277.IconPath = @"";
            VTDPropertyInfoBase pi167 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter85 = new VTDObjectGetter(pi167);
            VTDPropertyInfoBase pi168 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter83 = new VTDObjectSetter(pi168);
            binding_setter83 = new StringFormaterDecorator(binding_setter83,"{Step.DataFetchActivity269.OutTable}");
            bind_dir83 = new BindDirection(_flow.DataFetchActivity269,binding_getter85,binding_setter83,BindTargetType.ToInProperty);
            this.DataCursorActivity277.InDirections.Add(bind_dir83);
            this.DataCursorActivity277_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity277_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity277_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity277_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity277_Policy.StartCondition.Value = "";
            this.DataCursorActivity277_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity277_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity277_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity277_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity277_Policy.EndCondition.Value = "";
            this.DataCursorActivity277_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity277_Policy.StepSize = 1;
            this.DataCursorActivity277_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity277.Policy = this.DataCursorActivity277_Policy;
            this.DataCursorActivity277.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity277.ResetCursor;
            _flow.Sequence268.Comment = @"";
            _flow.Sequence268.IconPath = @"";
            _flow.Sequence268.Name = @"序列268";
            _flow.Sequence268.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence268.Activities.Add (_flow.CallQTPTest259);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData260);
            _flow.Sequence268.Activities.Add (_flow.ReplaceStringActivity261);
            _flow.Sequence268.Activities.Add (_flow.ReplaceStringActivity258);
            _flow.Sequence268.Activities.Add (_flow.ReplaceStringActivity266);
            _flow.Sequence268.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence268.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence268.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,chatID,message_content,message_to,message_time,message_from,message_messageID,message_messageType,message_type from tb_sendhttpmessage_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_sendhttpmessage_verification表中字段信息";
            VTDPropertyInfoBase pi169 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter86 = new VTDObjectGetter(pi169);
            VTDPropertyInfoBase pi170 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter84 = new VTDObjectSetter(pi170);
            binding_setter84 = new StringFormaterDecorator(binding_setter84,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir84 = new BindDirection(_flow.Loop56,binding_getter86,binding_setter84,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir84);
            VTDPropertyInfoBase pi171 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter87 = new VTDObjectGetter(pi171);
            VTDPropertyInfoBase pi172 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter85 = new VTDObjectSetter(pi172);
            bind_dir85 = new BindDirection(_flow.DbOpenConnection39,binding_getter87,binding_setter85,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir85);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><chatID /><message_content /><message_to /><message_time /><message_from /><message_messageID /><message_messageType /><message_type /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            _flow.CallQTPTest259.Comment = @"";
            _flow.CallQTPTest259.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest259.Name = @"Encryption.timestamps";
            _flow.CallQTPTest259.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ScriptPath}");
            _flow.CallQTPTest259.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ActionName}")) ? @"timestamps" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ActionName}");
            _flow.CallQTPTest259.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.Description}");
            _flow.CallQTPTest259.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.IsActionSelected}");
            _flow.CallQTPTest259.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ResultLocation}");
            _flow.CallQTPTest259.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.QCScriptPath}");
            _flow.DbFetchData260.QueryString = @"select timestamps from tb_global_table where TestCase = 1";
            _flow.DbFetchData260.Timeout = (int)30;
            _flow.DbFetchData260.Comment = @"";
            _flow.DbFetchData260.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData260.Name = @"获取全局表中时间戳";
            VTDPropertyInfoBase pi173 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter88 = new VTDObjectGetter(pi173);
            VTDPropertyInfoBase pi174 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter86 = new VTDObjectSetter(pi174);
            bind_dir86 = new BindDirection(_flow.DbOpenConnection39,binding_getter88,binding_setter86,BindTargetType.ToInProperty);
            _flow.DbFetchData260.InDirections.Add(bind_dir86);
            XmlDocument DbFetchData260_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData260_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData260_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><timestamps /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData260.ExpectedOutputProperties = DbFetchData260_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity261.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_time}";
            _flow.ReplaceStringActivity261.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity261.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity261.SearchReplaceString[0].Key = @"1439108449";
            _flow.ReplaceStringActivity261.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData260.ResultTable.Row[1].timestamps}";
            _flow.ReplaceStringActivity261.CaseSensitive = true;
            _flow.ReplaceStringActivity261.Comment = @"";
            _flow.ReplaceStringActivity261.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity261.Name = @"将时间戳更新至最新";
            VTDPropertyInfoBase pi175 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='message_time'][1]");
            VTDBaseGetter binding_getter89 = new VTDXPathGetter(pi175,XmlTypeCode.String);
            binding_getter89 = new XPathGetterDecorator(binding_getter89,"{Array0}",1);
            VTDPropertyInfoBase pi176 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter87 = new VTDObjectSetter(pi176);
            binding_setter87 = new StringFormaterDecorator(binding_setter87,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_time}");
            bind_dir87 = new BindDirection(_flow.DbFetchData57,binding_getter89,binding_setter87,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity261.InDirections.Add(bind_dir87);
            VTDPropertyInfoBase pi177 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='timestamps'][1]");
            VTDBaseGetter binding_getter90 = new VTDXPathGetter(pi177,XmlTypeCode.String);
            binding_getter90 = new XPathGetterDecorator(binding_getter90,"{Array0}",1);
            VTDPropertyInfoBase pi178 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter88 = new VTDObjectSetter(pi178);
            binding_setter88 = new StringFormaterDecorator(binding_setter88,"{Step.OutputProperties.DbFetchData260.ResultTable.Row[1].timestamps}");
            bind_dir88 = new BindDirection(_flow.DbFetchData260,binding_getter90,binding_setter88,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity261.InDirections.Add(bind_dir88);
            _flow.ReplaceStringActivity258.SourceString = @"message={""content"":""测试"",""to"":""77401171@365ime.com"",""time"":1439108449,""from"":""77401169@365ime.com"",""messageID"":""{sourceType:0}_77401169_1439108449178"",""messageType"":""text\/markup"",""type"":""chat""}" + Environment.NewLine + @"";
            _flow.ReplaceStringActivity258.SearchReplaceString = new Pair<string, string>[7];
            _flow.ReplaceStringActivity258.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity258.SearchReplaceString[0].Key = @"测试";
            _flow.ReplaceStringActivity258.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_content}";
            _flow.ReplaceStringActivity258.SearchReplaceString[1] = new Pair<string, string>();
            _flow.ReplaceStringActivity258.SearchReplaceString[1].Key = @"77401171@365ime.com";
            _flow.ReplaceStringActivity258.SearchReplaceString[1].Value = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_to}";
            _flow.ReplaceStringActivity258.SearchReplaceString[2] = new Pair<string, string>();
            _flow.ReplaceStringActivity258.SearchReplaceString[2].Key = @"1439108449";
            _flow.ReplaceStringActivity258.SearchReplaceString[2].Value = @"{Step.OutputProperties.ReplaceStringActivity261.Result}";
            _flow.ReplaceStringActivity258.SearchReplaceString[3] = new Pair<string, string>();
            _flow.ReplaceStringActivity258.SearchReplaceString[3].Key = @"77401169@365ime.com";
            _flow.ReplaceStringActivity258.SearchReplaceString[3].Value = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_from}";
            _flow.ReplaceStringActivity258.SearchReplaceString[4] = new Pair<string, string>();
            _flow.ReplaceStringActivity258.SearchReplaceString[4].Key = @"{sourceType:0}_77401169_1439108449178";
            _flow.ReplaceStringActivity258.SearchReplaceString[4].Value = @"{sourceType:0}_{DataSource.tb_global_table.LoginTeacherUsername}_{Step.OutputProperties.DbFetchData260.ResultTable.Row[1].timestamps}";
            _flow.ReplaceStringActivity258.SearchReplaceString[5] = new Pair<string, string>();
            _flow.ReplaceStringActivity258.SearchReplaceString[5].Key = @"text/markup";
            _flow.ReplaceStringActivity258.SearchReplaceString[5].Value = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_messageType}";
            _flow.ReplaceStringActivity258.SearchReplaceString[6] = new Pair<string, string>();
            _flow.ReplaceStringActivity258.SearchReplaceString[6].Key = @"chat";
            _flow.ReplaceStringActivity258.SearchReplaceString[6].Value = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_type}";
            _flow.ReplaceStringActivity258.CaseSensitive = true;
            _flow.ReplaceStringActivity258.Comment = @"";
            _flow.ReplaceStringActivity258.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity258.Name = @"更换Json里头的信息";
            VTDPropertyInfoBase pi179 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='message_type'][1]");
            VTDBaseGetter binding_getter91 = new VTDXPathGetter(pi179,XmlTypeCode.String);
            binding_getter91 = new XPathGetterDecorator(binding_getter91,"{Array0}",1);
            VTDPropertyInfoBase pi180 = new VTDPropertyInfoBase("SearchReplaceString[6].Value");
            VTDBaseSetter binding_setter89 = new VTDObjectSetter(pi180);
            binding_setter89 = new StringFormaterDecorator(binding_setter89,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_type}");
            bind_dir89 = new BindDirection(_flow.DbFetchData57,binding_getter91,binding_setter89,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir89);
            VTDPropertyInfoBase pi181 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='message_messageType'][1]");
            VTDBaseGetter binding_getter92 = new VTDXPathGetter(pi181,XmlTypeCode.String);
            binding_getter92 = new XPathGetterDecorator(binding_getter92,"{Array0}",1);
            VTDPropertyInfoBase pi182 = new VTDPropertyInfoBase("SearchReplaceString[5].Value");
            VTDBaseSetter binding_setter90 = new VTDObjectSetter(pi182);
            binding_setter90 = new StringFormaterDecorator(binding_setter90,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_messageType}");
            bind_dir90 = new BindDirection(_flow.DbFetchData57,binding_getter92,binding_setter90,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir90);
            VTDPropertyInfoBase pi183 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter93 = new VTDObjectGetter(pi183);
            VTDPropertyInfoBase pi184 = new VTDPropertyInfoBase("SearchReplaceString[4].Value");
            VTDBaseSetter binding_setter91 = new VTDObjectSetter(pi184);
            binding_setter91 = new StringFormaterDecorator(binding_setter91,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir91 = new BindDirection(this.DataCursorActivity277,binding_getter93,binding_setter91,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir91);
            VTDPropertyInfoBase pi185 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='timestamps'][1]");
            VTDBaseGetter binding_getter94 = new VTDXPathGetter(pi185,XmlTypeCode.String);
            binding_getter94 = new XPathGetterDecorator(binding_getter94,"{Array0}",1);
            VTDPropertyInfoBase pi186 = new VTDPropertyInfoBase("SearchReplaceString[4].Value");
            VTDBaseSetter binding_setter92 = new VTDObjectSetter(pi186);
            binding_setter92 = new StringFormaterDecorator(binding_setter92,"{Step.OutputProperties.DbFetchData260.ResultTable.Row[1].timestamps}");
            bind_dir92 = new BindDirection(_flow.DbFetchData260,binding_getter94,binding_setter92,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir92);
            VTDPropertyInfoBase pi187 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='message_from'][1]");
            VTDBaseGetter binding_getter95 = new VTDXPathGetter(pi187,XmlTypeCode.String);
            binding_getter95 = new XPathGetterDecorator(binding_getter95,"{Array0}",1);
            VTDPropertyInfoBase pi188 = new VTDPropertyInfoBase("SearchReplaceString[3].Value");
            VTDBaseSetter binding_setter93 = new VTDObjectSetter(pi188);
            binding_setter93 = new StringFormaterDecorator(binding_setter93,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_from}");
            bind_dir93 = new BindDirection(_flow.DbFetchData57,binding_getter95,binding_setter93,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir93);
            VTDPropertyInfoBase pi189 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter96 = new VTDObjectGetter(pi189);
            VTDPropertyInfoBase pi190 = new VTDPropertyInfoBase("SearchReplaceString[2].Value");
            VTDBaseSetter binding_setter94 = new VTDObjectSetter(pi190);
            binding_setter94 = new StringFormaterDecorator(binding_setter94,"{Step.OutputProperties.ReplaceStringActivity261.Result}");
            bind_dir94 = new BindDirection(_flow.ReplaceStringActivity261,binding_getter96,binding_setter94,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir94);
            VTDPropertyInfoBase pi191 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='message_to'][1]");
            VTDBaseGetter binding_getter97 = new VTDXPathGetter(pi191,XmlTypeCode.String);
            binding_getter97 = new XPathGetterDecorator(binding_getter97,"{Array0}",1);
            VTDPropertyInfoBase pi192 = new VTDPropertyInfoBase("SearchReplaceString[1].Value");
            VTDBaseSetter binding_setter95 = new VTDObjectSetter(pi192);
            binding_setter95 = new StringFormaterDecorator(binding_setter95,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_to}");
            bind_dir95 = new BindDirection(_flow.DbFetchData57,binding_getter97,binding_setter95,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir95);
            VTDPropertyInfoBase pi193 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='message_content'][1]");
            VTDBaseGetter binding_getter98 = new VTDXPathGetter(pi193,XmlTypeCode.String);
            binding_getter98 = new XPathGetterDecorator(binding_getter98,"{Array0}",1);
            VTDPropertyInfoBase pi194 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter96 = new VTDObjectSetter(pi194);
            binding_setter96 = new StringFormaterDecorator(binding_setter96,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].message_content}");
            bind_dir96 = new BindDirection(_flow.DbFetchData57,binding_getter98,binding_setter96,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir96);
            _flow.ReplaceStringActivity266.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity266.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity266.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity266.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity266.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity266.CaseSensitive = true;
            _flow.ReplaceStringActivity266.Comment = @"";
            _flow.ReplaceStringActivity266.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity266.Name = @"将xsid更新至最新";
            VTDPropertyInfoBase pi195 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter99 = new VTDXPathGetter(pi195,XmlTypeCode.String);
            binding_getter99 = new XPathGetterDecorator(binding_getter99,"{Array0}",1);
            VTDPropertyInfoBase pi196 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter97 = new VTDObjectSetter(pi196);
            binding_setter97 = new StringFormaterDecorator(binding_setter97,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir97 = new BindDirection(_flow.DbFetchData57,binding_getter99,binding_setter97,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity266.InDirections.Add(bind_dir97);
            VTDPropertyInfoBase pi197 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter100 = new VTDXPathGetter(pi197,XmlTypeCode.String);
            binding_getter100 = new XPathGetterDecorator(binding_getter100,"{Array0}",1);
            VTDPropertyInfoBase pi198 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter98 = new VTDObjectSetter(pi198);
            binding_setter98 = new StringFormaterDecorator(binding_setter98,"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].ResponseXsid}");
            bind_dir98 = new BindDirection(_flow.DbFetchData256,binding_getter100,binding_setter98,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity266.InDirections.Add(bind_dir98);
            _flow.HTTPActivity59.TextBody = @"{Step.OutputProperties.ReplaceStringActivity258.Result}&chatID={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].chatID}&xsid={Step.OutputProperties.ReplaceStringActivity266.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTHost}{DataSource.tb_global_table.SendHttpMessage}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/Msg/SendHttpMessage";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi199 = new VTDPropertyInfoBase("JXTHost");
            VTDBaseGetter binding_getter101 = new VTDObjectGetter(pi199);
            VTDPropertyInfoBase pi200 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter99 = new VTDObjectSetter(pi200);
            binding_setter99 = new StringFormaterDecorator(binding_setter99,"{DataSource.tb_global_table.JXTHost}");
            bind_dir99 = new BindDirection(this.DataCursorActivity277,binding_getter101,binding_setter99,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir99);
            VTDPropertyInfoBase pi201 = new VTDPropertyInfoBase("SendHttpMessage");
            VTDBaseGetter binding_getter102 = new VTDObjectGetter(pi201);
            VTDPropertyInfoBase pi202 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter100 = new VTDObjectSetter(pi202);
            binding_setter100 = new StringFormaterDecorator(binding_setter100,"{DataSource.tb_global_table.SendHttpMessage}");
            bind_dir100 = new BindDirection(this.DataCursorActivity277,binding_getter102,binding_setter100,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir100);
            VTDPropertyInfoBase pi203 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter103 = new VTDObjectGetter(pi203);
            VTDPropertyInfoBase pi204 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter101 = new VTDObjectSetter(pi204);
            binding_setter101 = new StringFormaterDecorator(binding_setter101,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir101 = new BindDirection(this.DataCursorActivity277,binding_getter103,binding_setter101,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir101);
            VTDPropertyInfoBase pi205 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter104 = new VTDObjectGetter(pi205);
            VTDPropertyInfoBase pi206 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter102 = new VTDObjectSetter(pi206);
            binding_setter102 = new StringFormaterDecorator(binding_setter102,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir102 = new BindDirection(this.DataCursorActivity277,binding_getter104,binding_setter102,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir102);
            VTDPropertyInfoBase pi207 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter105 = new VTDObjectGetter(pi207);
            VTDPropertyInfoBase pi208 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter103 = new VTDObjectSetter(pi208);
            binding_setter103 = new StringFormaterDecorator(binding_setter103,"{Step.OutputProperties.ReplaceStringActivity258.Result}");
            bind_dir103 = new BindDirection(_flow.ReplaceStringActivity258,binding_getter105,binding_setter103,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir103);
            VTDPropertyInfoBase pi209 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='chatID'][1]");
            VTDBaseGetter binding_getter106 = new VTDXPathGetter(pi209,XmlTypeCode.String);
            binding_getter106 = new XPathGetterDecorator(binding_getter106,"{Array0}",1);
            VTDPropertyInfoBase pi210 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter104 = new VTDObjectSetter(pi210);
            binding_setter104 = new StringFormaterDecorator(binding_setter104,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].chatID}");
            bind_dir104 = new BindDirection(_flow.DbFetchData57,binding_getter106,binding_setter104,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir104);
            VTDPropertyInfoBase pi211 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter107 = new VTDObjectGetter(pi211);
            VTDPropertyInfoBase pi212 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter105 = new VTDObjectSetter(pi212);
            binding_setter105 = new StringFormaterDecorator(binding_setter105,"{Step.OutputProperties.ReplaceStringActivity266.Result}");
            bind_dir105 = new BindDirection(_flow.ReplaceStringActivity266,binding_getter107,binding_setter105,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir105);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi213 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter108 = new VTDObjectGetter(pi213);
            VTDPropertyInfoBase pi214 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter106 = new VTDObjectSetter(pi214);
            binding_setter106 = new StringFormaterDecorator(binding_setter106,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir106 = new BindDirection(_flow.HTTPActivity59,binding_getter108,binding_setter106,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir106);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_sendhttpmessage_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi215 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter109 = new VTDObjectGetter(pi215);
            VTDPropertyInfoBase pi216 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter107 = new VTDObjectSetter(pi216);
            binding_setter107 = new StringFormaterDecorator(binding_setter107,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir107 = new BindDirection(_flow.HTTPActivity59,binding_getter109,binding_setter107,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir107);
            VTDPropertyInfoBase pi217 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter110 = new VTDObjectGetter(pi217);
            VTDPropertyInfoBase pi218 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter108 = new VTDObjectSetter(pi218);
            binding_setter108 = new StringFormaterDecorator(binding_setter108,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir108 = new BindDirection(_flow.Loop56,binding_getter110,binding_setter108,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir108);
            VTDPropertyInfoBase pi219 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter111 = new VTDObjectGetter(pi219);
            VTDPropertyInfoBase pi220 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter109 = new VTDObjectSetter(pi220);
            bind_dir109 = new BindDirection(_flow.DbOpenConnection39,binding_getter111,binding_setter109,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir109);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_sendhttpmessage_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi221 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter112 = new VTDJsonGetter(pi221);
            VTDPropertyInfoBase pi222 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter110 = new VTDObjectSetter(pi222);
            binding_setter110 = new StringFormaterDecorator(binding_setter110,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir110 = new BindDirection(_flow.StringToJsonActivity60,binding_getter112,binding_setter110,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir110);
            VTDPropertyInfoBase pi223 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter113 = new VTDObjectGetter(pi223);
            VTDPropertyInfoBase pi224 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter111 = new VTDObjectSetter(pi224);
            binding_setter111 = new StringFormaterDecorator(binding_setter111,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir111 = new BindDirection(_flow.Loop56,binding_getter113,binding_setter111,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir111);
            VTDPropertyInfoBase pi225 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter114 = new VTDObjectGetter(pi225);
            VTDPropertyInfoBase pi226 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter112 = new VTDObjectSetter(pi226);
            bind_dir112 = new BindDirection(_flow.DbOpenConnection39,binding_getter114,binding_setter112,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir112);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_sendhttpmessage_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi227 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter115 = new VTDObjectGetter(pi227);
            VTDPropertyInfoBase pi228 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter113 = new VTDObjectSetter(pi228);
            binding_setter113 = new StringFormaterDecorator(binding_setter113,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir113 = new BindDirection(_flow.Loop56,binding_getter115,binding_setter113,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir113);
            VTDPropertyInfoBase pi229 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter116 = new VTDObjectGetter(pi229);
            VTDPropertyInfoBase pi230 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter114 = new VTDObjectSetter(pi230);
            bind_dir114 = new BindDirection(_flow.DbOpenConnection39,binding_getter116,binding_setter114,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir114);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_sendhttpmessage_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi231 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter117 = new VTDObjectGetter(pi231);
            VTDPropertyInfoBase pi232 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter115 = new VTDObjectSetter(pi232);
            binding_setter115 = new StringFormaterDecorator(binding_setter115,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir115 = new BindDirection(_flow.Loop56,binding_getter117,binding_setter115,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir115);
            VTDPropertyInfoBase pi233 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter118 = new VTDObjectGetter(pi233);
            VTDPropertyInfoBase pi234 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter116 = new VTDObjectSetter(pi234);
            bind_dir116 = new BindDirection(_flow.DbOpenConnection39,binding_getter118,binding_setter116,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir116);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi235 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter119 = new VTDXPathGetter(pi235,XmlTypeCode.String);
            binding_getter119 = new XPathGetterDecorator(binding_getter119,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter119),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi236 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter120 = new VTDXPathGetter(pi236,XmlTypeCode.String);
            binding_getter120 = new XPathGetterDecorator(binding_getter120,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter120),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_sendhttpmessage_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi237 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter121 = new VTDObjectGetter(pi237);
            VTDPropertyInfoBase pi238 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter117 = new VTDObjectSetter(pi238);
            binding_setter117 = new StringFormaterDecorator(binding_setter117,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir117 = new BindDirection(_flow.Loop56,binding_getter121,binding_setter117,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir117);
            VTDPropertyInfoBase pi239 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter122 = new VTDObjectGetter(pi239);
            VTDPropertyInfoBase pi240 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter118 = new VTDObjectSetter(pi240);
            bind_dir118 = new BindDirection(_flow.DbOpenConnection39,binding_getter122,binding_setter118,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir118);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_sendhttpmessage_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi241 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter123 = new VTDObjectGetter(pi241);
            VTDPropertyInfoBase pi242 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter119 = new VTDObjectSetter(pi242);
            binding_setter119 = new StringFormaterDecorator(binding_setter119,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir119 = new BindDirection(_flow.Loop56,binding_getter123,binding_setter119,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir119);
            VTDPropertyInfoBase pi243 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter124 = new VTDObjectGetter(pi243);
            VTDPropertyInfoBase pi244 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter120 = new VTDObjectSetter(pi244);
            bind_dir120 = new BindDirection(_flow.DbOpenConnection39,binding_getter124,binding_setter120,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir120);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    