/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_GetUnReadMessage_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir314 = null;
        public BindDirection bind_dir315 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir316 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir317 = null;
        public BindDirection bind_dir318 = null;
        public BindDirection bind_dir319 = null;
        public BindDirection bind_dir320 = null;
        public BindDirection bind_dir321 = null;
        public BindDirection bind_dir322 = null;
        public BindDirection bind_dir323 = null;
        public BindDirection bind_dir324 = null;
        public BindDirection bind_dir325 = null;
        public BindDirection bind_dir326 = null;
        public BindDirection bind_dir327 = null;
        public BindDirection bind_dir328 = null;
        public BindDirection bind_dir329 = null;
        public BindDirection bind_dir330 = null;
        public BindDirection bind_dir331 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity265 = null;
        public BindDirection bind_dir332 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity265_Policy = null;
        public BindDirection bind_dir333 = null;
        public BindDirection bind_dir334 = null;
        public BindDirection bind_dir335 = null;
        public BindDirection bind_dir336 = null;
        public BindDirection bind_dir337 = null;
        public BindDirection bind_dir338 = null;
        public BindDirection bind_dir339 = null;
        public BindDirection bind_dir340 = null;
        public BindDirection bind_dir341 = null;
        public BindDirection bind_dir342 = null;
        public BindDirection bind_dir343 = null;
        public BindDirection bind_dir344 = null;
        public BindDirection bind_dir345 = null;
        public BindDirection bind_dir346 = null;
        public BindDirection bind_dir347 = null;
        public BindDirection bind_dir348 = null;
        public BindDirection bind_dir349 = null;
        public BindDirection bind_dir350 = null;
        public BindDirection bind_dir351 = null;
        public BindDirection bind_dir352 = null;
        public BindDirection bind_dir353 = null;
        public BindDirection bind_dir354 = null;
        public BindDirection bind_dir355 = null;
        public BindDirection bind_dir356 = null;
        public BindDirection bind_dir357 = null;
        public BindDirection bind_dir358 = null;
        public BindDirection bind_dir359 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity260 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity260");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity262 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity262");
            _flow.DataExporterCloseActivity263 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity263");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity261 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity261");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence258 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence258");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData139 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData139");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.DbFetchData256 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData256");
            _flow.Loop140 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop140Input>(_context,"Loop140",LoopType.For);
            _flow.HTTPActivity156 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity156");
            _flow.StringToJsonActivity254 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity254");
            _flow.DbFetchData255 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData255");
            _flow.DbFetchData157 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData157");
            this.DataCursorActivity265 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity265");
            this.DataCursorActivity265_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence259 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence259");
            _flow.DbFetchData141 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData141");
            _flow.ReplaceStringActivity248 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity248");
            _flow.ReplaceStringActivity257 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity257");
            _flow.HTTPActivity142 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity142");
            _flow.StringToJsonActivity143 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity143");
            _flow.DbFetchData144 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData144");
            _flow.DbFetchData145 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData145");
            _flow.DbFetchData146 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData146");
            _flow.DbFetchData147 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData147");
            _flow.IfElse148 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse148Input>(_context,"IfElse148");
            _flow.IfElseBranch149 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch149");
            _flow.IfElseBranch151 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch151");
            _flow.DbFetchData150 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData150");
            _flow.DbFetchData152 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData152");
            _flow.DataFetchActivity260.Comment = @"";
            _flow.DataFetchActivity260.IconPath = @"";
            _flow.DataFetchActivity260.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity260.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity260_QueryParameters_Document = new XmlDocument();
            DataFetchActivity260_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity260Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity260_QueryParameters_Document.LoadXml(xmlDataFetchActivity260Params);
            _flow.DataFetchActivity260.QueryParameters = DataFetchActivity260_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity260);
            this.Activities.Add (_flow.DataFetchActivity260);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity264);
            _flow.Loop2.Activities.Add (_flow.Sequence258);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity262.Comment = @"";
            _flow.DataExporterActivity262.IconPath = @"";
            VTDPropertyInfoBase pi641 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter328 = new VTDObjectGetter(pi641);
            VTDPropertyInfoBase pi642 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter314 = new VTDObjectSetter(pi642);
            binding_setter314 = new StringFormaterDecorator(binding_setter314,"{Step.DataFetchActivity260.OutTable}");
            bind_dir314 = new BindDirection(_flow.DataFetchActivity260,binding_getter328,binding_setter314,BindTargetType.ToInProperty);
            _flow.DataExporterActivity262.InDirections.Add(bind_dir314);
            this.Activities.Add (_flow.DataExporterActivity262);
            _flow.DataExporterCloseActivity263.Comment = @"";
            _flow.DataExporterCloseActivity263.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity263);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity261.Comment = @"";
            _flow.DataDisconnectActivity261.IconPath = @"";
            VTDPropertyInfoBase pi643 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter329 = new VTDObjectGetter(pi643);
            VTDPropertyInfoBase pi644 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter315 = new VTDObjectSetter(pi644);
            binding_setter315 = new StringFormaterDecorator(binding_setter315,"{Step.DataFetchActivity260.OutTable}");
            bind_dir315 = new BindDirection(_flow.DataFetchActivity260,binding_getter329,binding_setter315,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity261.InDirections.Add(bind_dir315);
            this.Activities.Add (_flow.DataDisconnectActivity261);
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi645 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter330 = new VTDObjectGetter(pi645);
            VTDPropertyInfoBase pi646 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter316 = new VTDObjectSetter(pi646);
            binding_setter316 = new StringFormaterDecorator(binding_setter316,"{Step.DataFetchActivity260.OutTable}");
            bind_dir316 = new BindDirection(_flow.DataFetchActivity260,binding_getter330,binding_setter316,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir316);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence258.Comment = @"";
            _flow.Sequence258.IconPath = @"";
            _flow.Sequence258.Name = @"序列258";
            _flow.Sequence258.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData139);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData256);
            _flow.Sequence258.Activities.Add (_flow.Loop140);
            _flow.Sequence258.Activities.Add (_flow.HTTPActivity156);
            _flow.Sequence258.Activities.Add (_flow.StringToJsonActivity254);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData255);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData157);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData139.QueryString = @"select count(*) as 'Row' from tb_getunreadmessage_verification";
            _flow.DbFetchData139.Timeout = (int)30;
            _flow.DbFetchData139.Comment = @"";
            _flow.DbFetchData139.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData139.Name = @"获取到tb_GetUnReadMessage_verification表有效行数";
            VTDPropertyInfoBase pi647 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter331 = new VTDObjectGetter(pi647);
            VTDPropertyInfoBase pi648 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter317 = new VTDObjectSetter(pi648);
            bind_dir317 = new BindDirection(_flow.DbOpenConnection39,binding_getter331,binding_setter317,BindTargetType.ToInProperty);
            _flow.DbFetchData139.InDirections.Add(bind_dir317);
            XmlDocument DbFetchData139_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData139_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData139_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData139.ExpectedOutputProperties = DbFetchData139_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select StudentsXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中StudentsXsid值";
            VTDPropertyInfoBase pi649 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter332 = new VTDObjectGetter(pi649);
            VTDPropertyInfoBase pi650 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter318 = new VTDObjectSetter(pi650);
            bind_dir318 = new BindDirection(_flow.DbOpenConnection39,binding_getter332,binding_setter318,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir318);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><StudentsXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.DbFetchData256.QueryString = @"select LoginStudentUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData256.Timeout = (int)30;
            _flow.DbFetchData256.Comment = @"";
            _flow.DbFetchData256.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData256.Name = @"查询tb_global_table表中LoginStudentUsername值";
            VTDPropertyInfoBase pi651 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter333 = new VTDObjectGetter(pi651);
            VTDPropertyInfoBase pi652 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter319 = new VTDObjectSetter(pi652);
            bind_dir319 = new BindDirection(_flow.DbOpenConnection39,binding_getter333,binding_setter319,BindTargetType.ToInProperty);
            _flow.DbFetchData256.InDirections.Add(bind_dir319);
            XmlDocument DbFetchData256_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData256_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData256_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginStudentUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData256.ExpectedOutputProperties = DbFetchData256_ExpectedOutputProperties_Document;
            _flow.Loop140.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop140.NumberOfIterations = (int)1;
            _flow.Loop140.Comment = @"";
            _flow.Loop140.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop140.Name = @"循环执行tb_GetUnReadMessage_verification中的测试用例";
            VTDPropertyInfoBase pi653 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter334 = new VTDXPathGetter(pi653,XmlTypeCode.Long);
            binding_getter334 = new XPathGetterDecorator(binding_getter334,"{Array0}",1);
            VTDPropertyInfoBase pi654 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter320 = new VTDObjectSetter(pi654);
            bind_dir320 = new BindDirection(_flow.DbFetchData139,binding_getter334,binding_setter320,BindTargetType.ToInProperty);
            _flow.Loop140.InDirections.Add(bind_dir320);
            _flow.Loop140.Activities.Add (this.DataCursorActivity265);
            _flow.Loop140.Activities.Add (_flow.Sequence259);
            _flow.HTTPActivity156.TextBody = @"xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].StudentsXsid}&jid={Step.OutputProperties.DbFetchData256.ResultTable.Row[1].LoginStudentUsername}@365ime.com";
            _flow.HTTPActivity156.TextXmlBody = @"";
            _flow.HTTPActivity156.FileBody = @"";
            _flow.HTTPActivity156.PostBody = @"";
            _flow.HTTPActivity156.Url = @"{DataSource.tb_global_table.msgHost}{DataSource.tb_global_table.GetUnReadMessage}";
            _flow.HTTPActivity156.HttpMethod = @"POST";
            _flow.HTTPActivity156.HttpVersion = @"1.1";
            _flow.HTTPActivity156.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity156.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity156.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity156.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity156.Comment = @"";
            _flow.HTTPActivity156.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity156.RequestBodyType = @"Text";
            _flow.HTTPActivity156.ResponseType = @"Text";
            _flow.HTTPActivity156.Name = @"调用/iq/GetUnReadMessage.php";
            _flow.HTTPActivity156.Proxy.Server = @"";
            _flow.HTTPActivity156.Proxy.Username = @"";
            _flow.HTTPActivity156.Proxy.Password = @"";
            _flow.HTTPActivity156.Authentication.Username = @"";
            _flow.HTTPActivity156.Authentication.Password = @"";
            _flow.HTTPActivity156.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity156.Timeout = (int)100000;
            _flow.HTTPActivity156.ClientCertificate.Password = @"";
            _flow.HTTPActivity156.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity156.UseClientCertificate = false;
            _flow.HTTPActivity156.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity156.AllowRedirections = true;
            _flow.HTTPActivity156.ReuseCookies = false;
            _flow.HTTPActivity156.ExpectServerError = false;
            XmlDocument HTTPActivity156_XMLBody_Document = new XmlDocument();
            HTTPActivity156_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity156_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity156.XMLBody = HTTPActivity156_XMLBody_Document;
            XmlDocument HTTPActivity156_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity156_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity156_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity156.RequestMultipartInfoXml = HTTPActivity156_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity156.Multipart=false;
            VTDPropertyInfoBase pi655 = new VTDPropertyInfoBase("msgHost");
            VTDBaseGetter binding_getter335 = new VTDObjectGetter(pi655);
            VTDPropertyInfoBase pi656 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter321 = new VTDObjectSetter(pi656);
            binding_setter321 = new StringFormaterDecorator(binding_setter321,"{DataSource.tb_global_table.msgHost}");
            bind_dir321 = new BindDirection(this.DataCursorActivity264,binding_getter335,binding_setter321,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir321);
            VTDPropertyInfoBase pi657 = new VTDPropertyInfoBase("GetUnReadMessage");
            VTDBaseGetter binding_getter336 = new VTDObjectGetter(pi657);
            VTDPropertyInfoBase pi658 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter322 = new VTDObjectSetter(pi658);
            binding_setter322 = new StringFormaterDecorator(binding_setter322,"{DataSource.tb_global_table.GetUnReadMessage}");
            bind_dir322 = new BindDirection(this.DataCursorActivity264,binding_getter336,binding_setter322,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir322);
            VTDPropertyInfoBase pi659 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter337 = new VTDObjectGetter(pi659);
            VTDPropertyInfoBase pi660 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter323 = new VTDObjectSetter(pi660);
            binding_setter323 = new StringFormaterDecorator(binding_setter323,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir323 = new BindDirection(this.DataCursorActivity264,binding_getter337,binding_setter323,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir323);
            VTDPropertyInfoBase pi661 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter338 = new VTDObjectGetter(pi661);
            VTDPropertyInfoBase pi662 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter324 = new VTDObjectSetter(pi662);
            binding_setter324 = new StringFormaterDecorator(binding_setter324,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir324 = new BindDirection(this.DataCursorActivity264,binding_getter338,binding_setter324,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir324);
            VTDPropertyInfoBase pi663 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='StudentsXsid'][1]");
            VTDBaseGetter binding_getter339 = new VTDXPathGetter(pi663,XmlTypeCode.String);
            binding_getter339 = new XPathGetterDecorator(binding_getter339,"{Array0}",1);
            VTDPropertyInfoBase pi664 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter325 = new VTDObjectSetter(pi664);
            binding_setter325 = new StringFormaterDecorator(binding_setter325,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].StudentsXsid}");
            bind_dir325 = new BindDirection(_flow.DbFetchData247,binding_getter339,binding_setter325,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir325);
            VTDPropertyInfoBase pi665 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='LoginStudentUsername'][1]");
            VTDBaseGetter binding_getter340 = new VTDXPathGetter(pi665,XmlTypeCode.String);
            binding_getter340 = new XPathGetterDecorator(binding_getter340,"{Array0}",1);
            VTDPropertyInfoBase pi666 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter326 = new VTDObjectSetter(pi666);
            binding_setter326 = new StringFormaterDecorator(binding_setter326,"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].LoginStudentUsername}");
            bind_dir326 = new BindDirection(_flow.DbFetchData256,binding_getter340,binding_setter326,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir326);
            XmlDocument HTTPActivity156_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity156_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity156_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity156.ExpectedResponseXmlBody = HTTPActivity156_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity156_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity156_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity156_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity156.ExpectedResponseJsonBody = HTTPActivity156_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity156_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity156_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity156_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity156.ExpectedOutputProperties = HTTPActivity156_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity254.InputString = @"{Step.OutputProperties.HTTPActivity156.ResponseBody}";
            _flow.StringToJsonActivity254.Comment = @"";
            _flow.StringToJsonActivity254.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity254.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi667 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter341 = new VTDObjectGetter(pi667);
            VTDPropertyInfoBase pi668 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter327 = new VTDObjectSetter(pi668);
            binding_setter327 = new StringFormaterDecorator(binding_setter327,"{Step.OutputProperties.HTTPActivity156.ResponseBody}");
            bind_dir327 = new BindDirection(_flow.HTTPActivity156,binding_getter341,binding_setter327,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity254.InDirections.Add(bind_dir327);
            _flow.DbFetchData255.QueryString = @"update tb_global_table set xmid = '{Step.JsonContent.StringToJsonActivity254.data.Object[1].xmid}' where TestCase = 1";
            _flow.DbFetchData255.Timeout = (int)30;
            _flow.DbFetchData255.Comment = @"";
            _flow.DbFetchData255.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData255.Name = @"将获取到的xmid赋值到全局表中";
            VTDPropertyInfoBase pi669 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='data'][1]/*[local-name(.)='Object'][{Array0}]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter342 = new VTDJsonGetter(pi669);
            binding_getter342 = new XPathGetterDecorator(binding_getter342,"{Array0}",1);
            VTDPropertyInfoBase pi670 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter328 = new VTDObjectSetter(pi670);
            binding_setter328 = new StringFormaterDecorator(binding_setter328,"{Step.JsonContent.StringToJsonActivity254.data.Object[1].xmid}");
            bind_dir328 = new BindDirection(_flow.StringToJsonActivity254,binding_getter342,binding_setter328,BindTargetType.ToInProperty);
            _flow.DbFetchData255.InDirections.Add(bind_dir328);
            VTDPropertyInfoBase pi671 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter343 = new VTDObjectGetter(pi671);
            VTDPropertyInfoBase pi672 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter329 = new VTDObjectSetter(pi672);
            bind_dir329 = new BindDirection(_flow.DbOpenConnection39,binding_getter343,binding_setter329,BindTargetType.ToInProperty);
            _flow.DbFetchData255.InDirections.Add(bind_dir329);
            XmlDocument DbFetchData255_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData255_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData255_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData255.ExpectedOutputProperties = DbFetchData255_ExpectedOutputProperties_Document;
            _flow.DbFetchData157.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity156.ResponseBody}' where InterfaceName = '/iq/GetUnReadMessage.php'";
            _flow.DbFetchData157.Timeout = (int)30;
            _flow.DbFetchData157.Comment = @"";
            _flow.DbFetchData157.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData157.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi673 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter344 = new VTDObjectGetter(pi673);
            VTDPropertyInfoBase pi674 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter330 = new VTDObjectSetter(pi674);
            binding_setter330 = new StringFormaterDecorator(binding_setter330,"{Step.OutputProperties.HTTPActivity156.ResponseBody}");
            bind_dir330 = new BindDirection(_flow.HTTPActivity156,binding_getter344,binding_setter330,BindTargetType.ToInProperty);
            _flow.DbFetchData157.InDirections.Add(bind_dir330);
            VTDPropertyInfoBase pi675 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter345 = new VTDObjectGetter(pi675);
            VTDPropertyInfoBase pi676 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter331 = new VTDObjectSetter(pi676);
            bind_dir331 = new BindDirection(_flow.DbOpenConnection39,binding_getter345,binding_setter331,BindTargetType.ToInProperty);
            _flow.DbFetchData157.InDirections.Add(bind_dir331);
            XmlDocument DbFetchData157_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData157_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData157_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData157.ExpectedOutputProperties = DbFetchData157_ExpectedOutputProperties_Document;
            this.DataCursorActivity265.Comment = @"";
            this.DataCursorActivity265.IconPath = @"";
            VTDPropertyInfoBase pi677 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter346 = new VTDObjectGetter(pi677);
            VTDPropertyInfoBase pi678 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter332 = new VTDObjectSetter(pi678);
            binding_setter332 = new StringFormaterDecorator(binding_setter332,"{Step.DataFetchActivity260.OutTable}");
            bind_dir332 = new BindDirection(_flow.DataFetchActivity260,binding_getter346,binding_setter332,BindTargetType.ToInProperty);
            this.DataCursorActivity265.InDirections.Add(bind_dir332);
            this.DataCursorActivity265_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity265_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.StartCondition.Value = "";
            this.DataCursorActivity265_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity265_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.EndCondition.Value = "";
            this.DataCursorActivity265_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity265_Policy.StepSize = 1;
            this.DataCursorActivity265_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity265.Policy = this.DataCursorActivity265_Policy;
            this.DataCursorActivity265.ReportStepData = false;
            _flow.Loop140.BeforeExecuteStepEvent += this.DataCursorActivity265.ResetCursor;
            _flow.Sequence259.Comment = @"";
            _flow.Sequence259.IconPath = @"";
            _flow.Sequence259.Name = @"序列259";
            _flow.Sequence259.Activities.Add (_flow.DbFetchData141);
            _flow.Sequence259.Activities.Add (_flow.ReplaceStringActivity248);
            _flow.Sequence259.Activities.Add (_flow.ReplaceStringActivity257);
            _flow.Sequence259.Activities.Add (_flow.HTTPActivity142);
            _flow.Sequence259.Activities.Add (_flow.StringToJsonActivity143);
            _flow.Sequence259.Activities.Add (_flow.DbFetchData144);
            _flow.Sequence259.Activities.Add (_flow.DbFetchData145);
            _flow.Sequence259.Activities.Add (_flow.DbFetchData146);
            _flow.Sequence259.Activities.Add (_flow.DbFetchData147);
            _flow.Sequence259.Activities.Add (_flow.IfElse148);
            _flow.DbFetchData141.QueryString = @"select xsid,Jid,token from tb_getunreadmessage_verification where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData141.Timeout = (int)30;
            _flow.DbFetchData141.Comment = @"";
            _flow.DbFetchData141.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData141.Name = @"查询tb_GetUnReadMessage_verification表中数据";
            VTDPropertyInfoBase pi679 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter347 = new VTDObjectGetter(pi679);
            VTDPropertyInfoBase pi680 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter333 = new VTDObjectSetter(pi680);
            binding_setter333 = new StringFormaterDecorator(binding_setter333,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir333 = new BindDirection(_flow.Loop140,binding_getter347,binding_setter333,BindTargetType.ToInProperty);
            _flow.DbFetchData141.InDirections.Add(bind_dir333);
            VTDPropertyInfoBase pi681 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter348 = new VTDObjectGetter(pi681);
            VTDPropertyInfoBase pi682 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter334 = new VTDObjectSetter(pi682);
            bind_dir334 = new BindDirection(_flow.DbOpenConnection39,binding_getter348,binding_setter334,BindTargetType.ToInProperty);
            _flow.DbFetchData141.InDirections.Add(bind_dir334);
            XmlDocument DbFetchData141_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData141_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData141_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><Jid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData141.ExpectedOutputProperties = DbFetchData141_ExpectedOutputProperties_Document;
            set_DbFetchData141_checkpoints(_flow.DbFetchData141);
            _flow.ReplaceStringActivity248.SourceString = @"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity248.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity248.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].StudentsXsid}";
            _flow.ReplaceStringActivity248.CaseSensitive = true;
            _flow.ReplaceStringActivity248.Comment = @"";
            _flow.ReplaceStringActivity248.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity248.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi683 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter349 = new VTDXPathGetter(pi683,XmlTypeCode.String);
            binding_getter349 = new XPathGetterDecorator(binding_getter349,"{Array0}",1);
            VTDPropertyInfoBase pi684 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter335 = new VTDObjectSetter(pi684);
            binding_setter335 = new StringFormaterDecorator(binding_setter335,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].xsid}");
            bind_dir335 = new BindDirection(_flow.DbFetchData141,binding_getter349,binding_setter335,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir335);
            VTDPropertyInfoBase pi685 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='StudentsXsid'][1]");
            VTDBaseGetter binding_getter350 = new VTDXPathGetter(pi685,XmlTypeCode.String);
            binding_getter350 = new XPathGetterDecorator(binding_getter350,"{Array0}",1);
            VTDPropertyInfoBase pi686 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter336 = new VTDObjectSetter(pi686);
            binding_setter336 = new StringFormaterDecorator(binding_setter336,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].StudentsXsid}");
            bind_dir336 = new BindDirection(_flow.DbFetchData247,binding_getter350,binding_setter336,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir336);
            _flow.ReplaceStringActivity257.SourceString = @"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].Jid}";
            _flow.ReplaceStringActivity257.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity257.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity257.SearchReplaceString[0].Key = @"77401170";
            _flow.ReplaceStringActivity257.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].LoginStudentUsername}";
            _flow.ReplaceStringActivity257.CaseSensitive = true;
            _flow.ReplaceStringActivity257.Comment = @"";
            _flow.ReplaceStringActivity257.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity257.Name = @"将jid更新至最新值";
            VTDPropertyInfoBase pi687 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter351 = new VTDXPathGetter(pi687,XmlTypeCode.String);
            binding_getter351 = new XPathGetterDecorator(binding_getter351,"{Array0}",1);
            VTDPropertyInfoBase pi688 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter337 = new VTDObjectSetter(pi688);
            binding_setter337 = new StringFormaterDecorator(binding_setter337,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].Jid}");
            bind_dir337 = new BindDirection(_flow.DbFetchData141,binding_getter351,binding_setter337,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity257.InDirections.Add(bind_dir337);
            VTDPropertyInfoBase pi689 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='LoginStudentUsername'][1]");
            VTDBaseGetter binding_getter352 = new VTDXPathGetter(pi689,XmlTypeCode.String);
            binding_getter352 = new XPathGetterDecorator(binding_getter352,"{Array0}",1);
            VTDPropertyInfoBase pi690 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter338 = new VTDObjectSetter(pi690);
            binding_setter338 = new StringFormaterDecorator(binding_setter338,"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].LoginStudentUsername}");
            bind_dir338 = new BindDirection(_flow.DbFetchData256,binding_getter352,binding_setter338,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity257.InDirections.Add(bind_dir338);
            _flow.HTTPActivity142.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity248.Result}&jid={Step.OutputProperties.DbFetchData141.ResultTable.Row[1].Jid}";
            _flow.HTTPActivity142.TextXmlBody = @"";
            _flow.HTTPActivity142.FileBody = @"";
            _flow.HTTPActivity142.PostBody = @"";
            _flow.HTTPActivity142.Url = @"{DataSource.tb_global_table.msgHost}{DataSource.tb_global_table.GetUnReadMessage}";
            _flow.HTTPActivity142.HttpMethod = @"POST";
            _flow.HTTPActivity142.HttpVersion = @"1.1";
            _flow.HTTPActivity142.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity142.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity142.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity142.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity142.Comment = @"";
            _flow.HTTPActivity142.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity142.RequestBodyType = @"Text";
            _flow.HTTPActivity142.ResponseType = @"Text";
            _flow.HTTPActivity142.Name = @"调用/iq/GetUnReadMessage.php";
            _flow.HTTPActivity142.Proxy.Server = @"";
            _flow.HTTPActivity142.Proxy.Username = @"";
            _flow.HTTPActivity142.Proxy.Password = @"";
            _flow.HTTPActivity142.Authentication.Username = @"";
            _flow.HTTPActivity142.Authentication.Password = @"";
            _flow.HTTPActivity142.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity142.Timeout = (int)100000;
            _flow.HTTPActivity142.ClientCertificate.Password = @"";
            _flow.HTTPActivity142.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity142.UseClientCertificate = false;
            _flow.HTTPActivity142.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity142.AllowRedirections = true;
            _flow.HTTPActivity142.ReuseCookies = false;
            _flow.HTTPActivity142.ExpectServerError = false;
            XmlDocument HTTPActivity142_XMLBody_Document = new XmlDocument();
            HTTPActivity142_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity142_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity142.XMLBody = HTTPActivity142_XMLBody_Document;
            XmlDocument HTTPActivity142_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity142_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity142_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity142.RequestMultipartInfoXml = HTTPActivity142_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity142.Multipart=false;
            VTDPropertyInfoBase pi691 = new VTDPropertyInfoBase("msgHost");
            VTDBaseGetter binding_getter353 = new VTDObjectGetter(pi691);
            VTDPropertyInfoBase pi692 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter339 = new VTDObjectSetter(pi692);
            binding_setter339 = new StringFormaterDecorator(binding_setter339,"{DataSource.tb_global_table.msgHost}");
            bind_dir339 = new BindDirection(this.DataCursorActivity265,binding_getter353,binding_setter339,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir339);
            VTDPropertyInfoBase pi693 = new VTDPropertyInfoBase("GetUnReadMessage");
            VTDBaseGetter binding_getter354 = new VTDObjectGetter(pi693);
            VTDPropertyInfoBase pi694 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter340 = new VTDObjectSetter(pi694);
            binding_setter340 = new StringFormaterDecorator(binding_setter340,"{DataSource.tb_global_table.GetUnReadMessage}");
            bind_dir340 = new BindDirection(this.DataCursorActivity265,binding_getter354,binding_setter340,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir340);
            VTDPropertyInfoBase pi695 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter355 = new VTDObjectGetter(pi695);
            VTDPropertyInfoBase pi696 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter341 = new VTDObjectSetter(pi696);
            binding_setter341 = new StringFormaterDecorator(binding_setter341,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir341 = new BindDirection(this.DataCursorActivity265,binding_getter355,binding_setter341,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir341);
            VTDPropertyInfoBase pi697 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter356 = new VTDObjectGetter(pi697);
            VTDPropertyInfoBase pi698 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter342 = new VTDObjectSetter(pi698);
            binding_setter342 = new StringFormaterDecorator(binding_setter342,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir342 = new BindDirection(this.DataCursorActivity265,binding_getter356,binding_setter342,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir342);
            VTDPropertyInfoBase pi699 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter357 = new VTDObjectGetter(pi699);
            VTDPropertyInfoBase pi700 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter343 = new VTDObjectSetter(pi700);
            binding_setter343 = new StringFormaterDecorator(binding_setter343,"{Step.OutputProperties.ReplaceStringActivity248.Result}");
            bind_dir343 = new BindDirection(_flow.ReplaceStringActivity248,binding_getter357,binding_setter343,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir343);
            VTDPropertyInfoBase pi701 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter358 = new VTDXPathGetter(pi701,XmlTypeCode.String);
            binding_getter358 = new XPathGetterDecorator(binding_getter358,"{Array0}",1);
            VTDPropertyInfoBase pi702 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter344 = new VTDObjectSetter(pi702);
            binding_setter344 = new StringFormaterDecorator(binding_setter344,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].Jid}");
            bind_dir344 = new BindDirection(_flow.DbFetchData141,binding_getter358,binding_setter344,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir344);
            XmlDocument HTTPActivity142_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity142_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity142_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity142.ExpectedResponseXmlBody = HTTPActivity142_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity142_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity142_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity142_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity142.ExpectedResponseJsonBody = HTTPActivity142_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity142_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity142_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity142_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity142.ExpectedOutputProperties = HTTPActivity142_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity143.InputString = @"{Step.OutputProperties.HTTPActivity142.ResponseBody}";
            _flow.StringToJsonActivity143.Comment = @"";
            _flow.StringToJsonActivity143.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity143.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi703 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter359 = new VTDObjectGetter(pi703);
            VTDPropertyInfoBase pi704 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter345 = new VTDObjectSetter(pi704);
            binding_setter345 = new StringFormaterDecorator(binding_setter345,"{Step.OutputProperties.HTTPActivity142.ResponseBody}");
            bind_dir345 = new BindDirection(_flow.HTTPActivity142,binding_getter359,binding_setter345,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity143.InDirections.Add(bind_dir345);
            _flow.DbFetchData144.QueryString = @"UPDATE tb_getunreadmessage_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity142.ResponseBody}' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData144.Timeout = (int)30;
            _flow.DbFetchData144.Comment = @"";
            _flow.DbFetchData144.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData144.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi705 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter360 = new VTDObjectGetter(pi705);
            VTDPropertyInfoBase pi706 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter346 = new VTDObjectSetter(pi706);
            binding_setter346 = new StringFormaterDecorator(binding_setter346,"{Step.OutputProperties.HTTPActivity142.ResponseBody}");
            bind_dir346 = new BindDirection(_flow.HTTPActivity142,binding_getter360,binding_setter346,BindTargetType.ToInProperty);
            _flow.DbFetchData144.InDirections.Add(bind_dir346);
            VTDPropertyInfoBase pi707 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter361 = new VTDObjectGetter(pi707);
            VTDPropertyInfoBase pi708 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter347 = new VTDObjectSetter(pi708);
            binding_setter347 = new StringFormaterDecorator(binding_setter347,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir347 = new BindDirection(_flow.Loop140,binding_getter361,binding_setter347,BindTargetType.ToInProperty);
            _flow.DbFetchData144.InDirections.Add(bind_dir347);
            VTDPropertyInfoBase pi709 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter362 = new VTDObjectGetter(pi709);
            VTDPropertyInfoBase pi710 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter348 = new VTDObjectSetter(pi710);
            bind_dir348 = new BindDirection(_flow.DbOpenConnection39,binding_getter362,binding_setter348,BindTargetType.ToInProperty);
            _flow.DbFetchData144.InDirections.Add(bind_dir348);
            XmlDocument DbFetchData144_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData144_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData144_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData144.ExpectedOutputProperties = DbFetchData144_ExpectedOutputProperties_Document;
            _flow.DbFetchData145.QueryString = @"update tb_getunreadmessage_verification set OutputValue= 'errorCode={Step.JsonContent.StringToJsonActivity143.errorCode}' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData145.Timeout = (int)30;
            _flow.DbFetchData145.Comment = @"";
            _flow.DbFetchData145.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData145.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi711 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter363 = new VTDJsonGetter(pi711);
            VTDPropertyInfoBase pi712 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter349 = new VTDObjectSetter(pi712);
            binding_setter349 = new StringFormaterDecorator(binding_setter349,"{Step.JsonContent.StringToJsonActivity143.errorCode}");
            bind_dir349 = new BindDirection(_flow.StringToJsonActivity143,binding_getter363,binding_setter349,BindTargetType.ToInProperty);
            _flow.DbFetchData145.InDirections.Add(bind_dir349);
            VTDPropertyInfoBase pi713 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter364 = new VTDObjectGetter(pi713);
            VTDPropertyInfoBase pi714 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter350 = new VTDObjectSetter(pi714);
            binding_setter350 = new StringFormaterDecorator(binding_setter350,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir350 = new BindDirection(_flow.Loop140,binding_getter364,binding_setter350,BindTargetType.ToInProperty);
            _flow.DbFetchData145.InDirections.Add(bind_dir350);
            VTDPropertyInfoBase pi715 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter365 = new VTDObjectGetter(pi715);
            VTDPropertyInfoBase pi716 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter351 = new VTDObjectSetter(pi716);
            bind_dir351 = new BindDirection(_flow.DbOpenConnection39,binding_getter365,binding_setter351,BindTargetType.ToInProperty);
            _flow.DbFetchData145.InDirections.Add(bind_dir351);
            XmlDocument DbFetchData145_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData145_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData145_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData145.ExpectedOutputProperties = DbFetchData145_ExpectedOutputProperties_Document;
            _flow.DbFetchData146.QueryString = @"select OutputValue from tb_getunreadmessage_verification where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData146.Timeout = (int)30;
            _flow.DbFetchData146.Comment = @"";
            _flow.DbFetchData146.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData146.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi717 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter366 = new VTDObjectGetter(pi717);
            VTDPropertyInfoBase pi718 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter352 = new VTDObjectSetter(pi718);
            binding_setter352 = new StringFormaterDecorator(binding_setter352,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir352 = new BindDirection(_flow.Loop140,binding_getter366,binding_setter352,BindTargetType.ToInProperty);
            _flow.DbFetchData146.InDirections.Add(bind_dir352);
            VTDPropertyInfoBase pi719 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter367 = new VTDObjectGetter(pi719);
            VTDPropertyInfoBase pi720 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter353 = new VTDObjectSetter(pi720);
            bind_dir353 = new BindDirection(_flow.DbOpenConnection39,binding_getter367,binding_setter353,BindTargetType.ToInProperty);
            _flow.DbFetchData146.InDirections.Add(bind_dir353);
            XmlDocument DbFetchData146_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData146_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData146_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData146.ExpectedOutputProperties = DbFetchData146_ExpectedOutputProperties_Document;
            _flow.DbFetchData147.QueryString = @"select ExpectationValue from tb_getunreadmessage_verification where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData147.Timeout = (int)30;
            _flow.DbFetchData147.Comment = @"";
            _flow.DbFetchData147.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData147.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi721 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter368 = new VTDObjectGetter(pi721);
            VTDPropertyInfoBase pi722 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter354 = new VTDObjectSetter(pi722);
            binding_setter354 = new StringFormaterDecorator(binding_setter354,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir354 = new BindDirection(_flow.Loop140,binding_getter368,binding_setter354,BindTargetType.ToInProperty);
            _flow.DbFetchData147.InDirections.Add(bind_dir354);
            VTDPropertyInfoBase pi723 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter369 = new VTDObjectGetter(pi723);
            VTDPropertyInfoBase pi724 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter355 = new VTDObjectSetter(pi724);
            bind_dir355 = new BindDirection(_flow.DbOpenConnection39,binding_getter369,binding_setter355,BindTargetType.ToInProperty);
            _flow.DbFetchData147.InDirections.Add(bind_dir355);
            XmlDocument DbFetchData147_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData147_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData147_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData147.ExpectedOutputProperties = DbFetchData147_ExpectedOutputProperties_Document;
            _flow.IfElse148.ConditionAsString = @"{Step.OutputProperties.DbFetchData146.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData147.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse148.Comment = @"";
            _flow.IfElse148.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse148.Name = @"填写Result";
            _flow.IfElse148.Activities.Add (_flow.IfElseBranch149);
            _flow.IfElse148.Activities.Add (_flow.IfElseBranch151);
            _flow.IfElseBranch149.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi725 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter370 = new VTDXPathGetter(pi725,XmlTypeCode.String);
            binding_getter370 = new XPathGetterDecorator(binding_getter370,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData146.GetParam(binding_getter370),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi726 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter371 = new VTDXPathGetter(pi726,XmlTypeCode.String);
            binding_getter371 = new XPathGetterDecorator(binding_getter371,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData147.GetParam(binding_getter371),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch149.Comment = @"";
            _flow.IfElseBranch149.IconPath = @"";
            _flow.IfElseBranch149.Name = @"是";
            _flow.IfElseBranch149.Activities.Add (_flow.DbFetchData150);
            _flow.IfElseBranch151.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch151.Comment = @"";
            _flow.IfElseBranch151.IconPath = @"";
            _flow.IfElseBranch151.Name = @"否";
            _flow.IfElseBranch151.Activities.Add (_flow.DbFetchData152);
            _flow.DbFetchData150.QueryString = @"update tb_getunreadmessage_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData150.Timeout = (int)30;
            _flow.DbFetchData150.Comment = @"";
            _flow.DbFetchData150.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData150.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi727 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter372 = new VTDObjectGetter(pi727);
            VTDPropertyInfoBase pi728 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter356 = new VTDObjectSetter(pi728);
            binding_setter356 = new StringFormaterDecorator(binding_setter356,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir356 = new BindDirection(_flow.Loop140,binding_getter372,binding_setter356,BindTargetType.ToInProperty);
            _flow.DbFetchData150.InDirections.Add(bind_dir356);
            VTDPropertyInfoBase pi729 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter373 = new VTDObjectGetter(pi729);
            VTDPropertyInfoBase pi730 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter357 = new VTDObjectSetter(pi730);
            bind_dir357 = new BindDirection(_flow.DbOpenConnection39,binding_getter373,binding_setter357,BindTargetType.ToInProperty);
            _flow.DbFetchData150.InDirections.Add(bind_dir357);
            XmlDocument DbFetchData150_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData150_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData150_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData150.ExpectedOutputProperties = DbFetchData150_ExpectedOutputProperties_Document;
            _flow.DbFetchData152.QueryString = @"update tb_getunreadmessage_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData152.Timeout = (int)30;
            _flow.DbFetchData152.Comment = @"";
            _flow.DbFetchData152.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData152.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi731 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter374 = new VTDObjectGetter(pi731);
            VTDPropertyInfoBase pi732 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter358 = new VTDObjectSetter(pi732);
            binding_setter358 = new StringFormaterDecorator(binding_setter358,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir358 = new BindDirection(_flow.Loop140,binding_getter374,binding_setter358,BindTargetType.ToInProperty);
            _flow.DbFetchData152.InDirections.Add(bind_dir358);
            VTDPropertyInfoBase pi733 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter375 = new VTDObjectGetter(pi733);
            VTDPropertyInfoBase pi734 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter359 = new VTDObjectSetter(pi734);
            bind_dir359 = new BindDirection(_flow.DbOpenConnection39,binding_getter375,binding_setter359,BindTargetType.ToInProperty);
            _flow.DbFetchData152.InDirections.Add(bind_dir359);
            XmlDocument DbFetchData152_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData152_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData152_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData152.ExpectedOutputProperties = DbFetchData152_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    