/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_GetUnReadMessage_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir382 = null;
        public BindDirection bind_dir383 = null;
        public BindDirection bind_dir384 = null;
        public BindDirection bind_dir385 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity265 = null;
        public BindDirection bind_dir386 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity265_Policy = null;
        public BindDirection bind_dir387 = null;
        public BindDirection bind_dir388 = null;
        public BindDirection bind_dir389 = null;
        public BindDirection bind_dir390 = null;
        public BindDirection bind_dir391 = null;
        public BindDirection bind_dir392 = null;
        public BindDirection bind_dir393 = null;
        public BindDirection bind_dir394 = null;
        public BindDirection bind_dir395 = null;
        public BindDirection bind_dir396 = null;
        public BindDirection bind_dir397 = null;
        public BindDirection bind_dir398 = null;
        public BindDirection bind_dir399 = null;
        public BindDirection bind_dir400 = null;
        public BindDirection bind_dir401 = null;
        public BindDirection bind_dir402 = null;
        public BindDirection bind_dir403 = null;
        public BindDirection bind_dir404 = null;
        public BindDirection bind_dir405 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity266 = null;
        public BindDirection bind_dir406 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity266_Policy = null;
        public BindDirection bind_dir407 = null;
        public BindDirection bind_dir408 = null;
        public BindDirection bind_dir409 = null;
        public BindDirection bind_dir410 = null;
        public BindDirection bind_dir411 = null;
        public BindDirection bind_dir412 = null;
        public BindDirection bind_dir413 = null;
        public BindDirection bind_dir414 = null;
        public BindDirection bind_dir415 = null;
        public BindDirection bind_dir416 = null;
        public BindDirection bind_dir417 = null;
        public BindDirection bind_dir418 = null;
        public BindDirection bind_dir419 = null;
        public BindDirection bind_dir420 = null;
        public BindDirection bind_dir421 = null;
        public BindDirection bind_dir422 = null;
        public BindDirection bind_dir423 = null;
        public BindDirection bind_dir424 = null;
        public BindDirection bind_dir425 = null;
        public BindDirection bind_dir426 = null;
        public BindDirection bind_dir427 = null;
        public BindDirection bind_dir428 = null;
        public BindDirection bind_dir429 = null;
        public BindDirection bind_dir430 = null;
        public BindDirection bind_dir431 = null;
        public BindDirection bind_dir432 = null;
        public BindDirection bind_dir433 = null;
        public BindDirection bind_dir434 = null;
        public BindDirection bind_dir435 = null;
        public BindDirection bind_dir436 = null;
        public BindDirection bind_dir437 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity261 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity261");
            _flow.DataFetchActivity258 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity258");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity260 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity260");
            _flow.DataExporterActivity263 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity263");
            _flow.DataExporterCloseActivity264 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity264");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity259 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity259");
            _flow.DataDisconnectActivity262 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity262");
            this.DataCursorActivity265 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity265");
            this.DataCursorActivity265_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence256 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence256");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData139 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData139");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.Loop140 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop140Input>(_context,"Loop140",LoopType.For);
            _flow.DbFetchData153 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData153");
            _flow.CallQTPTest154 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest154");
            _flow.DbFetchData155 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData155");
            _flow.HTTPActivity156 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity156");
            _flow.StringToJsonActivity254 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity254");
            _flow.DbFetchData255 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData255");
            _flow.DbFetchData157 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData157");
            this.DataCursorActivity266 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity266");
            this.DataCursorActivity266_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence257 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence257");
            _flow.DbFetchData141 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData141");
            _flow.ReplaceStringActivity248 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity248");
            _flow.DbFetchData249 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData249");
            _flow.CallQTPTest250 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest250");
            _flow.DbFetchData251 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData251");
            _flow.ReplaceStringActivity252 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity252");
            _flow.HTTPActivity142 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity142");
            _flow.StringToJsonActivity143 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity143");
            _flow.DbFetchData144 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData144");
            _flow.DbFetchData145 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData145");
            _flow.DbFetchData146 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData146");
            _flow.DbFetchData147 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData147");
            _flow.IfElse148 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse148Input>(_context,"IfElse148");
            _flow.IfElseBranch149 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch149");
            _flow.IfElseBranch151 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch151");
            _flow.DbFetchData150 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData150");
            _flow.DbFetchData152 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData152");
            _flow.DataFetchActivity261.Comment = @"";
            _flow.DataFetchActivity261.IconPath = @"";
            _flow.DataFetchActivity261.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity261.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity261_QueryParameters_Document = new XmlDocument();
            DataFetchActivity261_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity261Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity261_QueryParameters_Document.LoadXml(xmlDataFetchActivity261Params);
            _flow.DataFetchActivity261.QueryParameters = DataFetchActivity261_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity261);
            this.Activities.Add (_flow.DataFetchActivity261);
            _flow.DataFetchActivity258.Comment = @"";
            _flow.DataFetchActivity258.IconPath = @"";
            _flow.DataFetchActivity258.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity258.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity258_QueryParameters_Document = new XmlDocument();
            DataFetchActivity258_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity258Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity258_QueryParameters_Document.LoadXml(xmlDataFetchActivity258Params);
            _flow.DataFetchActivity258.QueryParameters = DataFetchActivity258_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity258);
            this.Activities.Add (_flow.DataFetchActivity258);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity265);
            _flow.Loop2.Activities.Add (_flow.Sequence256);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity260.Comment = @"";
            _flow.DataExporterActivity260.IconPath = @"";
            VTDPropertyInfoBase pi777 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter396 = new VTDObjectGetter(pi777);
            VTDPropertyInfoBase pi778 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter382 = new VTDObjectSetter(pi778);
            binding_setter382 = new StringFormaterDecorator(binding_setter382,"{Step.DataFetchActivity258.OutTable}");
            bind_dir382 = new BindDirection(_flow.DataFetchActivity258,binding_getter396,binding_setter382,BindTargetType.ToInProperty);
            _flow.DataExporterActivity260.InDirections.Add(bind_dir382);
            this.Activities.Add (_flow.DataExporterActivity260);
            _flow.DataExporterActivity263.Comment = @"";
            _flow.DataExporterActivity263.IconPath = @"";
            VTDPropertyInfoBase pi779 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter397 = new VTDObjectGetter(pi779);
            VTDPropertyInfoBase pi780 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter383 = new VTDObjectSetter(pi780);
            binding_setter383 = new StringFormaterDecorator(binding_setter383,"{Step.DataFetchActivity261.OutTable}");
            bind_dir383 = new BindDirection(_flow.DataFetchActivity261,binding_getter397,binding_setter383,BindTargetType.ToInProperty);
            _flow.DataExporterActivity263.InDirections.Add(bind_dir383);
            this.Activities.Add (_flow.DataExporterActivity263);
            _flow.DataExporterCloseActivity264.Comment = @"";
            _flow.DataExporterCloseActivity264.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity264);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity259.Comment = @"";
            _flow.DataDisconnectActivity259.IconPath = @"";
            VTDPropertyInfoBase pi781 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter398 = new VTDObjectGetter(pi781);
            VTDPropertyInfoBase pi782 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter384 = new VTDObjectSetter(pi782);
            binding_setter384 = new StringFormaterDecorator(binding_setter384,"{Step.DataFetchActivity258.OutTable}");
            bind_dir384 = new BindDirection(_flow.DataFetchActivity258,binding_getter398,binding_setter384,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity259.InDirections.Add(bind_dir384);
            this.Activities.Add (_flow.DataDisconnectActivity259);
            _flow.DataDisconnectActivity262.Comment = @"";
            _flow.DataDisconnectActivity262.IconPath = @"";
            VTDPropertyInfoBase pi783 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter399 = new VTDObjectGetter(pi783);
            VTDPropertyInfoBase pi784 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter385 = new VTDObjectSetter(pi784);
            binding_setter385 = new StringFormaterDecorator(binding_setter385,"{Step.DataFetchActivity261.OutTable}");
            bind_dir385 = new BindDirection(_flow.DataFetchActivity261,binding_getter399,binding_setter385,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity262.InDirections.Add(bind_dir385);
            this.Activities.Add (_flow.DataDisconnectActivity262);
            this.DataCursorActivity265.Comment = @"";
            this.DataCursorActivity265.IconPath = @"";
            VTDPropertyInfoBase pi785 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter400 = new VTDObjectGetter(pi785);
            VTDPropertyInfoBase pi786 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter386 = new VTDObjectSetter(pi786);
            binding_setter386 = new StringFormaterDecorator(binding_setter386,"{Step.DataFetchActivity258.OutTable}");
            bind_dir386 = new BindDirection(_flow.DataFetchActivity258,binding_getter400,binding_setter386,BindTargetType.ToInProperty);
            this.DataCursorActivity265.InDirections.Add(bind_dir386);
            this.DataCursorActivity265_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity265_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.StartCondition.Value = "";
            this.DataCursorActivity265_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity265_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.EndCondition.Value = "";
            this.DataCursorActivity265_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity265_Policy.StepSize = 1;
            this.DataCursorActivity265_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity265.Policy = this.DataCursorActivity265_Policy;
            this.DataCursorActivity265.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity265.ResetCursor;
            _flow.Sequence256.Comment = @"";
            _flow.Sequence256.IconPath = @"";
            _flow.Sequence256.Name = @"序列256";
            _flow.Sequence256.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData139);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence256.Activities.Add (_flow.Loop140);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData153);
            _flow.Sequence256.Activities.Add (_flow.CallQTPTest154);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData155);
            _flow.Sequence256.Activities.Add (_flow.HTTPActivity156);
            _flow.Sequence256.Activities.Add (_flow.StringToJsonActivity254);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData255);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData157);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData139.QueryString = @"select count(*) as 'Row' from tb_GetUnReadMessage_verification";
            _flow.DbFetchData139.Timeout = (int)30;
            _flow.DbFetchData139.Comment = @"";
            _flow.DbFetchData139.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData139.Name = @"获取到tb_GetUnReadMessage_verification表有效行数";
            VTDPropertyInfoBase pi787 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter401 = new VTDObjectGetter(pi787);
            VTDPropertyInfoBase pi788 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter387 = new VTDObjectSetter(pi788);
            bind_dir387 = new BindDirection(_flow.DbOpenConnection39,binding_getter401,binding_setter387,BindTargetType.ToInProperty);
            _flow.DbFetchData139.InDirections.Add(bind_dir387);
            XmlDocument DbFetchData139_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData139_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData139_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData139.ExpectedOutputProperties = DbFetchData139_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi789 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter402 = new VTDObjectGetter(pi789);
            VTDPropertyInfoBase pi790 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter388 = new VTDObjectSetter(pi790);
            bind_dir388 = new BindDirection(_flow.DbOpenConnection39,binding_getter402,binding_setter388,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir388);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.Loop140.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop140.NumberOfIterations = (int)1;
            _flow.Loop140.Comment = @"";
            _flow.Loop140.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop140.Name = @"循环执行tb_GetUnReadMessage_verification中的测试用例";
            VTDPropertyInfoBase pi791 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter403 = new VTDXPathGetter(pi791,XmlTypeCode.Long);
            binding_getter403 = new XPathGetterDecorator(binding_getter403,"{Array0}",1);
            VTDPropertyInfoBase pi792 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter389 = new VTDObjectSetter(pi792);
            bind_dir389 = new BindDirection(_flow.DbFetchData139,binding_getter403,binding_setter389,BindTargetType.ToInProperty);
            _flow.Loop140.InDirections.Add(bind_dir389);
            _flow.Loop140.Activities.Add (this.DataCursorActivity266);
            _flow.Loop140.Activities.Add (_flow.Sequence257);
            _flow.DbFetchData153.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}5yyG4FmKDK{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData153.Timeout = (int)30;
            _flow.DbFetchData153.Comment = @"";
            _flow.DbFetchData153.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData153.Name = @"对/iq/GetUnReadMessage.php接口token实行加密";
            VTDPropertyInfoBase pi793 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter404 = new VTDXPathGetter(pi793,XmlTypeCode.String);
            binding_getter404 = new XPathGetterDecorator(binding_getter404,"{Array0}",1);
            VTDPropertyInfoBase pi794 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter390 = new VTDObjectSetter(pi794);
            binding_setter390 = new StringFormaterDecorator(binding_setter390,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir390 = new BindDirection(_flow.DbFetchData247,binding_getter404,binding_setter390,BindTargetType.ToInProperty);
            _flow.DbFetchData153.InDirections.Add(bind_dir390);
            VTDPropertyInfoBase pi795 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter405 = new VTDObjectGetter(pi795);
            VTDPropertyInfoBase pi796 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter391 = new VTDObjectSetter(pi796);
            binding_setter391 = new StringFormaterDecorator(binding_setter391,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir391 = new BindDirection(this.DataCursorActivity265,binding_getter405,binding_setter391,BindTargetType.ToInProperty);
            _flow.DbFetchData153.InDirections.Add(bind_dir391);
            VTDPropertyInfoBase pi797 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter406 = new VTDObjectGetter(pi797);
            VTDPropertyInfoBase pi798 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter392 = new VTDObjectSetter(pi798);
            bind_dir392 = new BindDirection(_flow.DbOpenConnection39,binding_getter406,binding_setter392,BindTargetType.ToInProperty);
            _flow.DbFetchData153.InDirections.Add(bind_dir392);
            XmlDocument DbFetchData153_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData153_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData153_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData153.ExpectedOutputProperties = DbFetchData153_ExpectedOutputProperties_Document;
            _flow.CallQTPTest154.Comment = @"";
            _flow.CallQTPTest154.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest154.Name = @"Encryption.SHA1";
            _flow.CallQTPTest154.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ScriptPath}");
            _flow.CallQTPTest154.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ActionName}");
            _flow.CallQTPTest154.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.Description}");
            _flow.CallQTPTest154.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.IsActionSelected}");
            _flow.CallQTPTest154.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ResultLocation}");
            _flow.CallQTPTest154.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.QCScriptPath}");
            _flow.DbFetchData155.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData155.Timeout = (int)30;
            _flow.DbFetchData155.Comment = @"";
            _flow.DbFetchData155.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData155.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi799 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter407 = new VTDObjectGetter(pi799);
            VTDPropertyInfoBase pi800 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter393 = new VTDObjectSetter(pi800);
            bind_dir393 = new BindDirection(_flow.DbOpenConnection39,binding_getter407,binding_setter393,BindTargetType.ToInProperty);
            _flow.DbFetchData155.InDirections.Add(bind_dir393);
            XmlDocument DbFetchData155_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData155_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData155_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData155.ExpectedOutputProperties = DbFetchData155_ExpectedOutputProperties_Document;
            _flow.HTTPActivity156.TextBody = @"xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}&jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData155.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity156.TextXmlBody = @"";
            _flow.HTTPActivity156.FileBody = @"";
            _flow.HTTPActivity156.PostBody = @"";
            _flow.HTTPActivity156.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.GetUnReadMessage}";
            _flow.HTTPActivity156.HttpMethod = @"POST";
            _flow.HTTPActivity156.HttpVersion = @"1.1";
            _flow.HTTPActivity156.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity156.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity156.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity156.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity156.Comment = @"";
            _flow.HTTPActivity156.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity156.RequestBodyType = @"Text";
            _flow.HTTPActivity156.ResponseType = @"Text";
            _flow.HTTPActivity156.Name = @"调用/iq/GetUnReadMessage.php";
            _flow.HTTPActivity156.Proxy.Server = @"";
            _flow.HTTPActivity156.Proxy.Username = @"";
            _flow.HTTPActivity156.Proxy.Password = @"";
            _flow.HTTPActivity156.Authentication.Username = @"";
            _flow.HTTPActivity156.Authentication.Password = @"";
            _flow.HTTPActivity156.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity156.Timeout = (int)100000;
            _flow.HTTPActivity156.ClientCertificate.Password = @"";
            _flow.HTTPActivity156.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity156.UseClientCertificate = false;
            _flow.HTTPActivity156.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity156.AllowRedirections = true;
            _flow.HTTPActivity156.ReuseCookies = false;
            _flow.HTTPActivity156.ExpectServerError = false;
            XmlDocument HTTPActivity156_XMLBody_Document = new XmlDocument();
            HTTPActivity156_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity156_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity156.XMLBody = HTTPActivity156_XMLBody_Document;
            XmlDocument HTTPActivity156_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity156_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity156_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity156.RequestMultipartInfoXml = HTTPActivity156_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity156.Multipart=false;
            VTDPropertyInfoBase pi801 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter408 = new VTDObjectGetter(pi801);
            VTDPropertyInfoBase pi802 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter394 = new VTDObjectSetter(pi802);
            binding_setter394 = new StringFormaterDecorator(binding_setter394,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir394 = new BindDirection(this.DataCursorActivity265,binding_getter408,binding_setter394,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir394);
            VTDPropertyInfoBase pi803 = new VTDPropertyInfoBase("GetUnReadMessage");
            VTDBaseGetter binding_getter409 = new VTDObjectGetter(pi803);
            VTDPropertyInfoBase pi804 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter395 = new VTDObjectSetter(pi804);
            binding_setter395 = new StringFormaterDecorator(binding_setter395,"{DataSource.tb_global_table.GetUnReadMessage}");
            bind_dir395 = new BindDirection(this.DataCursorActivity265,binding_getter409,binding_setter395,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir395);
            VTDPropertyInfoBase pi805 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter410 = new VTDObjectGetter(pi805);
            VTDPropertyInfoBase pi806 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter396 = new VTDObjectSetter(pi806);
            binding_setter396 = new StringFormaterDecorator(binding_setter396,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir396 = new BindDirection(this.DataCursorActivity265,binding_getter410,binding_setter396,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir396);
            VTDPropertyInfoBase pi807 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter411 = new VTDObjectGetter(pi807);
            VTDPropertyInfoBase pi808 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter397 = new VTDObjectSetter(pi808);
            binding_setter397 = new StringFormaterDecorator(binding_setter397,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir397 = new BindDirection(this.DataCursorActivity265,binding_getter411,binding_setter397,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir397);
            VTDPropertyInfoBase pi809 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter412 = new VTDXPathGetter(pi809,XmlTypeCode.String);
            binding_getter412 = new XPathGetterDecorator(binding_getter412,"{Array0}",1);
            VTDPropertyInfoBase pi810 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter398 = new VTDObjectSetter(pi810);
            binding_setter398 = new StringFormaterDecorator(binding_setter398,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir398 = new BindDirection(_flow.DbFetchData247,binding_getter412,binding_setter398,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir398);
            VTDPropertyInfoBase pi811 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter413 = new VTDObjectGetter(pi811);
            VTDPropertyInfoBase pi812 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter399 = new VTDObjectSetter(pi812);
            binding_setter399 = new StringFormaterDecorator(binding_setter399,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir399 = new BindDirection(this.DataCursorActivity265,binding_getter413,binding_setter399,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir399);
            VTDPropertyInfoBase pi813 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter414 = new VTDXPathGetter(pi813,XmlTypeCode.String);
            binding_getter414 = new XPathGetterDecorator(binding_getter414,"{Array0}",1);
            VTDPropertyInfoBase pi814 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter400 = new VTDObjectSetter(pi814);
            binding_setter400 = new StringFormaterDecorator(binding_setter400,"{Step.OutputProperties.DbFetchData155.ResultTable.Row[1].EncryptionResult}");
            bind_dir400 = new BindDirection(_flow.DbFetchData155,binding_getter414,binding_setter400,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir400);
            XmlDocument HTTPActivity156_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity156_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity156_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity156.ExpectedResponseXmlBody = HTTPActivity156_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity156_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity156_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity156_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity156.ExpectedResponseJsonBody = HTTPActivity156_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity156_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity156_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity156_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity156.ExpectedOutputProperties = HTTPActivity156_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity254.InputString = @"{Step.OutputProperties.HTTPActivity156.ResponseBody}";
            _flow.StringToJsonActivity254.Comment = @"";
            _flow.StringToJsonActivity254.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity254.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi815 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter415 = new VTDObjectGetter(pi815);
            VTDPropertyInfoBase pi816 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter401 = new VTDObjectSetter(pi816);
            binding_setter401 = new StringFormaterDecorator(binding_setter401,"{Step.OutputProperties.HTTPActivity156.ResponseBody}");
            bind_dir401 = new BindDirection(_flow.HTTPActivity156,binding_getter415,binding_setter401,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity254.InDirections.Add(bind_dir401);
            _flow.DbFetchData255.QueryString = @"update tb_global_table set xmid = '{Step.JsonContent.StringToJsonActivity254.data.Object.lastMessage.xmid}' where TestCase = 1";
            _flow.DbFetchData255.Timeout = (int)30;
            _flow.DbFetchData255.Comment = @"";
            _flow.DbFetchData255.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData255.Name = @"将获取到的xmid赋值到全局表中";
            VTDPropertyInfoBase pi817 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='data'][1]/*[local-name(.)='Object'][1]/*[local-name(.)='lastMessage'][1]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter416 = new VTDJsonGetter(pi817);
            VTDPropertyInfoBase pi818 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter402 = new VTDObjectSetter(pi818);
            binding_setter402 = new StringFormaterDecorator(binding_setter402,"{Step.JsonContent.StringToJsonActivity254.data.Object.lastMessage.xmid}");
            bind_dir402 = new BindDirection(_flow.StringToJsonActivity254,binding_getter416,binding_setter402,BindTargetType.ToInProperty);
            _flow.DbFetchData255.InDirections.Add(bind_dir402);
            VTDPropertyInfoBase pi819 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter417 = new VTDObjectGetter(pi819);
            VTDPropertyInfoBase pi820 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter403 = new VTDObjectSetter(pi820);
            bind_dir403 = new BindDirection(_flow.DbOpenConnection39,binding_getter417,binding_setter403,BindTargetType.ToInProperty);
            _flow.DbFetchData255.InDirections.Add(bind_dir403);
            XmlDocument DbFetchData255_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData255_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData255_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData255.ExpectedOutputProperties = DbFetchData255_ExpectedOutputProperties_Document;
            _flow.DbFetchData157.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity156.ResponseBody}' where InterfaceName = '/iq/GetUnReadMessage.php'";
            _flow.DbFetchData157.Timeout = (int)30;
            _flow.DbFetchData157.Comment = @"";
            _flow.DbFetchData157.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData157.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi821 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter418 = new VTDObjectGetter(pi821);
            VTDPropertyInfoBase pi822 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter404 = new VTDObjectSetter(pi822);
            binding_setter404 = new StringFormaterDecorator(binding_setter404,"{Step.OutputProperties.HTTPActivity156.ResponseBody}");
            bind_dir404 = new BindDirection(_flow.HTTPActivity156,binding_getter418,binding_setter404,BindTargetType.ToInProperty);
            _flow.DbFetchData157.InDirections.Add(bind_dir404);
            VTDPropertyInfoBase pi823 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter419 = new VTDObjectGetter(pi823);
            VTDPropertyInfoBase pi824 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter405 = new VTDObjectSetter(pi824);
            bind_dir405 = new BindDirection(_flow.DbOpenConnection39,binding_getter419,binding_setter405,BindTargetType.ToInProperty);
            _flow.DbFetchData157.InDirections.Add(bind_dir405);
            XmlDocument DbFetchData157_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData157_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData157_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData157.ExpectedOutputProperties = DbFetchData157_ExpectedOutputProperties_Document;
            this.DataCursorActivity266.Comment = @"";
            this.DataCursorActivity266.IconPath = @"";
            VTDPropertyInfoBase pi825 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter420 = new VTDObjectGetter(pi825);
            VTDPropertyInfoBase pi826 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter406 = new VTDObjectSetter(pi826);
            binding_setter406 = new StringFormaterDecorator(binding_setter406,"{Step.DataFetchActivity258.OutTable}");
            bind_dir406 = new BindDirection(_flow.DataFetchActivity258,binding_getter420,binding_setter406,BindTargetType.ToInProperty);
            this.DataCursorActivity266.InDirections.Add(bind_dir406);
            this.DataCursorActivity266_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity266_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.StartCondition.Value = "";
            this.DataCursorActivity266_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity266_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.EndCondition.Value = "";
            this.DataCursorActivity266_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity266_Policy.StepSize = 1;
            this.DataCursorActivity266_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity266.Policy = this.DataCursorActivity266_Policy;
            this.DataCursorActivity266.ReportStepData = false;
            _flow.Loop140.BeforeExecuteStepEvent += this.DataCursorActivity266.ResetCursor;
            _flow.Sequence257.Comment = @"";
            _flow.Sequence257.IconPath = @"";
            _flow.Sequence257.Name = @"序列257";
            _flow.Sequence257.Activities.Add (_flow.DbFetchData141);
            _flow.Sequence257.Activities.Add (_flow.ReplaceStringActivity248);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData249);
            _flow.Sequence257.Activities.Add (_flow.CallQTPTest250);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData251);
            _flow.Sequence257.Activities.Add (_flow.ReplaceStringActivity252);
            _flow.Sequence257.Activities.Add (_flow.HTTPActivity142);
            _flow.Sequence257.Activities.Add (_flow.StringToJsonActivity143);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData144);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData145);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData146);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData147);
            _flow.Sequence257.Activities.Add (_flow.IfElse148);
            _flow.DbFetchData141.QueryString = @"select xsid,Jid,token from tb_GetUnReadMessage_verification where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData141.Timeout = (int)30;
            _flow.DbFetchData141.Comment = @"";
            _flow.DbFetchData141.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData141.Name = @"查询tb_GetUnReadMessage_verification表中数据";
            VTDPropertyInfoBase pi827 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter421 = new VTDObjectGetter(pi827);
            VTDPropertyInfoBase pi828 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter407 = new VTDObjectSetter(pi828);
            binding_setter407 = new StringFormaterDecorator(binding_setter407,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir407 = new BindDirection(_flow.Loop140,binding_getter421,binding_setter407,BindTargetType.ToInProperty);
            _flow.DbFetchData141.InDirections.Add(bind_dir407);
            VTDPropertyInfoBase pi829 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter422 = new VTDObjectGetter(pi829);
            VTDPropertyInfoBase pi830 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter408 = new VTDObjectSetter(pi830);
            bind_dir408 = new BindDirection(_flow.DbOpenConnection39,binding_getter422,binding_setter408,BindTargetType.ToInProperty);
            _flow.DbFetchData141.InDirections.Add(bind_dir408);
            XmlDocument DbFetchData141_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData141_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData141_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><Jid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData141.ExpectedOutputProperties = DbFetchData141_ExpectedOutputProperties_Document;
            set_DbFetchData141_checkpoints(_flow.DbFetchData141);
            _flow.ReplaceStringActivity248.SourceString = @"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity248.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity248.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity248.CaseSensitive = true;
            _flow.ReplaceStringActivity248.Comment = @"";
            _flow.ReplaceStringActivity248.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity248.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi831 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter423 = new VTDXPathGetter(pi831,XmlTypeCode.String);
            binding_getter423 = new XPathGetterDecorator(binding_getter423,"{Array0}",1);
            VTDPropertyInfoBase pi832 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter409 = new VTDObjectSetter(pi832);
            binding_setter409 = new StringFormaterDecorator(binding_setter409,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].xsid}");
            bind_dir409 = new BindDirection(_flow.DbFetchData141,binding_getter423,binding_setter409,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir409);
            VTDPropertyInfoBase pi833 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter424 = new VTDXPathGetter(pi833,XmlTypeCode.String);
            binding_getter424 = new XPathGetterDecorator(binding_getter424,"{Array0}",1);
            VTDPropertyInfoBase pi834 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter410 = new VTDObjectSetter(pi834);
            binding_setter410 = new StringFormaterDecorator(binding_setter410,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir410 = new BindDirection(_flow.DbFetchData247,binding_getter424,binding_setter410,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir410);
            _flow.DbFetchData249.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.ReplaceStringActivity248.Result}5yyG4FmKDK{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].Jid}' where TestCase = 1 ";
            _flow.DbFetchData249.Timeout = (int)30;
            _flow.DbFetchData249.Comment = @"";
            _flow.DbFetchData249.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData249.Name = @"对本地表的token进行加密字符串拼接";
            VTDPropertyInfoBase pi835 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter425 = new VTDObjectGetter(pi835);
            VTDPropertyInfoBase pi836 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter411 = new VTDObjectSetter(pi836);
            binding_setter411 = new StringFormaterDecorator(binding_setter411,"{Step.OutputProperties.ReplaceStringActivity248.Result}");
            bind_dir411 = new BindDirection(_flow.ReplaceStringActivity248,binding_getter425,binding_setter411,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir411);
            VTDPropertyInfoBase pi837 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter426 = new VTDXPathGetter(pi837,XmlTypeCode.String);
            binding_getter426 = new XPathGetterDecorator(binding_getter426,"{Array0}",1);
            VTDPropertyInfoBase pi838 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter412 = new VTDObjectSetter(pi838);
            binding_setter412 = new StringFormaterDecorator(binding_setter412,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].Jid}");
            bind_dir412 = new BindDirection(_flow.DbFetchData141,binding_getter426,binding_setter412,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir412);
            VTDPropertyInfoBase pi839 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter427 = new VTDObjectGetter(pi839);
            VTDPropertyInfoBase pi840 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter413 = new VTDObjectSetter(pi840);
            bind_dir413 = new BindDirection(_flow.DbOpenConnection39,binding_getter427,binding_setter413,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir413);
            XmlDocument DbFetchData249_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData249_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData249_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData249.ExpectedOutputProperties = DbFetchData249_ExpectedOutputProperties_Document;
            _flow.CallQTPTest250.Comment = @"";
            _flow.CallQTPTest250.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest250.Name = @"Encryption.SHA1";
            _flow.CallQTPTest250.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ScriptPath}");
            _flow.CallQTPTest250.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ActionName}");
            _flow.CallQTPTest250.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.Description}");
            _flow.CallQTPTest250.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.IsActionSelected}");
            _flow.CallQTPTest250.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ResultLocation}");
            _flow.CallQTPTest250.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.QCScriptPath}");
            _flow.DbFetchData251.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData251.Timeout = (int)30;
            _flow.DbFetchData251.Comment = @"";
            _flow.DbFetchData251.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData251.Name = @"获取加密后的token";
            VTDPropertyInfoBase pi841 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter428 = new VTDObjectGetter(pi841);
            VTDPropertyInfoBase pi842 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter414 = new VTDObjectSetter(pi842);
            bind_dir414 = new BindDirection(_flow.DbOpenConnection39,binding_getter428,binding_setter414,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir414);
            XmlDocument DbFetchData251_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData251_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData251_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData251.ExpectedOutputProperties = DbFetchData251_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity252.SourceString = @"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity252.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity252.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity252.SearchReplaceString[0].Key = @"305bbc2b43542b3d0203daffe9073c3cba5b47d9";
            _flow.ReplaceStringActivity252.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData251.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity252.CaseSensitive = true;
            _flow.ReplaceStringActivity252.Comment = @"";
            _flow.ReplaceStringActivity252.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity252.Name = @"将token更新至最新";
            VTDPropertyInfoBase pi843 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter429 = new VTDXPathGetter(pi843,XmlTypeCode.String);
            binding_getter429 = new XPathGetterDecorator(binding_getter429,"{Array0}",1);
            VTDPropertyInfoBase pi844 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter415 = new VTDObjectSetter(pi844);
            binding_setter415 = new StringFormaterDecorator(binding_setter415,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].token}");
            bind_dir415 = new BindDirection(_flow.DbFetchData141,binding_getter429,binding_setter415,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity252.InDirections.Add(bind_dir415);
            VTDPropertyInfoBase pi845 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter430 = new VTDXPathGetter(pi845,XmlTypeCode.String);
            binding_getter430 = new XPathGetterDecorator(binding_getter430,"{Array0}",1);
            VTDPropertyInfoBase pi846 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter416 = new VTDObjectSetter(pi846);
            binding_setter416 = new StringFormaterDecorator(binding_setter416,"{Step.OutputProperties.DbFetchData251.ResultTable.Row[1].EncryptionResult}");
            bind_dir416 = new BindDirection(_flow.DbFetchData251,binding_getter430,binding_setter416,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity252.InDirections.Add(bind_dir416);
            _flow.HTTPActivity142.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity248.Result}&jid={Step.OutputProperties.DbFetchData141.ResultTable.Row[1].Jid}&token={Step.OutputProperties.ReplaceStringActivity252.Result}";
            _flow.HTTPActivity142.TextXmlBody = @"";
            _flow.HTTPActivity142.FileBody = @"";
            _flow.HTTPActivity142.PostBody = @"";
            _flow.HTTPActivity142.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.GetUnReadMessage}";
            _flow.HTTPActivity142.HttpMethod = @"POST";
            _flow.HTTPActivity142.HttpVersion = @"1.1";
            _flow.HTTPActivity142.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity142.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity142.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity142.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity142.Comment = @"";
            _flow.HTTPActivity142.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity142.RequestBodyType = @"Text";
            _flow.HTTPActivity142.ResponseType = @"Text";
            _flow.HTTPActivity142.Name = @"调用/iq/GetUnReadMessage.php";
            _flow.HTTPActivity142.Proxy.Server = @"";
            _flow.HTTPActivity142.Proxy.Username = @"";
            _flow.HTTPActivity142.Proxy.Password = @"";
            _flow.HTTPActivity142.Authentication.Username = @"";
            _flow.HTTPActivity142.Authentication.Password = @"";
            _flow.HTTPActivity142.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity142.Timeout = (int)100000;
            _flow.HTTPActivity142.ClientCertificate.Password = @"";
            _flow.HTTPActivity142.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity142.UseClientCertificate = false;
            _flow.HTTPActivity142.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity142.AllowRedirections = true;
            _flow.HTTPActivity142.ReuseCookies = false;
            _flow.HTTPActivity142.ExpectServerError = false;
            XmlDocument HTTPActivity142_XMLBody_Document = new XmlDocument();
            HTTPActivity142_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity142_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity142.XMLBody = HTTPActivity142_XMLBody_Document;
            XmlDocument HTTPActivity142_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity142_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity142_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity142.RequestMultipartInfoXml = HTTPActivity142_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity142.Multipart=false;
            VTDPropertyInfoBase pi847 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter431 = new VTDObjectGetter(pi847);
            VTDPropertyInfoBase pi848 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter417 = new VTDObjectSetter(pi848);
            binding_setter417 = new StringFormaterDecorator(binding_setter417,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir417 = new BindDirection(this.DataCursorActivity266,binding_getter431,binding_setter417,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir417);
            VTDPropertyInfoBase pi849 = new VTDPropertyInfoBase("GetUnReadMessage");
            VTDBaseGetter binding_getter432 = new VTDObjectGetter(pi849);
            VTDPropertyInfoBase pi850 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter418 = new VTDObjectSetter(pi850);
            binding_setter418 = new StringFormaterDecorator(binding_setter418,"{DataSource.tb_global_table.GetUnReadMessage}");
            bind_dir418 = new BindDirection(this.DataCursorActivity266,binding_getter432,binding_setter418,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir418);
            VTDPropertyInfoBase pi851 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter433 = new VTDObjectGetter(pi851);
            VTDPropertyInfoBase pi852 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter419 = new VTDObjectSetter(pi852);
            binding_setter419 = new StringFormaterDecorator(binding_setter419,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir419 = new BindDirection(this.DataCursorActivity266,binding_getter433,binding_setter419,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir419);
            VTDPropertyInfoBase pi853 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter434 = new VTDObjectGetter(pi853);
            VTDPropertyInfoBase pi854 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter420 = new VTDObjectSetter(pi854);
            binding_setter420 = new StringFormaterDecorator(binding_setter420,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir420 = new BindDirection(this.DataCursorActivity266,binding_getter434,binding_setter420,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir420);
            VTDPropertyInfoBase pi855 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter435 = new VTDObjectGetter(pi855);
            VTDPropertyInfoBase pi856 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter421 = new VTDObjectSetter(pi856);
            binding_setter421 = new StringFormaterDecorator(binding_setter421,"{Step.OutputProperties.ReplaceStringActivity248.Result}");
            bind_dir421 = new BindDirection(_flow.ReplaceStringActivity248,binding_getter435,binding_setter421,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir421);
            VTDPropertyInfoBase pi857 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter436 = new VTDXPathGetter(pi857,XmlTypeCode.String);
            binding_getter436 = new XPathGetterDecorator(binding_getter436,"{Array0}",1);
            VTDPropertyInfoBase pi858 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter422 = new VTDObjectSetter(pi858);
            binding_setter422 = new StringFormaterDecorator(binding_setter422,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].Jid}");
            bind_dir422 = new BindDirection(_flow.DbFetchData141,binding_getter436,binding_setter422,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir422);
            VTDPropertyInfoBase pi859 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter437 = new VTDObjectGetter(pi859);
            VTDPropertyInfoBase pi860 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter423 = new VTDObjectSetter(pi860);
            binding_setter423 = new StringFormaterDecorator(binding_setter423,"{Step.OutputProperties.ReplaceStringActivity252.Result}");
            bind_dir423 = new BindDirection(_flow.ReplaceStringActivity252,binding_getter437,binding_setter423,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir423);
            XmlDocument HTTPActivity142_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity142_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity142_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity142.ExpectedResponseXmlBody = HTTPActivity142_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity142_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity142_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity142_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity142.ExpectedResponseJsonBody = HTTPActivity142_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity142_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity142_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity142_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity142.ExpectedOutputProperties = HTTPActivity142_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity143.InputString = @"{Step.OutputProperties.HTTPActivity142.ResponseBody}";
            _flow.StringToJsonActivity143.Comment = @"";
            _flow.StringToJsonActivity143.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity143.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi861 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter438 = new VTDObjectGetter(pi861);
            VTDPropertyInfoBase pi862 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter424 = new VTDObjectSetter(pi862);
            binding_setter424 = new StringFormaterDecorator(binding_setter424,"{Step.OutputProperties.HTTPActivity142.ResponseBody}");
            bind_dir424 = new BindDirection(_flow.HTTPActivity142,binding_getter438,binding_setter424,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity143.InDirections.Add(bind_dir424);
            _flow.DbFetchData144.QueryString = @"UPDATE tb_GetUnReadMessage_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity142.ResponseBody}' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData144.Timeout = (int)30;
            _flow.DbFetchData144.Comment = @"";
            _flow.DbFetchData144.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData144.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi863 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter439 = new VTDObjectGetter(pi863);
            VTDPropertyInfoBase pi864 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter425 = new VTDObjectSetter(pi864);
            binding_setter425 = new StringFormaterDecorator(binding_setter425,"{Step.OutputProperties.HTTPActivity142.ResponseBody}");
            bind_dir425 = new BindDirection(_flow.HTTPActivity142,binding_getter439,binding_setter425,BindTargetType.ToInProperty);
            _flow.DbFetchData144.InDirections.Add(bind_dir425);
            VTDPropertyInfoBase pi865 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter440 = new VTDObjectGetter(pi865);
            VTDPropertyInfoBase pi866 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter426 = new VTDObjectSetter(pi866);
            binding_setter426 = new StringFormaterDecorator(binding_setter426,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir426 = new BindDirection(_flow.Loop140,binding_getter440,binding_setter426,BindTargetType.ToInProperty);
            _flow.DbFetchData144.InDirections.Add(bind_dir426);
            VTDPropertyInfoBase pi867 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter441 = new VTDObjectGetter(pi867);
            VTDPropertyInfoBase pi868 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter427 = new VTDObjectSetter(pi868);
            bind_dir427 = new BindDirection(_flow.DbOpenConnection39,binding_getter441,binding_setter427,BindTargetType.ToInProperty);
            _flow.DbFetchData144.InDirections.Add(bind_dir427);
            XmlDocument DbFetchData144_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData144_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData144_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData144.ExpectedOutputProperties = DbFetchData144_ExpectedOutputProperties_Document;
            _flow.DbFetchData145.QueryString = @"update tb_GetUnReadMessage_verification set OutputValue= 'errorCode={Step.JsonContent.StringToJsonActivity143.errorCode}' where TestCase = 1";
            _flow.DbFetchData145.Timeout = (int)30;
            _flow.DbFetchData145.Comment = @"";
            _flow.DbFetchData145.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData145.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi869 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter442 = new VTDJsonGetter(pi869);
            VTDPropertyInfoBase pi870 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter428 = new VTDObjectSetter(pi870);
            binding_setter428 = new StringFormaterDecorator(binding_setter428,"{Step.JsonContent.StringToJsonActivity143.errorCode}");
            bind_dir428 = new BindDirection(_flow.StringToJsonActivity143,binding_getter442,binding_setter428,BindTargetType.ToInProperty);
            _flow.DbFetchData145.InDirections.Add(bind_dir428);
            VTDPropertyInfoBase pi871 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter443 = new VTDObjectGetter(pi871);
            VTDPropertyInfoBase pi872 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter429 = new VTDObjectSetter(pi872);
            bind_dir429 = new BindDirection(_flow.DbOpenConnection39,binding_getter443,binding_setter429,BindTargetType.ToInProperty);
            _flow.DbFetchData145.InDirections.Add(bind_dir429);
            XmlDocument DbFetchData145_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData145_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData145_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData145.ExpectedOutputProperties = DbFetchData145_ExpectedOutputProperties_Document;
            _flow.DbFetchData146.QueryString = @"select OutputValue from tb_GetUnReadMessage_verification where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData146.Timeout = (int)30;
            _flow.DbFetchData146.Comment = @"";
            _flow.DbFetchData146.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData146.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi873 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter444 = new VTDObjectGetter(pi873);
            VTDPropertyInfoBase pi874 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter430 = new VTDObjectSetter(pi874);
            binding_setter430 = new StringFormaterDecorator(binding_setter430,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir430 = new BindDirection(_flow.Loop140,binding_getter444,binding_setter430,BindTargetType.ToInProperty);
            _flow.DbFetchData146.InDirections.Add(bind_dir430);
            VTDPropertyInfoBase pi875 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter445 = new VTDObjectGetter(pi875);
            VTDPropertyInfoBase pi876 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter431 = new VTDObjectSetter(pi876);
            bind_dir431 = new BindDirection(_flow.DbOpenConnection39,binding_getter445,binding_setter431,BindTargetType.ToInProperty);
            _flow.DbFetchData146.InDirections.Add(bind_dir431);
            XmlDocument DbFetchData146_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData146_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData146_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData146.ExpectedOutputProperties = DbFetchData146_ExpectedOutputProperties_Document;
            _flow.DbFetchData147.QueryString = @"select ExpectationValue from tb_GetUnReadMessage_verification where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData147.Timeout = (int)30;
            _flow.DbFetchData147.Comment = @"";
            _flow.DbFetchData147.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData147.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi877 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter446 = new VTDObjectGetter(pi877);
            VTDPropertyInfoBase pi878 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter432 = new VTDObjectSetter(pi878);
            binding_setter432 = new StringFormaterDecorator(binding_setter432,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir432 = new BindDirection(_flow.Loop140,binding_getter446,binding_setter432,BindTargetType.ToInProperty);
            _flow.DbFetchData147.InDirections.Add(bind_dir432);
            VTDPropertyInfoBase pi879 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter447 = new VTDObjectGetter(pi879);
            VTDPropertyInfoBase pi880 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter433 = new VTDObjectSetter(pi880);
            bind_dir433 = new BindDirection(_flow.DbOpenConnection39,binding_getter447,binding_setter433,BindTargetType.ToInProperty);
            _flow.DbFetchData147.InDirections.Add(bind_dir433);
            XmlDocument DbFetchData147_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData147_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData147_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData147.ExpectedOutputProperties = DbFetchData147_ExpectedOutputProperties_Document;
            _flow.IfElse148.ConditionAsString = @"{Step.OutputProperties.DbFetchData146.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData147.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse148.Comment = @"";
            _flow.IfElse148.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse148.Name = @"填写Result";
            _flow.IfElse148.Activities.Add (_flow.IfElseBranch149);
            _flow.IfElse148.Activities.Add (_flow.IfElseBranch151);
            _flow.IfElseBranch149.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi881 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter448 = new VTDXPathGetter(pi881,XmlTypeCode.String);
            binding_getter448 = new XPathGetterDecorator(binding_getter448,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData146.GetParam(binding_getter448),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi882 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter449 = new VTDXPathGetter(pi882,XmlTypeCode.String);
            binding_getter449 = new XPathGetterDecorator(binding_getter449,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData147.GetParam(binding_getter449),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch149.Comment = @"";
            _flow.IfElseBranch149.IconPath = @"";
            _flow.IfElseBranch149.Name = @"是";
            _flow.IfElseBranch149.Activities.Add (_flow.DbFetchData150);
            _flow.IfElseBranch151.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch151.Comment = @"";
            _flow.IfElseBranch151.IconPath = @"";
            _flow.IfElseBranch151.Name = @"否";
            _flow.IfElseBranch151.Activities.Add (_flow.DbFetchData152);
            _flow.DbFetchData150.QueryString = @"update tb_GetUnReadMessage_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData150.Timeout = (int)30;
            _flow.DbFetchData150.Comment = @"";
            _flow.DbFetchData150.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData150.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi883 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter450 = new VTDObjectGetter(pi883);
            VTDPropertyInfoBase pi884 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter434 = new VTDObjectSetter(pi884);
            binding_setter434 = new StringFormaterDecorator(binding_setter434,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir434 = new BindDirection(_flow.Loop140,binding_getter450,binding_setter434,BindTargetType.ToInProperty);
            _flow.DbFetchData150.InDirections.Add(bind_dir434);
            VTDPropertyInfoBase pi885 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter451 = new VTDObjectGetter(pi885);
            VTDPropertyInfoBase pi886 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter435 = new VTDObjectSetter(pi886);
            bind_dir435 = new BindDirection(_flow.DbOpenConnection39,binding_getter451,binding_setter435,BindTargetType.ToInProperty);
            _flow.DbFetchData150.InDirections.Add(bind_dir435);
            XmlDocument DbFetchData150_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData150_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData150_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData150.ExpectedOutputProperties = DbFetchData150_ExpectedOutputProperties_Document;
            _flow.DbFetchData152.QueryString = @"update tb_GetUnReadMessage_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData152.Timeout = (int)30;
            _flow.DbFetchData152.Comment = @"";
            _flow.DbFetchData152.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData152.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi887 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter452 = new VTDObjectGetter(pi887);
            VTDPropertyInfoBase pi888 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter436 = new VTDObjectSetter(pi888);
            binding_setter436 = new StringFormaterDecorator(binding_setter436,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir436 = new BindDirection(_flow.Loop140,binding_getter452,binding_setter436,BindTargetType.ToInProperty);
            _flow.DbFetchData152.InDirections.Add(bind_dir436);
            VTDPropertyInfoBase pi889 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter453 = new VTDObjectGetter(pi889);
            VTDPropertyInfoBase pi890 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter437 = new VTDObjectSetter(pi890);
            bind_dir437 = new BindDirection(_flow.DbOpenConnection39,binding_getter453,binding_setter437,BindTargetType.ToInProperty);
            _flow.DbFetchData152.InDirections.Add(bind_dir437);
            XmlDocument DbFetchData152_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData152_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData152_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData152.ExpectedOutputProperties = DbFetchData152_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    