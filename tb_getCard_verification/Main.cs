/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getCard_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir650 = null;
        public BindDirection bind_dir651 = null;
        public BindDirection bind_dir652 = null;
        public BindDirection bind_dir653 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity263 = null;
        public BindDirection bind_dir654 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity263_Policy = null;
        public BindDirection bind_dir655 = null;
        public BindDirection bind_dir656 = null;
        public BindDirection bind_dir657 = null;
        public BindDirection bind_dir658 = null;
        public BindDirection bind_dir659 = null;
        public BindDirection bind_dir660 = null;
        public BindDirection bind_dir661 = null;
        public BindDirection bind_dir662 = null;
        public BindDirection bind_dir663 = null;
        public BindDirection bind_dir664 = null;
        public BindDirection bind_dir665 = null;
        public BindDirection bind_dir666 = null;
        public BindDirection bind_dir667 = null;
        public BindDirection bind_dir668 = null;
        public BindDirection bind_dir669 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir670 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir671 = null;
        public BindDirection bind_dir672 = null;
        public BindDirection bind_dir673 = null;
        public BindDirection bind_dir674 = null;
        public BindDirection bind_dir675 = null;
        public BindDirection bind_dir676 = null;
        public BindDirection bind_dir677 = null;
        public BindDirection bind_dir678 = null;
        public BindDirection bind_dir679 = null;
        public BindDirection bind_dir680 = null;
        public BindDirection bind_dir681 = null;
        public BindDirection bind_dir682 = null;
        public BindDirection bind_dir683 = null;
        public BindDirection bind_dir684 = null;
        public BindDirection bind_dir685 = null;
        public BindDirection bind_dir686 = null;
        public BindDirection bind_dir687 = null;
        public BindDirection bind_dir688 = null;
        public BindDirection bind_dir689 = null;
        public BindDirection bind_dir690 = null;
        public BindDirection bind_dir691 = null;
        public BindDirection bind_dir692 = null;
        public BindDirection bind_dir693 = null;
        public BindDirection bind_dir694 = null;
        public BindDirection bind_dir695 = null;
        public BindDirection bind_dir696 = null;
        public BindDirection bind_dir697 = null;
        public BindDirection bind_dir698 = null;
        public BindDirection bind_dir699 = null;
        public BindDirection bind_dir700 = null;
        public BindDirection bind_dir701 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity259 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity259");
            _flow.DataFetchActivity256 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity256");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity258 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity258");
            _flow.DataExporterActivity261 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity261");
            _flow.DataExporterCloseActivity262 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity262");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity257 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity257");
            _flow.DataDisconnectActivity260 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity260");
            this.DataCursorActivity263 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity263");
            this.DataCursorActivity263_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence254 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence254");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity259.Comment = @"";
            _flow.DataFetchActivity259.IconPath = @"";
            _flow.DataFetchActivity259.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity259.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity259_QueryParameters_Document = new XmlDocument();
            DataFetchActivity259_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity259Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity259_QueryParameters_Document.LoadXml(xmlDataFetchActivity259Params);
            _flow.DataFetchActivity259.QueryParameters = DataFetchActivity259_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity259);
            this.Activities.Add (_flow.DataFetchActivity259);
            _flow.DataFetchActivity256.Comment = @"";
            _flow.DataFetchActivity256.IconPath = @"";
            _flow.DataFetchActivity256.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity256.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity256_QueryParameters_Document = new XmlDocument();
            DataFetchActivity256_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity256Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity256_QueryParameters_Document.LoadXml(xmlDataFetchActivity256Params);
            _flow.DataFetchActivity256.QueryParameters = DataFetchActivity256_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity256);
            this.Activities.Add (_flow.DataFetchActivity256);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity263);
            _flow.Loop2.Activities.Add (_flow.Sequence254);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity258.Comment = @"";
            _flow.DataExporterActivity258.IconPath = @"";
            VTDPropertyInfoBase pi1323 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter674 = new VTDObjectGetter(pi1323);
            VTDPropertyInfoBase pi1324 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter650 = new VTDObjectSetter(pi1324);
            binding_setter650 = new StringFormaterDecorator(binding_setter650,"{Step.DataFetchActivity256.OutTable}");
            bind_dir650 = new BindDirection(_flow.DataFetchActivity256,binding_getter674,binding_setter650,BindTargetType.ToInProperty);
            _flow.DataExporterActivity258.InDirections.Add(bind_dir650);
            this.Activities.Add (_flow.DataExporterActivity258);
            _flow.DataExporterActivity261.Comment = @"";
            _flow.DataExporterActivity261.IconPath = @"";
            VTDPropertyInfoBase pi1325 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter675 = new VTDObjectGetter(pi1325);
            VTDPropertyInfoBase pi1326 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter651 = new VTDObjectSetter(pi1326);
            binding_setter651 = new StringFormaterDecorator(binding_setter651,"{Step.DataFetchActivity259.OutTable}");
            bind_dir651 = new BindDirection(_flow.DataFetchActivity259,binding_getter675,binding_setter651,BindTargetType.ToInProperty);
            _flow.DataExporterActivity261.InDirections.Add(bind_dir651);
            this.Activities.Add (_flow.DataExporterActivity261);
            _flow.DataExporterCloseActivity262.Comment = @"";
            _flow.DataExporterCloseActivity262.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity262);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity257.Comment = @"";
            _flow.DataDisconnectActivity257.IconPath = @"";
            VTDPropertyInfoBase pi1327 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter676 = new VTDObjectGetter(pi1327);
            VTDPropertyInfoBase pi1328 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter652 = new VTDObjectSetter(pi1328);
            binding_setter652 = new StringFormaterDecorator(binding_setter652,"{Step.DataFetchActivity256.OutTable}");
            bind_dir652 = new BindDirection(_flow.DataFetchActivity256,binding_getter676,binding_setter652,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity257.InDirections.Add(bind_dir652);
            this.Activities.Add (_flow.DataDisconnectActivity257);
            _flow.DataDisconnectActivity260.Comment = @"";
            _flow.DataDisconnectActivity260.IconPath = @"";
            VTDPropertyInfoBase pi1329 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter677 = new VTDObjectGetter(pi1329);
            VTDPropertyInfoBase pi1330 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter653 = new VTDObjectSetter(pi1330);
            binding_setter653 = new StringFormaterDecorator(binding_setter653,"{Step.DataFetchActivity259.OutTable}");
            bind_dir653 = new BindDirection(_flow.DataFetchActivity259,binding_getter677,binding_setter653,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity260.InDirections.Add(bind_dir653);
            this.Activities.Add (_flow.DataDisconnectActivity260);
            this.DataCursorActivity263.Comment = @"";
            this.DataCursorActivity263.IconPath = @"";
            VTDPropertyInfoBase pi1331 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter678 = new VTDObjectGetter(pi1331);
            VTDPropertyInfoBase pi1332 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter654 = new VTDObjectSetter(pi1332);
            binding_setter654 = new StringFormaterDecorator(binding_setter654,"{Step.DataFetchActivity256.OutTable}");
            bind_dir654 = new BindDirection(_flow.DataFetchActivity256,binding_getter678,binding_setter654,BindTargetType.ToInProperty);
            this.DataCursorActivity263.InDirections.Add(bind_dir654);
            this.DataCursorActivity263_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity263_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.StartCondition.Value = "";
            this.DataCursorActivity263_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity263_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.EndCondition.Value = "";
            this.DataCursorActivity263_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity263_Policy.StepSize = 1;
            this.DataCursorActivity263_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity263.Policy = this.DataCursorActivity263_Policy;
            this.DataCursorActivity263.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity263.ResetCursor;
            _flow.Sequence254.Comment = @"";
            _flow.Sequence254.IconPath = @"";
            _flow.Sequence254.Name = @"序列254";
            _flow.Sequence254.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence254.Activities.Add (_flow.Loop56);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence254.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence254.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getCard_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_getCard_verification表有效行数";
            VTDPropertyInfoBase pi1333 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter679 = new VTDObjectGetter(pi1333);
            VTDPropertyInfoBase pi1334 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter655 = new VTDObjectSetter(pi1334);
            bind_dir655 = new BindDirection(_flow.DbOpenConnection39,binding_getter679,binding_setter655,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir655);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中xsid";
            VTDPropertyInfoBase pi1335 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter680 = new VTDObjectGetter(pi1335);
            VTDPropertyInfoBase pi1336 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter656 = new VTDObjectSetter(pi1336);
            bind_dir656 = new BindDirection(_flow.DbOpenConnection39,binding_getter680,binding_setter656,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir656);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop56.NumberOfIterations = (int)0;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getCard_verification中的测试用例";
            VTDPropertyInfoBase pi1337 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter681 = new VTDXPathGetter(pi1337,XmlTypeCode.Long);
            binding_getter681 = new XPathGetterDecorator(binding_getter681,"{Array0}",1);
            VTDPropertyInfoBase pi1338 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter657 = new VTDObjectSetter(pi1338);
            bind_dir657 = new BindDirection(_flow.DbFetchData58,binding_getter681,binding_setter657,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir657);
            _flow.Loop56.Activities.Add (this.DataCursorActivity264);
            _flow.Loop56.Activities.Add (_flow.Sequence255);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/xmp/createGroup.php接口token实行加密";
            VTDPropertyInfoBase pi1339 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter682 = new VTDObjectGetter(pi1339);
            VTDPropertyInfoBase pi1340 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter658 = new VTDObjectSetter(pi1340);
            binding_setter658 = new StringFormaterDecorator(binding_setter658,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir658 = new BindDirection(this.DataCursorActivity263,binding_getter682,binding_setter658,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir658);
            VTDPropertyInfoBase pi1341 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter683 = new VTDObjectGetter(pi1341);
            VTDPropertyInfoBase pi1342 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter659 = new VTDObjectSetter(pi1342);
            bind_dir659 = new BindDirection(_flow.DbOpenConnection39,binding_getter683,binding_setter659,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir659);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1343 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter684 = new VTDObjectGetter(pi1343);
            VTDPropertyInfoBase pi1344 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter660 = new VTDObjectSetter(pi1344);
            bind_dir660 = new BindDirection(_flow.DbOpenConnection39,binding_getter684,binding_setter660,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir660);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}&toJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getCard}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/xmp/createGroup.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi1345 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter685 = new VTDObjectGetter(pi1345);
            VTDPropertyInfoBase pi1346 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter661 = new VTDObjectSetter(pi1346);
            binding_setter661 = new StringFormaterDecorator(binding_setter661,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir661 = new BindDirection(this.DataCursorActivity263,binding_getter685,binding_setter661,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir661);
            VTDPropertyInfoBase pi1347 = new VTDPropertyInfoBase("getCard");
            VTDBaseGetter binding_getter686 = new VTDObjectGetter(pi1347);
            VTDPropertyInfoBase pi1348 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter662 = new VTDObjectSetter(pi1348);
            binding_setter662 = new StringFormaterDecorator(binding_setter662,"{DataSource.tb_global_table.getCard}");
            bind_dir662 = new BindDirection(this.DataCursorActivity263,binding_getter686,binding_setter662,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir662);
            VTDPropertyInfoBase pi1349 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter687 = new VTDObjectGetter(pi1349);
            VTDPropertyInfoBase pi1350 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter663 = new VTDObjectSetter(pi1350);
            binding_setter663 = new StringFormaterDecorator(binding_setter663,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir663 = new BindDirection(this.DataCursorActivity263,binding_getter687,binding_setter663,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir663);
            VTDPropertyInfoBase pi1351 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter688 = new VTDObjectGetter(pi1351);
            VTDPropertyInfoBase pi1352 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter664 = new VTDObjectSetter(pi1352);
            binding_setter664 = new StringFormaterDecorator(binding_setter664,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir664 = new BindDirection(this.DataCursorActivity263,binding_getter688,binding_setter664,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir664);
            VTDPropertyInfoBase pi1353 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter689 = new VTDXPathGetter(pi1353,XmlTypeCode.String);
            binding_getter689 = new XPathGetterDecorator(binding_getter689,"{Array0}",1);
            VTDPropertyInfoBase pi1354 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter665 = new VTDObjectSetter(pi1354);
            binding_setter665 = new StringFormaterDecorator(binding_setter665,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir665 = new BindDirection(_flow.DbFetchData248,binding_getter689,binding_setter665,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir665);
            VTDPropertyInfoBase pi1355 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter690 = new VTDObjectGetter(pi1355);
            VTDPropertyInfoBase pi1356 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter666 = new VTDObjectSetter(pi1356);
            binding_setter666 = new StringFormaterDecorator(binding_setter666,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir666 = new BindDirection(this.DataCursorActivity263,binding_getter690,binding_setter666,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir666);
            VTDPropertyInfoBase pi1357 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter691 = new VTDXPathGetter(pi1357,XmlTypeCode.String);
            binding_getter691 = new XPathGetterDecorator(binding_getter691,"{Array0}",1);
            VTDPropertyInfoBase pi1358 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter667 = new VTDObjectSetter(pi1358);
            binding_setter667 = new StringFormaterDecorator(binding_setter667,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir667 = new BindDirection(_flow.DbFetchData76,binding_getter691,binding_setter667,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir667);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/getCard.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1359 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter692 = new VTDObjectGetter(pi1359);
            VTDPropertyInfoBase pi1360 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter668 = new VTDObjectSetter(pi1360);
            binding_setter668 = new StringFormaterDecorator(binding_setter668,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir668 = new BindDirection(_flow.HTTPActivity73,binding_getter692,binding_setter668,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir668);
            VTDPropertyInfoBase pi1361 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter693 = new VTDObjectGetter(pi1361);
            VTDPropertyInfoBase pi1362 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter669 = new VTDObjectSetter(pi1362);
            bind_dir669 = new BindDirection(_flow.DbOpenConnection39,binding_getter693,binding_setter669,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir669);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1363 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter694 = new VTDObjectGetter(pi1363);
            VTDPropertyInfoBase pi1364 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter670 = new VTDObjectSetter(pi1364);
            binding_setter670 = new StringFormaterDecorator(binding_setter670,"{Step.DataFetchActivity256.OutTable}");
            bind_dir670 = new BindDirection(_flow.DataFetchActivity256,binding_getter694,binding_setter670,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir670);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence255.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence255.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,toJid,token from tb_getCard_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getCard_verification表中字段信息";
            VTDPropertyInfoBase pi1365 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter695 = new VTDObjectGetter(pi1365);
            VTDPropertyInfoBase pi1366 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter671 = new VTDObjectSetter(pi1366);
            binding_setter671 = new StringFormaterDecorator(binding_setter671,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir671 = new BindDirection(_flow.Loop56,binding_getter695,binding_setter671,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir671);
            VTDPropertyInfoBase pi1367 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter696 = new VTDObjectGetter(pi1367);
            VTDPropertyInfoBase pi1368 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter672 = new VTDObjectSetter(pi1368);
            bind_dir672 = new BindDirection(_flow.DbOpenConnection39,binding_getter696,binding_setter672,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir672);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><toJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将本地表的xsid更新";
            VTDPropertyInfoBase pi1369 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter697 = new VTDXPathGetter(pi1369,XmlTypeCode.String);
            binding_getter697 = new XPathGetterDecorator(binding_getter697,"{Array0}",1);
            VTDPropertyInfoBase pi1370 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter673 = new VTDObjectSetter(pi1370);
            binding_setter673 = new StringFormaterDecorator(binding_setter673,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir673 = new BindDirection(_flow.DbFetchData57,binding_getter697,binding_setter673,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir673);
            VTDPropertyInfoBase pi1371 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter698 = new VTDXPathGetter(pi1371,XmlTypeCode.String);
            binding_getter698 = new XPathGetterDecorator(binding_getter698,"{Array0}",1);
            VTDPropertyInfoBase pi1372 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter674 = new VTDObjectSetter(pi1372);
            binding_setter674 = new StringFormaterDecorator(binding_setter674,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir674 = new BindDirection(_flow.DbFetchData248,binding_getter698,binding_setter674,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir674);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi1373 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='toJid'][1]");
            VTDBaseGetter binding_getter699 = new VTDXPathGetter(pi1373,XmlTypeCode.String);
            binding_getter699 = new XPathGetterDecorator(binding_getter699,"{Array0}",1);
            VTDPropertyInfoBase pi1374 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter675 = new VTDObjectSetter(pi1374);
            binding_setter675 = new StringFormaterDecorator(binding_setter675,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}");
            bind_dir675 = new BindDirection(_flow.DbFetchData57,binding_getter699,binding_setter675,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir675);
            VTDPropertyInfoBase pi1375 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter700 = new VTDObjectGetter(pi1375);
            VTDPropertyInfoBase pi1376 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter676 = new VTDObjectSetter(pi1376);
            bind_dir676 = new BindDirection(_flow.DbOpenConnection39,binding_getter700,binding_setter676,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir676);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi1377 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter701 = new VTDObjectGetter(pi1377);
            VTDPropertyInfoBase pi1378 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter677 = new VTDObjectSetter(pi1378);
            bind_dir677 = new BindDirection(_flow.DbOpenConnection39,binding_getter701,binding_setter677,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir677);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"305bbc2b43542b3d0203daffe9073c3cba5b47d9";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi1379 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter702 = new VTDXPathGetter(pi1379,XmlTypeCode.String);
            binding_getter702 = new XPathGetterDecorator(binding_getter702,"{Array0}",1);
            VTDPropertyInfoBase pi1380 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter678 = new VTDObjectSetter(pi1380);
            binding_setter678 = new StringFormaterDecorator(binding_setter678,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir678 = new BindDirection(_flow.DbFetchData57,binding_getter702,binding_setter678,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir678);
            VTDPropertyInfoBase pi1381 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter703 = new VTDXPathGetter(pi1381,XmlTypeCode.String);
            binding_getter703 = new XPathGetterDecorator(binding_getter703,"{Array0}",1);
            VTDPropertyInfoBase pi1382 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter679 = new VTDObjectSetter(pi1382);
            binding_setter679 = new StringFormaterDecorator(binding_setter679,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir679 = new BindDirection(_flow.DbFetchData252,binding_getter703,binding_setter679,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir679);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&toJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getCard}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/getCard.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi1383 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter704 = new VTDObjectGetter(pi1383);
            VTDPropertyInfoBase pi1384 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter680 = new VTDObjectSetter(pi1384);
            binding_setter680 = new StringFormaterDecorator(binding_setter680,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir680 = new BindDirection(this.DataCursorActivity264,binding_getter704,binding_setter680,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir680);
            VTDPropertyInfoBase pi1385 = new VTDPropertyInfoBase("getCard");
            VTDBaseGetter binding_getter705 = new VTDObjectGetter(pi1385);
            VTDPropertyInfoBase pi1386 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter681 = new VTDObjectSetter(pi1386);
            binding_setter681 = new StringFormaterDecorator(binding_setter681,"{DataSource.tb_global_table.getCard}");
            bind_dir681 = new BindDirection(this.DataCursorActivity264,binding_getter705,binding_setter681,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir681);
            VTDPropertyInfoBase pi1387 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter706 = new VTDObjectGetter(pi1387);
            VTDPropertyInfoBase pi1388 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter682 = new VTDObjectSetter(pi1388);
            binding_setter682 = new StringFormaterDecorator(binding_setter682,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir682 = new BindDirection(this.DataCursorActivity264,binding_getter706,binding_setter682,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir682);
            VTDPropertyInfoBase pi1389 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter707 = new VTDObjectGetter(pi1389);
            VTDPropertyInfoBase pi1390 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter683 = new VTDObjectSetter(pi1390);
            binding_setter683 = new StringFormaterDecorator(binding_setter683,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir683 = new BindDirection(this.DataCursorActivity264,binding_getter707,binding_setter683,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir683);
            VTDPropertyInfoBase pi1391 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter708 = new VTDObjectGetter(pi1391);
            VTDPropertyInfoBase pi1392 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter684 = new VTDObjectSetter(pi1392);
            binding_setter684 = new StringFormaterDecorator(binding_setter684,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir684 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter708,binding_setter684,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir684);
            VTDPropertyInfoBase pi1393 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='toJid'][1]");
            VTDBaseGetter binding_getter709 = new VTDXPathGetter(pi1393,XmlTypeCode.String);
            binding_getter709 = new XPathGetterDecorator(binding_getter709,"{Array0}",1);
            VTDPropertyInfoBase pi1394 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter685 = new VTDObjectSetter(pi1394);
            binding_setter685 = new StringFormaterDecorator(binding_setter685,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}");
            bind_dir685 = new BindDirection(_flow.DbFetchData57,binding_getter709,binding_setter685,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir685);
            VTDPropertyInfoBase pi1395 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter710 = new VTDObjectGetter(pi1395);
            VTDPropertyInfoBase pi1396 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter686 = new VTDObjectSetter(pi1396);
            binding_setter686 = new StringFormaterDecorator(binding_setter686,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir686 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter710,binding_setter686,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir686);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1397 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter711 = new VTDObjectGetter(pi1397);
            VTDPropertyInfoBase pi1398 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter687 = new VTDObjectSetter(pi1398);
            binding_setter687 = new StringFormaterDecorator(binding_setter687,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir687 = new BindDirection(_flow.HTTPActivity59,binding_getter711,binding_setter687,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir687);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getCard_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi1399 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter712 = new VTDObjectGetter(pi1399);
            VTDPropertyInfoBase pi1400 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter688 = new VTDObjectSetter(pi1400);
            binding_setter688 = new StringFormaterDecorator(binding_setter688,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir688 = new BindDirection(_flow.HTTPActivity59,binding_getter712,binding_setter688,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir688);
            VTDPropertyInfoBase pi1401 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter713 = new VTDObjectGetter(pi1401);
            VTDPropertyInfoBase pi1402 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter689 = new VTDObjectSetter(pi1402);
            binding_setter689 = new StringFormaterDecorator(binding_setter689,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir689 = new BindDirection(_flow.Loop56,binding_getter713,binding_setter689,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir689);
            VTDPropertyInfoBase pi1403 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter714 = new VTDObjectGetter(pi1403);
            VTDPropertyInfoBase pi1404 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter690 = new VTDObjectSetter(pi1404);
            bind_dir690 = new BindDirection(_flow.DbOpenConnection39,binding_getter714,binding_setter690,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir690);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getCard_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1405 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter715 = new VTDJsonGetter(pi1405);
            VTDPropertyInfoBase pi1406 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter691 = new VTDObjectSetter(pi1406);
            binding_setter691 = new StringFormaterDecorator(binding_setter691,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir691 = new BindDirection(_flow.StringToJsonActivity60,binding_getter715,binding_setter691,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir691);
            VTDPropertyInfoBase pi1407 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter716 = new VTDObjectGetter(pi1407);
            VTDPropertyInfoBase pi1408 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter692 = new VTDObjectSetter(pi1408);
            binding_setter692 = new StringFormaterDecorator(binding_setter692,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir692 = new BindDirection(_flow.Loop56,binding_getter716,binding_setter692,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir692);
            VTDPropertyInfoBase pi1409 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter717 = new VTDObjectGetter(pi1409);
            VTDPropertyInfoBase pi1410 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter693 = new VTDObjectSetter(pi1410);
            bind_dir693 = new BindDirection(_flow.DbOpenConnection39,binding_getter717,binding_setter693,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir693);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getCard_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1411 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter718 = new VTDObjectGetter(pi1411);
            VTDPropertyInfoBase pi1412 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter694 = new VTDObjectSetter(pi1412);
            binding_setter694 = new StringFormaterDecorator(binding_setter694,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir694 = new BindDirection(_flow.Loop56,binding_getter718,binding_setter694,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir694);
            VTDPropertyInfoBase pi1413 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter719 = new VTDObjectGetter(pi1413);
            VTDPropertyInfoBase pi1414 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter695 = new VTDObjectSetter(pi1414);
            bind_dir695 = new BindDirection(_flow.DbOpenConnection39,binding_getter719,binding_setter695,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir695);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getCard_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1415 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter720 = new VTDObjectGetter(pi1415);
            VTDPropertyInfoBase pi1416 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter696 = new VTDObjectSetter(pi1416);
            binding_setter696 = new StringFormaterDecorator(binding_setter696,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir696 = new BindDirection(_flow.Loop56,binding_getter720,binding_setter696,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir696);
            VTDPropertyInfoBase pi1417 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter721 = new VTDObjectGetter(pi1417);
            VTDPropertyInfoBase pi1418 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter697 = new VTDObjectSetter(pi1418);
            bind_dir697 = new BindDirection(_flow.DbOpenConnection39,binding_getter721,binding_setter697,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir697);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1419 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter722 = new VTDXPathGetter(pi1419,XmlTypeCode.String);
            binding_getter722 = new XPathGetterDecorator(binding_getter722,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter722),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1420 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter723 = new VTDXPathGetter(pi1420,XmlTypeCode.String);
            binding_getter723 = new XPathGetterDecorator(binding_getter723,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter723),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getCard_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1421 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter724 = new VTDObjectGetter(pi1421);
            VTDPropertyInfoBase pi1422 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter698 = new VTDObjectSetter(pi1422);
            binding_setter698 = new StringFormaterDecorator(binding_setter698,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir698 = new BindDirection(_flow.Loop56,binding_getter724,binding_setter698,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir698);
            VTDPropertyInfoBase pi1423 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter725 = new VTDObjectGetter(pi1423);
            VTDPropertyInfoBase pi1424 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter699 = new VTDObjectSetter(pi1424);
            bind_dir699 = new BindDirection(_flow.DbOpenConnection39,binding_getter725,binding_setter699,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir699);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getCard_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1425 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter726 = new VTDObjectGetter(pi1425);
            VTDPropertyInfoBase pi1426 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter700 = new VTDObjectSetter(pi1426);
            binding_setter700 = new StringFormaterDecorator(binding_setter700,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir700 = new BindDirection(_flow.Loop56,binding_getter726,binding_setter700,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir700);
            VTDPropertyInfoBase pi1427 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter727 = new VTDObjectGetter(pi1427);
            VTDPropertyInfoBase pi1428 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter701 = new VTDObjectSetter(pi1428);
            bind_dir701 = new BindDirection(_flow.DbOpenConnection39,binding_getter727,binding_setter701,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir701);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    