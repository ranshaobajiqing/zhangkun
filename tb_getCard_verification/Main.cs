/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getCard_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir297 = null;
        public BindDirection bind_dir298 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity260 = null;
        public BindDirection bind_dir299 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity260_Policy = null;
        public BindDirection bind_dir300 = null;
        public BindDirection bind_dir301 = null;
        public BindDirection bind_dir302 = null;
        public BindDirection bind_dir303 = null;
        public BindDirection bind_dir304 = null;
        public BindDirection bind_dir305 = null;
        public BindDirection bind_dir306 = null;
        public BindDirection bind_dir307 = null;
        public BindDirection bind_dir308 = null;
        public BindDirection bind_dir309 = null;
        public BindDirection bind_dir310 = null;
        public BindDirection bind_dir311 = null;
        public BindDirection bind_dir312 = null;
        public BindDirection bind_dir313 = null;
        public BindDirection bind_dir314 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity261 = null;
        public BindDirection bind_dir315 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity261_Policy = null;
        public BindDirection bind_dir316 = null;
        public BindDirection bind_dir317 = null;
        public BindDirection bind_dir318 = null;
        public BindDirection bind_dir319 = null;
        public BindDirection bind_dir320 = null;
        public BindDirection bind_dir321 = null;
        public BindDirection bind_dir322 = null;
        public BindDirection bind_dir323 = null;
        public BindDirection bind_dir324 = null;
        public BindDirection bind_dir325 = null;
        public BindDirection bind_dir326 = null;
        public BindDirection bind_dir327 = null;
        public BindDirection bind_dir328 = null;
        public BindDirection bind_dir329 = null;
        public BindDirection bind_dir330 = null;
        public BindDirection bind_dir331 = null;
        public BindDirection bind_dir332 = null;
        public BindDirection bind_dir333 = null;
        public BindDirection bind_dir334 = null;
        public BindDirection bind_dir335 = null;
        public BindDirection bind_dir336 = null;
        public BindDirection bind_dir337 = null;
        public BindDirection bind_dir338 = null;
        public BindDirection bind_dir339 = null;
        public BindDirection bind_dir340 = null;
        public BindDirection bind_dir341 = null;
        public BindDirection bind_dir342 = null;
        public BindDirection bind_dir343 = null;
        public BindDirection bind_dir344 = null;
        public BindDirection bind_dir345 = null;
        public BindDirection bind_dir346 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity256 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity256");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity258 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity258");
            _flow.DataExporterCloseActivity259 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity259");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity257 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity257");
            this.DataCursorActivity260 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity260");
            this.DataCursorActivity260_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence254 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence254");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity261 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity261");
            this.DataCursorActivity261_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity256.Comment = @"";
            _flow.DataFetchActivity256.IconPath = @"";
            _flow.DataFetchActivity256.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity256.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity256_QueryParameters_Document = new XmlDocument();
            DataFetchActivity256_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity256Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity256_QueryParameters_Document.LoadXml(xmlDataFetchActivity256Params);
            _flow.DataFetchActivity256.QueryParameters = DataFetchActivity256_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity256);
            this.Activities.Add (_flow.DataFetchActivity256);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity260);
            _flow.Loop2.Activities.Add (_flow.Sequence254);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity258.Comment = @"";
            _flow.DataExporterActivity258.IconPath = @"";
            VTDPropertyInfoBase pi605 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter309 = new VTDObjectGetter(pi605);
            VTDPropertyInfoBase pi606 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter297 = new VTDObjectSetter(pi606);
            binding_setter297 = new StringFormaterDecorator(binding_setter297,"{Step.DataFetchActivity256.OutTable}");
            bind_dir297 = new BindDirection(_flow.DataFetchActivity256,binding_getter309,binding_setter297,BindTargetType.ToInProperty);
            _flow.DataExporterActivity258.InDirections.Add(bind_dir297);
            this.Activities.Add (_flow.DataExporterActivity258);
            _flow.DataExporterCloseActivity259.Comment = @"";
            _flow.DataExporterCloseActivity259.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity259);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity257.Comment = @"";
            _flow.DataDisconnectActivity257.IconPath = @"";
            VTDPropertyInfoBase pi607 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter310 = new VTDObjectGetter(pi607);
            VTDPropertyInfoBase pi608 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter298 = new VTDObjectSetter(pi608);
            binding_setter298 = new StringFormaterDecorator(binding_setter298,"{Step.DataFetchActivity256.OutTable}");
            bind_dir298 = new BindDirection(_flow.DataFetchActivity256,binding_getter310,binding_setter298,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity257.InDirections.Add(bind_dir298);
            this.Activities.Add (_flow.DataDisconnectActivity257);
            this.DataCursorActivity260.Comment = @"";
            this.DataCursorActivity260.IconPath = @"";
            VTDPropertyInfoBase pi609 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter311 = new VTDObjectGetter(pi609);
            VTDPropertyInfoBase pi610 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter299 = new VTDObjectSetter(pi610);
            binding_setter299 = new StringFormaterDecorator(binding_setter299,"{Step.DataFetchActivity256.OutTable}");
            bind_dir299 = new BindDirection(_flow.DataFetchActivity256,binding_getter311,binding_setter299,BindTargetType.ToInProperty);
            this.DataCursorActivity260.InDirections.Add(bind_dir299);
            this.DataCursorActivity260_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity260_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity260_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity260_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity260_Policy.StartCondition.Value = "";
            this.DataCursorActivity260_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity260_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity260_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity260_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity260_Policy.EndCondition.Value = "";
            this.DataCursorActivity260_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity260_Policy.StepSize = 1;
            this.DataCursorActivity260_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity260.Policy = this.DataCursorActivity260_Policy;
            this.DataCursorActivity260.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity260.ResetCursor;
            _flow.Sequence254.Comment = @"";
            _flow.Sequence254.IconPath = @"";
            _flow.Sequence254.Name = @"序列254";
            _flow.Sequence254.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence254.Activities.Add (_flow.Loop56);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence254.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence254.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getcard_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_getCard_verification表有效行数";
            VTDPropertyInfoBase pi611 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter312 = new VTDObjectGetter(pi611);
            VTDPropertyInfoBase pi612 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter300 = new VTDObjectSetter(pi612);
            bind_dir300 = new BindDirection(_flow.DbOpenConnection39,binding_getter312,binding_setter300,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir300);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中xsid";
            VTDPropertyInfoBase pi613 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter313 = new VTDObjectGetter(pi613);
            VTDPropertyInfoBase pi614 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter301 = new VTDObjectSetter(pi614);
            bind_dir301 = new BindDirection(_flow.DbOpenConnection39,binding_getter313,binding_setter301,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir301);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop56.NumberOfIterations = (int)0;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getCard_verification中的测试用例";
            VTDPropertyInfoBase pi615 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter314 = new VTDXPathGetter(pi615,XmlTypeCode.Long);
            binding_getter314 = new XPathGetterDecorator(binding_getter314,"{Array0}",1);
            VTDPropertyInfoBase pi616 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter302 = new VTDObjectSetter(pi616);
            bind_dir302 = new BindDirection(_flow.DbFetchData58,binding_getter314,binding_setter302,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir302);
            _flow.Loop56.Activities.Add (this.DataCursorActivity261);
            _flow.Loop56.Activities.Add (_flow.Sequence255);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/xmp/createGroup.php接口token实行加密";
            VTDPropertyInfoBase pi617 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter315 = new VTDObjectGetter(pi617);
            VTDPropertyInfoBase pi618 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter303 = new VTDObjectSetter(pi618);
            binding_setter303 = new StringFormaterDecorator(binding_setter303,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir303 = new BindDirection(this.DataCursorActivity260,binding_getter315,binding_setter303,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir303);
            VTDPropertyInfoBase pi619 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter316 = new VTDObjectGetter(pi619);
            VTDPropertyInfoBase pi620 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter304 = new VTDObjectSetter(pi620);
            bind_dir304 = new BindDirection(_flow.DbOpenConnection39,binding_getter316,binding_setter304,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir304);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi621 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter317 = new VTDObjectGetter(pi621);
            VTDPropertyInfoBase pi622 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter305 = new VTDObjectSetter(pi622);
            bind_dir305 = new BindDirection(_flow.DbOpenConnection39,binding_getter317,binding_setter305,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir305);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}&toJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getCard}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/xmp/createGroup.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi623 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter318 = new VTDObjectGetter(pi623);
            VTDPropertyInfoBase pi624 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter306 = new VTDObjectSetter(pi624);
            binding_setter306 = new StringFormaterDecorator(binding_setter306,"{DataSource.tb_global_table.IQHost}");
            bind_dir306 = new BindDirection(this.DataCursorActivity260,binding_getter318,binding_setter306,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir306);
            VTDPropertyInfoBase pi625 = new VTDPropertyInfoBase("getCard");
            VTDBaseGetter binding_getter319 = new VTDObjectGetter(pi625);
            VTDPropertyInfoBase pi626 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter307 = new VTDObjectSetter(pi626);
            binding_setter307 = new StringFormaterDecorator(binding_setter307,"{DataSource.tb_global_table.getCard}");
            bind_dir307 = new BindDirection(this.DataCursorActivity260,binding_getter319,binding_setter307,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir307);
            VTDPropertyInfoBase pi627 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter320 = new VTDObjectGetter(pi627);
            VTDPropertyInfoBase pi628 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter308 = new VTDObjectSetter(pi628);
            binding_setter308 = new StringFormaterDecorator(binding_setter308,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir308 = new BindDirection(this.DataCursorActivity260,binding_getter320,binding_setter308,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir308);
            VTDPropertyInfoBase pi629 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter321 = new VTDObjectGetter(pi629);
            VTDPropertyInfoBase pi630 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter309 = new VTDObjectSetter(pi630);
            binding_setter309 = new StringFormaterDecorator(binding_setter309,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir309 = new BindDirection(this.DataCursorActivity260,binding_getter321,binding_setter309,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir309);
            VTDPropertyInfoBase pi631 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter322 = new VTDXPathGetter(pi631,XmlTypeCode.String);
            binding_getter322 = new XPathGetterDecorator(binding_getter322,"{Array0}",1);
            VTDPropertyInfoBase pi632 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter310 = new VTDObjectSetter(pi632);
            binding_setter310 = new StringFormaterDecorator(binding_setter310,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir310 = new BindDirection(_flow.DbFetchData248,binding_getter322,binding_setter310,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir310);
            VTDPropertyInfoBase pi633 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter323 = new VTDObjectGetter(pi633);
            VTDPropertyInfoBase pi634 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter311 = new VTDObjectSetter(pi634);
            binding_setter311 = new StringFormaterDecorator(binding_setter311,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir311 = new BindDirection(this.DataCursorActivity260,binding_getter323,binding_setter311,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir311);
            VTDPropertyInfoBase pi635 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter324 = new VTDXPathGetter(pi635,XmlTypeCode.String);
            binding_getter324 = new XPathGetterDecorator(binding_getter324,"{Array0}",1);
            VTDPropertyInfoBase pi636 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter312 = new VTDObjectSetter(pi636);
            binding_setter312 = new StringFormaterDecorator(binding_setter312,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir312 = new BindDirection(_flow.DbFetchData76,binding_getter324,binding_setter312,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir312);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/getCard.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi637 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter325 = new VTDObjectGetter(pi637);
            VTDPropertyInfoBase pi638 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter313 = new VTDObjectSetter(pi638);
            binding_setter313 = new StringFormaterDecorator(binding_setter313,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir313 = new BindDirection(_flow.HTTPActivity73,binding_getter325,binding_setter313,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir313);
            VTDPropertyInfoBase pi639 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter326 = new VTDObjectGetter(pi639);
            VTDPropertyInfoBase pi640 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter314 = new VTDObjectSetter(pi640);
            bind_dir314 = new BindDirection(_flow.DbOpenConnection39,binding_getter326,binding_setter314,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir314);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity261.Comment = @"";
            this.DataCursorActivity261.IconPath = @"";
            VTDPropertyInfoBase pi641 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter327 = new VTDObjectGetter(pi641);
            VTDPropertyInfoBase pi642 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter315 = new VTDObjectSetter(pi642);
            binding_setter315 = new StringFormaterDecorator(binding_setter315,"{Step.DataFetchActivity256.OutTable}");
            bind_dir315 = new BindDirection(_flow.DataFetchActivity256,binding_getter327,binding_setter315,BindTargetType.ToInProperty);
            this.DataCursorActivity261.InDirections.Add(bind_dir315);
            this.DataCursorActivity261_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity261_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity261_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity261_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity261_Policy.StartCondition.Value = "";
            this.DataCursorActivity261_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity261_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity261_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity261_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity261_Policy.EndCondition.Value = "";
            this.DataCursorActivity261_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity261_Policy.StepSize = 1;
            this.DataCursorActivity261_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity261.Policy = this.DataCursorActivity261_Policy;
            this.DataCursorActivity261.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity261.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence255.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence255.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,toJid,token from tb_getcard_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getCard_verification表中字段信息";
            VTDPropertyInfoBase pi643 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter328 = new VTDObjectGetter(pi643);
            VTDPropertyInfoBase pi644 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter316 = new VTDObjectSetter(pi644);
            binding_setter316 = new StringFormaterDecorator(binding_setter316,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir316 = new BindDirection(_flow.Loop56,binding_getter328,binding_setter316,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir316);
            VTDPropertyInfoBase pi645 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter329 = new VTDObjectGetter(pi645);
            VTDPropertyInfoBase pi646 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter317 = new VTDObjectSetter(pi646);
            bind_dir317 = new BindDirection(_flow.DbOpenConnection39,binding_getter329,binding_setter317,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir317);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><toJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将本地表的xsid更新";
            VTDPropertyInfoBase pi647 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter330 = new VTDXPathGetter(pi647,XmlTypeCode.String);
            binding_getter330 = new XPathGetterDecorator(binding_getter330,"{Array0}",1);
            VTDPropertyInfoBase pi648 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter318 = new VTDObjectSetter(pi648);
            binding_setter318 = new StringFormaterDecorator(binding_setter318,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir318 = new BindDirection(_flow.DbFetchData57,binding_getter330,binding_setter318,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir318);
            VTDPropertyInfoBase pi649 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter331 = new VTDXPathGetter(pi649,XmlTypeCode.String);
            binding_getter331 = new XPathGetterDecorator(binding_getter331,"{Array0}",1);
            VTDPropertyInfoBase pi650 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter319 = new VTDObjectSetter(pi650);
            binding_setter319 = new StringFormaterDecorator(binding_setter319,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir319 = new BindDirection(_flow.DbFetchData248,binding_getter331,binding_setter319,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir319);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi651 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='toJid'][1]");
            VTDBaseGetter binding_getter332 = new VTDXPathGetter(pi651,XmlTypeCode.String);
            binding_getter332 = new XPathGetterDecorator(binding_getter332,"{Array0}",1);
            VTDPropertyInfoBase pi652 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter320 = new VTDObjectSetter(pi652);
            binding_setter320 = new StringFormaterDecorator(binding_setter320,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}");
            bind_dir320 = new BindDirection(_flow.DbFetchData57,binding_getter332,binding_setter320,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir320);
            VTDPropertyInfoBase pi653 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter333 = new VTDObjectGetter(pi653);
            VTDPropertyInfoBase pi654 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter321 = new VTDObjectSetter(pi654);
            bind_dir321 = new BindDirection(_flow.DbOpenConnection39,binding_getter333,binding_setter321,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir321);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi655 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter334 = new VTDObjectGetter(pi655);
            VTDPropertyInfoBase pi656 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter322 = new VTDObjectSetter(pi656);
            bind_dir322 = new BindDirection(_flow.DbOpenConnection39,binding_getter334,binding_setter322,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir322);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"305bbc2b43542b3d0203daffe9073c3cba5b47d9";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi657 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter335 = new VTDXPathGetter(pi657,XmlTypeCode.String);
            binding_getter335 = new XPathGetterDecorator(binding_getter335,"{Array0}",1);
            VTDPropertyInfoBase pi658 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter323 = new VTDObjectSetter(pi658);
            binding_setter323 = new StringFormaterDecorator(binding_setter323,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir323 = new BindDirection(_flow.DbFetchData57,binding_getter335,binding_setter323,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir323);
            VTDPropertyInfoBase pi659 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter336 = new VTDXPathGetter(pi659,XmlTypeCode.String);
            binding_getter336 = new XPathGetterDecorator(binding_getter336,"{Array0}",1);
            VTDPropertyInfoBase pi660 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter324 = new VTDObjectSetter(pi660);
            binding_setter324 = new StringFormaterDecorator(binding_setter324,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir324 = new BindDirection(_flow.DbFetchData252,binding_getter336,binding_setter324,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir324);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&toJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getCard}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/getCard.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi661 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter337 = new VTDObjectGetter(pi661);
            VTDPropertyInfoBase pi662 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter325 = new VTDObjectSetter(pi662);
            binding_setter325 = new StringFormaterDecorator(binding_setter325,"{DataSource.tb_global_table.IQHost}");
            bind_dir325 = new BindDirection(this.DataCursorActivity261,binding_getter337,binding_setter325,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir325);
            VTDPropertyInfoBase pi663 = new VTDPropertyInfoBase("getCard");
            VTDBaseGetter binding_getter338 = new VTDObjectGetter(pi663);
            VTDPropertyInfoBase pi664 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter326 = new VTDObjectSetter(pi664);
            binding_setter326 = new StringFormaterDecorator(binding_setter326,"{DataSource.tb_global_table.getCard}");
            bind_dir326 = new BindDirection(this.DataCursorActivity261,binding_getter338,binding_setter326,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir326);
            VTDPropertyInfoBase pi665 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter339 = new VTDObjectGetter(pi665);
            VTDPropertyInfoBase pi666 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter327 = new VTDObjectSetter(pi666);
            binding_setter327 = new StringFormaterDecorator(binding_setter327,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir327 = new BindDirection(this.DataCursorActivity261,binding_getter339,binding_setter327,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir327);
            VTDPropertyInfoBase pi667 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter340 = new VTDObjectGetter(pi667);
            VTDPropertyInfoBase pi668 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter328 = new VTDObjectSetter(pi668);
            binding_setter328 = new StringFormaterDecorator(binding_setter328,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir328 = new BindDirection(this.DataCursorActivity261,binding_getter340,binding_setter328,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir328);
            VTDPropertyInfoBase pi669 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter341 = new VTDObjectGetter(pi669);
            VTDPropertyInfoBase pi670 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter329 = new VTDObjectSetter(pi670);
            binding_setter329 = new StringFormaterDecorator(binding_setter329,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir329 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter341,binding_setter329,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir329);
            VTDPropertyInfoBase pi671 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='toJid'][1]");
            VTDBaseGetter binding_getter342 = new VTDXPathGetter(pi671,XmlTypeCode.String);
            binding_getter342 = new XPathGetterDecorator(binding_getter342,"{Array0}",1);
            VTDPropertyInfoBase pi672 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter330 = new VTDObjectSetter(pi672);
            binding_setter330 = new StringFormaterDecorator(binding_setter330,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}");
            bind_dir330 = new BindDirection(_flow.DbFetchData57,binding_getter342,binding_setter330,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir330);
            VTDPropertyInfoBase pi673 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter343 = new VTDObjectGetter(pi673);
            VTDPropertyInfoBase pi674 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter331 = new VTDObjectSetter(pi674);
            binding_setter331 = new StringFormaterDecorator(binding_setter331,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir331 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter343,binding_setter331,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir331);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi675 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter344 = new VTDObjectGetter(pi675);
            VTDPropertyInfoBase pi676 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter332 = new VTDObjectSetter(pi676);
            binding_setter332 = new StringFormaterDecorator(binding_setter332,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir332 = new BindDirection(_flow.HTTPActivity59,binding_getter344,binding_setter332,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir332);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getcard_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi677 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter345 = new VTDObjectGetter(pi677);
            VTDPropertyInfoBase pi678 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter333 = new VTDObjectSetter(pi678);
            binding_setter333 = new StringFormaterDecorator(binding_setter333,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir333 = new BindDirection(_flow.HTTPActivity59,binding_getter345,binding_setter333,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir333);
            VTDPropertyInfoBase pi679 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter346 = new VTDObjectGetter(pi679);
            VTDPropertyInfoBase pi680 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter334 = new VTDObjectSetter(pi680);
            binding_setter334 = new StringFormaterDecorator(binding_setter334,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir334 = new BindDirection(_flow.Loop56,binding_getter346,binding_setter334,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir334);
            VTDPropertyInfoBase pi681 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter347 = new VTDObjectGetter(pi681);
            VTDPropertyInfoBase pi682 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter335 = new VTDObjectSetter(pi682);
            bind_dir335 = new BindDirection(_flow.DbOpenConnection39,binding_getter347,binding_setter335,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir335);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getcard_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi683 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter348 = new VTDJsonGetter(pi683);
            VTDPropertyInfoBase pi684 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter336 = new VTDObjectSetter(pi684);
            binding_setter336 = new StringFormaterDecorator(binding_setter336,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir336 = new BindDirection(_flow.StringToJsonActivity60,binding_getter348,binding_setter336,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir336);
            VTDPropertyInfoBase pi685 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter349 = new VTDObjectGetter(pi685);
            VTDPropertyInfoBase pi686 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter337 = new VTDObjectSetter(pi686);
            binding_setter337 = new StringFormaterDecorator(binding_setter337,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir337 = new BindDirection(_flow.Loop56,binding_getter349,binding_setter337,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir337);
            VTDPropertyInfoBase pi687 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter350 = new VTDObjectGetter(pi687);
            VTDPropertyInfoBase pi688 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter338 = new VTDObjectSetter(pi688);
            bind_dir338 = new BindDirection(_flow.DbOpenConnection39,binding_getter350,binding_setter338,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir338);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getcard_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi689 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter351 = new VTDObjectGetter(pi689);
            VTDPropertyInfoBase pi690 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter339 = new VTDObjectSetter(pi690);
            binding_setter339 = new StringFormaterDecorator(binding_setter339,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir339 = new BindDirection(_flow.Loop56,binding_getter351,binding_setter339,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir339);
            VTDPropertyInfoBase pi691 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter352 = new VTDObjectGetter(pi691);
            VTDPropertyInfoBase pi692 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter340 = new VTDObjectSetter(pi692);
            bind_dir340 = new BindDirection(_flow.DbOpenConnection39,binding_getter352,binding_setter340,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir340);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getcard_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi693 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter353 = new VTDObjectGetter(pi693);
            VTDPropertyInfoBase pi694 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter341 = new VTDObjectSetter(pi694);
            binding_setter341 = new StringFormaterDecorator(binding_setter341,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir341 = new BindDirection(_flow.Loop56,binding_getter353,binding_setter341,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir341);
            VTDPropertyInfoBase pi695 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter354 = new VTDObjectGetter(pi695);
            VTDPropertyInfoBase pi696 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter342 = new VTDObjectSetter(pi696);
            bind_dir342 = new BindDirection(_flow.DbOpenConnection39,binding_getter354,binding_setter342,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir342);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi697 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter355 = new VTDXPathGetter(pi697,XmlTypeCode.String);
            binding_getter355 = new XPathGetterDecorator(binding_getter355,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter355),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi698 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter356 = new VTDXPathGetter(pi698,XmlTypeCode.String);
            binding_getter356 = new XPathGetterDecorator(binding_getter356,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter356),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getcard_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi699 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter357 = new VTDObjectGetter(pi699);
            VTDPropertyInfoBase pi700 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter343 = new VTDObjectSetter(pi700);
            binding_setter343 = new StringFormaterDecorator(binding_setter343,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir343 = new BindDirection(_flow.Loop56,binding_getter357,binding_setter343,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir343);
            VTDPropertyInfoBase pi701 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter358 = new VTDObjectGetter(pi701);
            VTDPropertyInfoBase pi702 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter344 = new VTDObjectSetter(pi702);
            bind_dir344 = new BindDirection(_flow.DbOpenConnection39,binding_getter358,binding_setter344,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir344);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getcard_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi703 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter359 = new VTDObjectGetter(pi703);
            VTDPropertyInfoBase pi704 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter345 = new VTDObjectSetter(pi704);
            binding_setter345 = new StringFormaterDecorator(binding_setter345,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir345 = new BindDirection(_flow.Loop56,binding_getter359,binding_setter345,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir345);
            VTDPropertyInfoBase pi705 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter360 = new VTDObjectGetter(pi705);
            VTDPropertyInfoBase pi706 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter346 = new VTDObjectSetter(pi706);
            bind_dir346 = new BindDirection(_flow.DbOpenConnection39,binding_getter360,binding_setter346,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir346);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    