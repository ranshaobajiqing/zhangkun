/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_saveIntegral_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir121 = null;
        public BindDirection bind_dir122 = null;
        public BindDirection bind_dir123 = null;
        public BindDirection bind_dir124 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity276 = null;
        public BindDirection bind_dir125 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity276_Policy = null;
        public BindDirection bind_dir126 = null;
        public BindDirection bind_dir127 = null;
        public BindDirection bind_dir128 = null;
        public BindDirection bind_dir129 = null;
        public BindDirection bind_dir130 = null;
        public BindDirection bind_dir131 = null;
        public BindDirection bind_dir132 = null;
        public BindDirection bind_dir133 = null;
        public BindDirection bind_dir134 = null;
        public BindDirection bind_dir135 = null;
        public BindDirection bind_dir136 = null;
        public BindDirection bind_dir137 = null;
        public BindDirection bind_dir138 = null;
        public BindDirection bind_dir139 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity277 = null;
        public BindDirection bind_dir140 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity277_Policy = null;
        public BindDirection bind_dir141 = null;
        public BindDirection bind_dir142 = null;
        public BindDirection bind_dir143 = null;
        public BindDirection bind_dir144 = null;
        public BindDirection bind_dir145 = null;
        public BindDirection bind_dir146 = null;
        public BindDirection bind_dir147 = null;
        public BindDirection bind_dir148 = null;
        public BindDirection bind_dir149 = null;
        public BindDirection bind_dir150 = null;
        public BindDirection bind_dir151 = null;
        public BindDirection bind_dir152 = null;
        public BindDirection bind_dir153 = null;
        public BindDirection bind_dir154 = null;
        public BindDirection bind_dir155 = null;
        public BindDirection bind_dir156 = null;
        public BindDirection bind_dir157 = null;
        public BindDirection bind_dir158 = null;
        public BindDirection bind_dir159 = null;
        public BindDirection bind_dir160 = null;
        public BindDirection bind_dir161 = null;
        public BindDirection bind_dir162 = null;
        public BindDirection bind_dir163 = null;
        public BindDirection bind_dir164 = null;
        public BindDirection bind_dir165 = null;
        public BindDirection bind_dir166 = null;
        public BindDirection bind_dir167 = null;
        public BindDirection bind_dir168 = null;
        public BindDirection bind_dir169 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity272 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity272");
            _flow.DataFetchActivity269 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity269");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity271 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity271");
            _flow.DataExporterActivity274 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity274");
            _flow.DataExporterCloseActivity275 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity275");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity270 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity270");
            _flow.DataDisconnectActivity273 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity273");
            this.DataCursorActivity276 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity276");
            this.DataCursorActivity276_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence267 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence267");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData118 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData118");
            _flow.Loop119 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop119Input>(_context,"Loop119",LoopType.For);
            _flow.DbFetchData134 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData134");
            _flow.CallQTPTest135 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest135");
            _flow.DbFetchData136 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData136");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.HTTPActivity137 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity137");
            _flow.DbFetchData138 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData138");
            this.DataCursorActivity277 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity277");
            this.DataCursorActivity277_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence268 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence268");
            _flow.DbFetchData120 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData120");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.ReplaceStringActivity256 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity256");
            _flow.HTTPActivity121 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity121");
            _flow.StringToJsonActivity122 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity122");
            _flow.DbFetchData124 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData124");
            _flow.DbFetchData125 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData125");
            _flow.DbFetchData126 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData126");
            _flow.DbFetchData127 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData127");
            _flow.IfElse129 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse129Input>(_context,"IfElse129");
            _flow.IfElseBranch130 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch130");
            _flow.IfElseBranch131 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch131");
            _flow.DbFetchData132 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData132");
            _flow.DbFetchData133 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData133");
            _flow.DataFetchActivity272.Comment = @"";
            _flow.DataFetchActivity272.IconPath = @"";
            _flow.DataFetchActivity272.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity272.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity272_QueryParameters_Document = new XmlDocument();
            DataFetchActivity272_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity272Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity272_QueryParameters_Document.LoadXml(xmlDataFetchActivity272Params);
            _flow.DataFetchActivity272.QueryParameters = DataFetchActivity272_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity272);
            this.Activities.Add (_flow.DataFetchActivity272);
            _flow.DataFetchActivity269.Comment = @"";
            _flow.DataFetchActivity269.IconPath = @"";
            _flow.DataFetchActivity269.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity269.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity269_QueryParameters_Document = new XmlDocument();
            DataFetchActivity269_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity269Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity269_QueryParameters_Document.LoadXml(xmlDataFetchActivity269Params);
            _flow.DataFetchActivity269.QueryParameters = DataFetchActivity269_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity269);
            this.Activities.Add (_flow.DataFetchActivity269);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity276);
            _flow.Loop2.Activities.Add (_flow.Sequence267);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity271.Comment = @"";
            _flow.DataExporterActivity271.IconPath = @"";
            VTDPropertyInfoBase pi245 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter125 = new VTDObjectGetter(pi245);
            VTDPropertyInfoBase pi246 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter121 = new VTDObjectSetter(pi246);
            binding_setter121 = new StringFormaterDecorator(binding_setter121,"{Step.DataFetchActivity269.OutTable}");
            bind_dir121 = new BindDirection(_flow.DataFetchActivity269,binding_getter125,binding_setter121,BindTargetType.ToInProperty);
            _flow.DataExporterActivity271.InDirections.Add(bind_dir121);
            this.Activities.Add (_flow.DataExporterActivity271);
            _flow.DataExporterActivity274.Comment = @"";
            _flow.DataExporterActivity274.IconPath = @"";
            VTDPropertyInfoBase pi247 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter126 = new VTDObjectGetter(pi247);
            VTDPropertyInfoBase pi248 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter122 = new VTDObjectSetter(pi248);
            binding_setter122 = new StringFormaterDecorator(binding_setter122,"{Step.DataFetchActivity272.OutTable}");
            bind_dir122 = new BindDirection(_flow.DataFetchActivity272,binding_getter126,binding_setter122,BindTargetType.ToInProperty);
            _flow.DataExporterActivity274.InDirections.Add(bind_dir122);
            this.Activities.Add (_flow.DataExporterActivity274);
            _flow.DataExporterCloseActivity275.Comment = @"";
            _flow.DataExporterCloseActivity275.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity275);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity270.Comment = @"";
            _flow.DataDisconnectActivity270.IconPath = @"";
            VTDPropertyInfoBase pi249 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter127 = new VTDObjectGetter(pi249);
            VTDPropertyInfoBase pi250 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter123 = new VTDObjectSetter(pi250);
            binding_setter123 = new StringFormaterDecorator(binding_setter123,"{Step.DataFetchActivity269.OutTable}");
            bind_dir123 = new BindDirection(_flow.DataFetchActivity269,binding_getter127,binding_setter123,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity270.InDirections.Add(bind_dir123);
            this.Activities.Add (_flow.DataDisconnectActivity270);
            _flow.DataDisconnectActivity273.Comment = @"";
            _flow.DataDisconnectActivity273.IconPath = @"";
            VTDPropertyInfoBase pi251 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter128 = new VTDObjectGetter(pi251);
            VTDPropertyInfoBase pi252 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter124 = new VTDObjectSetter(pi252);
            binding_setter124 = new StringFormaterDecorator(binding_setter124,"{Step.DataFetchActivity272.OutTable}");
            bind_dir124 = new BindDirection(_flow.DataFetchActivity272,binding_getter128,binding_setter124,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity273.InDirections.Add(bind_dir124);
            this.Activities.Add (_flow.DataDisconnectActivity273);
            this.DataCursorActivity276.Comment = @"";
            this.DataCursorActivity276.IconPath = @"";
            VTDPropertyInfoBase pi253 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter129 = new VTDObjectGetter(pi253);
            VTDPropertyInfoBase pi254 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter125 = new VTDObjectSetter(pi254);
            binding_setter125 = new StringFormaterDecorator(binding_setter125,"{Step.DataFetchActivity269.OutTable}");
            bind_dir125 = new BindDirection(_flow.DataFetchActivity269,binding_getter129,binding_setter125,BindTargetType.ToInProperty);
            this.DataCursorActivity276.InDirections.Add(bind_dir125);
            this.DataCursorActivity276_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity276_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity276_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity276_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity276_Policy.StartCondition.Value = "";
            this.DataCursorActivity276_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity276_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity276_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity276_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity276_Policy.EndCondition.Value = "";
            this.DataCursorActivity276_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity276_Policy.StepSize = 1;
            this.DataCursorActivity276_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity276.Policy = this.DataCursorActivity276_Policy;
            this.DataCursorActivity276.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity276.ResetCursor;
            _flow.Sequence267.Comment = @"";
            _flow.Sequence267.IconPath = @"";
            _flow.Sequence267.Name = @"序列267";
            _flow.Sequence267.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence267.Activities.Add (_flow.DbFetchData118);
            _flow.Sequence267.Activities.Add (_flow.Loop119);
            _flow.Sequence267.Activities.Add (_flow.DbFetchData134);
            _flow.Sequence267.Activities.Add (_flow.CallQTPTest135);
            _flow.Sequence267.Activities.Add (_flow.DbFetchData136);
            _flow.Sequence267.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence267.Activities.Add (_flow.HTTPActivity137);
            _flow.Sequence267.Activities.Add (_flow.DbFetchData138);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData118.QueryString = @"select count(*) as 'Row' from tb_saveIntegral_verification";
            _flow.DbFetchData118.Timeout = (int)30;
            _flow.DbFetchData118.Comment = @"";
            _flow.DbFetchData118.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData118.Name = @"获取到tb_saveIntegral_verification表有效行数";
            VTDPropertyInfoBase pi255 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter130 = new VTDObjectGetter(pi255);
            VTDPropertyInfoBase pi256 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter126 = new VTDObjectSetter(pi256);
            bind_dir126 = new BindDirection(_flow.DbOpenConnection39,binding_getter130,binding_setter126,BindTargetType.ToInProperty);
            _flow.DbFetchData118.InDirections.Add(bind_dir126);
            XmlDocument DbFetchData118_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData118_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData118_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData118.ExpectedOutputProperties = DbFetchData118_ExpectedOutputProperties_Document;
            _flow.Loop119.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop119.NumberOfIterations = (int)1;
            _flow.Loop119.Comment = @"";
            _flow.Loop119.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop119.Name = @"循环执行tb_saveIntegral_verification中的测试用例";
            _flow.Loop119.Activities.Add (this.DataCursorActivity277);
            _flow.Loop119.Activities.Add (_flow.Sequence268);
            _flow.DbFetchData134.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6' where TestCase = 1";
            _flow.DbFetchData134.Timeout = (int)30;
            _flow.DbFetchData134.Comment = @"";
            _flow.DbFetchData134.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData134.Name = @"对/jxt/save.php接口token实行加密";
            VTDPropertyInfoBase pi257 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter131 = new VTDObjectGetter(pi257);
            VTDPropertyInfoBase pi258 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter127 = new VTDObjectSetter(pi258);
            binding_setter127 = new StringFormaterDecorator(binding_setter127,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir127 = new BindDirection(this.DataCursorActivity276,binding_getter131,binding_setter127,BindTargetType.ToInProperty);
            _flow.DbFetchData134.InDirections.Add(bind_dir127);
            VTDPropertyInfoBase pi259 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter132 = new VTDObjectGetter(pi259);
            VTDPropertyInfoBase pi260 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter128 = new VTDObjectSetter(pi260);
            bind_dir128 = new BindDirection(_flow.DbOpenConnection39,binding_getter132,binding_setter128,BindTargetType.ToInProperty);
            _flow.DbFetchData134.InDirections.Add(bind_dir128);
            XmlDocument DbFetchData134_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData134_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData134_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData134.ExpectedOutputProperties = DbFetchData134_ExpectedOutputProperties_Document;
            _flow.CallQTPTest135.Comment = @"";
            _flow.CallQTPTest135.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest135.Name = @"Encryption.SHA1";
            _flow.CallQTPTest135.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.ScriptPath}");
            _flow.CallQTPTest135.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.ActionName}");
            _flow.CallQTPTest135.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.Description}");
            _flow.CallQTPTest135.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.IsActionSelected}");
            _flow.CallQTPTest135.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.ResultLocation}");
            _flow.CallQTPTest135.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest135.QCScriptPath}");
            _flow.DbFetchData136.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData136.Timeout = (int)30;
            _flow.DbFetchData136.Comment = @"";
            _flow.DbFetchData136.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData136.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi261 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter133 = new VTDObjectGetter(pi261);
            VTDPropertyInfoBase pi262 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter129 = new VTDObjectSetter(pi262);
            bind_dir129 = new BindDirection(_flow.DbOpenConnection39,binding_getter133,binding_setter129,BindTargetType.ToInProperty);
            _flow.DbFetchData136.InDirections.Add(bind_dir129);
            XmlDocument DbFetchData136_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData136_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData136_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData136.ExpectedOutputProperties = DbFetchData136_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi263 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter134 = new VTDObjectGetter(pi263);
            VTDPropertyInfoBase pi264 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter130 = new VTDObjectSetter(pi264);
            bind_dir130 = new BindDirection(_flow.DbOpenConnection39,binding_getter134,binding_setter130,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir130);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.HTTPActivity137.TextBody = @"xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData136.ResultTable.Row[1].EncryptionResult}&type=1&value=20150810";
            _flow.HTTPActivity137.TextXmlBody = @"";
            _flow.HTTPActivity137.FileBody = @"";
            _flow.HTTPActivity137.PostBody = @"";
            _flow.HTTPActivity137.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.saveIntegral}";
            _flow.HTTPActivity137.HttpMethod = @"POST";
            _flow.HTTPActivity137.HttpVersion = @"1.1";
            _flow.HTTPActivity137.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity137.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity137.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity137.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity137.Comment = @"";
            _flow.HTTPActivity137.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity137.RequestBodyType = @"Text";
            _flow.HTTPActivity137.ResponseType = @"Text";
            _flow.HTTPActivity137.Name = @"调用/jxt/save.php";
            _flow.HTTPActivity137.Proxy.Server = @"";
            _flow.HTTPActivity137.Proxy.Username = @"";
            _flow.HTTPActivity137.Proxy.Password = @"";
            _flow.HTTPActivity137.Authentication.Username = @"";
            _flow.HTTPActivity137.Authentication.Password = @"";
            _flow.HTTPActivity137.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity137.Timeout = (int)100000;
            _flow.HTTPActivity137.ClientCertificate.Password = @"";
            _flow.HTTPActivity137.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity137.UseClientCertificate = false;
            _flow.HTTPActivity137.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity137.AllowRedirections = true;
            _flow.HTTPActivity137.ReuseCookies = false;
            _flow.HTTPActivity137.ExpectServerError = false;
            XmlDocument HTTPActivity137_XMLBody_Document = new XmlDocument();
            HTTPActivity137_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity137_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity137.XMLBody = HTTPActivity137_XMLBody_Document;
            XmlDocument HTTPActivity137_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity137_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity137_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity137.RequestMultipartInfoXml = HTTPActivity137_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity137.Multipart=false;
            VTDPropertyInfoBase pi265 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter135 = new VTDObjectGetter(pi265);
            VTDPropertyInfoBase pi266 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter131 = new VTDObjectSetter(pi266);
            binding_setter131 = new StringFormaterDecorator(binding_setter131,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir131 = new BindDirection(this.DataCursorActivity276,binding_getter135,binding_setter131,BindTargetType.ToInProperty);
            _flow.HTTPActivity137.InDirections.Add(bind_dir131);
            VTDPropertyInfoBase pi267 = new VTDPropertyInfoBase("saveIntegral");
            VTDBaseGetter binding_getter136 = new VTDObjectGetter(pi267);
            VTDPropertyInfoBase pi268 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter132 = new VTDObjectSetter(pi268);
            binding_setter132 = new StringFormaterDecorator(binding_setter132,"{DataSource.tb_global_table.saveIntegral}");
            bind_dir132 = new BindDirection(this.DataCursorActivity276,binding_getter136,binding_setter132,BindTargetType.ToInProperty);
            _flow.HTTPActivity137.InDirections.Add(bind_dir132);
            VTDPropertyInfoBase pi269 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter137 = new VTDObjectGetter(pi269);
            VTDPropertyInfoBase pi270 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter133 = new VTDObjectSetter(pi270);
            binding_setter133 = new StringFormaterDecorator(binding_setter133,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir133 = new BindDirection(this.DataCursorActivity276,binding_getter137,binding_setter133,BindTargetType.ToInProperty);
            _flow.HTTPActivity137.InDirections.Add(bind_dir133);
            VTDPropertyInfoBase pi271 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter138 = new VTDObjectGetter(pi271);
            VTDPropertyInfoBase pi272 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter134 = new VTDObjectSetter(pi272);
            binding_setter134 = new StringFormaterDecorator(binding_setter134,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir134 = new BindDirection(this.DataCursorActivity276,binding_getter138,binding_setter134,BindTargetType.ToInProperty);
            _flow.HTTPActivity137.InDirections.Add(bind_dir134);
            VTDPropertyInfoBase pi273 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter139 = new VTDXPathGetter(pi273,XmlTypeCode.String);
            binding_getter139 = new XPathGetterDecorator(binding_getter139,"{Array0}",1);
            VTDPropertyInfoBase pi274 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter135 = new VTDObjectSetter(pi274);
            binding_setter135 = new StringFormaterDecorator(binding_setter135,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir135 = new BindDirection(_flow.DbFetchData246,binding_getter139,binding_setter135,BindTargetType.ToInProperty);
            _flow.HTTPActivity137.InDirections.Add(bind_dir135);
            VTDPropertyInfoBase pi275 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter140 = new VTDObjectGetter(pi275);
            VTDPropertyInfoBase pi276 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter136 = new VTDObjectSetter(pi276);
            binding_setter136 = new StringFormaterDecorator(binding_setter136,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir136 = new BindDirection(this.DataCursorActivity276,binding_getter140,binding_setter136,BindTargetType.ToInProperty);
            _flow.HTTPActivity137.InDirections.Add(bind_dir136);
            VTDPropertyInfoBase pi277 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter141 = new VTDXPathGetter(pi277,XmlTypeCode.String);
            binding_getter141 = new XPathGetterDecorator(binding_getter141,"{Array0}",1);
            VTDPropertyInfoBase pi278 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter137 = new VTDObjectSetter(pi278);
            binding_setter137 = new StringFormaterDecorator(binding_setter137,"{Step.OutputProperties.DbFetchData136.ResultTable.Row[1].EncryptionResult}");
            bind_dir137 = new BindDirection(_flow.DbFetchData136,binding_getter141,binding_setter137,BindTargetType.ToInProperty);
            _flow.HTTPActivity137.InDirections.Add(bind_dir137);
            XmlDocument HTTPActivity137_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity137_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity137_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity137.ExpectedResponseXmlBody = HTTPActivity137_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity137_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity137_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity137_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity137.ExpectedResponseJsonBody = HTTPActivity137_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity137_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity137_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity137_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity137.ExpectedOutputProperties = HTTPActivity137_ExpectedOutputProperties_Document;
            _flow.DbFetchData138.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity137.ResponseBody}' where InterfaceName = '/jxt/save.php'";
            _flow.DbFetchData138.Timeout = (int)30;
            _flow.DbFetchData138.Comment = @"";
            _flow.DbFetchData138.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData138.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi279 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter142 = new VTDObjectGetter(pi279);
            VTDPropertyInfoBase pi280 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter138 = new VTDObjectSetter(pi280);
            binding_setter138 = new StringFormaterDecorator(binding_setter138,"{Step.OutputProperties.HTTPActivity137.ResponseBody}");
            bind_dir138 = new BindDirection(_flow.HTTPActivity137,binding_getter142,binding_setter138,BindTargetType.ToInProperty);
            _flow.DbFetchData138.InDirections.Add(bind_dir138);
            VTDPropertyInfoBase pi281 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter143 = new VTDObjectGetter(pi281);
            VTDPropertyInfoBase pi282 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter139 = new VTDObjectSetter(pi282);
            bind_dir139 = new BindDirection(_flow.DbOpenConnection39,binding_getter143,binding_setter139,BindTargetType.ToInProperty);
            _flow.DbFetchData138.InDirections.Add(bind_dir139);
            XmlDocument DbFetchData138_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData138_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData138_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData138.ExpectedOutputProperties = DbFetchData138_ExpectedOutputProperties_Document;
            this.DataCursorActivity277.Comment = @"";
            this.DataCursorActivity277.IconPath = @"";
            VTDPropertyInfoBase pi283 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter144 = new VTDObjectGetter(pi283);
            VTDPropertyInfoBase pi284 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter140 = new VTDObjectSetter(pi284);
            binding_setter140 = new StringFormaterDecorator(binding_setter140,"{Step.DataFetchActivity269.OutTable}");
            bind_dir140 = new BindDirection(_flow.DataFetchActivity269,binding_getter144,binding_setter140,BindTargetType.ToInProperty);
            this.DataCursorActivity277.InDirections.Add(bind_dir140);
            this.DataCursorActivity277_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity277_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity277_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity277_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity277_Policy.StartCondition.Value = "";
            this.DataCursorActivity277_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity277_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity277_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity277_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity277_Policy.EndCondition.Value = "";
            this.DataCursorActivity277_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity277_Policy.StepSize = 1;
            this.DataCursorActivity277_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity277.Policy = this.DataCursorActivity277_Policy;
            this.DataCursorActivity277.ReportStepData = false;
            _flow.Loop119.BeforeExecuteStepEvent += this.DataCursorActivity277.ResetCursor;
            _flow.Sequence268.Comment = @"";
            _flow.Sequence268.IconPath = @"";
            _flow.Sequence268.Name = @"序列268";
            _flow.Sequence268.Activities.Add (_flow.DbFetchData120);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence268.Activities.Add (_flow.ReplaceStringActivity256);
            _flow.Sequence268.Activities.Add (_flow.HTTPActivity121);
            _flow.Sequence268.Activities.Add (_flow.StringToJsonActivity122);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData124);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData125);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData126);
            _flow.Sequence268.Activities.Add (_flow.DbFetchData127);
            _flow.Sequence268.Activities.Add (_flow.IfElse129);
            _flow.DbFetchData120.QueryString = @"select xsid,jid,type,value,myJid,token from tb_saveIntegral_verification where TestCase = {Step.OutputProperties.Loop119.CurrentIterationNumber}";
            _flow.DbFetchData120.Timeout = (int)30;
            _flow.DbFetchData120.Comment = @"";
            _flow.DbFetchData120.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData120.Name = @"查询tb_saveIntegral_verification表中数据";
            VTDPropertyInfoBase pi285 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter145 = new VTDObjectGetter(pi285);
            VTDPropertyInfoBase pi286 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter141 = new VTDObjectSetter(pi286);
            binding_setter141 = new StringFormaterDecorator(binding_setter141,"{Step.OutputProperties.Loop119.CurrentIterationNumber}");
            bind_dir141 = new BindDirection(_flow.Loop119,binding_getter145,binding_setter141,BindTargetType.ToInProperty);
            _flow.DbFetchData120.InDirections.Add(bind_dir141);
            VTDPropertyInfoBase pi287 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter146 = new VTDObjectGetter(pi287);
            VTDPropertyInfoBase pi288 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter142 = new VTDObjectSetter(pi288);
            bind_dir142 = new BindDirection(_flow.DbOpenConnection39,binding_getter146,binding_setter142,BindTargetType.ToInProperty);
            _flow.DbFetchData120.InDirections.Add(bind_dir142);
            XmlDocument DbFetchData120_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData120_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData120_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><jid /><type /><value /><myJid /><token /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData120.ExpectedOutputProperties = DbFetchData120_ExpectedOutputProperties_Document;
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi289 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter147 = new VTDObjectGetter(pi289);
            VTDPropertyInfoBase pi290 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter143 = new VTDObjectSetter(pi290);
            bind_dir143 = new BindDirection(_flow.DbOpenConnection39,binding_getter147,binding_setter143,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir143);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity256.SourceString = @"{Step.OutputProperties.DbFetchData120.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity256.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity256.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity256.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity256.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity256.CaseSensitive = true;
            _flow.ReplaceStringActivity256.Comment = @"";
            _flow.ReplaceStringActivity256.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity256.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi291 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter148 = new VTDXPathGetter(pi291,XmlTypeCode.String);
            binding_getter148 = new XPathGetterDecorator(binding_getter148,"{Array0}",1);
            VTDPropertyInfoBase pi292 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter144 = new VTDObjectSetter(pi292);
            binding_setter144 = new StringFormaterDecorator(binding_setter144,"{Step.OutputProperties.DbFetchData120.ResultTable.Row[1].xsid}");
            bind_dir144 = new BindDirection(_flow.DbFetchData120,binding_getter148,binding_setter144,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity256.InDirections.Add(bind_dir144);
            VTDPropertyInfoBase pi293 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter149 = new VTDXPathGetter(pi293,XmlTypeCode.String);
            binding_getter149 = new XPathGetterDecorator(binding_getter149,"{Array0}",1);
            VTDPropertyInfoBase pi294 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter145 = new VTDObjectSetter(pi294);
            binding_setter145 = new StringFormaterDecorator(binding_setter145,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir145 = new BindDirection(_flow.DbFetchData248,binding_getter149,binding_setter145,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity256.InDirections.Add(bind_dir145);
            _flow.HTTPActivity121.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity256.Result}&myJid={Step.OutputProperties.DbFetchData120.ResultTable.Row[1].myJid}&token={Step.OutputProperties.DbFetchData120.ResultTable.Row[1].token}&type={Step.OutputProperties.DbFetchData120.ResultTable.Row[1].type}&value={Step.OutputProperties.DbFetchData120.ResultTable.Row[1].value}";
            _flow.HTTPActivity121.TextXmlBody = @"";
            _flow.HTTPActivity121.FileBody = @"";
            _flow.HTTPActivity121.PostBody = @"";
            _flow.HTTPActivity121.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.saveIntegral}";
            _flow.HTTPActivity121.HttpMethod = @"POST";
            _flow.HTTPActivity121.HttpVersion = @"1.1";
            _flow.HTTPActivity121.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity121.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity121.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity121.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity121.Comment = @"";
            _flow.HTTPActivity121.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity121.RequestBodyType = @"Text";
            _flow.HTTPActivity121.ResponseType = @"Text";
            _flow.HTTPActivity121.Name = @"调用/jxt/save.php";
            _flow.HTTPActivity121.Proxy.Server = @"";
            _flow.HTTPActivity121.Proxy.Username = @"";
            _flow.HTTPActivity121.Proxy.Password = @"";
            _flow.HTTPActivity121.Authentication.Username = @"";
            _flow.HTTPActivity121.Authentication.Password = @"";
            _flow.HTTPActivity121.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity121.Timeout = (int)100000;
            _flow.HTTPActivity121.ClientCertificate.Password = @"";
            _flow.HTTPActivity121.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity121.UseClientCertificate = false;
            _flow.HTTPActivity121.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity121.AllowRedirections = true;
            _flow.HTTPActivity121.ReuseCookies = false;
            _flow.HTTPActivity121.ExpectServerError = false;
            XmlDocument HTTPActivity121_XMLBody_Document = new XmlDocument();
            HTTPActivity121_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity121_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity121.XMLBody = HTTPActivity121_XMLBody_Document;
            XmlDocument HTTPActivity121_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity121_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity121_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity121.RequestMultipartInfoXml = HTTPActivity121_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity121.Multipart=false;
            VTDPropertyInfoBase pi295 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter150 = new VTDObjectGetter(pi295);
            VTDPropertyInfoBase pi296 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter146 = new VTDObjectSetter(pi296);
            binding_setter146 = new StringFormaterDecorator(binding_setter146,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir146 = new BindDirection(this.DataCursorActivity277,binding_getter150,binding_setter146,BindTargetType.ToInProperty);
            _flow.HTTPActivity121.InDirections.Add(bind_dir146);
            VTDPropertyInfoBase pi297 = new VTDPropertyInfoBase("saveIntegral");
            VTDBaseGetter binding_getter151 = new VTDObjectGetter(pi297);
            VTDPropertyInfoBase pi298 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter147 = new VTDObjectSetter(pi298);
            binding_setter147 = new StringFormaterDecorator(binding_setter147,"{DataSource.tb_global_table.saveIntegral}");
            bind_dir147 = new BindDirection(this.DataCursorActivity277,binding_getter151,binding_setter147,BindTargetType.ToInProperty);
            _flow.HTTPActivity121.InDirections.Add(bind_dir147);
            VTDPropertyInfoBase pi299 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter152 = new VTDObjectGetter(pi299);
            VTDPropertyInfoBase pi300 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter148 = new VTDObjectSetter(pi300);
            binding_setter148 = new StringFormaterDecorator(binding_setter148,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir148 = new BindDirection(this.DataCursorActivity277,binding_getter152,binding_setter148,BindTargetType.ToInProperty);
            _flow.HTTPActivity121.InDirections.Add(bind_dir148);
            VTDPropertyInfoBase pi301 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter153 = new VTDObjectGetter(pi301);
            VTDPropertyInfoBase pi302 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter149 = new VTDObjectSetter(pi302);
            binding_setter149 = new StringFormaterDecorator(binding_setter149,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir149 = new BindDirection(this.DataCursorActivity276,binding_getter153,binding_setter149,BindTargetType.ToInProperty);
            _flow.HTTPActivity121.InDirections.Add(bind_dir149);
            VTDPropertyInfoBase pi303 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter154 = new VTDObjectGetter(pi303);
            VTDPropertyInfoBase pi304 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter150 = new VTDObjectSetter(pi304);
            binding_setter150 = new StringFormaterDecorator(binding_setter150,"{Step.OutputProperties.ReplaceStringActivity256.Result}");
            bind_dir150 = new BindDirection(_flow.ReplaceStringActivity256,binding_getter154,binding_setter150,BindTargetType.ToInProperty);
            _flow.HTTPActivity121.InDirections.Add(bind_dir150);
            VTDPropertyInfoBase pi305 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter155 = new VTDXPathGetter(pi305,XmlTypeCode.String);
            binding_getter155 = new XPathGetterDecorator(binding_getter155,"{Array0}",1);
            VTDPropertyInfoBase pi306 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter151 = new VTDObjectSetter(pi306);
            binding_setter151 = new StringFormaterDecorator(binding_setter151,"{Step.OutputProperties.DbFetchData120.ResultTable.Row[1].myJid}");
            bind_dir151 = new BindDirection(_flow.DbFetchData120,binding_getter155,binding_setter151,BindTargetType.ToInProperty);
            _flow.HTTPActivity121.InDirections.Add(bind_dir151);
            VTDPropertyInfoBase pi307 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter156 = new VTDXPathGetter(pi307,XmlTypeCode.String);
            binding_getter156 = new XPathGetterDecorator(binding_getter156,"{Array0}",1);
            VTDPropertyInfoBase pi308 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter152 = new VTDObjectSetter(pi308);
            binding_setter152 = new StringFormaterDecorator(binding_setter152,"{Step.OutputProperties.DbFetchData120.ResultTable.Row[1].token}");
            bind_dir152 = new BindDirection(_flow.DbFetchData120,binding_getter156,binding_setter152,BindTargetType.ToInProperty);
            _flow.HTTPActivity121.InDirections.Add(bind_dir152);
            VTDPropertyInfoBase pi309 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='type'][1]");
            VTDBaseGetter binding_getter157 = new VTDXPathGetter(pi309,XmlTypeCode.String);
            binding_getter157 = new XPathGetterDecorator(binding_getter157,"{Array0}",1);
            VTDPropertyInfoBase pi310 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter153 = new VTDObjectSetter(pi310);
            binding_setter153 = new StringFormaterDecorator(binding_setter153,"{Step.OutputProperties.DbFetchData120.ResultTable.Row[1].type}");
            bind_dir153 = new BindDirection(_flow.DbFetchData120,binding_getter157,binding_setter153,BindTargetType.ToInProperty);
            _flow.HTTPActivity121.InDirections.Add(bind_dir153);
            VTDPropertyInfoBase pi311 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='value'][1]");
            VTDBaseGetter binding_getter158 = new VTDXPathGetter(pi311,XmlTypeCode.String);
            binding_getter158 = new XPathGetterDecorator(binding_getter158,"{Array0}",1);
            VTDPropertyInfoBase pi312 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter154 = new VTDObjectSetter(pi312);
            binding_setter154 = new StringFormaterDecorator(binding_setter154,"{Step.OutputProperties.DbFetchData120.ResultTable.Row[1].value}");
            bind_dir154 = new BindDirection(_flow.DbFetchData120,binding_getter158,binding_setter154,BindTargetType.ToInProperty);
            _flow.HTTPActivity121.InDirections.Add(bind_dir154);
            XmlDocument HTTPActivity121_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity121_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity121_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity121.ExpectedResponseXmlBody = HTTPActivity121_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity121_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity121_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity121_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity121.ExpectedResponseJsonBody = HTTPActivity121_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity121_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity121_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity121_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity121.ExpectedOutputProperties = HTTPActivity121_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity122.InputString = @"{Step.OutputProperties.HTTPActivity121.ResponseBody}";
            _flow.StringToJsonActivity122.Comment = @"";
            _flow.StringToJsonActivity122.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity122.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi313 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter159 = new VTDObjectGetter(pi313);
            VTDPropertyInfoBase pi314 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter155 = new VTDObjectSetter(pi314);
            binding_setter155 = new StringFormaterDecorator(binding_setter155,"{Step.OutputProperties.HTTPActivity121.ResponseBody}");
            bind_dir155 = new BindDirection(_flow.HTTPActivity121,binding_getter159,binding_setter155,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity122.InDirections.Add(bind_dir155);
            _flow.DbFetchData124.QueryString = @"update tb_saveIntegral_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity121.ResponseBody}' where TestCase = {Step.OutputProperties.Loop119.CurrentIterationNumber}";
            _flow.DbFetchData124.Timeout = (int)30;
            _flow.DbFetchData124.Comment = @"";
            _flow.DbFetchData124.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData124.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi315 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter160 = new VTDObjectGetter(pi315);
            VTDPropertyInfoBase pi316 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter156 = new VTDObjectSetter(pi316);
            binding_setter156 = new StringFormaterDecorator(binding_setter156,"{Step.OutputProperties.HTTPActivity121.ResponseBody}");
            bind_dir156 = new BindDirection(_flow.HTTPActivity121,binding_getter160,binding_setter156,BindTargetType.ToInProperty);
            _flow.DbFetchData124.InDirections.Add(bind_dir156);
            VTDPropertyInfoBase pi317 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter161 = new VTDObjectGetter(pi317);
            VTDPropertyInfoBase pi318 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter157 = new VTDObjectSetter(pi318);
            binding_setter157 = new StringFormaterDecorator(binding_setter157,"{Step.OutputProperties.Loop119.CurrentIterationNumber}");
            bind_dir157 = new BindDirection(_flow.Loop119,binding_getter161,binding_setter157,BindTargetType.ToInProperty);
            _flow.DbFetchData124.InDirections.Add(bind_dir157);
            VTDPropertyInfoBase pi319 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter162 = new VTDObjectGetter(pi319);
            VTDPropertyInfoBase pi320 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter158 = new VTDObjectSetter(pi320);
            bind_dir158 = new BindDirection(_flow.DbOpenConnection39,binding_getter162,binding_setter158,BindTargetType.ToInProperty);
            _flow.DbFetchData124.InDirections.Add(bind_dir158);
            XmlDocument DbFetchData124_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData124_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData124_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData124.ExpectedOutputProperties = DbFetchData124_ExpectedOutputProperties_Document;
            _flow.DbFetchData125.QueryString = @"update tb_saveIntegral_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity122.errorCode}' where TestCase = {Step.OutputProperties.Loop119.CurrentIterationNumber}";
            _flow.DbFetchData125.Timeout = (int)30;
            _flow.DbFetchData125.Comment = @"";
            _flow.DbFetchData125.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData125.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi321 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter163 = new VTDJsonGetter(pi321);
            VTDPropertyInfoBase pi322 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter159 = new VTDObjectSetter(pi322);
            binding_setter159 = new StringFormaterDecorator(binding_setter159,"{Step.JsonContent.StringToJsonActivity122.errorCode}");
            bind_dir159 = new BindDirection(_flow.StringToJsonActivity122,binding_getter163,binding_setter159,BindTargetType.ToInProperty);
            _flow.DbFetchData125.InDirections.Add(bind_dir159);
            VTDPropertyInfoBase pi323 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter164 = new VTDObjectGetter(pi323);
            VTDPropertyInfoBase pi324 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter160 = new VTDObjectSetter(pi324);
            binding_setter160 = new StringFormaterDecorator(binding_setter160,"{Step.OutputProperties.Loop119.CurrentIterationNumber}");
            bind_dir160 = new BindDirection(_flow.Loop119,binding_getter164,binding_setter160,BindTargetType.ToInProperty);
            _flow.DbFetchData125.InDirections.Add(bind_dir160);
            VTDPropertyInfoBase pi325 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter165 = new VTDObjectGetter(pi325);
            VTDPropertyInfoBase pi326 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter161 = new VTDObjectSetter(pi326);
            bind_dir161 = new BindDirection(_flow.DbOpenConnection39,binding_getter165,binding_setter161,BindTargetType.ToInProperty);
            _flow.DbFetchData125.InDirections.Add(bind_dir161);
            XmlDocument DbFetchData125_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData125_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData125_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData125.ExpectedOutputProperties = DbFetchData125_ExpectedOutputProperties_Document;
            _flow.DbFetchData126.QueryString = @"select OutputValue from tb_saveIntegral_verification where TestCase = {Step.OutputProperties.Loop119.CurrentIterationNumber}";
            _flow.DbFetchData126.Timeout = (int)30;
            _flow.DbFetchData126.Comment = @"";
            _flow.DbFetchData126.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData126.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi327 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter166 = new VTDObjectGetter(pi327);
            VTDPropertyInfoBase pi328 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter162 = new VTDObjectSetter(pi328);
            binding_setter162 = new StringFormaterDecorator(binding_setter162,"{Step.OutputProperties.Loop119.CurrentIterationNumber}");
            bind_dir162 = new BindDirection(_flow.Loop119,binding_getter166,binding_setter162,BindTargetType.ToInProperty);
            _flow.DbFetchData126.InDirections.Add(bind_dir162);
            VTDPropertyInfoBase pi329 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter167 = new VTDObjectGetter(pi329);
            VTDPropertyInfoBase pi330 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter163 = new VTDObjectSetter(pi330);
            bind_dir163 = new BindDirection(_flow.DbOpenConnection39,binding_getter167,binding_setter163,BindTargetType.ToInProperty);
            _flow.DbFetchData126.InDirections.Add(bind_dir163);
            XmlDocument DbFetchData126_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData126_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData126_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData126.ExpectedOutputProperties = DbFetchData126_ExpectedOutputProperties_Document;
            _flow.DbFetchData127.QueryString = @"select ExpectationValue from tb_saveIntegral_verification where TestCase = {Step.OutputProperties.Loop119.CurrentIterationNumber}";
            _flow.DbFetchData127.Timeout = (int)30;
            _flow.DbFetchData127.Comment = @"";
            _flow.DbFetchData127.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData127.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi331 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter168 = new VTDObjectGetter(pi331);
            VTDPropertyInfoBase pi332 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter164 = new VTDObjectSetter(pi332);
            binding_setter164 = new StringFormaterDecorator(binding_setter164,"{Step.OutputProperties.Loop119.CurrentIterationNumber}");
            bind_dir164 = new BindDirection(_flow.Loop119,binding_getter168,binding_setter164,BindTargetType.ToInProperty);
            _flow.DbFetchData127.InDirections.Add(bind_dir164);
            VTDPropertyInfoBase pi333 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter169 = new VTDObjectGetter(pi333);
            VTDPropertyInfoBase pi334 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter165 = new VTDObjectSetter(pi334);
            bind_dir165 = new BindDirection(_flow.DbOpenConnection39,binding_getter169,binding_setter165,BindTargetType.ToInProperty);
            _flow.DbFetchData127.InDirections.Add(bind_dir165);
            XmlDocument DbFetchData127_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData127_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData127_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData127.ExpectedOutputProperties = DbFetchData127_ExpectedOutputProperties_Document;
            _flow.IfElse129.ConditionAsString = @"{Step.OutputProperties.DbFetchData126.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData127.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse129.Comment = @"";
            _flow.IfElse129.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse129.Name = @"填写Result";
            _flow.IfElse129.Activities.Add (_flow.IfElseBranch130);
            _flow.IfElse129.Activities.Add (_flow.IfElseBranch131);
            _flow.IfElseBranch130.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi335 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter170 = new VTDXPathGetter(pi335,XmlTypeCode.String);
            binding_getter170 = new XPathGetterDecorator(binding_getter170,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData126.GetParam(binding_getter170),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi336 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter171 = new VTDXPathGetter(pi336,XmlTypeCode.String);
            binding_getter171 = new XPathGetterDecorator(binding_getter171,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData127.GetParam(binding_getter171),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch130.Comment = @"";
            _flow.IfElseBranch130.IconPath = @"";
            _flow.IfElseBranch130.Name = @"是";
            _flow.IfElseBranch130.Activities.Add (_flow.DbFetchData132);
            _flow.IfElseBranch131.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch131.Comment = @"";
            _flow.IfElseBranch131.IconPath = @"";
            _flow.IfElseBranch131.Name = @"否";
            _flow.IfElseBranch131.Activities.Add (_flow.DbFetchData133);
            _flow.DbFetchData132.QueryString = @"update tb_saveIntegral_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop119.CurrentIterationNumber}";
            _flow.DbFetchData132.Timeout = (int)30;
            _flow.DbFetchData132.Comment = @"";
            _flow.DbFetchData132.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData132.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi337 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter172 = new VTDObjectGetter(pi337);
            VTDPropertyInfoBase pi338 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter166 = new VTDObjectSetter(pi338);
            binding_setter166 = new StringFormaterDecorator(binding_setter166,"{Step.OutputProperties.Loop119.CurrentIterationNumber}");
            bind_dir166 = new BindDirection(_flow.Loop119,binding_getter172,binding_setter166,BindTargetType.ToInProperty);
            _flow.DbFetchData132.InDirections.Add(bind_dir166);
            VTDPropertyInfoBase pi339 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter173 = new VTDObjectGetter(pi339);
            VTDPropertyInfoBase pi340 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter167 = new VTDObjectSetter(pi340);
            bind_dir167 = new BindDirection(_flow.DbOpenConnection39,binding_getter173,binding_setter167,BindTargetType.ToInProperty);
            _flow.DbFetchData132.InDirections.Add(bind_dir167);
            XmlDocument DbFetchData132_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData132_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData132_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData132.ExpectedOutputProperties = DbFetchData132_ExpectedOutputProperties_Document;
            _flow.DbFetchData133.QueryString = @"update tb_saveIntegral_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop119.CurrentIterationNumber}";
            _flow.DbFetchData133.Timeout = (int)30;
            _flow.DbFetchData133.Comment = @"";
            _flow.DbFetchData133.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData133.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi341 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter174 = new VTDObjectGetter(pi341);
            VTDPropertyInfoBase pi342 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter168 = new VTDObjectSetter(pi342);
            binding_setter168 = new StringFormaterDecorator(binding_setter168,"{Step.OutputProperties.Loop119.CurrentIterationNumber}");
            bind_dir168 = new BindDirection(_flow.Loop119,binding_getter174,binding_setter168,BindTargetType.ToInProperty);
            _flow.DbFetchData133.InDirections.Add(bind_dir168);
            VTDPropertyInfoBase pi343 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter175 = new VTDObjectGetter(pi343);
            VTDPropertyInfoBase pi344 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter169 = new VTDObjectSetter(pi344);
            bind_dir169 = new BindDirection(_flow.DbOpenConnection39,binding_getter175,binding_setter169,BindTargetType.ToInProperty);
            _flow.DbFetchData133.InDirections.Add(bind_dir169);
            XmlDocument DbFetchData133_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData133_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData133_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData133.ExpectedOutputProperties = DbFetchData133_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    