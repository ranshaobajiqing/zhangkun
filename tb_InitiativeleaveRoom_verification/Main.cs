/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_InitiativeleaveRoom_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1905 = null;
        public BindDirection bind_dir1906 = null;
        public BindDirection bind_dir1907 = null;
        public BindDirection bind_dir1908 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity284 = null;
        public BindDirection bind_dir1909 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity284_Policy = null;
        public BindDirection bind_dir1910 = null;
        public BindDirection bind_dir1911 = null;
        public BindDirection bind_dir1912 = null;
        public BindDirection bind_dir1913 = null;
        public BindDirection bind_dir1914 = null;
        public BindDirection bind_dir1915 = null;
        public BindDirection bind_dir1916 = null;
        public BindDirection bind_dir1917 = null;
        public BindDirection bind_dir1918 = null;
        public BindDirection bind_dir1919 = null;
        public BindDirection bind_dir1920 = null;
        public BindDirection bind_dir1921 = null;
        public BindDirection bind_dir1922 = null;
        public BindDirection bind_dir1923 = null;
        public BindDirection bind_dir1924 = null;
        public BindDirection bind_dir1925 = null;
        public BindDirection bind_dir1926 = null;
        public BindDirection bind_dir1927 = null;
        public BindDirection bind_dir1928 = null;
        public BindDirection bind_dir1929 = null;
        public BindDirection bind_dir1930 = null;
        public BindDirection bind_dir1931 = null;
        public BindDirection bind_dir1932 = null;
        public BindDirection bind_dir1933 = null;
        public BindDirection bind_dir1934 = null;
        public BindDirection bind_dir1935 = null;
        public BindDirection bind_dir1936 = null;
        public BindDirection bind_dir1937 = null;
        public BindDirection bind_dir1938 = null;
        public BindDirection bind_dir1939 = null;
        public BindDirection bind_dir1940 = null;
        public BindDirection bind_dir1941 = null;
        public BindDirection bind_dir1942 = null;
        public BindDirection bind_dir1943 = null;
        public BindDirection bind_dir1944 = null;
        public BindDirection bind_dir1945 = null;
        public BindDirection bind_dir1946 = null;
        public BindDirection bind_dir1947 = null;
        public BindDirection bind_dir1948 = null;
        public BindDirection bind_dir1949 = null;
        public BindDirection bind_dir1950 = null;
        public BindDirection bind_dir1951 = null;
        public BindDirection bind_dir1952 = null;
        public BindDirection bind_dir1953 = null;
        public BindDirection bind_dir1954 = null;
        public BindDirection bind_dir1955 = null;
        public BindDirection bind_dir1956 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity285 = null;
        public BindDirection bind_dir1957 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity285_Policy = null;
        public BindDirection bind_dir1958 = null;
        public BindDirection bind_dir1959 = null;
        public BindDirection bind_dir1960 = null;
        public BindDirection bind_dir1961 = null;
        public BindDirection bind_dir1962 = null;
        public BindDirection bind_dir1963 = null;
        public BindDirection bind_dir1964 = null;
        public BindDirection bind_dir1965 = null;
        public BindDirection bind_dir1966 = null;
        public BindDirection bind_dir1967 = null;
        public BindDirection bind_dir1968 = null;
        public BindDirection bind_dir1969 = null;
        public BindDirection bind_dir1970 = null;
        public BindDirection bind_dir1971 = null;
        public BindDirection bind_dir1972 = null;
        public BindDirection bind_dir1973 = null;
        public BindDirection bind_dir1974 = null;
        public BindDirection bind_dir1975 = null;
        public BindDirection bind_dir1976 = null;
        public BindDirection bind_dir1977 = null;
        public BindDirection bind_dir1978 = null;
        public BindDirection bind_dir1979 = null;
        public BindDirection bind_dir1980 = null;
        public BindDirection bind_dir1981 = null;
        public BindDirection bind_dir1982 = null;
        public BindDirection bind_dir1983 = null;
        public BindDirection bind_dir1984 = null;
        public BindDirection bind_dir1985 = null;
        public BindDirection bind_dir1986 = null;
        public BindDirection bind_dir1987 = null;
        public BindDirection bind_dir1988 = null;
        public BindDirection bind_dir1989 = null;
        public BindDirection bind_dir1990 = null;
        public BindDirection bind_dir1991 = null;
        public BindDirection bind_dir1992 = null;
        public BindDirection bind_dir1993 = null;
        public BindDirection bind_dir1994 = null;
        public BindDirection bind_dir1995 = null;
        public BindDirection bind_dir1996 = null;
        public BindDirection bind_dir1997 = null;
        public BindDirection bind_dir1998 = null;
        public BindDirection bind_dir1999 = null;
        public BindDirection bind_dir2000 = null;
        public BindDirection bind_dir2001 = null;
        public BindDirection bind_dir2002 = null;
        public BindDirection bind_dir2003 = null;
        public BindDirection bind_dir2004 = null;
        public BindDirection bind_dir2005 = null;
        public BindDirection bind_dir2006 = null;
        public BindDirection bind_dir2007 = null;
        public BindDirection bind_dir2008 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            FeaturesGroup fg3 = new FeaturesGroup();
            FeaturesGroup fg4 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity280 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity280");
            _flow.DataFetchActivity277 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity277");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity279 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity279");
            _flow.DataExporterActivity282 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity282");
            _flow.DataExporterCloseActivity283 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity283");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity278 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity278");
            _flow.DataDisconnectActivity281 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity281");
            this.DataCursorActivity284 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity284");
            this.DataCursorActivity284_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence275 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence275");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.DbFetchData249 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData249");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.CallQTPTest253 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest253");
            _flow.DbFetchData254 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData254");
            _flow.CallQTPTest255 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest255");
            _flow.DbFetchData256 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData256");
            _flow.HTTPActivity250 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity250");
            _flow.StringToJsonActivity251 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity251");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.HTTPActivity270 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity270");
            _flow.HTTPActivity271 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity271");
            _flow.StringToJsonActivity272 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity272");
            _flow.HTTPActivity273 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity273");
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity285 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity285");
            this.DataCursorActivity285_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence276 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence276");
            _flow.HTTPActivity257 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity257");
            _flow.HTTPActivity259 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity259");
            _flow.StringToJsonActivity260 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity260");
            _flow.HTTPActivity263 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity263");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity264 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity264");
            _flow.DbFetchData265 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData265");
            _flow.CallQTPTest266 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest266");
            _flow.DbFetchData267 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData267");
            _flow.ReplaceStringActivity268 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity268");
            _flow.ReplaceStringActivity274 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity274");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity280.Comment = @"";
            _flow.DataFetchActivity280.IconPath = @"";
            _flow.DataFetchActivity280.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity280.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity280_QueryParameters_Document = new XmlDocument();
            DataFetchActivity280_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity280Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity280_QueryParameters_Document.LoadXml(xmlDataFetchActivity280Params);
            _flow.DataFetchActivity280.QueryParameters = DataFetchActivity280_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity280);
            this.Activities.Add (_flow.DataFetchActivity280);
            _flow.DataFetchActivity277.Comment = @"";
            _flow.DataFetchActivity277.IconPath = @"";
            _flow.DataFetchActivity277.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity277.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity277_QueryParameters_Document = new XmlDocument();
            DataFetchActivity277_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity277Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity277_QueryParameters_Document.LoadXml(xmlDataFetchActivity277Params);
            _flow.DataFetchActivity277.QueryParameters = DataFetchActivity277_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity277);
            this.Activities.Add (_flow.DataFetchActivity277);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity284);
            _flow.Loop2.Activities.Add (_flow.Sequence275);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity279.Comment = @"";
            _flow.DataExporterActivity279.IconPath = @"";
            VTDPropertyInfoBase pi3870 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1966 = new VTDObjectGetter(pi3870);
            VTDPropertyInfoBase pi3871 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1905 = new VTDObjectSetter(pi3871);
            binding_setter1905 = new StringFormaterDecorator(binding_setter1905,"{Step.DataFetchActivity277.OutTable}");
            bind_dir1905 = new BindDirection(_flow.DataFetchActivity277,binding_getter1966,binding_setter1905,BindTargetType.ToInProperty);
            _flow.DataExporterActivity279.InDirections.Add(bind_dir1905);
            this.Activities.Add (_flow.DataExporterActivity279);
            _flow.DataExporterActivity282.Comment = @"";
            _flow.DataExporterActivity282.IconPath = @"";
            VTDPropertyInfoBase pi3872 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1967 = new VTDObjectGetter(pi3872);
            VTDPropertyInfoBase pi3873 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1906 = new VTDObjectSetter(pi3873);
            binding_setter1906 = new StringFormaterDecorator(binding_setter1906,"{Step.DataFetchActivity280.OutTable}");
            bind_dir1906 = new BindDirection(_flow.DataFetchActivity280,binding_getter1967,binding_setter1906,BindTargetType.ToInProperty);
            _flow.DataExporterActivity282.InDirections.Add(bind_dir1906);
            this.Activities.Add (_flow.DataExporterActivity282);
            _flow.DataExporterCloseActivity283.Comment = @"";
            _flow.DataExporterCloseActivity283.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity283);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity278.Comment = @"";
            _flow.DataDisconnectActivity278.IconPath = @"";
            VTDPropertyInfoBase pi3874 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1968 = new VTDObjectGetter(pi3874);
            VTDPropertyInfoBase pi3875 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1907 = new VTDObjectSetter(pi3875);
            binding_setter1907 = new StringFormaterDecorator(binding_setter1907,"{Step.DataFetchActivity277.OutTable}");
            bind_dir1907 = new BindDirection(_flow.DataFetchActivity277,binding_getter1968,binding_setter1907,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity278.InDirections.Add(bind_dir1907);
            this.Activities.Add (_flow.DataDisconnectActivity278);
            _flow.DataDisconnectActivity281.Comment = @"";
            _flow.DataDisconnectActivity281.IconPath = @"";
            VTDPropertyInfoBase pi3876 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1969 = new VTDObjectGetter(pi3876);
            VTDPropertyInfoBase pi3877 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1908 = new VTDObjectSetter(pi3877);
            binding_setter1908 = new StringFormaterDecorator(binding_setter1908,"{Step.DataFetchActivity280.OutTable}");
            bind_dir1908 = new BindDirection(_flow.DataFetchActivity280,binding_getter1969,binding_setter1908,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity281.InDirections.Add(bind_dir1908);
            this.Activities.Add (_flow.DataDisconnectActivity281);
            this.DataCursorActivity284.Comment = @"";
            this.DataCursorActivity284.IconPath = @"";
            VTDPropertyInfoBase pi3878 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1970 = new VTDObjectGetter(pi3878);
            VTDPropertyInfoBase pi3879 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1909 = new VTDObjectSetter(pi3879);
            binding_setter1909 = new StringFormaterDecorator(binding_setter1909,"{Step.DataFetchActivity277.OutTable}");
            bind_dir1909 = new BindDirection(_flow.DataFetchActivity277,binding_getter1970,binding_setter1909,BindTargetType.ToInProperty);
            this.DataCursorActivity284.InDirections.Add(bind_dir1909);
            this.DataCursorActivity284_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity284_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity284_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity284_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity284_Policy.StartCondition.Value = "";
            this.DataCursorActivity284_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity284_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity284_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity284_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity284_Policy.EndCondition.Value = "";
            this.DataCursorActivity284_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity284_Policy.StepSize = 1;
            this.DataCursorActivity284_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity284.Policy = this.DataCursorActivity284_Policy;
            this.DataCursorActivity284.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity284.ResetCursor;
            _flow.Sequence275.Comment = @"";
            _flow.Sequence275.IconPath = @"";
            _flow.Sequence275.Name = @"序列275";
            _flow.Sequence275.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData249);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence275.Activities.Add (_flow.CallQTPTest253);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData254);
            _flow.Sequence275.Activities.Add (_flow.CallQTPTest255);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData256);
            _flow.Sequence275.Activities.Add (_flow.HTTPActivity250);
            _flow.Sequence275.Activities.Add (_flow.StringToJsonActivity251);
            _flow.Sequence275.Activities.Add (_flow.Loop56);
            _flow.Sequence275.Activities.Add (_flow.HTTPActivity270);
            _flow.Sequence275.Activities.Add (_flow.HTTPActivity271);
            _flow.Sequence275.Activities.Add (_flow.StringToJsonActivity272);
            _flow.Sequence275.Activities.Add (_flow.HTTPActivity273);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence275.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence275.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence275.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_leaveRoom_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_leaveRoom_verification表有效行数";
            VTDPropertyInfoBase pi3880 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1971 = new VTDObjectGetter(pi3880);
            VTDPropertyInfoBase pi3881 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1910 = new VTDObjectSetter(pi3881);
            bind_dir1910 = new BindDirection(_flow.DbOpenConnection39,binding_getter1971,binding_setter1910,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir1910);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData248.QueryString = @"select groupJid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中groupJid";
            VTDPropertyInfoBase pi3882 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1972 = new VTDObjectGetter(pi3882);
            VTDPropertyInfoBase pi3883 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1911 = new VTDObjectSetter(pi3883);
            bind_dir1911 = new BindDirection(_flow.DbOpenConnection39,binding_getter1972,binding_setter1911,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir1911);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><groupJid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3884 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1973 = new VTDObjectGetter(pi3884);
            VTDPropertyInfoBase pi3885 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1912 = new VTDObjectSetter(pi3885);
            bind_dir1912 = new BindDirection(_flow.DbOpenConnection39,binding_getter1973,binding_setter1912,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir1912);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.DbFetchData249.QueryString = @"select LoginStudentUsername,LoginPassword from tb_global_table where TestCase = 1";
            _flow.DbFetchData249.Timeout = (int)30;
            _flow.DbFetchData249.Comment = @"";
            _flow.DbFetchData249.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData249.Name = @"获取全局表中用户名密码";
            VTDPropertyInfoBase pi3886 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1974 = new VTDObjectGetter(pi3886);
            VTDPropertyInfoBase pi3887 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1913 = new VTDObjectSetter(pi3887);
            bind_dir1913 = new BindDirection(_flow.DbOpenConnection39,binding_getter1974,binding_setter1913,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir1913);
            XmlDocument DbFetchData249_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData249_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData249_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginStudentUsername /><LoginPassword /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData249.ExpectedOutputProperties = DbFetchData249_ExpectedOutputProperties_Document;
            _flow.DbFetchData252.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginPassword}' where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"将需要加密的信息赋值到全局表中EncryptionStr";
            VTDPropertyInfoBase pi3888 = new VTDPropertyInfoBase("LoginPassword");
            VTDBaseGetter binding_getter1975 = new VTDObjectGetter(pi3888);
            VTDPropertyInfoBase pi3889 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1914 = new VTDObjectSetter(pi3889);
            binding_setter1914 = new StringFormaterDecorator(binding_setter1914,"{DataSource.tb_global_table.LoginPassword}");
            bind_dir1914 = new BindDirection(this.DataCursorActivity284,binding_getter1975,binding_setter1914,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir1914);
            VTDPropertyInfoBase pi3890 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1976 = new VTDObjectGetter(pi3890);
            VTDPropertyInfoBase pi3891 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1915 = new VTDObjectSetter(pi3891);
            bind_dir1915 = new BindDirection(_flow.DbOpenConnection39,binding_getter1976,binding_setter1915,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir1915);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.CallQTPTest253.Comment = @"";
            _flow.CallQTPTest253.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest253.Name = @"Encryption.SHA1";
            _flow.CallQTPTest253.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ScriptPath}");
            _flow.CallQTPTest253.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ActionName}");
            _flow.CallQTPTest253.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.Description}");
            _flow.CallQTPTest253.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.IsActionSelected}");
            _flow.CallQTPTest253.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ResultLocation}");
            _flow.CallQTPTest253.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.QCScriptPath}");
            _flow.DbFetchData254.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData254.Timeout = (int)30;
            _flow.DbFetchData254.Comment = @"";
            _flow.DbFetchData254.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData254.Name = @"查询出全局表中EncryptionResult字段";
            VTDPropertyInfoBase pi3892 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1977 = new VTDObjectGetter(pi3892);
            VTDPropertyInfoBase pi3893 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1916 = new VTDObjectSetter(pi3893);
            bind_dir1916 = new BindDirection(_flow.DbOpenConnection39,binding_getter1977,binding_setter1916,BindTargetType.ToInProperty);
            _flow.DbFetchData254.InDirections.Add(bind_dir1916);
            XmlDocument DbFetchData254_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData254_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData254_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData254.ExpectedOutputProperties = DbFetchData254_ExpectedOutputProperties_Document;
            _flow.CallQTPTest255.Comment = @"";
            _flow.CallQTPTest255.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest255.Name = @"Encryption.SHA1";
            _flow.CallQTPTest255.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.ScriptPath}");
            _flow.CallQTPTest255.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.ActionName}");
            _flow.CallQTPTest255.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.Description}");
            _flow.CallQTPTest255.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.IsActionSelected}");
            _flow.CallQTPTest255.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.ResultLocation}");
            _flow.CallQTPTest255.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest255.QCScriptPath}");
            _flow.DbFetchData256.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData256.Timeout = (int)30;
            _flow.DbFetchData256.Comment = @"";
            _flow.DbFetchData256.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData256.Name = @"查询出全局表中EncryptionResult字段";
            VTDPropertyInfoBase pi3894 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1978 = new VTDObjectGetter(pi3894);
            VTDPropertyInfoBase pi3895 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1917 = new VTDObjectSetter(pi3895);
            bind_dir1917 = new BindDirection(_flow.DbOpenConnection39,binding_getter1978,binding_setter1917,BindTargetType.ToInProperty);
            _flow.DbFetchData256.InDirections.Add(bind_dir1917);
            XmlDocument DbFetchData256_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData256_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData256_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData256.ExpectedOutputProperties = DbFetchData256_ExpectedOutputProperties_Document;
            _flow.HTTPActivity250.TextBody = @"username={DataSource.tb_global_table.LoginStudentUsername}&response_type=xsid&sha1shadow={Step.OutputProperties.DbFetchData254.ResultTable.Row[1].EncryptionResult}&logintype=username&ver=2.6.9&client_id=ime_android&password=hjkj&md5shadow={Step.OutputProperties.DbFetchData256.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity250.TextXmlBody = @"";
            _flow.HTTPActivity250.FileBody = @"";
            _flow.HTTPActivity250.PostBody = @"";
            _flow.HTTPActivity250.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.login}";
            _flow.HTTPActivity250.HttpMethod = @"POST";
            _flow.HTTPActivity250.HttpVersion = @"1.1";
            _flow.HTTPActivity250.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity250.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity250.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity250.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity250.Comment = @"";
            _flow.HTTPActivity250.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity250.RequestBodyType = @"Text";
            _flow.HTTPActivity250.ResponseType = @"Text";
            _flow.HTTPActivity250.Name = @"调用登录接口进行学生登录操作";
            _flow.HTTPActivity250.Proxy.Server = @"";
            _flow.HTTPActivity250.Proxy.Username = @"";
            _flow.HTTPActivity250.Proxy.Password = @"";
            _flow.HTTPActivity250.Authentication.Username = @"";
            _flow.HTTPActivity250.Authentication.Password = @"";
            _flow.HTTPActivity250.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity250.Timeout = (int)100000;
            _flow.HTTPActivity250.ClientCertificate.Password = @"";
            _flow.HTTPActivity250.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity250.UseClientCertificate = false;
            _flow.HTTPActivity250.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity250.AllowRedirections = true;
            _flow.HTTPActivity250.ReuseCookies = false;
            _flow.HTTPActivity250.ExpectServerError = false;
            XmlDocument HTTPActivity250_XMLBody_Document = new XmlDocument();
            HTTPActivity250_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity250_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity250.XMLBody = HTTPActivity250_XMLBody_Document;
            XmlDocument HTTPActivity250_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity250_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity250_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity250.RequestMultipartInfoXml = HTTPActivity250_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity250.Multipart=false;
            VTDPropertyInfoBase pi3896 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter1979 = new VTDObjectGetter(pi3896);
            VTDPropertyInfoBase pi3897 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1918 = new VTDObjectSetter(pi3897);
            binding_setter1918 = new StringFormaterDecorator(binding_setter1918,"{DataSource.tb_global_table.qdHost}");
            bind_dir1918 = new BindDirection(this.DataCursorActivity284,binding_getter1979,binding_setter1918,BindTargetType.ToInProperty);
            _flow.HTTPActivity250.InDirections.Add(bind_dir1918);
            VTDPropertyInfoBase pi3898 = new VTDPropertyInfoBase("login");
            VTDBaseGetter binding_getter1980 = new VTDObjectGetter(pi3898);
            VTDPropertyInfoBase pi3899 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1919 = new VTDObjectSetter(pi3899);
            binding_setter1919 = new StringFormaterDecorator(binding_setter1919,"{DataSource.tb_global_table.login}");
            bind_dir1919 = new BindDirection(this.DataCursorActivity284,binding_getter1980,binding_setter1919,BindTargetType.ToInProperty);
            _flow.HTTPActivity250.InDirections.Add(bind_dir1919);
            VTDPropertyInfoBase pi3900 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1981 = new VTDObjectGetter(pi3900);
            VTDPropertyInfoBase pi3901 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1920 = new VTDObjectSetter(pi3901);
            binding_setter1920 = new StringFormaterDecorator(binding_setter1920,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1920 = new BindDirection(this.DataCursorActivity284,binding_getter1981,binding_setter1920,BindTargetType.ToInProperty);
            _flow.HTTPActivity250.InDirections.Add(bind_dir1920);
            VTDPropertyInfoBase pi3902 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1982 = new VTDObjectGetter(pi3902);
            VTDPropertyInfoBase pi3903 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1921 = new VTDObjectSetter(pi3903);
            binding_setter1921 = new StringFormaterDecorator(binding_setter1921,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1921 = new BindDirection(this.DataCursorActivity284,binding_getter1982,binding_setter1921,BindTargetType.ToInProperty);
            _flow.HTTPActivity250.InDirections.Add(bind_dir1921);
            VTDPropertyInfoBase pi3904 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter1983 = new VTDObjectGetter(pi3904);
            VTDPropertyInfoBase pi3905 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1922 = new VTDObjectSetter(pi3905);
            binding_setter1922 = new StringFormaterDecorator(binding_setter1922,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1922 = new BindDirection(this.DataCursorActivity284,binding_getter1983,binding_setter1922,BindTargetType.ToInProperty);
            _flow.HTTPActivity250.InDirections.Add(bind_dir1922);
            VTDPropertyInfoBase pi3906 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1984 = new VTDXPathGetter(pi3906,XmlTypeCode.String);
            binding_getter1984 = new XPathGetterDecorator(binding_getter1984,"{Array0}",1);
            VTDPropertyInfoBase pi3907 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1923 = new VTDObjectSetter(pi3907);
            binding_setter1923 = new StringFormaterDecorator(binding_setter1923,"{Step.OutputProperties.DbFetchData254.ResultTable.Row[1].EncryptionResult}");
            bind_dir1923 = new BindDirection(_flow.DbFetchData254,binding_getter1984,binding_setter1923,BindTargetType.ToInProperty);
            _flow.HTTPActivity250.InDirections.Add(bind_dir1923);
            VTDPropertyInfoBase pi3908 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1985 = new VTDXPathGetter(pi3908,XmlTypeCode.String);
            binding_getter1985 = new XPathGetterDecorator(binding_getter1985,"{Array0}",1);
            VTDPropertyInfoBase pi3909 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1924 = new VTDObjectSetter(pi3909);
            binding_setter1924 = new StringFormaterDecorator(binding_setter1924,"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].EncryptionResult}");
            bind_dir1924 = new BindDirection(_flow.DbFetchData256,binding_getter1985,binding_setter1924,BindTargetType.ToInProperty);
            _flow.HTTPActivity250.InDirections.Add(bind_dir1924);
            XmlDocument HTTPActivity250_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity250_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity250_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity250.ExpectedResponseXmlBody = HTTPActivity250_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity250_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity250_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity250_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity250.ExpectedResponseJsonBody = HTTPActivity250_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity250_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity250_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity250.ExpectedOutputProperties = HTTPActivity250_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity251.InputString = @"{Step.OutputProperties.HTTPActivity250.ResponseBody}";
            _flow.StringToJsonActivity251.Comment = @"";
            _flow.StringToJsonActivity251.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity251.Name = @"将登录接口返回的response转换为JSON";
            VTDPropertyInfoBase pi3910 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1986 = new VTDObjectGetter(pi3910);
            VTDPropertyInfoBase pi3911 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1925 = new VTDObjectSetter(pi3911);
            binding_setter1925 = new StringFormaterDecorator(binding_setter1925,"{Step.OutputProperties.HTTPActivity250.ResponseBody}");
            bind_dir1925 = new BindDirection(_flow.HTTPActivity250,binding_getter1986,binding_setter1925,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity251.InDirections.Add(bind_dir1925);
            _flow.Loop56.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop56.NumberOfIterations = (int)1;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_leaveRoom_verification中的测试用例";
            _flow.Loop56.Activities.Add (this.DataCursorActivity285);
            _flow.Loop56.Activities.Add (_flow.Sequence276);
            _flow.HTTPActivity270.TextBody = @"message=你好，我是张坤老师2.让我加入你们的群会话吧&receiver_jid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}&xsid=x_021at4j48cc115hc644atbj52bbd3132n7a9dd0990c872t9q596a3ieu0006u";
            _flow.HTTPActivity270.TextXmlBody = @"";
            _flow.HTTPActivity270.FileBody = @"";
            _flow.HTTPActivity270.PostBody = @"";
            _flow.HTTPActivity270.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.ClientFriendRequest_create}";
            _flow.HTTPActivity270.HttpMethod = @"POST";
            _flow.HTTPActivity270.HttpVersion = @"1.1";
            _flow.HTTPActivity270.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity270.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity270.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity270.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity270.Comment = @"";
            _flow.HTTPActivity270.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity270.RequestBodyType = @"Text";
            _flow.HTTPActivity270.ResponseType = @"Text";
            _flow.HTTPActivity270.Name = @"调用发起加群申请请求";
            _flow.HTTPActivity270.Proxy.Server = @"";
            _flow.HTTPActivity270.Proxy.Username = @"";
            _flow.HTTPActivity270.Proxy.Password = @"";
            _flow.HTTPActivity270.Authentication.Username = @"";
            _flow.HTTPActivity270.Authentication.Password = @"";
            _flow.HTTPActivity270.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity270.Timeout = (int)100000;
            _flow.HTTPActivity270.ClientCertificate.Password = @"";
            _flow.HTTPActivity270.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity270.UseClientCertificate = false;
            _flow.HTTPActivity270.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity270.AllowRedirections = true;
            _flow.HTTPActivity270.ReuseCookies = false;
            _flow.HTTPActivity270.ExpectServerError = false;
            XmlDocument HTTPActivity270_XMLBody_Document = new XmlDocument();
            HTTPActivity270_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity270_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity270.XMLBody = HTTPActivity270_XMLBody_Document;
            XmlDocument HTTPActivity270_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity270_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity270_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity270.RequestMultipartInfoXml = HTTPActivity270_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity270.Multipart=false;
            VTDPropertyInfoBase pi3912 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter1987 = new VTDObjectGetter(pi3912);
            VTDPropertyInfoBase pi3913 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1926 = new VTDObjectSetter(pi3913);
            binding_setter1926 = new StringFormaterDecorator(binding_setter1926,"{DataSource.tb_global_table.qdHost}");
            bind_dir1926 = new BindDirection(this.DataCursorActivity284,binding_getter1987,binding_setter1926,BindTargetType.ToInProperty);
            _flow.HTTPActivity270.InDirections.Add(bind_dir1926);
            VTDPropertyInfoBase pi3914 = new VTDPropertyInfoBase("ClientFriendRequest_create");
            VTDBaseGetter binding_getter1988 = new VTDObjectGetter(pi3914);
            VTDPropertyInfoBase pi3915 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1927 = new VTDObjectSetter(pi3915);
            binding_setter1927 = new StringFormaterDecorator(binding_setter1927,"{DataSource.tb_global_table.ClientFriendRequest_create}");
            bind_dir1927 = new BindDirection(this.DataCursorActivity284,binding_getter1988,binding_setter1927,BindTargetType.ToInProperty);
            _flow.HTTPActivity270.InDirections.Add(bind_dir1927);
            VTDPropertyInfoBase pi3916 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1989 = new VTDObjectGetter(pi3916);
            VTDPropertyInfoBase pi3917 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1928 = new VTDObjectSetter(pi3917);
            binding_setter1928 = new StringFormaterDecorator(binding_setter1928,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1928 = new BindDirection(this.DataCursorActivity284,binding_getter1989,binding_setter1928,BindTargetType.ToInProperty);
            _flow.HTTPActivity270.InDirections.Add(bind_dir1928);
            VTDPropertyInfoBase pi3918 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1990 = new VTDObjectGetter(pi3918);
            VTDPropertyInfoBase pi3919 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1929 = new VTDObjectSetter(pi3919);
            binding_setter1929 = new StringFormaterDecorator(binding_setter1929,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1929 = new BindDirection(this.DataCursorActivity284,binding_getter1990,binding_setter1929,BindTargetType.ToInProperty);
            _flow.HTTPActivity270.InDirections.Add(bind_dir1929);
            VTDPropertyInfoBase pi3920 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1991 = new VTDXPathGetter(pi3920,XmlTypeCode.String);
            binding_getter1991 = new XPathGetterDecorator(binding_getter1991,"{Array0}",1);
            VTDPropertyInfoBase pi3921 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1930 = new VTDObjectSetter(pi3921);
            binding_setter1930 = new StringFormaterDecorator(binding_setter1930,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1930 = new BindDirection(_flow.DbFetchData248,binding_getter1991,binding_setter1930,BindTargetType.ToInProperty);
            _flow.HTTPActivity270.InDirections.Add(bind_dir1930);
            XmlDocument HTTPActivity270_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity270_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity270_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity270.ExpectedResponseXmlBody = HTTPActivity270_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity270_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity270_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity270_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity270.ExpectedResponseJsonBody = HTTPActivity270_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity270_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity270_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity270_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity270.ExpectedOutputProperties = HTTPActivity270_ExpectedOutputProperties_Document;
            _flow.HTTPActivity271.TextBody = @"xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}";
            _flow.HTTPActivity271.TextXmlBody = @"";
            _flow.HTTPActivity271.FileBody = @"";
            _flow.HTTPActivity271.PostBody = @"";
            _flow.HTTPActivity271.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.ClientFriendRequest_all}";
            _flow.HTTPActivity271.HttpMethod = @"POST";
            _flow.HTTPActivity271.HttpVersion = @"1.1";
            _flow.HTTPActivity271.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity271.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity271.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity271.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity271.Comment = @"";
            _flow.HTTPActivity271.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity271.RequestBodyType = @"Text";
            _flow.HTTPActivity271.ResponseType = @"Text";
            _flow.HTTPActivity271.Name = @"调用获取所有请求申请接口";
            _flow.HTTPActivity271.Proxy.Server = @"";
            _flow.HTTPActivity271.Proxy.Username = @"";
            _flow.HTTPActivity271.Proxy.Password = @"";
            _flow.HTTPActivity271.Authentication.Username = @"";
            _flow.HTTPActivity271.Authentication.Password = @"";
            _flow.HTTPActivity271.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity271.Timeout = (int)100000;
            _flow.HTTPActivity271.ClientCertificate.Password = @"";
            _flow.HTTPActivity271.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity271.UseClientCertificate = false;
            _flow.HTTPActivity271.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity271.AllowRedirections = true;
            _flow.HTTPActivity271.ReuseCookies = false;
            _flow.HTTPActivity271.ExpectServerError = false;
            XmlDocument HTTPActivity271_XMLBody_Document = new XmlDocument();
            HTTPActivity271_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity271_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity271.XMLBody = HTTPActivity271_XMLBody_Document;
            XmlDocument HTTPActivity271_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity271_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity271_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity271.RequestMultipartInfoXml = HTTPActivity271_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity271.Multipart=false;
            VTDPropertyInfoBase pi3922 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter1992 = new VTDObjectGetter(pi3922);
            VTDPropertyInfoBase pi3923 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1931 = new VTDObjectSetter(pi3923);
            binding_setter1931 = new StringFormaterDecorator(binding_setter1931,"{DataSource.tb_global_table.qdHost}");
            bind_dir1931 = new BindDirection(this.DataCursorActivity284,binding_getter1992,binding_setter1931,BindTargetType.ToInProperty);
            _flow.HTTPActivity271.InDirections.Add(bind_dir1931);
            VTDPropertyInfoBase pi3924 = new VTDPropertyInfoBase("ClientFriendRequest_all");
            VTDBaseGetter binding_getter1993 = new VTDObjectGetter(pi3924);
            VTDPropertyInfoBase pi3925 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1932 = new VTDObjectSetter(pi3925);
            binding_setter1932 = new StringFormaterDecorator(binding_setter1932,"{DataSource.tb_global_table.ClientFriendRequest_all}");
            bind_dir1932 = new BindDirection(this.DataCursorActivity284,binding_getter1993,binding_setter1932,BindTargetType.ToInProperty);
            _flow.HTTPActivity271.InDirections.Add(bind_dir1932);
            VTDPropertyInfoBase pi3926 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1994 = new VTDObjectGetter(pi3926);
            VTDPropertyInfoBase pi3927 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1933 = new VTDObjectSetter(pi3927);
            binding_setter1933 = new StringFormaterDecorator(binding_setter1933,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1933 = new BindDirection(this.DataCursorActivity284,binding_getter1994,binding_setter1933,BindTargetType.ToInProperty);
            _flow.HTTPActivity271.InDirections.Add(bind_dir1933);
            VTDPropertyInfoBase pi3928 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1995 = new VTDObjectGetter(pi3928);
            VTDPropertyInfoBase pi3929 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1934 = new VTDObjectSetter(pi3929);
            binding_setter1934 = new StringFormaterDecorator(binding_setter1934,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1934 = new BindDirection(this.DataCursorActivity284,binding_getter1995,binding_setter1934,BindTargetType.ToInProperty);
            _flow.HTTPActivity271.InDirections.Add(bind_dir1934);
            VTDPropertyInfoBase pi3930 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1996 = new VTDXPathGetter(pi3930,XmlTypeCode.String);
            binding_getter1996 = new XPathGetterDecorator(binding_getter1996,"{Array0}",1);
            VTDPropertyInfoBase pi3931 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1935 = new VTDObjectSetter(pi3931);
            binding_setter1935 = new StringFormaterDecorator(binding_setter1935,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1935 = new BindDirection(_flow.DbFetchData247,binding_getter1996,binding_setter1935,BindTargetType.ToInProperty);
            _flow.HTTPActivity271.InDirections.Add(bind_dir1935);
            XmlDocument HTTPActivity271_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity271_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity271_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity271.ExpectedResponseXmlBody = HTTPActivity271_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity271_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity271_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity271_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity271.ExpectedResponseJsonBody = HTTPActivity271_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity271_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity271_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity271_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity271.ExpectedOutputProperties = HTTPActivity271_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity272.InputString = @"{Step.OutputProperties.HTTPActivity271.ResponseBody}";
            _flow.StringToJsonActivity272.Comment = @"";
            _flow.StringToJsonActivity272.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity272.Name = @"获取教师账号中所有的请求申请";
            VTDPropertyInfoBase pi3932 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1997 = new VTDObjectGetter(pi3932);
            VTDPropertyInfoBase pi3933 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1936 = new VTDObjectSetter(pi3933);
            binding_setter1936 = new StringFormaterDecorator(binding_setter1936,"{Step.OutputProperties.HTTPActivity271.ResponseBody}");
            bind_dir1936 = new BindDirection(_flow.HTTPActivity271,binding_getter1997,binding_setter1936,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity272.InDirections.Add(bind_dir1936);
            _flow.HTTPActivity273.TextBody = @"id={Step.JsonContent.StringToJsonActivity272.data.Object[1].id}&xsid={Step.JsonContent.StringToJsonActivity251.xsid}";
            _flow.HTTPActivity273.TextXmlBody = @"";
            _flow.HTTPActivity273.FileBody = @"";
            _flow.HTTPActivity273.PostBody = @"";
            _flow.HTTPActivity273.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.ClientFriendRequest_approve}";
            _flow.HTTPActivity273.HttpMethod = @"POST";
            _flow.HTTPActivity273.HttpVersion = @"1.1";
            _flow.HTTPActivity273.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity273.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity273.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity273.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity273.Comment = @"";
            _flow.HTTPActivity273.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity273.RequestBodyType = @"Text";
            _flow.HTTPActivity273.ResponseType = @"Text";
            _flow.HTTPActivity273.Name = @"调用同意申请接口";
            _flow.HTTPActivity273.Proxy.Server = @"";
            _flow.HTTPActivity273.Proxy.Username = @"";
            _flow.HTTPActivity273.Proxy.Password = @"";
            _flow.HTTPActivity273.Authentication.Username = @"";
            _flow.HTTPActivity273.Authentication.Password = @"";
            _flow.HTTPActivity273.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity273.Timeout = (int)100000;
            _flow.HTTPActivity273.ClientCertificate.Password = @"";
            _flow.HTTPActivity273.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity273.UseClientCertificate = false;
            _flow.HTTPActivity273.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity273.AllowRedirections = true;
            _flow.HTTPActivity273.ReuseCookies = false;
            _flow.HTTPActivity273.ExpectServerError = false;
            XmlDocument HTTPActivity273_XMLBody_Document = new XmlDocument();
            HTTPActivity273_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity273_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity273.XMLBody = HTTPActivity273_XMLBody_Document;
            XmlDocument HTTPActivity273_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity273_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity273_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity273.RequestMultipartInfoXml = HTTPActivity273_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity273.Multipart=false;
            VTDPropertyInfoBase pi3934 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter1998 = new VTDObjectGetter(pi3934);
            VTDPropertyInfoBase pi3935 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1937 = new VTDObjectSetter(pi3935);
            binding_setter1937 = new StringFormaterDecorator(binding_setter1937,"{DataSource.tb_global_table.qdHost}");
            bind_dir1937 = new BindDirection(this.DataCursorActivity284,binding_getter1998,binding_setter1937,BindTargetType.ToInProperty);
            _flow.HTTPActivity273.InDirections.Add(bind_dir1937);
            VTDPropertyInfoBase pi3936 = new VTDPropertyInfoBase("ClientFriendRequest_approve");
            VTDBaseGetter binding_getter1999 = new VTDObjectGetter(pi3936);
            VTDPropertyInfoBase pi3937 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1938 = new VTDObjectSetter(pi3937);
            binding_setter1938 = new StringFormaterDecorator(binding_setter1938,"{DataSource.tb_global_table.ClientFriendRequest_approve}");
            bind_dir1938 = new BindDirection(this.DataCursorActivity284,binding_getter1999,binding_setter1938,BindTargetType.ToInProperty);
            _flow.HTTPActivity273.InDirections.Add(bind_dir1938);
            VTDPropertyInfoBase pi3938 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter2000 = new VTDObjectGetter(pi3938);
            VTDPropertyInfoBase pi3939 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1939 = new VTDObjectSetter(pi3939);
            binding_setter1939 = new StringFormaterDecorator(binding_setter1939,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1939 = new BindDirection(this.DataCursorActivity284,binding_getter2000,binding_setter1939,BindTargetType.ToInProperty);
            _flow.HTTPActivity273.InDirections.Add(bind_dir1939);
            VTDPropertyInfoBase pi3940 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter2001 = new VTDObjectGetter(pi3940);
            VTDPropertyInfoBase pi3941 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1940 = new VTDObjectSetter(pi3941);
            binding_setter1940 = new StringFormaterDecorator(binding_setter1940,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1940 = new BindDirection(this.DataCursorActivity284,binding_getter2001,binding_setter1940,BindTargetType.ToInProperty);
            _flow.HTTPActivity273.InDirections.Add(bind_dir1940);
            VTDPropertyInfoBase pi3942 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='data'][1]/*[local-name(.)='Object'][{Array0}]/*[local-name(.)='id'][1]");
            VTDBaseGetter binding_getter2002 = new VTDJsonGetter(pi3942);
            binding_getter2002 = new XPathGetterDecorator(binding_getter2002,"{Array0}",1);
            VTDPropertyInfoBase pi3943 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1941 = new VTDObjectSetter(pi3943);
            binding_setter1941 = new StringFormaterDecorator(binding_setter1941,"{Step.JsonContent.StringToJsonActivity272.data.Object[1].id}");
            bind_dir1941 = new BindDirection(_flow.StringToJsonActivity272,binding_getter2002,binding_setter1941,BindTargetType.ToInProperty);
            _flow.HTTPActivity273.InDirections.Add(bind_dir1941);
            VTDPropertyInfoBase pi3944 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter2003 = new VTDJsonGetter(pi3944);
            VTDPropertyInfoBase pi3945 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1942 = new VTDObjectSetter(pi3945);
            binding_setter1942 = new StringFormaterDecorator(binding_setter1942,"{Step.JsonContent.StringToJsonActivity251.xsid}");
            bind_dir1942 = new BindDirection(_flow.StringToJsonActivity251,binding_getter2003,binding_setter1942,BindTargetType.ToInProperty);
            _flow.HTTPActivity273.InDirections.Add(bind_dir1942);
            XmlDocument HTTPActivity273_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity273_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity273_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity273.ExpectedResponseXmlBody = HTTPActivity273_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity273_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity273_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity273_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity273.ExpectedResponseJsonBody = HTTPActivity273_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity273_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity273_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity273_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity273.ExpectedOutputProperties = HTTPActivity273_ExpectedOutputProperties_Document;
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginStudentUsername}@365ime.comDeVawMFWs6{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/xmp/createGroup.php接口token实行加密";
            VTDPropertyInfoBase pi3946 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter2004 = new VTDObjectGetter(pi3946);
            VTDPropertyInfoBase pi3947 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1943 = new VTDObjectSetter(pi3947);
            binding_setter1943 = new StringFormaterDecorator(binding_setter1943,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1943 = new BindDirection(this.DataCursorActivity284,binding_getter2004,binding_setter1943,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1943);
            VTDPropertyInfoBase pi3948 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter2005 = new VTDXPathGetter(pi3948,XmlTypeCode.String);
            binding_getter2005 = new XPathGetterDecorator(binding_getter2005,"{Array0}",1);
            VTDPropertyInfoBase pi3949 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1944 = new VTDObjectSetter(pi3949);
            binding_setter1944 = new StringFormaterDecorator(binding_setter1944,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1944 = new BindDirection(_flow.DbFetchData248,binding_getter2005,binding_setter1944,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1944);
            VTDPropertyInfoBase pi3950 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2006 = new VTDObjectGetter(pi3950);
            VTDPropertyInfoBase pi3951 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1945 = new VTDObjectSetter(pi3951);
            bind_dir1945 = new BindDirection(_flow.DbOpenConnection39,binding_getter2006,binding_setter1945,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1945);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi3952 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2007 = new VTDObjectGetter(pi3952);
            VTDPropertyInfoBase pi3953 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1946 = new VTDObjectSetter(pi3953);
            bind_dir1946 = new BindDirection(_flow.DbOpenConnection39,binding_getter2007,binding_setter1946,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir1946);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"roomJid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}&xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}&Jid={DataSource.tb_global_table.LoginStudentUsername}@365ime.com";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.leaveRoom}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/xmp/leave.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi3954 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter2008 = new VTDObjectGetter(pi3954);
            VTDPropertyInfoBase pi3955 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1947 = new VTDObjectSetter(pi3955);
            binding_setter1947 = new StringFormaterDecorator(binding_setter1947,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1947 = new BindDirection(this.DataCursorActivity284,binding_getter2008,binding_setter1947,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1947);
            VTDPropertyInfoBase pi3956 = new VTDPropertyInfoBase("leaveRoom");
            VTDBaseGetter binding_getter2009 = new VTDObjectGetter(pi3956);
            VTDPropertyInfoBase pi3957 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1948 = new VTDObjectSetter(pi3957);
            binding_setter1948 = new StringFormaterDecorator(binding_setter1948,"{DataSource.tb_global_table.leaveRoom}");
            bind_dir1948 = new BindDirection(this.DataCursorActivity284,binding_getter2009,binding_setter1948,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1948);
            VTDPropertyInfoBase pi3958 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter2010 = new VTDObjectGetter(pi3958);
            VTDPropertyInfoBase pi3959 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1949 = new VTDObjectSetter(pi3959);
            binding_setter1949 = new StringFormaterDecorator(binding_setter1949,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1949 = new BindDirection(this.DataCursorActivity284,binding_getter2010,binding_setter1949,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1949);
            VTDPropertyInfoBase pi3960 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter2011 = new VTDObjectGetter(pi3960);
            VTDPropertyInfoBase pi3961 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1950 = new VTDObjectSetter(pi3961);
            binding_setter1950 = new StringFormaterDecorator(binding_setter1950,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1950 = new BindDirection(this.DataCursorActivity284,binding_getter2011,binding_setter1950,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1950);
            VTDPropertyInfoBase pi3962 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter2012 = new VTDXPathGetter(pi3962,XmlTypeCode.String);
            binding_getter2012 = new XPathGetterDecorator(binding_getter2012,"{Array0}",1);
            VTDPropertyInfoBase pi3963 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1951 = new VTDObjectSetter(pi3963);
            binding_setter1951 = new StringFormaterDecorator(binding_setter1951,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1951 = new BindDirection(_flow.DbFetchData248,binding_getter2012,binding_setter1951,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1951);
            VTDPropertyInfoBase pi3964 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter2013 = new VTDXPathGetter(pi3964,XmlTypeCode.String);
            binding_getter2013 = new XPathGetterDecorator(binding_getter2013,"{Array0}",1);
            VTDPropertyInfoBase pi3965 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1952 = new VTDObjectSetter(pi3965);
            binding_setter1952 = new StringFormaterDecorator(binding_setter1952,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir1952 = new BindDirection(_flow.DbFetchData76,binding_getter2013,binding_setter1952,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1952);
            VTDPropertyInfoBase pi3966 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter2014 = new VTDXPathGetter(pi3966,XmlTypeCode.String);
            binding_getter2014 = new XPathGetterDecorator(binding_getter2014,"{Array0}",1);
            VTDPropertyInfoBase pi3967 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1953 = new VTDObjectSetter(pi3967);
            binding_setter1953 = new StringFormaterDecorator(binding_setter1953,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1953 = new BindDirection(_flow.DbFetchData247,binding_getter2014,binding_setter1953,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1953);
            VTDPropertyInfoBase pi3968 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter2015 = new VTDObjectGetter(pi3968);
            VTDPropertyInfoBase pi3969 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1954 = new VTDObjectSetter(pi3969);
            binding_setter1954 = new StringFormaterDecorator(binding_setter1954,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1954 = new BindDirection(this.DataCursorActivity284,binding_getter2015,binding_setter1954,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1954);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/xmp/leave.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi3970 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter2016 = new VTDObjectGetter(pi3970);
            VTDPropertyInfoBase pi3971 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1955 = new VTDObjectSetter(pi3971);
            binding_setter1955 = new StringFormaterDecorator(binding_setter1955,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir1955 = new BindDirection(_flow.HTTPActivity73,binding_getter2016,binding_setter1955,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1955);
            VTDPropertyInfoBase pi3972 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2017 = new VTDObjectGetter(pi3972);
            VTDPropertyInfoBase pi3973 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1956 = new VTDObjectSetter(pi3973);
            bind_dir1956 = new BindDirection(_flow.DbOpenConnection39,binding_getter2017,binding_setter1956,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1956);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity285.Comment = @"";
            this.DataCursorActivity285.IconPath = @"";
            VTDPropertyInfoBase pi3974 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2018 = new VTDObjectGetter(pi3974);
            VTDPropertyInfoBase pi3975 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1957 = new VTDObjectSetter(pi3975);
            binding_setter1957 = new StringFormaterDecorator(binding_setter1957,"{Step.DataFetchActivity277.OutTable}");
            bind_dir1957 = new BindDirection(_flow.DataFetchActivity277,binding_getter2018,binding_setter1957,BindTargetType.ToInProperty);
            this.DataCursorActivity285.InDirections.Add(bind_dir1957);
            this.DataCursorActivity285_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity285_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity285_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity285_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity285_Policy.StartCondition.Value = "";
            this.DataCursorActivity285_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity285_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity285_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity285_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity285_Policy.EndCondition.Value = "";
            this.DataCursorActivity285_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity285_Policy.StepSize = 1;
            this.DataCursorActivity285_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity285.Policy = this.DataCursorActivity285_Policy;
            this.DataCursorActivity285.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity285.ResetCursor;
            _flow.Sequence276.Comment = @"";
            _flow.Sequence276.IconPath = @"";
            _flow.Sequence276.Name = @"序列276";
            _flow.Sequence276.Activities.Add (_flow.HTTPActivity257);
            _flow.Sequence276.Activities.Add (_flow.HTTPActivity259);
            _flow.Sequence276.Activities.Add (_flow.StringToJsonActivity260);
            _flow.Sequence276.Activities.Add (_flow.HTTPActivity263);
            _flow.Sequence276.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence276.Activities.Add (_flow.ReplaceStringActivity264);
            _flow.Sequence276.Activities.Add (_flow.DbFetchData265);
            _flow.Sequence276.Activities.Add (_flow.CallQTPTest266);
            _flow.Sequence276.Activities.Add (_flow.DbFetchData267);
            _flow.Sequence276.Activities.Add (_flow.ReplaceStringActivity268);
            _flow.Sequence276.Activities.Add (_flow.ReplaceStringActivity274);
            _flow.Sequence276.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence276.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence276.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence276.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence276.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence276.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence276.Activities.Add (_flow.IfElse64);
            _flow.HTTPActivity257.TextBody = @"message=你好，我是张坤老师2.让我加入你们的群会话吧&receiver_jid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}&xsid=x_021at4j48cc115hc644atbj52bbd3132n7a9dd0990c872t9q596a3ieu0006u";
            _flow.HTTPActivity257.TextXmlBody = @"";
            _flow.HTTPActivity257.FileBody = @"";
            _flow.HTTPActivity257.PostBody = @"";
            _flow.HTTPActivity257.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.ClientFriendRequest_create}";
            _flow.HTTPActivity257.HttpMethod = @"POST";
            _flow.HTTPActivity257.HttpVersion = @"1.1";
            _flow.HTTPActivity257.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity257.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity257.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity257.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity257.Comment = @"";
            _flow.HTTPActivity257.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity257.RequestBodyType = @"Text";
            _flow.HTTPActivity257.ResponseType = @"Text";
            _flow.HTTPActivity257.Name = @"调用发起加群申请请求";
            _flow.HTTPActivity257.Proxy.Server = @"";
            _flow.HTTPActivity257.Proxy.Username = @"";
            _flow.HTTPActivity257.Proxy.Password = @"";
            _flow.HTTPActivity257.Authentication.Username = @"";
            _flow.HTTPActivity257.Authentication.Password = @"";
            _flow.HTTPActivity257.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity257.Timeout = (int)100000;
            _flow.HTTPActivity257.ClientCertificate.Password = @"";
            _flow.HTTPActivity257.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity257.UseClientCertificate = false;
            _flow.HTTPActivity257.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity257.AllowRedirections = true;
            _flow.HTTPActivity257.ReuseCookies = false;
            _flow.HTTPActivity257.ExpectServerError = false;
            XmlDocument HTTPActivity257_XMLBody_Document = new XmlDocument();
            HTTPActivity257_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity257_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity257.XMLBody = HTTPActivity257_XMLBody_Document;
            XmlDocument HTTPActivity257_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity257_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity257_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity257.RequestMultipartInfoXml = HTTPActivity257_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity257.Multipart=false;
            VTDPropertyInfoBase pi3976 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter2019 = new VTDObjectGetter(pi3976);
            VTDPropertyInfoBase pi3977 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1958 = new VTDObjectSetter(pi3977);
            binding_setter1958 = new StringFormaterDecorator(binding_setter1958,"{DataSource.tb_global_table.qdHost}");
            bind_dir1958 = new BindDirection(this.DataCursorActivity285,binding_getter2019,binding_setter1958,BindTargetType.ToInProperty);
            _flow.HTTPActivity257.InDirections.Add(bind_dir1958);
            VTDPropertyInfoBase pi3978 = new VTDPropertyInfoBase("ClientFriendRequest_create");
            VTDBaseGetter binding_getter2020 = new VTDObjectGetter(pi3978);
            VTDPropertyInfoBase pi3979 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1959 = new VTDObjectSetter(pi3979);
            binding_setter1959 = new StringFormaterDecorator(binding_setter1959,"{DataSource.tb_global_table.ClientFriendRequest_create}");
            bind_dir1959 = new BindDirection(this.DataCursorActivity285,binding_getter2020,binding_setter1959,BindTargetType.ToInProperty);
            _flow.HTTPActivity257.InDirections.Add(bind_dir1959);
            VTDPropertyInfoBase pi3980 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter2021 = new VTDObjectGetter(pi3980);
            VTDPropertyInfoBase pi3981 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1960 = new VTDObjectSetter(pi3981);
            binding_setter1960 = new StringFormaterDecorator(binding_setter1960,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1960 = new BindDirection(this.DataCursorActivity285,binding_getter2021,binding_setter1960,BindTargetType.ToInProperty);
            _flow.HTTPActivity257.InDirections.Add(bind_dir1960);
            VTDPropertyInfoBase pi3982 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter2022 = new VTDObjectGetter(pi3982);
            VTDPropertyInfoBase pi3983 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1961 = new VTDObjectSetter(pi3983);
            binding_setter1961 = new StringFormaterDecorator(binding_setter1961,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1961 = new BindDirection(this.DataCursorActivity285,binding_getter2022,binding_setter1961,BindTargetType.ToInProperty);
            _flow.HTTPActivity257.InDirections.Add(bind_dir1961);
            VTDPropertyInfoBase pi3984 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter2023 = new VTDXPathGetter(pi3984,XmlTypeCode.String);
            binding_getter2023 = new XPathGetterDecorator(binding_getter2023,"{Array0}",1);
            VTDPropertyInfoBase pi3985 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1962 = new VTDObjectSetter(pi3985);
            binding_setter1962 = new StringFormaterDecorator(binding_setter1962,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1962 = new BindDirection(_flow.DbFetchData248,binding_getter2023,binding_setter1962,BindTargetType.ToInProperty);
            _flow.HTTPActivity257.InDirections.Add(bind_dir1962);
            XmlDocument HTTPActivity257_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity257_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity257_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity257.ExpectedResponseXmlBody = HTTPActivity257_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity257_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity257_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity257_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity257.ExpectedResponseJsonBody = HTTPActivity257_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity257_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity257_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity257_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity257.ExpectedOutputProperties = HTTPActivity257_ExpectedOutputProperties_Document;
            _flow.HTTPActivity259.TextBody = @"xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}";
            _flow.HTTPActivity259.TextXmlBody = @"";
            _flow.HTTPActivity259.FileBody = @"";
            _flow.HTTPActivity259.PostBody = @"";
            _flow.HTTPActivity259.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.ClientFriendRequest_all}";
            _flow.HTTPActivity259.HttpMethod = @"POST";
            _flow.HTTPActivity259.HttpVersion = @"1.1";
            _flow.HTTPActivity259.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity259.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity259.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity259.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity259.Comment = @"";
            _flow.HTTPActivity259.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity259.RequestBodyType = @"Text";
            _flow.HTTPActivity259.ResponseType = @"Text";
            _flow.HTTPActivity259.Name = @"调用获取所有请求申请接口";
            _flow.HTTPActivity259.Proxy.Server = @"";
            _flow.HTTPActivity259.Proxy.Username = @"";
            _flow.HTTPActivity259.Proxy.Password = @"";
            _flow.HTTPActivity259.Authentication.Username = @"";
            _flow.HTTPActivity259.Authentication.Password = @"";
            _flow.HTTPActivity259.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity259.Timeout = (int)100000;
            _flow.HTTPActivity259.ClientCertificate.Password = @"";
            _flow.HTTPActivity259.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity259.UseClientCertificate = false;
            _flow.HTTPActivity259.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity259.AllowRedirections = true;
            _flow.HTTPActivity259.ReuseCookies = false;
            _flow.HTTPActivity259.ExpectServerError = false;
            XmlDocument HTTPActivity259_XMLBody_Document = new XmlDocument();
            HTTPActivity259_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity259_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity259.XMLBody = HTTPActivity259_XMLBody_Document;
            XmlDocument HTTPActivity259_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity259_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity259_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity259.RequestMultipartInfoXml = HTTPActivity259_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity259.Multipart=false;
            VTDPropertyInfoBase pi3986 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter2024 = new VTDObjectGetter(pi3986);
            VTDPropertyInfoBase pi3987 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1963 = new VTDObjectSetter(pi3987);
            binding_setter1963 = new StringFormaterDecorator(binding_setter1963,"{DataSource.tb_global_table.qdHost}");
            bind_dir1963 = new BindDirection(this.DataCursorActivity285,binding_getter2024,binding_setter1963,BindTargetType.ToInProperty);
            _flow.HTTPActivity259.InDirections.Add(bind_dir1963);
            VTDPropertyInfoBase pi3988 = new VTDPropertyInfoBase("ClientFriendRequest_all");
            VTDBaseGetter binding_getter2025 = new VTDObjectGetter(pi3988);
            VTDPropertyInfoBase pi3989 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1964 = new VTDObjectSetter(pi3989);
            binding_setter1964 = new StringFormaterDecorator(binding_setter1964,"{DataSource.tb_global_table.ClientFriendRequest_all}");
            bind_dir1964 = new BindDirection(this.DataCursorActivity285,binding_getter2025,binding_setter1964,BindTargetType.ToInProperty);
            _flow.HTTPActivity259.InDirections.Add(bind_dir1964);
            VTDPropertyInfoBase pi3990 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter2026 = new VTDObjectGetter(pi3990);
            VTDPropertyInfoBase pi3991 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1965 = new VTDObjectSetter(pi3991);
            binding_setter1965 = new StringFormaterDecorator(binding_setter1965,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1965 = new BindDirection(this.DataCursorActivity285,binding_getter2026,binding_setter1965,BindTargetType.ToInProperty);
            _flow.HTTPActivity259.InDirections.Add(bind_dir1965);
            VTDPropertyInfoBase pi3992 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter2027 = new VTDObjectGetter(pi3992);
            VTDPropertyInfoBase pi3993 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1966 = new VTDObjectSetter(pi3993);
            binding_setter1966 = new StringFormaterDecorator(binding_setter1966,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1966 = new BindDirection(this.DataCursorActivity285,binding_getter2027,binding_setter1966,BindTargetType.ToInProperty);
            _flow.HTTPActivity259.InDirections.Add(bind_dir1966);
            VTDPropertyInfoBase pi3994 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter2028 = new VTDXPathGetter(pi3994,XmlTypeCode.String);
            binding_getter2028 = new XPathGetterDecorator(binding_getter2028,"{Array0}",1);
            VTDPropertyInfoBase pi3995 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1967 = new VTDObjectSetter(pi3995);
            binding_setter1967 = new StringFormaterDecorator(binding_setter1967,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1967 = new BindDirection(_flow.DbFetchData247,binding_getter2028,binding_setter1967,BindTargetType.ToInProperty);
            _flow.HTTPActivity259.InDirections.Add(bind_dir1967);
            XmlDocument HTTPActivity259_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity259_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity259_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity259.ExpectedResponseXmlBody = HTTPActivity259_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity259_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity259_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity259_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity259.ExpectedResponseJsonBody = HTTPActivity259_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity259_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity259_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity259_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity259.ExpectedOutputProperties = HTTPActivity259_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity260.InputString = @"{Step.OutputProperties.HTTPActivity259.ResponseBody}";
            _flow.StringToJsonActivity260.Comment = @"";
            _flow.StringToJsonActivity260.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity260.Name = @"获取教师账号中所有的请求申请";
            VTDPropertyInfoBase pi3996 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter2029 = new VTDObjectGetter(pi3996);
            VTDPropertyInfoBase pi3997 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1968 = new VTDObjectSetter(pi3997);
            binding_setter1968 = new StringFormaterDecorator(binding_setter1968,"{Step.OutputProperties.HTTPActivity259.ResponseBody}");
            bind_dir1968 = new BindDirection(_flow.HTTPActivity259,binding_getter2029,binding_setter1968,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity260.InDirections.Add(bind_dir1968);
            _flow.HTTPActivity263.TextBody = @"id={Step.JsonContent.StringToJsonActivity260.data.Object1.id}&xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}";
            _flow.HTTPActivity263.TextXmlBody = @"";
            _flow.HTTPActivity263.FileBody = @"";
            _flow.HTTPActivity263.PostBody = @"";
            _flow.HTTPActivity263.Url = @"{DataSource.tb_global_table.qdHost}{DataSource.tb_global_table.ClientFriendRequest_approve}";
            _flow.HTTPActivity263.HttpMethod = @"POST";
            _flow.HTTPActivity263.HttpVersion = @"1.1";
            _flow.HTTPActivity263.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity263.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity263.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity263.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity263.Comment = @"";
            _flow.HTTPActivity263.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity263.RequestBodyType = @"Text";
            _flow.HTTPActivity263.ResponseType = @"Text";
            _flow.HTTPActivity263.Name = @"调用同意申请接口";
            _flow.HTTPActivity263.Proxy.Server = @"";
            _flow.HTTPActivity263.Proxy.Username = @"";
            _flow.HTTPActivity263.Proxy.Password = @"";
            _flow.HTTPActivity263.Authentication.Username = @"";
            _flow.HTTPActivity263.Authentication.Password = @"";
            _flow.HTTPActivity263.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity263.Timeout = (int)100000;
            _flow.HTTPActivity263.ClientCertificate.Password = @"";
            _flow.HTTPActivity263.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity263.UseClientCertificate = false;
            _flow.HTTPActivity263.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity263.AllowRedirections = true;
            _flow.HTTPActivity263.ReuseCookies = false;
            _flow.HTTPActivity263.ExpectServerError = false;
            XmlDocument HTTPActivity263_XMLBody_Document = new XmlDocument();
            HTTPActivity263_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity263_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity263.XMLBody = HTTPActivity263_XMLBody_Document;
            XmlDocument HTTPActivity263_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity263_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity263_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity263.RequestMultipartInfoXml = HTTPActivity263_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity263.Multipart=false;
            VTDPropertyInfoBase pi3998 = new VTDPropertyInfoBase("qdHost");
            VTDBaseGetter binding_getter2030 = new VTDObjectGetter(pi3998);
            VTDPropertyInfoBase pi3999 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1969 = new VTDObjectSetter(pi3999);
            binding_setter1969 = new StringFormaterDecorator(binding_setter1969,"{DataSource.tb_global_table.qdHost}");
            bind_dir1969 = new BindDirection(this.DataCursorActivity285,binding_getter2030,binding_setter1969,BindTargetType.ToInProperty);
            _flow.HTTPActivity263.InDirections.Add(bind_dir1969);
            VTDPropertyInfoBase pi4000 = new VTDPropertyInfoBase("ClientFriendRequest_approve");
            VTDBaseGetter binding_getter2031 = new VTDObjectGetter(pi4000);
            VTDPropertyInfoBase pi4001 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1970 = new VTDObjectSetter(pi4001);
            binding_setter1970 = new StringFormaterDecorator(binding_setter1970,"{DataSource.tb_global_table.ClientFriendRequest_approve}");
            bind_dir1970 = new BindDirection(this.DataCursorActivity285,binding_getter2031,binding_setter1970,BindTargetType.ToInProperty);
            _flow.HTTPActivity263.InDirections.Add(bind_dir1970);
            VTDPropertyInfoBase pi4002 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter2032 = new VTDObjectGetter(pi4002);
            VTDPropertyInfoBase pi4003 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1971 = new VTDObjectSetter(pi4003);
            binding_setter1971 = new StringFormaterDecorator(binding_setter1971,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1971 = new BindDirection(this.DataCursorActivity285,binding_getter2032,binding_setter1971,BindTargetType.ToInProperty);
            _flow.HTTPActivity263.InDirections.Add(bind_dir1971);
            VTDPropertyInfoBase pi4004 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter2033 = new VTDObjectGetter(pi4004);
            VTDPropertyInfoBase pi4005 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1972 = new VTDObjectSetter(pi4005);
            binding_setter1972 = new StringFormaterDecorator(binding_setter1972,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1972 = new BindDirection(this.DataCursorActivity285,binding_getter2033,binding_setter1972,BindTargetType.ToInProperty);
            _flow.HTTPActivity263.InDirections.Add(bind_dir1972);
            VTDPropertyInfoBase pi4006 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='data'][1]/*[local-name(.)='Object1'][1]/*[local-name(.)='id'][1]");
            VTDBaseGetter binding_getter2034 = new VTDJsonGetter(pi4006);
            VTDPropertyInfoBase pi4007 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1973 = new VTDObjectSetter(pi4007);
            binding_setter1973 = new StringFormaterDecorator(binding_setter1973,"{Step.JsonContent.StringToJsonActivity260.data.Object1.id}");
            bind_dir1973 = new BindDirection(_flow.StringToJsonActivity260,binding_getter2034,binding_setter1973,BindTargetType.ToInProperty);
            _flow.HTTPActivity263.InDirections.Add(bind_dir1973);
            VTDPropertyInfoBase pi4008 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter2035 = new VTDXPathGetter(pi4008,XmlTypeCode.String);
            binding_getter2035 = new XPathGetterDecorator(binding_getter2035,"{Array0}",1);
            VTDPropertyInfoBase pi4009 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1974 = new VTDObjectSetter(pi4009);
            binding_setter1974 = new StringFormaterDecorator(binding_setter1974,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1974 = new BindDirection(_flow.DbFetchData247,binding_getter2035,binding_setter1974,BindTargetType.ToInProperty);
            _flow.HTTPActivity263.InDirections.Add(bind_dir1974);
            XmlDocument HTTPActivity263_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity263_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity263_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity263.ExpectedResponseXmlBody = HTTPActivity263_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity263_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity263_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity263_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity263.ExpectedResponseJsonBody = HTTPActivity263_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity263_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity263_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity263_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity263.ExpectedOutputProperties = HTTPActivity263_ExpectedOutputProperties_Document;
            _flow.DbFetchData57.QueryString = @"select xsid,Jid,roomJid,token from tb_leaveRoom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_leaveRoom_verification表中字段信息";
            VTDPropertyInfoBase pi4010 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2036 = new VTDObjectGetter(pi4010);
            VTDPropertyInfoBase pi4011 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1975 = new VTDObjectSetter(pi4011);
            binding_setter1975 = new StringFormaterDecorator(binding_setter1975,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1975 = new BindDirection(_flow.Loop56,binding_getter2036,binding_setter1975,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1975);
            VTDPropertyInfoBase pi4012 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2037 = new VTDObjectGetter(pi4012);
            VTDPropertyInfoBase pi4013 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1976 = new VTDObjectSetter(pi4013);
            bind_dir1976 = new BindDirection(_flow.DbOpenConnection39,binding_getter2037,binding_setter1976,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1976);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><Jid /><roomJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity264.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}";
            _flow.ReplaceStringActivity264.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity264.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity264.SearchReplaceString[0].Key = @"b84ff35507754b1db1631c26abdc61f0@muc.365ime.com";
            _flow.ReplaceStringActivity264.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}";
            _flow.ReplaceStringActivity264.CaseSensitive = true;
            _flow.ReplaceStringActivity264.Comment = @"";
            _flow.ReplaceStringActivity264.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity264.Name = @"更新本地表中groupid字段";
            VTDPropertyInfoBase pi4014 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='roomJid'][1]");
            VTDBaseGetter binding_getter2038 = new VTDXPathGetter(pi4014,XmlTypeCode.String);
            binding_getter2038 = new XPathGetterDecorator(binding_getter2038,"{Array0}",1);
            VTDPropertyInfoBase pi4015 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1977 = new VTDObjectSetter(pi4015);
            binding_setter1977 = new StringFormaterDecorator(binding_setter1977,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}");
            bind_dir1977 = new BindDirection(_flow.DbFetchData57,binding_getter2038,binding_setter1977,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity264.InDirections.Add(bind_dir1977);
            VTDPropertyInfoBase pi4016 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter2039 = new VTDXPathGetter(pi4016,XmlTypeCode.String);
            binding_getter2039 = new XPathGetterDecorator(binding_getter2039,"{Array0}",1);
            VTDPropertyInfoBase pi4017 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1978 = new VTDObjectSetter(pi4017);
            binding_setter1978 = new StringFormaterDecorator(binding_setter1978,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1978 = new BindDirection(_flow.DbFetchData248,binding_getter2039,binding_setter1978,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity264.InDirections.Add(bind_dir1978);
            _flow.DbFetchData265.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}DeVawMFWs6{Step.OutputProperties.ReplaceStringActivity264.Result}' where TestCase = 1";
            _flow.DbFetchData265.Timeout = (int)30;
            _flow.DbFetchData265.Comment = @"";
            _flow.DbFetchData265.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData265.Name = @"对于本地表中token进行加密";
            VTDPropertyInfoBase pi4018 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter2040 = new VTDXPathGetter(pi4018,XmlTypeCode.String);
            binding_getter2040 = new XPathGetterDecorator(binding_getter2040,"{Array0}",1);
            VTDPropertyInfoBase pi4019 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1979 = new VTDObjectSetter(pi4019);
            binding_setter1979 = new StringFormaterDecorator(binding_setter1979,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir1979 = new BindDirection(_flow.DbFetchData57,binding_getter2040,binding_setter1979,BindTargetType.ToInProperty);
            _flow.DbFetchData265.InDirections.Add(bind_dir1979);
            VTDPropertyInfoBase pi4020 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter2041 = new VTDObjectGetter(pi4020);
            VTDPropertyInfoBase pi4021 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1980 = new VTDObjectSetter(pi4021);
            binding_setter1980 = new StringFormaterDecorator(binding_setter1980,"{Step.OutputProperties.ReplaceStringActivity264.Result}");
            bind_dir1980 = new BindDirection(_flow.ReplaceStringActivity264,binding_getter2041,binding_setter1980,BindTargetType.ToInProperty);
            _flow.DbFetchData265.InDirections.Add(bind_dir1980);
            VTDPropertyInfoBase pi4022 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2042 = new VTDObjectGetter(pi4022);
            VTDPropertyInfoBase pi4023 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1981 = new VTDObjectSetter(pi4023);
            bind_dir1981 = new BindDirection(_flow.DbOpenConnection39,binding_getter2042,binding_setter1981,BindTargetType.ToInProperty);
            _flow.DbFetchData265.InDirections.Add(bind_dir1981);
            XmlDocument DbFetchData265_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData265_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData265_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData265.ExpectedOutputProperties = DbFetchData265_ExpectedOutputProperties_Document;
            _flow.CallQTPTest266.Comment = @"";
            _flow.CallQTPTest266.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest266.Name = @"Encryption.SHA1";
            _flow.CallQTPTest266.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ScriptPath}");
            _flow.CallQTPTest266.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ActionName}");
            _flow.CallQTPTest266.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.Description}");
            _flow.CallQTPTest266.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.IsActionSelected}");
            _flow.CallQTPTest266.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ResultLocation}");
            _flow.CallQTPTest266.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.QCScriptPath}");
            _flow.DbFetchData267.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData267.Timeout = (int)30;
            _flow.DbFetchData267.Comment = @"";
            _flow.DbFetchData267.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData267.Name = @"获取加密后的信息";
            VTDPropertyInfoBase pi4024 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2043 = new VTDObjectGetter(pi4024);
            VTDPropertyInfoBase pi4025 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1982 = new VTDObjectSetter(pi4025);
            bind_dir1982 = new BindDirection(_flow.DbOpenConnection39,binding_getter2043,binding_setter1982,BindTargetType.ToInProperty);
            _flow.DbFetchData267.InDirections.Add(bind_dir1982);
            XmlDocument DbFetchData267_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData267_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData267_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData267.ExpectedOutputProperties = DbFetchData267_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity268.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity268.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity268.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity268.SearchReplaceString[0].Key = @"72738f03c2eb66d693992576857807ee7718b2fc";
            _flow.ReplaceStringActivity268.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData267.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity268.CaseSensitive = true;
            _flow.ReplaceStringActivity268.Comment = @"";
            _flow.ReplaceStringActivity268.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity268.Name = @"更新本地表中token字段";
            VTDPropertyInfoBase pi4026 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter2044 = new VTDXPathGetter(pi4026,XmlTypeCode.String);
            binding_getter2044 = new XPathGetterDecorator(binding_getter2044,"{Array0}",1);
            VTDPropertyInfoBase pi4027 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1983 = new VTDObjectSetter(pi4027);
            binding_setter1983 = new StringFormaterDecorator(binding_setter1983,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir1983 = new BindDirection(_flow.DbFetchData57,binding_getter2044,binding_setter1983,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity268.InDirections.Add(bind_dir1983);
            VTDPropertyInfoBase pi4028 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter2045 = new VTDXPathGetter(pi4028,XmlTypeCode.String);
            binding_getter2045 = new XPathGetterDecorator(binding_getter2045,"{Array0}",1);
            VTDPropertyInfoBase pi4029 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1984 = new VTDObjectSetter(pi4029);
            binding_setter1984 = new StringFormaterDecorator(binding_setter1984,"{Step.OutputProperties.DbFetchData267.ResultTable.Row[1].EncryptionResult}");
            bind_dir1984 = new BindDirection(_flow.DbFetchData267,binding_getter2045,binding_setter1984,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity268.InDirections.Add(bind_dir1984);
            _flow.ReplaceStringActivity274.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity274.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity274.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity274.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity274.SearchReplaceString[0].Value = @"x_021at4j48cc115hc644atbj52bbd3132n7a9dd0990c872t9q596a3ieu0006u";
            _flow.ReplaceStringActivity274.CaseSensitive = true;
            _flow.ReplaceStringActivity274.Comment = @"";
            _flow.ReplaceStringActivity274.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity274.Name = @"更新本地表中xsid字段";
            VTDPropertyInfoBase pi4030 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter2046 = new VTDXPathGetter(pi4030,XmlTypeCode.String);
            binding_getter2046 = new XPathGetterDecorator(binding_getter2046,"{Array0}",1);
            VTDPropertyInfoBase pi4031 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1985 = new VTDObjectSetter(pi4031);
            binding_setter1985 = new StringFormaterDecorator(binding_setter1985,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir1985 = new BindDirection(_flow.DbFetchData57,binding_getter2046,binding_setter1985,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity274.InDirections.Add(bind_dir1985);
            _flow.HTTPActivity59.TextBody = @"roomJid={Step.OutputProperties.ReplaceStringActivity264.Result}&token={Step.OutputProperties.ReplaceStringActivity268.Result}&xsid={Step.OutputProperties.ReplaceStringActivity274.Result}&Jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.leaveRoom}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/xmp/leave.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi4032 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter2047 = new VTDObjectGetter(pi4032);
            VTDPropertyInfoBase pi4033 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1986 = new VTDObjectSetter(pi4033);
            binding_setter1986 = new StringFormaterDecorator(binding_setter1986,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1986 = new BindDirection(this.DataCursorActivity285,binding_getter2047,binding_setter1986,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1986);
            VTDPropertyInfoBase pi4034 = new VTDPropertyInfoBase("leaveRoom");
            VTDBaseGetter binding_getter2048 = new VTDObjectGetter(pi4034);
            VTDPropertyInfoBase pi4035 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1987 = new VTDObjectSetter(pi4035);
            binding_setter1987 = new StringFormaterDecorator(binding_setter1987,"{DataSource.tb_global_table.leaveRoom}");
            bind_dir1987 = new BindDirection(this.DataCursorActivity285,binding_getter2048,binding_setter1987,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1987);
            VTDPropertyInfoBase pi4036 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter2049 = new VTDObjectGetter(pi4036);
            VTDPropertyInfoBase pi4037 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1988 = new VTDObjectSetter(pi4037);
            binding_setter1988 = new StringFormaterDecorator(binding_setter1988,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1988 = new BindDirection(this.DataCursorActivity285,binding_getter2049,binding_setter1988,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1988);
            VTDPropertyInfoBase pi4038 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter2050 = new VTDObjectGetter(pi4038);
            VTDPropertyInfoBase pi4039 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1989 = new VTDObjectSetter(pi4039);
            binding_setter1989 = new StringFormaterDecorator(binding_setter1989,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1989 = new BindDirection(this.DataCursorActivity285,binding_getter2050,binding_setter1989,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1989);
            VTDPropertyInfoBase pi4040 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter2051 = new VTDObjectGetter(pi4040);
            VTDPropertyInfoBase pi4041 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1990 = new VTDObjectSetter(pi4041);
            binding_setter1990 = new StringFormaterDecorator(binding_setter1990,"{Step.OutputProperties.ReplaceStringActivity264.Result}");
            bind_dir1990 = new BindDirection(_flow.ReplaceStringActivity264,binding_getter2051,binding_setter1990,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1990);
            VTDPropertyInfoBase pi4042 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter2052 = new VTDObjectGetter(pi4042);
            VTDPropertyInfoBase pi4043 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1991 = new VTDObjectSetter(pi4043);
            binding_setter1991 = new StringFormaterDecorator(binding_setter1991,"{Step.OutputProperties.ReplaceStringActivity268.Result}");
            bind_dir1991 = new BindDirection(_flow.ReplaceStringActivity268,binding_getter2052,binding_setter1991,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1991);
            VTDPropertyInfoBase pi4044 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter2053 = new VTDObjectGetter(pi4044);
            VTDPropertyInfoBase pi4045 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1992 = new VTDObjectSetter(pi4045);
            binding_setter1992 = new StringFormaterDecorator(binding_setter1992,"{Step.OutputProperties.ReplaceStringActivity274.Result}");
            bind_dir1992 = new BindDirection(_flow.ReplaceStringActivity274,binding_getter2053,binding_setter1992,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1992);
            VTDPropertyInfoBase pi4046 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter2054 = new VTDXPathGetter(pi4046,XmlTypeCode.String);
            binding_getter2054 = new XPathGetterDecorator(binding_getter2054,"{Array0}",1);
            VTDPropertyInfoBase pi4047 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1993 = new VTDObjectSetter(pi4047);
            binding_setter1993 = new StringFormaterDecorator(binding_setter1993,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir1993 = new BindDirection(_flow.DbFetchData57,binding_getter2054,binding_setter1993,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1993);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi4048 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter2055 = new VTDObjectGetter(pi4048);
            VTDPropertyInfoBase pi4049 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1994 = new VTDObjectSetter(pi4049);
            binding_setter1994 = new StringFormaterDecorator(binding_setter1994,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1994 = new BindDirection(_flow.HTTPActivity59,binding_getter2055,binding_setter1994,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir1994);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_leaveRoom_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi4050 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter2056 = new VTDObjectGetter(pi4050);
            VTDPropertyInfoBase pi4051 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1995 = new VTDObjectSetter(pi4051);
            binding_setter1995 = new StringFormaterDecorator(binding_setter1995,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1995 = new BindDirection(_flow.HTTPActivity59,binding_getter2056,binding_setter1995,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1995);
            VTDPropertyInfoBase pi4052 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2057 = new VTDObjectGetter(pi4052);
            VTDPropertyInfoBase pi4053 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1996 = new VTDObjectSetter(pi4053);
            binding_setter1996 = new StringFormaterDecorator(binding_setter1996,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1996 = new BindDirection(_flow.Loop56,binding_getter2057,binding_setter1996,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1996);
            VTDPropertyInfoBase pi4054 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2058 = new VTDObjectGetter(pi4054);
            VTDPropertyInfoBase pi4055 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1997 = new VTDObjectSetter(pi4055);
            bind_dir1997 = new BindDirection(_flow.DbOpenConnection39,binding_getter2058,binding_setter1997,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1997);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_leaveRoom_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi4056 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter2059 = new VTDJsonGetter(pi4056);
            VTDPropertyInfoBase pi4057 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1998 = new VTDObjectSetter(pi4057);
            binding_setter1998 = new StringFormaterDecorator(binding_setter1998,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir1998 = new BindDirection(_flow.StringToJsonActivity60,binding_getter2059,binding_setter1998,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1998);
            VTDPropertyInfoBase pi4058 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2060 = new VTDObjectGetter(pi4058);
            VTDPropertyInfoBase pi4059 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1999 = new VTDObjectSetter(pi4059);
            binding_setter1999 = new StringFormaterDecorator(binding_setter1999,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1999 = new BindDirection(_flow.Loop56,binding_getter2060,binding_setter1999,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1999);
            VTDPropertyInfoBase pi4060 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2061 = new VTDObjectGetter(pi4060);
            VTDPropertyInfoBase pi4061 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2000 = new VTDObjectSetter(pi4061);
            bind_dir2000 = new BindDirection(_flow.DbOpenConnection39,binding_getter2061,binding_setter2000,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir2000);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_leaveRoom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi4062 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2062 = new VTDObjectGetter(pi4062);
            VTDPropertyInfoBase pi4063 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2001 = new VTDObjectSetter(pi4063);
            binding_setter2001 = new StringFormaterDecorator(binding_setter2001,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2001 = new BindDirection(_flow.Loop56,binding_getter2062,binding_setter2001,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir2001);
            VTDPropertyInfoBase pi4064 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2063 = new VTDObjectGetter(pi4064);
            VTDPropertyInfoBase pi4065 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2002 = new VTDObjectSetter(pi4065);
            bind_dir2002 = new BindDirection(_flow.DbOpenConnection39,binding_getter2063,binding_setter2002,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir2002);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_leaveRoom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi4066 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2064 = new VTDObjectGetter(pi4066);
            VTDPropertyInfoBase pi4067 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2003 = new VTDObjectSetter(pi4067);
            binding_setter2003 = new StringFormaterDecorator(binding_setter2003,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2003 = new BindDirection(_flow.Loop56,binding_getter2064,binding_setter2003,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir2003);
            VTDPropertyInfoBase pi4068 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2065 = new VTDObjectGetter(pi4068);
            VTDPropertyInfoBase pi4069 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2004 = new VTDObjectSetter(pi4069);
            bind_dir2004 = new BindDirection(_flow.DbOpenConnection39,binding_getter2065,binding_setter2004,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir2004);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi4070 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter2066 = new VTDXPathGetter(pi4070,XmlTypeCode.String);
            binding_getter2066 = new XPathGetterDecorator(binding_getter2066,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter2066),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi4071 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter2067 = new VTDXPathGetter(pi4071,XmlTypeCode.String);
            binding_getter2067 = new XPathGetterDecorator(binding_getter2067,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter2067),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_leaveRoom_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi4072 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2068 = new VTDObjectGetter(pi4072);
            VTDPropertyInfoBase pi4073 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2005 = new VTDObjectSetter(pi4073);
            binding_setter2005 = new StringFormaterDecorator(binding_setter2005,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2005 = new BindDirection(_flow.Loop56,binding_getter2068,binding_setter2005,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir2005);
            VTDPropertyInfoBase pi4074 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2069 = new VTDObjectGetter(pi4074);
            VTDPropertyInfoBase pi4075 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2006 = new VTDObjectSetter(pi4075);
            bind_dir2006 = new BindDirection(_flow.DbOpenConnection39,binding_getter2069,binding_setter2006,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir2006);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_leaveRoom_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi4076 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2070 = new VTDObjectGetter(pi4076);
            VTDPropertyInfoBase pi4077 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2007 = new VTDObjectSetter(pi4077);
            binding_setter2007 = new StringFormaterDecorator(binding_setter2007,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2007 = new BindDirection(_flow.Loop56,binding_getter2070,binding_setter2007,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir2007);
            VTDPropertyInfoBase pi4078 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2071 = new VTDObjectGetter(pi4078);
            VTDPropertyInfoBase pi4079 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2008 = new VTDObjectSetter(pi4079);
            bind_dir2008 = new BindDirection(_flow.DbOpenConnection39,binding_getter2071,binding_setter2008,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir2008);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    