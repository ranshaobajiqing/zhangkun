/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_GetUnReadMsgs_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir547 = null;
        public BindDirection bind_dir548 = null;
        public BindDirection bind_dir549 = null;
        public BindDirection bind_dir550 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity266 = null;
        public BindDirection bind_dir551 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity266_Policy = null;
        public BindDirection bind_dir552 = null;
        public BindDirection bind_dir553 = null;
        public BindDirection bind_dir554 = null;
        public BindDirection bind_dir555 = null;
        public BindDirection bind_dir556 = null;
        public BindDirection bind_dir557 = null;
        public BindDirection bind_dir558 = null;
        public BindDirection bind_dir559 = null;
        public BindDirection bind_dir560 = null;
        public BindDirection bind_dir561 = null;
        public BindDirection bind_dir562 = null;
        public BindDirection bind_dir563 = null;
        public BindDirection bind_dir564 = null;
        public BindDirection bind_dir565 = null;
        public BindDirection bind_dir566 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity267 = null;
        public BindDirection bind_dir567 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity267_Policy = null;
        public BindDirection bind_dir568 = null;
        public BindDirection bind_dir569 = null;
        public BindDirection bind_dir570 = null;
        public BindDirection bind_dir571 = null;
        public BindDirection bind_dir572 = null;
        public BindDirection bind_dir573 = null;
        public BindDirection bind_dir574 = null;
        public BindDirection bind_dir575 = null;
        public BindDirection bind_dir576 = null;
        public BindDirection bind_dir577 = null;
        public BindDirection bind_dir578 = null;
        public BindDirection bind_dir579 = null;
        public BindDirection bind_dir580 = null;
        public BindDirection bind_dir581 = null;
        public BindDirection bind_dir582 = null;
        public BindDirection bind_dir583 = null;
        public BindDirection bind_dir584 = null;
        public BindDirection bind_dir585 = null;
        public BindDirection bind_dir586 = null;
        public BindDirection bind_dir587 = null;
        public BindDirection bind_dir588 = null;
        public BindDirection bind_dir589 = null;
        public BindDirection bind_dir590 = null;
        public BindDirection bind_dir591 = null;
        public BindDirection bind_dir592 = null;
        public BindDirection bind_dir593 = null;
        public BindDirection bind_dir594 = null;
        public BindDirection bind_dir595 = null;
        public BindDirection bind_dir596 = null;
        public BindDirection bind_dir597 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity262 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity262");
            _flow.DataFetchActivity259 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity259");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity261 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity261");
            _flow.DataExporterActivity264 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity264");
            _flow.DataExporterCloseActivity265 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity265");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity260 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity260");
            _flow.DataDisconnectActivity263 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity263");
            this.DataCursorActivity266 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity266");
            this.DataCursorActivity266_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence257 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence257");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData256 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData256");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity267 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity267");
            this.DataCursorActivity267_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence258 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence258");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity262.Comment = @"";
            _flow.DataFetchActivity262.IconPath = @"";
            _flow.DataFetchActivity262.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity262.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity262_QueryParameters_Document = new XmlDocument();
            DataFetchActivity262_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity262Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity262_QueryParameters_Document.LoadXml(xmlDataFetchActivity262Params);
            _flow.DataFetchActivity262.QueryParameters = DataFetchActivity262_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity262);
            this.Activities.Add (_flow.DataFetchActivity262);
            _flow.DataFetchActivity259.Comment = @"";
            _flow.DataFetchActivity259.IconPath = @"";
            _flow.DataFetchActivity259.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity259.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity259_QueryParameters_Document = new XmlDocument();
            DataFetchActivity259_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity259Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity259_QueryParameters_Document.LoadXml(xmlDataFetchActivity259Params);
            _flow.DataFetchActivity259.QueryParameters = DataFetchActivity259_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity259);
            this.Activities.Add (_flow.DataFetchActivity259);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity266);
            _flow.Loop2.Activities.Add (_flow.Sequence257);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity261.Comment = @"";
            _flow.DataExporterActivity261.IconPath = @"";
            VTDPropertyInfoBase pi1113 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter567 = new VTDObjectGetter(pi1113);
            VTDPropertyInfoBase pi1114 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter547 = new VTDObjectSetter(pi1114);
            binding_setter547 = new StringFormaterDecorator(binding_setter547,"{Step.DataFetchActivity259.OutTable}");
            bind_dir547 = new BindDirection(_flow.DataFetchActivity259,binding_getter567,binding_setter547,BindTargetType.ToInProperty);
            _flow.DataExporterActivity261.InDirections.Add(bind_dir547);
            this.Activities.Add (_flow.DataExporterActivity261);
            _flow.DataExporterActivity264.Comment = @"";
            _flow.DataExporterActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1115 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter568 = new VTDObjectGetter(pi1115);
            VTDPropertyInfoBase pi1116 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter548 = new VTDObjectSetter(pi1116);
            binding_setter548 = new StringFormaterDecorator(binding_setter548,"{Step.DataFetchActivity262.OutTable}");
            bind_dir548 = new BindDirection(_flow.DataFetchActivity262,binding_getter568,binding_setter548,BindTargetType.ToInProperty);
            _flow.DataExporterActivity264.InDirections.Add(bind_dir548);
            this.Activities.Add (_flow.DataExporterActivity264);
            _flow.DataExporterCloseActivity265.Comment = @"";
            _flow.DataExporterCloseActivity265.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity265);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity260.Comment = @"";
            _flow.DataDisconnectActivity260.IconPath = @"";
            VTDPropertyInfoBase pi1117 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter569 = new VTDObjectGetter(pi1117);
            VTDPropertyInfoBase pi1118 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter549 = new VTDObjectSetter(pi1118);
            binding_setter549 = new StringFormaterDecorator(binding_setter549,"{Step.DataFetchActivity259.OutTable}");
            bind_dir549 = new BindDirection(_flow.DataFetchActivity259,binding_getter569,binding_setter549,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity260.InDirections.Add(bind_dir549);
            this.Activities.Add (_flow.DataDisconnectActivity260);
            _flow.DataDisconnectActivity263.Comment = @"";
            _flow.DataDisconnectActivity263.IconPath = @"";
            VTDPropertyInfoBase pi1119 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter570 = new VTDObjectGetter(pi1119);
            VTDPropertyInfoBase pi1120 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter550 = new VTDObjectSetter(pi1120);
            binding_setter550 = new StringFormaterDecorator(binding_setter550,"{Step.DataFetchActivity262.OutTable}");
            bind_dir550 = new BindDirection(_flow.DataFetchActivity262,binding_getter570,binding_setter550,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity263.InDirections.Add(bind_dir550);
            this.Activities.Add (_flow.DataDisconnectActivity263);
            this.DataCursorActivity266.Comment = @"";
            this.DataCursorActivity266.IconPath = @"";
            VTDPropertyInfoBase pi1121 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter571 = new VTDObjectGetter(pi1121);
            VTDPropertyInfoBase pi1122 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter551 = new VTDObjectSetter(pi1122);
            binding_setter551 = new StringFormaterDecorator(binding_setter551,"{Step.DataFetchActivity259.OutTable}");
            bind_dir551 = new BindDirection(_flow.DataFetchActivity259,binding_getter571,binding_setter551,BindTargetType.ToInProperty);
            this.DataCursorActivity266.InDirections.Add(bind_dir551);
            this.DataCursorActivity266_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity266_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.StartCondition.Value = "";
            this.DataCursorActivity266_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity266_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.EndCondition.Value = "";
            this.DataCursorActivity266_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity266_Policy.StepSize = 1;
            this.DataCursorActivity266_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity266.Policy = this.DataCursorActivity266_Policy;
            this.DataCursorActivity266.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity266.ResetCursor;
            _flow.Sequence257.Comment = @"";
            _flow.Sequence257.IconPath = @"";
            _flow.Sequence257.Name = @"序列257";
            _flow.Sequence257.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData256);
            _flow.Sequence257.Activities.Add (_flow.Loop56);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence257.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence257.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_GetUnReadMsgs_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取tb_GetUnReadMsgs_verification表有效行数";
            VTDPropertyInfoBase pi1123 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter572 = new VTDObjectGetter(pi1123);
            VTDPropertyInfoBase pi1124 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter552 = new VTDObjectSetter(pi1124);
            bind_dir552 = new BindDirection(_flow.DbOpenConnection39,binding_getter572,binding_setter552,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir552);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData256.QueryString = @"select xmid from tb_global_table where TestCase = 1";
            _flow.DbFetchData256.Timeout = (int)30;
            _flow.DbFetchData256.Comment = @"";
            _flow.DbFetchData256.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData256.Name = @"获取全局表中xmid值";
            VTDPropertyInfoBase pi1125 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter573 = new VTDObjectGetter(pi1125);
            VTDPropertyInfoBase pi1126 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter553 = new VTDObjectSetter(pi1126);
            bind_dir553 = new BindDirection(_flow.DbOpenConnection39,binding_getter573,binding_setter553,BindTargetType.ToInProperty);
            _flow.DbFetchData256.InDirections.Add(bind_dir553);
            XmlDocument DbFetchData256_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData256_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData256_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xmid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData256.ExpectedOutputProperties = DbFetchData256_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop56.NumberOfIterations = (int)1;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_GetUnReadMsgs_verification中的测试用例";
            _flow.Loop56.Activities.Add (this.DataCursorActivity267);
            _flow.Loop56.Activities.Add (_flow.Sequence258);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comrytG4FmKLM{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].xmid}' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/iq/GetUnReadMsgs.php接口token实行加密";
            VTDPropertyInfoBase pi1127 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter574 = new VTDObjectGetter(pi1127);
            VTDPropertyInfoBase pi1128 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter554 = new VTDObjectSetter(pi1128);
            binding_setter554 = new StringFormaterDecorator(binding_setter554,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir554 = new BindDirection(this.DataCursorActivity266,binding_getter574,binding_setter554,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir554);
            VTDPropertyInfoBase pi1129 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter575 = new VTDXPathGetter(pi1129,XmlTypeCode.String);
            binding_getter575 = new XPathGetterDecorator(binding_getter575,"{Array0}",1);
            VTDPropertyInfoBase pi1130 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter555 = new VTDObjectSetter(pi1130);
            binding_setter555 = new StringFormaterDecorator(binding_setter555,"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].xmid}");
            bind_dir555 = new BindDirection(_flow.DbFetchData256,binding_getter575,binding_setter555,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir555);
            VTDPropertyInfoBase pi1131 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter576 = new VTDObjectGetter(pi1131);
            VTDPropertyInfoBase pi1132 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter556 = new VTDObjectSetter(pi1132);
            bind_dir556 = new BindDirection(_flow.DbOpenConnection39,binding_getter576,binding_setter556,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir556);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1133 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter577 = new VTDObjectGetter(pi1133);
            VTDPropertyInfoBase pi1134 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter557 = new VTDObjectSetter(pi1134);
            bind_dir557 = new BindDirection(_flow.DbOpenConnection39,binding_getter577,binding_setter557,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir557);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&xmid={Step.OutputProperties.DbFetchData256.ResultTable.Row[1].xmid}&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.GetUnReadMsgs}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/iq/GetUnReadMsgs.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi1135 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter578 = new VTDObjectGetter(pi1135);
            VTDPropertyInfoBase pi1136 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter558 = new VTDObjectSetter(pi1136);
            binding_setter558 = new StringFormaterDecorator(binding_setter558,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir558 = new BindDirection(this.DataCursorActivity266,binding_getter578,binding_setter558,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir558);
            VTDPropertyInfoBase pi1137 = new VTDPropertyInfoBase("GetUnReadMsgs");
            VTDBaseGetter binding_getter579 = new VTDObjectGetter(pi1137);
            VTDPropertyInfoBase pi1138 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter559 = new VTDObjectSetter(pi1138);
            binding_setter559 = new StringFormaterDecorator(binding_setter559,"{DataSource.tb_global_table.GetUnReadMsgs}");
            bind_dir559 = new BindDirection(this.DataCursorActivity266,binding_getter579,binding_setter559,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir559);
            VTDPropertyInfoBase pi1139 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter580 = new VTDObjectGetter(pi1139);
            VTDPropertyInfoBase pi1140 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter560 = new VTDObjectSetter(pi1140);
            binding_setter560 = new StringFormaterDecorator(binding_setter560,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir560 = new BindDirection(this.DataCursorActivity266,binding_getter580,binding_setter560,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir560);
            VTDPropertyInfoBase pi1141 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter581 = new VTDObjectGetter(pi1141);
            VTDPropertyInfoBase pi1142 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter561 = new VTDObjectSetter(pi1142);
            binding_setter561 = new StringFormaterDecorator(binding_setter561,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir561 = new BindDirection(this.DataCursorActivity266,binding_getter581,binding_setter561,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir561);
            VTDPropertyInfoBase pi1143 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter582 = new VTDObjectGetter(pi1143);
            VTDPropertyInfoBase pi1144 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter562 = new VTDObjectSetter(pi1144);
            binding_setter562 = new StringFormaterDecorator(binding_setter562,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir562 = new BindDirection(this.DataCursorActivity266,binding_getter582,binding_setter562,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir562);
            VTDPropertyInfoBase pi1145 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter583 = new VTDXPathGetter(pi1145,XmlTypeCode.String);
            binding_getter583 = new XPathGetterDecorator(binding_getter583,"{Array0}",1);
            VTDPropertyInfoBase pi1146 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter563 = new VTDObjectSetter(pi1146);
            binding_setter563 = new StringFormaterDecorator(binding_setter563,"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].xmid}");
            bind_dir563 = new BindDirection(_flow.DbFetchData256,binding_getter583,binding_setter563,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir563);
            VTDPropertyInfoBase pi1147 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter584 = new VTDXPathGetter(pi1147,XmlTypeCode.String);
            binding_getter584 = new XPathGetterDecorator(binding_getter584,"{Array0}",1);
            VTDPropertyInfoBase pi1148 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter564 = new VTDObjectSetter(pi1148);
            binding_setter564 = new StringFormaterDecorator(binding_setter564,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir564 = new BindDirection(_flow.DbFetchData76,binding_getter584,binding_setter564,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir564);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/GetUnReadMsgs.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1149 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter585 = new VTDObjectGetter(pi1149);
            VTDPropertyInfoBase pi1150 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter565 = new VTDObjectSetter(pi1150);
            binding_setter565 = new StringFormaterDecorator(binding_setter565,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir565 = new BindDirection(_flow.HTTPActivity73,binding_getter585,binding_setter565,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir565);
            VTDPropertyInfoBase pi1151 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter586 = new VTDObjectGetter(pi1151);
            VTDPropertyInfoBase pi1152 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter566 = new VTDObjectSetter(pi1152);
            bind_dir566 = new BindDirection(_flow.DbOpenConnection39,binding_getter586,binding_setter566,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir566);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity267.Comment = @"";
            this.DataCursorActivity267.IconPath = @"";
            VTDPropertyInfoBase pi1153 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter587 = new VTDObjectGetter(pi1153);
            VTDPropertyInfoBase pi1154 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter567 = new VTDObjectSetter(pi1154);
            binding_setter567 = new StringFormaterDecorator(binding_setter567,"{Step.DataFetchActivity259.OutTable}");
            bind_dir567 = new BindDirection(_flow.DataFetchActivity259,binding_getter587,binding_setter567,BindTargetType.ToInProperty);
            this.DataCursorActivity267.InDirections.Add(bind_dir567);
            this.DataCursorActivity267_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity267_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity267_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity267_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity267_Policy.StartCondition.Value = "";
            this.DataCursorActivity267_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity267_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity267_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity267_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity267_Policy.EndCondition.Value = "";
            this.DataCursorActivity267_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity267_Policy.StepSize = 1;
            this.DataCursorActivity267_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity267.Policy = this.DataCursorActivity267_Policy;
            this.DataCursorActivity267.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity267.ResetCursor;
            _flow.Sequence258.Comment = @"";
            _flow.Sequence258.IconPath = @"";
            _flow.Sequence258.Name = @"序列258";
            _flow.Sequence258.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence258.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence258.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence258.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence258.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence258.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select jid,xmid,token from tb_GetUnReadMsgs_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_GetUnReadMsgs_verification表中字段信息";
            VTDPropertyInfoBase pi1155 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter588 = new VTDObjectGetter(pi1155);
            VTDPropertyInfoBase pi1156 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter568 = new VTDObjectSetter(pi1156);
            binding_setter568 = new StringFormaterDecorator(binding_setter568,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir568 = new BindDirection(_flow.Loop56,binding_getter588,binding_setter568,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir568);
            VTDPropertyInfoBase pi1157 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter589 = new VTDObjectGetter(pi1157);
            VTDPropertyInfoBase pi1158 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter569 = new VTDObjectSetter(pi1158);
            bind_dir569 = new BindDirection(_flow.DbOpenConnection39,binding_getter589,binding_setter569,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir569);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><jid /><xmid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}rytG4FmKLM{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xmid}' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi1159 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='jid'][1]");
            VTDBaseGetter binding_getter590 = new VTDXPathGetter(pi1159,XmlTypeCode.String);
            binding_getter590 = new XPathGetterDecorator(binding_getter590,"{Array0}",1);
            VTDPropertyInfoBase pi1160 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter570 = new VTDObjectSetter(pi1160);
            binding_setter570 = new StringFormaterDecorator(binding_setter570,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}");
            bind_dir570 = new BindDirection(_flow.DbFetchData57,binding_getter590,binding_setter570,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir570);
            VTDPropertyInfoBase pi1161 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter591 = new VTDXPathGetter(pi1161,XmlTypeCode.String);
            binding_getter591 = new XPathGetterDecorator(binding_getter591,"{Array0}",1);
            VTDPropertyInfoBase pi1162 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter571 = new VTDObjectSetter(pi1162);
            binding_setter571 = new StringFormaterDecorator(binding_setter571,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xmid}");
            bind_dir571 = new BindDirection(_flow.DbFetchData57,binding_getter591,binding_setter571,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir571);
            VTDPropertyInfoBase pi1163 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter592 = new VTDObjectGetter(pi1163);
            VTDPropertyInfoBase pi1164 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter572 = new VTDObjectSetter(pi1164);
            bind_dir572 = new BindDirection(_flow.DbOpenConnection39,binding_getter592,binding_setter572,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir572);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi1165 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter593 = new VTDObjectGetter(pi1165);
            VTDPropertyInfoBase pi1166 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter573 = new VTDObjectSetter(pi1166);
            bind_dir573 = new BindDirection(_flow.DbOpenConnection39,binding_getter593,binding_setter573,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir573);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"e604be10fa933b76a0cf13072e3f552f8d81fb38";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi1167 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter594 = new VTDXPathGetter(pi1167,XmlTypeCode.String);
            binding_getter594 = new XPathGetterDecorator(binding_getter594,"{Array0}",1);
            VTDPropertyInfoBase pi1168 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter574 = new VTDObjectSetter(pi1168);
            binding_setter574 = new StringFormaterDecorator(binding_setter574,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir574 = new BindDirection(_flow.DbFetchData57,binding_getter594,binding_setter574,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir574);
            VTDPropertyInfoBase pi1169 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter595 = new VTDXPathGetter(pi1169,XmlTypeCode.String);
            binding_getter595 = new XPathGetterDecorator(binding_getter595,"{Array0}",1);
            VTDPropertyInfoBase pi1170 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter575 = new VTDObjectSetter(pi1170);
            binding_setter575 = new StringFormaterDecorator(binding_setter575,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir575 = new BindDirection(_flow.DbFetchData252,binding_getter595,binding_setter575,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir575);
            _flow.HTTPActivity59.TextBody = @"jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}&xmid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xmid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.GetUnReadMsgs}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/GetUnReadMsgs.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi1171 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter596 = new VTDObjectGetter(pi1171);
            VTDPropertyInfoBase pi1172 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter576 = new VTDObjectSetter(pi1172);
            binding_setter576 = new StringFormaterDecorator(binding_setter576,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir576 = new BindDirection(this.DataCursorActivity267,binding_getter596,binding_setter576,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir576);
            VTDPropertyInfoBase pi1173 = new VTDPropertyInfoBase("GetUnReadMsgs");
            VTDBaseGetter binding_getter597 = new VTDObjectGetter(pi1173);
            VTDPropertyInfoBase pi1174 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter577 = new VTDObjectSetter(pi1174);
            binding_setter577 = new StringFormaterDecorator(binding_setter577,"{DataSource.tb_global_table.GetUnReadMsgs}");
            bind_dir577 = new BindDirection(this.DataCursorActivity267,binding_getter597,binding_setter577,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir577);
            VTDPropertyInfoBase pi1175 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter598 = new VTDObjectGetter(pi1175);
            VTDPropertyInfoBase pi1176 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter578 = new VTDObjectSetter(pi1176);
            binding_setter578 = new StringFormaterDecorator(binding_setter578,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir578 = new BindDirection(this.DataCursorActivity267,binding_getter598,binding_setter578,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir578);
            VTDPropertyInfoBase pi1177 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter599 = new VTDObjectGetter(pi1177);
            VTDPropertyInfoBase pi1178 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter579 = new VTDObjectSetter(pi1178);
            binding_setter579 = new StringFormaterDecorator(binding_setter579,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir579 = new BindDirection(this.DataCursorActivity267,binding_getter599,binding_setter579,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir579);
            VTDPropertyInfoBase pi1179 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='jid'][1]");
            VTDBaseGetter binding_getter600 = new VTDXPathGetter(pi1179,XmlTypeCode.String);
            binding_getter600 = new XPathGetterDecorator(binding_getter600,"{Array0}",1);
            VTDPropertyInfoBase pi1180 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter580 = new VTDObjectSetter(pi1180);
            binding_setter580 = new StringFormaterDecorator(binding_setter580,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}");
            bind_dir580 = new BindDirection(_flow.DbFetchData57,binding_getter600,binding_setter580,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir580);
            VTDPropertyInfoBase pi1181 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter601 = new VTDXPathGetter(pi1181,XmlTypeCode.String);
            binding_getter601 = new XPathGetterDecorator(binding_getter601,"{Array0}",1);
            VTDPropertyInfoBase pi1182 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter581 = new VTDObjectSetter(pi1182);
            binding_setter581 = new StringFormaterDecorator(binding_setter581,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xmid}");
            bind_dir581 = new BindDirection(_flow.DbFetchData57,binding_getter601,binding_setter581,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir581);
            VTDPropertyInfoBase pi1183 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter602 = new VTDObjectGetter(pi1183);
            VTDPropertyInfoBase pi1184 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter582 = new VTDObjectSetter(pi1184);
            binding_setter582 = new StringFormaterDecorator(binding_setter582,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir582 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter602,binding_setter582,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir582);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1185 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter603 = new VTDObjectGetter(pi1185);
            VTDPropertyInfoBase pi1186 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter583 = new VTDObjectSetter(pi1186);
            binding_setter583 = new StringFormaterDecorator(binding_setter583,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir583 = new BindDirection(_flow.HTTPActivity59,binding_getter603,binding_setter583,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir583);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_GetUnReadMsgs_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi1187 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter604 = new VTDObjectGetter(pi1187);
            VTDPropertyInfoBase pi1188 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter584 = new VTDObjectSetter(pi1188);
            binding_setter584 = new StringFormaterDecorator(binding_setter584,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir584 = new BindDirection(_flow.HTTPActivity59,binding_getter604,binding_setter584,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir584);
            VTDPropertyInfoBase pi1189 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter605 = new VTDObjectGetter(pi1189);
            VTDPropertyInfoBase pi1190 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter585 = new VTDObjectSetter(pi1190);
            binding_setter585 = new StringFormaterDecorator(binding_setter585,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir585 = new BindDirection(_flow.Loop56,binding_getter605,binding_setter585,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir585);
            VTDPropertyInfoBase pi1191 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter606 = new VTDObjectGetter(pi1191);
            VTDPropertyInfoBase pi1192 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter586 = new VTDObjectSetter(pi1192);
            bind_dir586 = new BindDirection(_flow.DbOpenConnection39,binding_getter606,binding_setter586,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir586);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_GetUnReadMsgs_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1193 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter607 = new VTDJsonGetter(pi1193);
            VTDPropertyInfoBase pi1194 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter587 = new VTDObjectSetter(pi1194);
            binding_setter587 = new StringFormaterDecorator(binding_setter587,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir587 = new BindDirection(_flow.StringToJsonActivity60,binding_getter607,binding_setter587,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir587);
            VTDPropertyInfoBase pi1195 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter608 = new VTDObjectGetter(pi1195);
            VTDPropertyInfoBase pi1196 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter588 = new VTDObjectSetter(pi1196);
            binding_setter588 = new StringFormaterDecorator(binding_setter588,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir588 = new BindDirection(_flow.Loop56,binding_getter608,binding_setter588,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir588);
            VTDPropertyInfoBase pi1197 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter609 = new VTDObjectGetter(pi1197);
            VTDPropertyInfoBase pi1198 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter589 = new VTDObjectSetter(pi1198);
            bind_dir589 = new BindDirection(_flow.DbOpenConnection39,binding_getter609,binding_setter589,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir589);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_GetUnReadMsgs_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1199 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter610 = new VTDObjectGetter(pi1199);
            VTDPropertyInfoBase pi1200 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter590 = new VTDObjectSetter(pi1200);
            binding_setter590 = new StringFormaterDecorator(binding_setter590,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir590 = new BindDirection(_flow.Loop56,binding_getter610,binding_setter590,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir590);
            VTDPropertyInfoBase pi1201 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter611 = new VTDObjectGetter(pi1201);
            VTDPropertyInfoBase pi1202 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter591 = new VTDObjectSetter(pi1202);
            bind_dir591 = new BindDirection(_flow.DbOpenConnection39,binding_getter611,binding_setter591,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir591);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_GetUnReadMsgs_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1203 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter612 = new VTDObjectGetter(pi1203);
            VTDPropertyInfoBase pi1204 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter592 = new VTDObjectSetter(pi1204);
            binding_setter592 = new StringFormaterDecorator(binding_setter592,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir592 = new BindDirection(_flow.Loop56,binding_getter612,binding_setter592,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir592);
            VTDPropertyInfoBase pi1205 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter613 = new VTDObjectGetter(pi1205);
            VTDPropertyInfoBase pi1206 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter593 = new VTDObjectSetter(pi1206);
            bind_dir593 = new BindDirection(_flow.DbOpenConnection39,binding_getter613,binding_setter593,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir593);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1207 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter614 = new VTDXPathGetter(pi1207,XmlTypeCode.String);
            binding_getter614 = new XPathGetterDecorator(binding_getter614,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter614),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1208 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter615 = new VTDXPathGetter(pi1208,XmlTypeCode.String);
            binding_getter615 = new XPathGetterDecorator(binding_getter615,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter615),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_GetUnReadMsgs_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1209 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter616 = new VTDObjectGetter(pi1209);
            VTDPropertyInfoBase pi1210 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter594 = new VTDObjectSetter(pi1210);
            binding_setter594 = new StringFormaterDecorator(binding_setter594,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir594 = new BindDirection(_flow.Loop56,binding_getter616,binding_setter594,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir594);
            VTDPropertyInfoBase pi1211 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter617 = new VTDObjectGetter(pi1211);
            VTDPropertyInfoBase pi1212 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter595 = new VTDObjectSetter(pi1212);
            bind_dir595 = new BindDirection(_flow.DbOpenConnection39,binding_getter617,binding_setter595,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir595);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_GetUnReadMsgs_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1213 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter618 = new VTDObjectGetter(pi1213);
            VTDPropertyInfoBase pi1214 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter596 = new VTDObjectSetter(pi1214);
            binding_setter596 = new StringFormaterDecorator(binding_setter596,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir596 = new BindDirection(_flow.Loop56,binding_getter618,binding_setter596,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir596);
            VTDPropertyInfoBase pi1215 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter619 = new VTDObjectGetter(pi1215);
            VTDPropertyInfoBase pi1216 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter597 = new VTDObjectSetter(pi1216);
            bind_dir597 = new BindDirection(_flow.DbOpenConnection39,binding_getter619,binding_setter597,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir597);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    