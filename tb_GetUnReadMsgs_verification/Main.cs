/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_GetUnReadMsgs_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir2229 = null;
        public BindDirection bind_dir2230 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity263 = null;
        public BindDirection bind_dir2231 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity263_Policy = null;
        public BindDirection bind_dir2232 = null;
        public BindDirection bind_dir2233 = null;
        public BindDirection bind_dir2234 = null;
        public BindDirection bind_dir2235 = null;
        public BindDirection bind_dir2236 = null;
        public BindDirection bind_dir2237 = null;
        public BindDirection bind_dir2238 = null;
        public BindDirection bind_dir2239 = null;
        public BindDirection bind_dir2240 = null;
        public BindDirection bind_dir2241 = null;
        public BindDirection bind_dir2242 = null;
        public BindDirection bind_dir2243 = null;
        public BindDirection bind_dir2244 = null;
        public BindDirection bind_dir2245 = null;
        public BindDirection bind_dir2246 = null;
        public BindDirection bind_dir2247 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir2248 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir2249 = null;
        public BindDirection bind_dir2250 = null;
        public BindDirection bind_dir2251 = null;
        public BindDirection bind_dir2252 = null;
        public BindDirection bind_dir2253 = null;
        public BindDirection bind_dir2254 = null;
        public BindDirection bind_dir2255 = null;
        public BindDirection bind_dir2256 = null;
        public BindDirection bind_dir2257 = null;
        public BindDirection bind_dir2258 = null;
        public BindDirection bind_dir2259 = null;
        public BindDirection bind_dir2260 = null;
        public BindDirection bind_dir2261 = null;
        public BindDirection bind_dir2262 = null;
        public BindDirection bind_dir2263 = null;
        public BindDirection bind_dir2264 = null;
        public BindDirection bind_dir2265 = null;
        public BindDirection bind_dir2266 = null;
        public BindDirection bind_dir2267 = null;
        public BindDirection bind_dir2268 = null;
        public BindDirection bind_dir2269 = null;
        public BindDirection bind_dir2270 = null;
        public BindDirection bind_dir2271 = null;
        public BindDirection bind_dir2272 = null;
        public BindDirection bind_dir2273 = null;
        public BindDirection bind_dir2274 = null;
        public BindDirection bind_dir2275 = null;
        public BindDirection bind_dir2276 = null;
        public BindDirection bind_dir2277 = null;
        public BindDirection bind_dir2278 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity259 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity259");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity261 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity261");
            _flow.DataExporterCloseActivity262 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity262");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity260 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity260");
            this.DataCursorActivity263 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity263");
            this.DataCursorActivity263_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence257 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence257");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData256 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData256");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence258 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence258");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity259.Comment = @"";
            _flow.DataFetchActivity259.IconPath = @"";
            _flow.DataFetchActivity259.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity259.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity259_QueryParameters_Document = new XmlDocument();
            DataFetchActivity259_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity259Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity259_QueryParameters_Document.LoadXml(xmlDataFetchActivity259Params);
            _flow.DataFetchActivity259.QueryParameters = DataFetchActivity259_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity259);
            this.Activities.Add (_flow.DataFetchActivity259);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity263);
            _flow.Loop2.Activities.Add (_flow.Sequence257);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity261.Comment = @"";
            _flow.DataExporterActivity261.IconPath = @"";
            VTDPropertyInfoBase pi4533 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2305 = new VTDObjectGetter(pi4533);
            VTDPropertyInfoBase pi4534 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2229 = new VTDObjectSetter(pi4534);
            binding_setter2229 = new StringFormaterDecorator(binding_setter2229,"{Step.DataFetchActivity259.OutTable}");
            bind_dir2229 = new BindDirection(_flow.DataFetchActivity259,binding_getter2305,binding_setter2229,BindTargetType.ToInProperty);
            _flow.DataExporterActivity261.InDirections.Add(bind_dir2229);
            this.Activities.Add (_flow.DataExporterActivity261);
            _flow.DataExporterCloseActivity262.Comment = @"";
            _flow.DataExporterCloseActivity262.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity262);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity260.Comment = @"";
            _flow.DataDisconnectActivity260.IconPath = @"";
            VTDPropertyInfoBase pi4535 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2306 = new VTDObjectGetter(pi4535);
            VTDPropertyInfoBase pi4536 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2230 = new VTDObjectSetter(pi4536);
            binding_setter2230 = new StringFormaterDecorator(binding_setter2230,"{Step.DataFetchActivity259.OutTable}");
            bind_dir2230 = new BindDirection(_flow.DataFetchActivity259,binding_getter2306,binding_setter2230,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity260.InDirections.Add(bind_dir2230);
            this.Activities.Add (_flow.DataDisconnectActivity260);
            this.DataCursorActivity263.Comment = @"";
            this.DataCursorActivity263.IconPath = @"";
            VTDPropertyInfoBase pi4537 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2307 = new VTDObjectGetter(pi4537);
            VTDPropertyInfoBase pi4538 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter2231 = new VTDObjectSetter(pi4538);
            binding_setter2231 = new StringFormaterDecorator(binding_setter2231,"{Step.DataFetchActivity259.OutTable}");
            bind_dir2231 = new BindDirection(_flow.DataFetchActivity259,binding_getter2307,binding_setter2231,BindTargetType.ToInProperty);
            this.DataCursorActivity263.InDirections.Add(bind_dir2231);
            this.DataCursorActivity263_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity263_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.StartCondition.Value = "";
            this.DataCursorActivity263_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity263_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.EndCondition.Value = "";
            this.DataCursorActivity263_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity263_Policy.StepSize = 1;
            this.DataCursorActivity263_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity263.Policy = this.DataCursorActivity263_Policy;
            this.DataCursorActivity263.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity263.ResetCursor;
            _flow.Sequence257.Comment = @"";
            _flow.Sequence257.IconPath = @"";
            _flow.Sequence257.Name = @"序列257";
            _flow.Sequence257.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData256);
            _flow.Sequence257.Activities.Add (_flow.Loop56);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence257.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence257.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getunreadmsgs_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取tb_GetUnReadMsgs_verification表有效行数";
            VTDPropertyInfoBase pi4539 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2308 = new VTDObjectGetter(pi4539);
            VTDPropertyInfoBase pi4540 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2232 = new VTDObjectSetter(pi4540);
            bind_dir2232 = new BindDirection(_flow.DbOpenConnection39,binding_getter2308,binding_setter2232,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir2232);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            _flow.DbFetchData256.QueryString = @"select xmid from tb_global_table where TestCase = 1";
            _flow.DbFetchData256.Timeout = (int)30;
            _flow.DbFetchData256.Comment = @"";
            _flow.DbFetchData256.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData256.Name = @"获取全局表中xmid值";
            VTDPropertyInfoBase pi4541 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2309 = new VTDObjectGetter(pi4541);
            VTDPropertyInfoBase pi4542 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2233 = new VTDObjectSetter(pi4542);
            bind_dir2233 = new BindDirection(_flow.DbOpenConnection39,binding_getter2309,binding_setter2233,BindTargetType.ToInProperty);
            _flow.DbFetchData256.InDirections.Add(bind_dir2233);
            XmlDocument DbFetchData256_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData256_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData256_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xmid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData256.ExpectedOutputProperties = DbFetchData256_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop56.NumberOfIterations = (int)1;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_GetUnReadMsgs_verification中的测试用例";
            VTDPropertyInfoBase pi4543 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter2310 = new VTDXPathGetter(pi4543,XmlTypeCode.Long);
            binding_getter2310 = new XPathGetterDecorator(binding_getter2310,"{Array0}",1);
            VTDPropertyInfoBase pi4544 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter2234 = new VTDObjectSetter(pi4544);
            bind_dir2234 = new BindDirection(_flow.DbFetchData58,binding_getter2310,binding_setter2234,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir2234);
            _flow.Loop56.Activities.Add (this.DataCursorActivity264);
            _flow.Loop56.Activities.Add (_flow.Sequence258);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comrytG4FmKLM{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].xmid}' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/iq/GetUnReadMsgs.php接口token实行加密";
            VTDPropertyInfoBase pi4545 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter2311 = new VTDObjectGetter(pi4545);
            VTDPropertyInfoBase pi4546 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2235 = new VTDObjectSetter(pi4546);
            binding_setter2235 = new StringFormaterDecorator(binding_setter2235,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir2235 = new BindDirection(this.DataCursorActivity263,binding_getter2311,binding_setter2235,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir2235);
            VTDPropertyInfoBase pi4547 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter2312 = new VTDXPathGetter(pi4547,XmlTypeCode.String);
            binding_getter2312 = new XPathGetterDecorator(binding_getter2312,"{Array0}",1);
            VTDPropertyInfoBase pi4548 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2236 = new VTDObjectSetter(pi4548);
            binding_setter2236 = new StringFormaterDecorator(binding_setter2236,"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].xmid}");
            bind_dir2236 = new BindDirection(_flow.DbFetchData256,binding_getter2312,binding_setter2236,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir2236);
            VTDPropertyInfoBase pi4549 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2313 = new VTDObjectGetter(pi4549);
            VTDPropertyInfoBase pi4550 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2237 = new VTDObjectSetter(pi4550);
            bind_dir2237 = new BindDirection(_flow.DbOpenConnection39,binding_getter2313,binding_setter2237,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir2237);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi4551 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2314 = new VTDObjectGetter(pi4551);
            VTDPropertyInfoBase pi4552 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2238 = new VTDObjectSetter(pi4552);
            bind_dir2238 = new BindDirection(_flow.DbOpenConnection39,binding_getter2314,binding_setter2238,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir2238);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&xmid={Step.OutputProperties.DbFetchData256.ResultTable.Row[1].xmid}&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.msgHost}{DataSource.tb_global_table.GetUnReadMsgs}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/iq/GetUnReadMsgs.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi4553 = new VTDPropertyInfoBase("msgHost");
            VTDBaseGetter binding_getter2315 = new VTDObjectGetter(pi4553);
            VTDPropertyInfoBase pi4554 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter2239 = new VTDObjectSetter(pi4554);
            binding_setter2239 = new StringFormaterDecorator(binding_setter2239,"{DataSource.tb_global_table.msgHost}");
            bind_dir2239 = new BindDirection(this.DataCursorActivity263,binding_getter2315,binding_setter2239,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir2239);
            VTDPropertyInfoBase pi4555 = new VTDPropertyInfoBase("GetUnReadMsgs");
            VTDBaseGetter binding_getter2316 = new VTDObjectGetter(pi4555);
            VTDPropertyInfoBase pi4556 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter2240 = new VTDObjectSetter(pi4556);
            binding_setter2240 = new StringFormaterDecorator(binding_setter2240,"{DataSource.tb_global_table.GetUnReadMsgs}");
            bind_dir2240 = new BindDirection(this.DataCursorActivity263,binding_getter2316,binding_setter2240,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir2240);
            VTDPropertyInfoBase pi4557 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter2317 = new VTDObjectGetter(pi4557);
            VTDPropertyInfoBase pi4558 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter2241 = new VTDObjectSetter(pi4558);
            binding_setter2241 = new StringFormaterDecorator(binding_setter2241,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir2241 = new BindDirection(this.DataCursorActivity263,binding_getter2317,binding_setter2241,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir2241);
            VTDPropertyInfoBase pi4559 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter2318 = new VTDObjectGetter(pi4559);
            VTDPropertyInfoBase pi4560 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter2242 = new VTDObjectSetter(pi4560);
            binding_setter2242 = new StringFormaterDecorator(binding_setter2242,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir2242 = new BindDirection(this.DataCursorActivity263,binding_getter2318,binding_setter2242,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir2242);
            VTDPropertyInfoBase pi4561 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter2319 = new VTDObjectGetter(pi4561);
            VTDPropertyInfoBase pi4562 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter2243 = new VTDObjectSetter(pi4562);
            binding_setter2243 = new StringFormaterDecorator(binding_setter2243,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir2243 = new BindDirection(this.DataCursorActivity263,binding_getter2319,binding_setter2243,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir2243);
            VTDPropertyInfoBase pi4563 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter2320 = new VTDXPathGetter(pi4563,XmlTypeCode.String);
            binding_getter2320 = new XPathGetterDecorator(binding_getter2320,"{Array0}",1);
            VTDPropertyInfoBase pi4564 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter2244 = new VTDObjectSetter(pi4564);
            binding_setter2244 = new StringFormaterDecorator(binding_setter2244,"{Step.OutputProperties.DbFetchData256.ResultTable.Row[1].xmid}");
            bind_dir2244 = new BindDirection(_flow.DbFetchData256,binding_getter2320,binding_setter2244,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir2244);
            VTDPropertyInfoBase pi4565 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter2321 = new VTDXPathGetter(pi4565,XmlTypeCode.String);
            binding_getter2321 = new XPathGetterDecorator(binding_getter2321,"{Array0}",1);
            VTDPropertyInfoBase pi4566 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter2245 = new VTDObjectSetter(pi4566);
            binding_setter2245 = new StringFormaterDecorator(binding_setter2245,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir2245 = new BindDirection(_flow.DbFetchData76,binding_getter2321,binding_setter2245,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir2245);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/GetUnReadMsgs.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi4567 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter2322 = new VTDObjectGetter(pi4567);
            VTDPropertyInfoBase pi4568 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2246 = new VTDObjectSetter(pi4568);
            binding_setter2246 = new StringFormaterDecorator(binding_setter2246,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir2246 = new BindDirection(_flow.HTTPActivity73,binding_getter2322,binding_setter2246,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir2246);
            VTDPropertyInfoBase pi4569 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2323 = new VTDObjectGetter(pi4569);
            VTDPropertyInfoBase pi4570 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2247 = new VTDObjectSetter(pi4570);
            bind_dir2247 = new BindDirection(_flow.DbOpenConnection39,binding_getter2323,binding_setter2247,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir2247);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi4571 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2324 = new VTDObjectGetter(pi4571);
            VTDPropertyInfoBase pi4572 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter2248 = new VTDObjectSetter(pi4572);
            binding_setter2248 = new StringFormaterDecorator(binding_setter2248,"{Step.DataFetchActivity259.OutTable}");
            bind_dir2248 = new BindDirection(_flow.DataFetchActivity259,binding_getter2324,binding_setter2248,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir2248);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence258.Comment = @"";
            _flow.Sequence258.IconPath = @"";
            _flow.Sequence258.Name = @"序列258";
            _flow.Sequence258.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence258.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence258.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence258.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence258.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence258.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence258.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select jid,xmid,token from tb_getunreadmsgs_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_GetUnReadMsgs_verification表中字段信息";
            VTDPropertyInfoBase pi4573 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2325 = new VTDObjectGetter(pi4573);
            VTDPropertyInfoBase pi4574 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2249 = new VTDObjectSetter(pi4574);
            binding_setter2249 = new StringFormaterDecorator(binding_setter2249,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2249 = new BindDirection(_flow.Loop56,binding_getter2325,binding_setter2249,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir2249);
            VTDPropertyInfoBase pi4575 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2326 = new VTDObjectGetter(pi4575);
            VTDPropertyInfoBase pi4576 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2250 = new VTDObjectSetter(pi4576);
            bind_dir2250 = new BindDirection(_flow.DbOpenConnection39,binding_getter2326,binding_setter2250,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir2250);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><jid /><xmid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}rytG4FmKLM{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xmid}' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi4577 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='jid'][1]");
            VTDBaseGetter binding_getter2327 = new VTDXPathGetter(pi4577,XmlTypeCode.String);
            binding_getter2327 = new XPathGetterDecorator(binding_getter2327,"{Array0}",1);
            VTDPropertyInfoBase pi4578 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2251 = new VTDObjectSetter(pi4578);
            binding_setter2251 = new StringFormaterDecorator(binding_setter2251,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}");
            bind_dir2251 = new BindDirection(_flow.DbFetchData57,binding_getter2327,binding_setter2251,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir2251);
            VTDPropertyInfoBase pi4579 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter2328 = new VTDXPathGetter(pi4579,XmlTypeCode.String);
            binding_getter2328 = new XPathGetterDecorator(binding_getter2328,"{Array0}",1);
            VTDPropertyInfoBase pi4580 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2252 = new VTDObjectSetter(pi4580);
            binding_setter2252 = new StringFormaterDecorator(binding_setter2252,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xmid}");
            bind_dir2252 = new BindDirection(_flow.DbFetchData57,binding_getter2328,binding_setter2252,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir2252);
            VTDPropertyInfoBase pi4581 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2329 = new VTDObjectGetter(pi4581);
            VTDPropertyInfoBase pi4582 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2253 = new VTDObjectSetter(pi4582);
            bind_dir2253 = new BindDirection(_flow.DbOpenConnection39,binding_getter2329,binding_setter2253,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir2253);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi4583 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2330 = new VTDObjectGetter(pi4583);
            VTDPropertyInfoBase pi4584 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2254 = new VTDObjectSetter(pi4584);
            bind_dir2254 = new BindDirection(_flow.DbOpenConnection39,binding_getter2330,binding_setter2254,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir2254);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"e604be10fa933b76a0cf13072e3f552f8d81fb38";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi4585 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter2331 = new VTDXPathGetter(pi4585,XmlTypeCode.String);
            binding_getter2331 = new XPathGetterDecorator(binding_getter2331,"{Array0}",1);
            VTDPropertyInfoBase pi4586 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter2255 = new VTDObjectSetter(pi4586);
            binding_setter2255 = new StringFormaterDecorator(binding_setter2255,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir2255 = new BindDirection(_flow.DbFetchData57,binding_getter2331,binding_setter2255,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir2255);
            VTDPropertyInfoBase pi4587 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter2332 = new VTDXPathGetter(pi4587,XmlTypeCode.String);
            binding_getter2332 = new XPathGetterDecorator(binding_getter2332,"{Array0}",1);
            VTDPropertyInfoBase pi4588 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter2256 = new VTDObjectSetter(pi4588);
            binding_setter2256 = new StringFormaterDecorator(binding_setter2256,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir2256 = new BindDirection(_flow.DbFetchData252,binding_getter2332,binding_setter2256,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir2256);
            _flow.HTTPActivity59.TextBody = @"jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}&xmid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xmid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.msgHost}{DataSource.tb_global_table.GetUnReadMsgs}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/GetUnReadMsgs.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi4589 = new VTDPropertyInfoBase("msgHost");
            VTDBaseGetter binding_getter2333 = new VTDObjectGetter(pi4589);
            VTDPropertyInfoBase pi4590 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter2257 = new VTDObjectSetter(pi4590);
            binding_setter2257 = new StringFormaterDecorator(binding_setter2257,"{DataSource.tb_global_table.msgHost}");
            bind_dir2257 = new BindDirection(this.DataCursorActivity264,binding_getter2333,binding_setter2257,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir2257);
            VTDPropertyInfoBase pi4591 = new VTDPropertyInfoBase("GetUnReadMsgs");
            VTDBaseGetter binding_getter2334 = new VTDObjectGetter(pi4591);
            VTDPropertyInfoBase pi4592 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter2258 = new VTDObjectSetter(pi4592);
            binding_setter2258 = new StringFormaterDecorator(binding_setter2258,"{DataSource.tb_global_table.GetUnReadMsgs}");
            bind_dir2258 = new BindDirection(this.DataCursorActivity264,binding_getter2334,binding_setter2258,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir2258);
            VTDPropertyInfoBase pi4593 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter2335 = new VTDObjectGetter(pi4593);
            VTDPropertyInfoBase pi4594 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter2259 = new VTDObjectSetter(pi4594);
            binding_setter2259 = new StringFormaterDecorator(binding_setter2259,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir2259 = new BindDirection(this.DataCursorActivity264,binding_getter2335,binding_setter2259,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir2259);
            VTDPropertyInfoBase pi4595 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter2336 = new VTDObjectGetter(pi4595);
            VTDPropertyInfoBase pi4596 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter2260 = new VTDObjectSetter(pi4596);
            binding_setter2260 = new StringFormaterDecorator(binding_setter2260,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir2260 = new BindDirection(this.DataCursorActivity264,binding_getter2336,binding_setter2260,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir2260);
            VTDPropertyInfoBase pi4597 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='jid'][1]");
            VTDBaseGetter binding_getter2337 = new VTDXPathGetter(pi4597,XmlTypeCode.String);
            binding_getter2337 = new XPathGetterDecorator(binding_getter2337,"{Array0}",1);
            VTDPropertyInfoBase pi4598 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter2261 = new VTDObjectSetter(pi4598);
            binding_setter2261 = new StringFormaterDecorator(binding_setter2261,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}");
            bind_dir2261 = new BindDirection(_flow.DbFetchData57,binding_getter2337,binding_setter2261,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir2261);
            VTDPropertyInfoBase pi4599 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xmid'][1]");
            VTDBaseGetter binding_getter2338 = new VTDXPathGetter(pi4599,XmlTypeCode.String);
            binding_getter2338 = new XPathGetterDecorator(binding_getter2338,"{Array0}",1);
            VTDPropertyInfoBase pi4600 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter2262 = new VTDObjectSetter(pi4600);
            binding_setter2262 = new StringFormaterDecorator(binding_setter2262,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xmid}");
            bind_dir2262 = new BindDirection(_flow.DbFetchData57,binding_getter2338,binding_setter2262,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir2262);
            VTDPropertyInfoBase pi4601 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter2339 = new VTDObjectGetter(pi4601);
            VTDPropertyInfoBase pi4602 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter2263 = new VTDObjectSetter(pi4602);
            binding_setter2263 = new StringFormaterDecorator(binding_setter2263,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir2263 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter2339,binding_setter2263,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir2263);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi4603 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter2340 = new VTDObjectGetter(pi4603);
            VTDPropertyInfoBase pi4604 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter2264 = new VTDObjectSetter(pi4604);
            binding_setter2264 = new StringFormaterDecorator(binding_setter2264,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir2264 = new BindDirection(_flow.HTTPActivity59,binding_getter2340,binding_setter2264,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir2264);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getunreadmsgs_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi4605 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter2341 = new VTDObjectGetter(pi4605);
            VTDPropertyInfoBase pi4606 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2265 = new VTDObjectSetter(pi4606);
            binding_setter2265 = new StringFormaterDecorator(binding_setter2265,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir2265 = new BindDirection(_flow.HTTPActivity59,binding_getter2341,binding_setter2265,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir2265);
            VTDPropertyInfoBase pi4607 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2342 = new VTDObjectGetter(pi4607);
            VTDPropertyInfoBase pi4608 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2266 = new VTDObjectSetter(pi4608);
            binding_setter2266 = new StringFormaterDecorator(binding_setter2266,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2266 = new BindDirection(_flow.Loop56,binding_getter2342,binding_setter2266,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir2266);
            VTDPropertyInfoBase pi4609 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2343 = new VTDObjectGetter(pi4609);
            VTDPropertyInfoBase pi4610 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2267 = new VTDObjectSetter(pi4610);
            bind_dir2267 = new BindDirection(_flow.DbOpenConnection39,binding_getter2343,binding_setter2267,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir2267);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getunreadmsgs_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi4611 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter2344 = new VTDJsonGetter(pi4611);
            VTDPropertyInfoBase pi4612 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2268 = new VTDObjectSetter(pi4612);
            binding_setter2268 = new StringFormaterDecorator(binding_setter2268,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir2268 = new BindDirection(_flow.StringToJsonActivity60,binding_getter2344,binding_setter2268,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir2268);
            VTDPropertyInfoBase pi4613 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2345 = new VTDObjectGetter(pi4613);
            VTDPropertyInfoBase pi4614 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2269 = new VTDObjectSetter(pi4614);
            binding_setter2269 = new StringFormaterDecorator(binding_setter2269,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2269 = new BindDirection(_flow.Loop56,binding_getter2345,binding_setter2269,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir2269);
            VTDPropertyInfoBase pi4615 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2346 = new VTDObjectGetter(pi4615);
            VTDPropertyInfoBase pi4616 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2270 = new VTDObjectSetter(pi4616);
            bind_dir2270 = new BindDirection(_flow.DbOpenConnection39,binding_getter2346,binding_setter2270,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir2270);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getunreadmsgs_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi4617 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2347 = new VTDObjectGetter(pi4617);
            VTDPropertyInfoBase pi4618 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2271 = new VTDObjectSetter(pi4618);
            binding_setter2271 = new StringFormaterDecorator(binding_setter2271,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2271 = new BindDirection(_flow.Loop56,binding_getter2347,binding_setter2271,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir2271);
            VTDPropertyInfoBase pi4619 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2348 = new VTDObjectGetter(pi4619);
            VTDPropertyInfoBase pi4620 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2272 = new VTDObjectSetter(pi4620);
            bind_dir2272 = new BindDirection(_flow.DbOpenConnection39,binding_getter2348,binding_setter2272,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir2272);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getunreadmsgs_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi4621 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2349 = new VTDObjectGetter(pi4621);
            VTDPropertyInfoBase pi4622 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2273 = new VTDObjectSetter(pi4622);
            binding_setter2273 = new StringFormaterDecorator(binding_setter2273,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2273 = new BindDirection(_flow.Loop56,binding_getter2349,binding_setter2273,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir2273);
            VTDPropertyInfoBase pi4623 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2350 = new VTDObjectGetter(pi4623);
            VTDPropertyInfoBase pi4624 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2274 = new VTDObjectSetter(pi4624);
            bind_dir2274 = new BindDirection(_flow.DbOpenConnection39,binding_getter2350,binding_setter2274,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir2274);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi4625 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter2351 = new VTDXPathGetter(pi4625,XmlTypeCode.String);
            binding_getter2351 = new XPathGetterDecorator(binding_getter2351,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter2351),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi4626 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter2352 = new VTDXPathGetter(pi4626,XmlTypeCode.String);
            binding_getter2352 = new XPathGetterDecorator(binding_getter2352,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter2352),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getunreadmsgs_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi4627 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2353 = new VTDObjectGetter(pi4627);
            VTDPropertyInfoBase pi4628 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2275 = new VTDObjectSetter(pi4628);
            binding_setter2275 = new StringFormaterDecorator(binding_setter2275,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2275 = new BindDirection(_flow.Loop56,binding_getter2353,binding_setter2275,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir2275);
            VTDPropertyInfoBase pi4629 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2354 = new VTDObjectGetter(pi4629);
            VTDPropertyInfoBase pi4630 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2276 = new VTDObjectSetter(pi4630);
            bind_dir2276 = new BindDirection(_flow.DbOpenConnection39,binding_getter2354,binding_setter2276,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir2276);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getunreadmsgs_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi4631 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter2355 = new VTDObjectGetter(pi4631);
            VTDPropertyInfoBase pi4632 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter2277 = new VTDObjectSetter(pi4632);
            binding_setter2277 = new StringFormaterDecorator(binding_setter2277,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir2277 = new BindDirection(_flow.Loop56,binding_getter2355,binding_setter2277,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir2277);
            VTDPropertyInfoBase pi4633 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter2356 = new VTDObjectGetter(pi4633);
            VTDPropertyInfoBase pi4634 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter2278 = new VTDObjectSetter(pi4634);
            bind_dir2278 = new BindDirection(_flow.DbOpenConnection39,binding_getter2356,binding_setter2278,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir2278);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    