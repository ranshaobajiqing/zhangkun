/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_setmessagestatus_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir106 = null;
        public BindDirection bind_dir107 = null;
        public BindDirection bind_dir108 = null;
        public BindDirection bind_dir109 = null;
        public BindDirection bind_dir110 = null;
        public BindDirection bind_dir111 = null;
        public BindDirection bind_dir112 = null;
        public BindDirection bind_dir113 = null;
        public BindDirection bind_dir114 = null;
        public BindDirection bind_dir115 = null;
        public BindDirection bind_dir116 = null;
        public BindDirection bind_dir117 = null;
        public BindDirection bind_dir118 = null;
        public BindDirection bind_dir119 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	throw new Exception("Workflow contains alert errors");

        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity18 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity18");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity20 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity20");
            _flow.DataExporterCloseActivity21 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity21");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity19 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity19");
            _flow.Sequence16 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence16");
            _flow.DbOpenConnection5 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection5");
            _flow.DbFetchData4 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData4");
            _flow.DbFetchData6 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData6");
            _flow.DbFetchData7 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData7");
            _flow.DbFetchData8 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData8");
            _flow.Loop9 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop9Input>(_context,"Loop9",LoopType.For);
            _flow.Sequence17 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence17");
            _flow.DbFetchData10 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData10");
            _flow.ReplaceStringActivity12 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity12");
            _flow.ReplaceStringActivity13 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity13");
            _flow.ReplaceStringActivity14 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity14");
            _flow.DbFetchData15 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData15");
            _flow.DataFetchActivity18.Comment = @"";
            _flow.DataFetchActivity18.IconPath = @"";
            _flow.DataFetchActivity18.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity18.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity18_QueryParameters_Document = new XmlDocument();
            DataFetchActivity18_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity18Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>fa762dfb-1bfe-4e78-8d14-d9858c447cbc</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>nS9jToOb4zLJent8hCRcVg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity18_QueryParameters_Document.LoadXml(xmlDataFetchActivity18Params);
            _flow.DataFetchActivity18.QueryParameters = DataFetchActivity18_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity18);
            this.Activities.Add (_flow.DataFetchActivity18);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (_flow.Sequence16);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity20.Comment = @"";
            _flow.DataExporterActivity20.IconPath = @"";
            VTDPropertyInfoBase pi211 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter106 = new VTDObjectGetter(pi211);
            VTDPropertyInfoBase pi212 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter106 = new VTDObjectSetter(pi212);
            binding_setter106 = new StringFormaterDecorator(binding_setter106,"{Step.DataFetchActivity18.OutTable}");
            bind_dir106 = new BindDirection(_flow.DataFetchActivity18,binding_getter106,binding_setter106,BindTargetType.ToInProperty);
            _flow.DataExporterActivity20.InDirections.Add(bind_dir106);
            this.Activities.Add (_flow.DataExporterActivity20);
            _flow.DataExporterCloseActivity21.Comment = @"";
            _flow.DataExporterCloseActivity21.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity21);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity19.Comment = @"";
            _flow.DataDisconnectActivity19.IconPath = @"";
            VTDPropertyInfoBase pi213 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter107 = new VTDObjectGetter(pi213);
            VTDPropertyInfoBase pi214 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter107 = new VTDObjectSetter(pi214);
            binding_setter107 = new StringFormaterDecorator(binding_setter107,"{Step.DataFetchActivity18.OutTable}");
            bind_dir107 = new BindDirection(_flow.DataFetchActivity18,binding_getter107,binding_setter107,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity19.InDirections.Add(bind_dir107);
            this.Activities.Add (_flow.DataDisconnectActivity19);
            _flow.Sequence16.Comment = @"";
            _flow.Sequence16.IconPath = @"";
            _flow.Sequence16.Name = @"序列16";
            _flow.Sequence16.Activities.Add (_flow.DbOpenConnection5);
            _flow.Sequence16.Activities.Add (_flow.DbFetchData4);
            _flow.Sequence16.Activities.Add (_flow.DbFetchData6);
            _flow.Sequence16.Activities.Add (_flow.DbFetchData7);
            _flow.Sequence16.Activities.Add (_flow.DbFetchData8);
            _flow.Sequence16.Activities.Add (_flow.Loop9);
            _flow.DbOpenConnection5.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection5.Password = @"";
            _flow.DbOpenConnection5.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection5.Comment = @"";
            _flow.DbOpenConnection5.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection5.Name = @"连接到Mysql数据库";
            _flow.DbFetchData4.QueryString = @"select count(*) as 'Row' from tb_setmessagestatus_verification";
            _flow.DbFetchData4.Timeout = (int)30;
            _flow.DbFetchData4.Comment = @"";
            _flow.DbFetchData4.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData4.Name = @"查询tb_setmessagestatus_verification表有多少行数据";
            VTDPropertyInfoBase pi215 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter108 = new VTDObjectGetter(pi215);
            VTDPropertyInfoBase pi216 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter108 = new VTDObjectSetter(pi216);
            bind_dir108 = new BindDirection(_flow.DbOpenConnection5,binding_getter108,binding_setter108,BindTargetType.ToInProperty);
            _flow.DbFetchData4.InDirections.Add(bind_dir108);
            XmlDocument DbFetchData4_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData4_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData4.ExpectedOutputProperties = DbFetchData4_ExpectedOutputProperties_Document;
            _flow.DbFetchData6.QueryString = @"select LoginTeacherUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData6.Timeout = (int)30;
            _flow.DbFetchData6.Comment = @"";
            _flow.DbFetchData6.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData6.Name = @"查询tb_global_table表中LoginTeacherUsername的值";
            VTDPropertyInfoBase pi217 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter109 = new VTDObjectGetter(pi217);
            VTDPropertyInfoBase pi218 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter109 = new VTDObjectSetter(pi218);
            bind_dir109 = new BindDirection(_flow.DbOpenConnection5,binding_getter109,binding_setter109,BindTargetType.ToInProperty);
            _flow.DbFetchData6.InDirections.Add(bind_dir109);
            XmlDocument DbFetchData6_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData6_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData6_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginTeacherUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData6.ExpectedOutputProperties = DbFetchData6_ExpectedOutputProperties_Document;
            _flow.DbFetchData7.QueryString = @"select LoginStudentUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData7.Timeout = (int)30;
            _flow.DbFetchData7.Comment = @"";
            _flow.DbFetchData7.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData7.Name = @"查询tb_global_table表中LoginStudentUsername的值";
            VTDPropertyInfoBase pi219 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter110 = new VTDObjectGetter(pi219);
            VTDPropertyInfoBase pi220 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter110 = new VTDObjectSetter(pi220);
            bind_dir110 = new BindDirection(_flow.DbOpenConnection5,binding_getter110,binding_setter110,BindTargetType.ToInProperty);
            _flow.DbFetchData7.InDirections.Add(bind_dir110);
            XmlDocument DbFetchData7_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData7_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData7_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginStudentUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData7.ExpectedOutputProperties = DbFetchData7_ExpectedOutputProperties_Document;
            _flow.DbFetchData8.QueryString = @"select StudentsXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData8.Timeout = (int)30;
            _flow.DbFetchData8.Comment = @"";
            _flow.DbFetchData8.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData8.Name = @"查询tb_global_table表中StudentsXsid的值";
            VTDPropertyInfoBase pi221 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter111 = new VTDObjectGetter(pi221);
            VTDPropertyInfoBase pi222 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter111 = new VTDObjectSetter(pi222);
            bind_dir111 = new BindDirection(_flow.DbOpenConnection5,binding_getter111,binding_setter111,BindTargetType.ToInProperty);
            _flow.DbFetchData8.InDirections.Add(bind_dir111);
            XmlDocument DbFetchData8_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData8_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData8_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><StudentsXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData8.ExpectedOutputProperties = DbFetchData8_ExpectedOutputProperties_Document;
            _flow.Loop9.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop9.NumberOfIterations = (int)1;
            _flow.Loop9.Comment = @"";
            _flow.Loop9.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop9.Name = @"循环查询出tb_setmessagestatus_verification的值";
            VTDPropertyInfoBase pi223 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter112 = new VTDXPathGetter(pi223,XmlTypeCode.Long);
            binding_getter112 = new XPathGetterDecorator(binding_getter112,"{Array0}",1);
            VTDPropertyInfoBase pi224 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter112 = new VTDObjectSetter(pi224);
            bind_dir112 = new BindDirection(_flow.DbFetchData4,binding_getter112,binding_setter112,BindTargetType.ToInProperty);
            _flow.Loop9.InDirections.Add(bind_dir112);
            _flow.Loop9.Activities.Add (_flow.Sequence17);
            _flow.Sequence17.Comment = @"";
            _flow.Sequence17.IconPath = @"";
            _flow.Sequence17.Name = @"序列17";
            _flow.Sequence17.Activities.Add (_flow.DbFetchData10);
            _flow.Sequence17.Activities.Add (_flow.ReplaceStringActivity12);
            _flow.Sequence17.Activities.Add (_flow.ReplaceStringActivity13);
            _flow.Sequence17.Activities.Add (_flow.ReplaceStringActivity14);
            _flow.Sequence17.Activities.Add (_flow.DbFetchData15);
            _flow.DbFetchData10.QueryString = @"select xsid,fromJid,jid,xmid from tb_setmessagestatus_verification where TestCase = 1";
            _flow.DbFetchData10.Timeout = (int)30;
            _flow.DbFetchData10.Comment = @"";
            _flow.DbFetchData10.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData10.Name = @"查询出tb_setmessagestatus_verification表中字段值";
            VTDPropertyInfoBase pi225 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter113 = new VTDObjectGetter(pi225);
            VTDPropertyInfoBase pi226 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter113 = new VTDObjectSetter(pi226);
            bind_dir113 = new BindDirection(_flow.DbOpenConnection5,binding_getter113,binding_setter113,BindTargetType.ToInProperty);
            _flow.DbFetchData10.InDirections.Add(bind_dir113);
            XmlDocument DbFetchData10_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData10_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData10_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><fromJid /><jid /><xmid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData10.ExpectedOutputProperties = DbFetchData10_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity12.SourceString = @"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].fromJid}";
            _flow.ReplaceStringActivity12.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity12.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity12.SearchReplaceString[0].Key = @"77401169";
            _flow.ReplaceStringActivity12.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData6.ResultTable.Row[1].LoginTeacherUsername}";
            _flow.ReplaceStringActivity12.CaseSensitive = true;
            _flow.ReplaceStringActivity12.Comment = @"";
            _flow.ReplaceStringActivity12.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity12.Name = @"将fromjid更新至最新";
            VTDPropertyInfoBase pi227 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='fromJid'][1]");
            VTDBaseGetter binding_getter114 = new VTDXPathGetter(pi227,XmlTypeCode.String);
            binding_getter114 = new XPathGetterDecorator(binding_getter114,"{Array0}",1);
            VTDPropertyInfoBase pi228 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter114 = new VTDObjectSetter(pi228);
            binding_setter114 = new StringFormaterDecorator(binding_setter114,"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].fromJid}");
            bind_dir114 = new BindDirection(_flow.DbFetchData10,binding_getter114,binding_setter114,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity12.InDirections.Add(bind_dir114);
            VTDPropertyInfoBase pi229 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='LoginTeacherUsername'][1]");
            VTDBaseGetter binding_getter115 = new VTDXPathGetter(pi229,XmlTypeCode.String);
            binding_getter115 = new XPathGetterDecorator(binding_getter115,"{Array0}",1);
            VTDPropertyInfoBase pi230 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter115 = new VTDObjectSetter(pi230);
            binding_setter115 = new StringFormaterDecorator(binding_setter115,"{Step.OutputProperties.DbFetchData6.ResultTable.Row[1].LoginTeacherUsername}");
            bind_dir115 = new BindDirection(_flow.DbFetchData6,binding_getter115,binding_setter115,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity12.InDirections.Add(bind_dir115);
            _flow.ReplaceStringActivity13.SourceString = @"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].jid}";
            _flow.ReplaceStringActivity13.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity13.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity13.SearchReplaceString[0].Key = @"77401170";
            _flow.ReplaceStringActivity13.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].jid}";
            _flow.ReplaceStringActivity13.CaseSensitive = true;
            _flow.ReplaceStringActivity13.Comment = @"";
            _flow.ReplaceStringActivity13.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity13.Name = @"将jid更新至最新";
            VTDPropertyInfoBase pi231 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='jid'][1]");
            VTDBaseGetter binding_getter116 = new VTDXPathGetter(pi231,XmlTypeCode.String);
            binding_getter116 = new XPathGetterDecorator(binding_getter116,"{Array0}",1);
            VTDPropertyInfoBase pi232 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter116 = new VTDObjectSetter(pi232);
            binding_setter116 = new StringFormaterDecorator(binding_setter116,"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].jid}");
            bind_dir116 = new BindDirection(_flow.DbFetchData10,binding_getter116,binding_setter116,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity13.InDirections.Add(bind_dir116);
            VTDPropertyInfoBase pi233 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='jid'][1]");
            VTDBaseGetter binding_getter117 = new VTDXPathGetter(pi233,XmlTypeCode.String);
            binding_getter117 = new XPathGetterDecorator(binding_getter117,"{Array0}",1);
            VTDPropertyInfoBase pi234 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter117 = new VTDObjectSetter(pi234);
            binding_setter117 = new StringFormaterDecorator(binding_setter117,"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].jid}");
            bind_dir117 = new BindDirection(_flow.DbFetchData10,binding_getter117,binding_setter117,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity13.InDirections.Add(bind_dir117);
            _flow.ReplaceStringActivity14.SourceString = @"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity14.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity14.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity14.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity14.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData8.ResultTable.Row[1].StudentsXsid}";
            _flow.ReplaceStringActivity14.CaseSensitive = true;
            _flow.ReplaceStringActivity14.Comment = @"";
            _flow.ReplaceStringActivity14.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity14.Name = @"将xsid更新至最新";
            VTDPropertyInfoBase pi235 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter118 = new VTDXPathGetter(pi235,XmlTypeCode.String);
            binding_getter118 = new XPathGetterDecorator(binding_getter118,"{Array0}",1);
            VTDPropertyInfoBase pi236 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter118 = new VTDObjectSetter(pi236);
            binding_setter118 = new StringFormaterDecorator(binding_setter118,"{Step.OutputProperties.DbFetchData10.ResultTable.Row[1].xsid}");
            bind_dir118 = new BindDirection(_flow.DbFetchData10,binding_getter118,binding_setter118,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity14.InDirections.Add(bind_dir118);
            VTDPropertyInfoBase pi237 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='StudentsXsid'][1]");
            VTDBaseGetter binding_getter119 = new VTDXPathGetter(pi237,XmlTypeCode.String);
            binding_getter119 = new XPathGetterDecorator(binding_getter119,"{Array0}",1);
            VTDPropertyInfoBase pi238 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter119 = new VTDObjectSetter(pi238);
            binding_setter119 = new StringFormaterDecorator(binding_setter119,"{Step.OutputProperties.DbFetchData8.ResultTable.Row[1].StudentsXsid}");
            bind_dir119 = new BindDirection(_flow.DbFetchData8,binding_getter119,binding_setter119,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity14.InDirections.Add(bind_dir119);
            _flow.DbFetchData15.QueryString = @"";
            _flow.DbFetchData15.Timeout = (int)30;
            _flow.DbFetchData15.Comment = @"";
            _flow.DbFetchData15.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData15.Name = @"将要加密的数据更新到EncryptionStr字段中";
            XmlDocument DbFetchData15_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData15_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData15_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData15.ExpectedOutputProperties = DbFetchData15_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    