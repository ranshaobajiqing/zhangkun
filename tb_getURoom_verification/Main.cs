/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getURoom_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir862 = null;
        public BindDirection bind_dir863 = null;
        public BindDirection bind_dir864 = null;
        public BindDirection bind_dir865 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity263 = null;
        public BindDirection bind_dir866 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity263_Policy = null;
        public BindDirection bind_dir867 = null;
        public BindDirection bind_dir868 = null;
        public BindDirection bind_dir869 = null;
        public BindDirection bind_dir870 = null;
        public BindDirection bind_dir871 = null;
        public BindDirection bind_dir872 = null;
        public BindDirection bind_dir873 = null;
        public BindDirection bind_dir874 = null;
        public BindDirection bind_dir875 = null;
        public BindDirection bind_dir876 = null;
        public BindDirection bind_dir877 = null;
        public BindDirection bind_dir878 = null;
        public BindDirection bind_dir879 = null;
        public BindDirection bind_dir880 = null;
        public BindDirection bind_dir881 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir882 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir883 = null;
        public BindDirection bind_dir884 = null;
        public BindDirection bind_dir885 = null;
        public BindDirection bind_dir886 = null;
        public BindDirection bind_dir887 = null;
        public BindDirection bind_dir888 = null;
        public BindDirection bind_dir889 = null;
        public BindDirection bind_dir890 = null;
        public BindDirection bind_dir891 = null;
        public BindDirection bind_dir892 = null;
        public BindDirection bind_dir893 = null;
        public BindDirection bind_dir894 = null;
        public BindDirection bind_dir895 = null;
        public BindDirection bind_dir896 = null;
        public BindDirection bind_dir897 = null;
        public BindDirection bind_dir898 = null;
        public BindDirection bind_dir899 = null;
        public BindDirection bind_dir900 = null;
        public BindDirection bind_dir901 = null;
        public BindDirection bind_dir902 = null;
        public BindDirection bind_dir903 = null;
        public BindDirection bind_dir904 = null;
        public BindDirection bind_dir905 = null;
        public BindDirection bind_dir906 = null;
        public BindDirection bind_dir907 = null;
        public BindDirection bind_dir908 = null;
        public BindDirection bind_dir909 = null;
        public BindDirection bind_dir910 = null;
        public BindDirection bind_dir911 = null;
        public BindDirection bind_dir912 = null;
        public BindDirection bind_dir913 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity259 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity259");
            _flow.DataFetchActivity256 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity256");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity258 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity258");
            _flow.DataExporterActivity261 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity261");
            _flow.DataExporterCloseActivity262 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity262");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity257 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity257");
            _flow.DataDisconnectActivity260 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity260");
            this.DataCursorActivity263 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity263");
            this.DataCursorActivity263_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence254 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence254");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity259.Comment = @"";
            _flow.DataFetchActivity259.IconPath = @"";
            _flow.DataFetchActivity259.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity259.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity259_QueryParameters_Document = new XmlDocument();
            DataFetchActivity259_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity259Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity259_QueryParameters_Document.LoadXml(xmlDataFetchActivity259Params);
            _flow.DataFetchActivity259.QueryParameters = DataFetchActivity259_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity259);
            this.Activities.Add (_flow.DataFetchActivity259);
            _flow.DataFetchActivity256.Comment = @"";
            _flow.DataFetchActivity256.IconPath = @"";
            _flow.DataFetchActivity256.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity256.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity256_QueryParameters_Document = new XmlDocument();
            DataFetchActivity256_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity256Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity256_QueryParameters_Document.LoadXml(xmlDataFetchActivity256Params);
            _flow.DataFetchActivity256.QueryParameters = DataFetchActivity256_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity256);
            this.Activities.Add (_flow.DataFetchActivity256);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity263);
            _flow.Loop2.Activities.Add (_flow.Sequence254);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity258.Comment = @"";
            _flow.DataExporterActivity258.IconPath = @"";
            VTDPropertyInfoBase pi1755 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter894 = new VTDObjectGetter(pi1755);
            VTDPropertyInfoBase pi1756 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter862 = new VTDObjectSetter(pi1756);
            binding_setter862 = new StringFormaterDecorator(binding_setter862,"{Step.DataFetchActivity256.OutTable}");
            bind_dir862 = new BindDirection(_flow.DataFetchActivity256,binding_getter894,binding_setter862,BindTargetType.ToInProperty);
            _flow.DataExporterActivity258.InDirections.Add(bind_dir862);
            this.Activities.Add (_flow.DataExporterActivity258);
            _flow.DataExporterActivity261.Comment = @"";
            _flow.DataExporterActivity261.IconPath = @"";
            VTDPropertyInfoBase pi1757 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter895 = new VTDObjectGetter(pi1757);
            VTDPropertyInfoBase pi1758 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter863 = new VTDObjectSetter(pi1758);
            binding_setter863 = new StringFormaterDecorator(binding_setter863,"{Step.DataFetchActivity259.OutTable}");
            bind_dir863 = new BindDirection(_flow.DataFetchActivity259,binding_getter895,binding_setter863,BindTargetType.ToInProperty);
            _flow.DataExporterActivity261.InDirections.Add(bind_dir863);
            this.Activities.Add (_flow.DataExporterActivity261);
            _flow.DataExporterCloseActivity262.Comment = @"";
            _flow.DataExporterCloseActivity262.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity262);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity257.Comment = @"";
            _flow.DataDisconnectActivity257.IconPath = @"";
            VTDPropertyInfoBase pi1759 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter896 = new VTDObjectGetter(pi1759);
            VTDPropertyInfoBase pi1760 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter864 = new VTDObjectSetter(pi1760);
            binding_setter864 = new StringFormaterDecorator(binding_setter864,"{Step.DataFetchActivity256.OutTable}");
            bind_dir864 = new BindDirection(_flow.DataFetchActivity256,binding_getter896,binding_setter864,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity257.InDirections.Add(bind_dir864);
            this.Activities.Add (_flow.DataDisconnectActivity257);
            _flow.DataDisconnectActivity260.Comment = @"";
            _flow.DataDisconnectActivity260.IconPath = @"";
            VTDPropertyInfoBase pi1761 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter897 = new VTDObjectGetter(pi1761);
            VTDPropertyInfoBase pi1762 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter865 = new VTDObjectSetter(pi1762);
            binding_setter865 = new StringFormaterDecorator(binding_setter865,"{Step.DataFetchActivity259.OutTable}");
            bind_dir865 = new BindDirection(_flow.DataFetchActivity259,binding_getter897,binding_setter865,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity260.InDirections.Add(bind_dir865);
            this.Activities.Add (_flow.DataDisconnectActivity260);
            this.DataCursorActivity263.Comment = @"";
            this.DataCursorActivity263.IconPath = @"";
            VTDPropertyInfoBase pi1763 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter898 = new VTDObjectGetter(pi1763);
            VTDPropertyInfoBase pi1764 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter866 = new VTDObjectSetter(pi1764);
            binding_setter866 = new StringFormaterDecorator(binding_setter866,"{Step.DataFetchActivity256.OutTable}");
            bind_dir866 = new BindDirection(_flow.DataFetchActivity256,binding_getter898,binding_setter866,BindTargetType.ToInProperty);
            this.DataCursorActivity263.InDirections.Add(bind_dir866);
            this.DataCursorActivity263_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity263_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.StartCondition.Value = "";
            this.DataCursorActivity263_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity263_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.EndCondition.Value = "";
            this.DataCursorActivity263_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity263_Policy.StepSize = 1;
            this.DataCursorActivity263_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity263.Policy = this.DataCursorActivity263_Policy;
            this.DataCursorActivity263.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity263.ResetCursor;
            _flow.Sequence254.Comment = @"";
            _flow.Sequence254.IconPath = @"";
            _flow.Sequence254.Name = @"序列254";
            _flow.Sequence254.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence254.Activities.Add (_flow.Loop56);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence254.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence254.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getUroom_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_getUroom_verification表有效行数";
            VTDPropertyInfoBase pi1765 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter899 = new VTDObjectGetter(pi1765);
            VTDPropertyInfoBase pi1766 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter867 = new VTDObjectSetter(pi1766);
            bind_dir867 = new BindDirection(_flow.DbOpenConnection39,binding_getter899,binding_setter867,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir867);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中xsid";
            VTDPropertyInfoBase pi1767 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter900 = new VTDObjectGetter(pi1767);
            VTDPropertyInfoBase pi1768 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter868 = new VTDObjectSetter(pi1768);
            bind_dir868 = new BindDirection(_flow.DbOpenConnection39,binding_getter900,binding_setter868,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir868);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop56.NumberOfIterations = (int)0;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getUroom_verification中的测试用例";
            VTDPropertyInfoBase pi1769 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter901 = new VTDXPathGetter(pi1769,XmlTypeCode.Long);
            binding_getter901 = new XPathGetterDecorator(binding_getter901,"{Array0}",1);
            VTDPropertyInfoBase pi1770 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter869 = new VTDObjectSetter(pi1770);
            bind_dir869 = new BindDirection(_flow.DbFetchData58,binding_getter901,binding_setter869,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir869);
            _flow.Loop56.Activities.Add (this.DataCursorActivity264);
            _flow.Loop56.Activities.Add (_flow.Sequence255);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comPFBpYmPlk9' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/iq/getURoom.php接口token实行加密";
            VTDPropertyInfoBase pi1771 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter902 = new VTDObjectGetter(pi1771);
            VTDPropertyInfoBase pi1772 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter870 = new VTDObjectSetter(pi1772);
            binding_setter870 = new StringFormaterDecorator(binding_setter870,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir870 = new BindDirection(this.DataCursorActivity263,binding_getter902,binding_setter870,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir870);
            VTDPropertyInfoBase pi1773 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter903 = new VTDObjectGetter(pi1773);
            VTDPropertyInfoBase pi1774 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter871 = new VTDObjectSetter(pi1774);
            bind_dir871 = new BindDirection(_flow.DbOpenConnection39,binding_getter903,binding_setter871,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir871);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1775 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter904 = new VTDObjectGetter(pi1775);
            VTDPropertyInfoBase pi1776 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter872 = new VTDObjectSetter(pi1776);
            bind_dir872 = new BindDirection(_flow.DbOpenConnection39,binding_getter904,binding_setter872,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir872);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}&myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getUroom}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/iq/getURoom.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi1777 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter905 = new VTDObjectGetter(pi1777);
            VTDPropertyInfoBase pi1778 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter873 = new VTDObjectSetter(pi1778);
            binding_setter873 = new StringFormaterDecorator(binding_setter873,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir873 = new BindDirection(this.DataCursorActivity263,binding_getter905,binding_setter873,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir873);
            VTDPropertyInfoBase pi1779 = new VTDPropertyInfoBase("getUroom");
            VTDBaseGetter binding_getter906 = new VTDObjectGetter(pi1779);
            VTDPropertyInfoBase pi1780 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter874 = new VTDObjectSetter(pi1780);
            binding_setter874 = new StringFormaterDecorator(binding_setter874,"{DataSource.tb_global_table.getUroom}");
            bind_dir874 = new BindDirection(this.DataCursorActivity263,binding_getter906,binding_setter874,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir874);
            VTDPropertyInfoBase pi1781 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter907 = new VTDObjectGetter(pi1781);
            VTDPropertyInfoBase pi1782 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter875 = new VTDObjectSetter(pi1782);
            binding_setter875 = new StringFormaterDecorator(binding_setter875,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir875 = new BindDirection(this.DataCursorActivity263,binding_getter907,binding_setter875,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir875);
            VTDPropertyInfoBase pi1783 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter908 = new VTDObjectGetter(pi1783);
            VTDPropertyInfoBase pi1784 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter876 = new VTDObjectSetter(pi1784);
            binding_setter876 = new StringFormaterDecorator(binding_setter876,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir876 = new BindDirection(this.DataCursorActivity263,binding_getter908,binding_setter876,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir876);
            VTDPropertyInfoBase pi1785 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter909 = new VTDXPathGetter(pi1785,XmlTypeCode.String);
            binding_getter909 = new XPathGetterDecorator(binding_getter909,"{Array0}",1);
            VTDPropertyInfoBase pi1786 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter877 = new VTDObjectSetter(pi1786);
            binding_setter877 = new StringFormaterDecorator(binding_setter877,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir877 = new BindDirection(_flow.DbFetchData248,binding_getter909,binding_setter877,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir877);
            VTDPropertyInfoBase pi1787 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter910 = new VTDObjectGetter(pi1787);
            VTDPropertyInfoBase pi1788 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter878 = new VTDObjectSetter(pi1788);
            binding_setter878 = new StringFormaterDecorator(binding_setter878,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir878 = new BindDirection(this.DataCursorActivity263,binding_getter910,binding_setter878,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir878);
            VTDPropertyInfoBase pi1789 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter911 = new VTDXPathGetter(pi1789,XmlTypeCode.String);
            binding_getter911 = new XPathGetterDecorator(binding_getter911,"{Array0}",1);
            VTDPropertyInfoBase pi1790 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter879 = new VTDObjectSetter(pi1790);
            binding_setter879 = new StringFormaterDecorator(binding_setter879,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir879 = new BindDirection(_flow.DbFetchData76,binding_getter911,binding_setter879,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir879);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/getURoom.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1791 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter912 = new VTDObjectGetter(pi1791);
            VTDPropertyInfoBase pi1792 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter880 = new VTDObjectSetter(pi1792);
            binding_setter880 = new StringFormaterDecorator(binding_setter880,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir880 = new BindDirection(_flow.HTTPActivity73,binding_getter912,binding_setter880,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir880);
            VTDPropertyInfoBase pi1793 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter913 = new VTDObjectGetter(pi1793);
            VTDPropertyInfoBase pi1794 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter881 = new VTDObjectSetter(pi1794);
            bind_dir881 = new BindDirection(_flow.DbOpenConnection39,binding_getter913,binding_setter881,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir881);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1795 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter914 = new VTDObjectGetter(pi1795);
            VTDPropertyInfoBase pi1796 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter882 = new VTDObjectSetter(pi1796);
            binding_setter882 = new StringFormaterDecorator(binding_setter882,"{Step.DataFetchActivity256.OutTable}");
            bind_dir882 = new BindDirection(_flow.DataFetchActivity256,binding_getter914,binding_setter882,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir882);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence255.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence255.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,myJid,token from tb_getUroom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getUroom_verification表中字段信息";
            VTDPropertyInfoBase pi1797 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter915 = new VTDObjectGetter(pi1797);
            VTDPropertyInfoBase pi1798 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter883 = new VTDObjectSetter(pi1798);
            binding_setter883 = new StringFormaterDecorator(binding_setter883,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir883 = new BindDirection(_flow.Loop56,binding_getter915,binding_setter883,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir883);
            VTDPropertyInfoBase pi1799 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter916 = new VTDObjectGetter(pi1799);
            VTDPropertyInfoBase pi1800 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter884 = new VTDObjectSetter(pi1800);
            bind_dir884 = new BindDirection(_flow.DbOpenConnection39,binding_getter916,binding_setter884,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir884);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><myJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将本地表的xsid更新";
            VTDPropertyInfoBase pi1801 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter917 = new VTDXPathGetter(pi1801,XmlTypeCode.String);
            binding_getter917 = new XPathGetterDecorator(binding_getter917,"{Array0}",1);
            VTDPropertyInfoBase pi1802 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter885 = new VTDObjectSetter(pi1802);
            binding_setter885 = new StringFormaterDecorator(binding_setter885,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir885 = new BindDirection(_flow.DbFetchData57,binding_getter917,binding_setter885,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir885);
            VTDPropertyInfoBase pi1803 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter918 = new VTDXPathGetter(pi1803,XmlTypeCode.String);
            binding_getter918 = new XPathGetterDecorator(binding_getter918,"{Array0}",1);
            VTDPropertyInfoBase pi1804 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter886 = new VTDObjectSetter(pi1804);
            binding_setter886 = new StringFormaterDecorator(binding_setter886,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir886 = new BindDirection(_flow.DbFetchData248,binding_getter918,binding_setter886,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir886);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}PFBpYmPlk9' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi1805 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter919 = new VTDXPathGetter(pi1805,XmlTypeCode.String);
            binding_getter919 = new XPathGetterDecorator(binding_getter919,"{Array0}",1);
            VTDPropertyInfoBase pi1806 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter887 = new VTDObjectSetter(pi1806);
            binding_setter887 = new StringFormaterDecorator(binding_setter887,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir887 = new BindDirection(_flow.DbFetchData57,binding_getter919,binding_setter887,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir887);
            VTDPropertyInfoBase pi1807 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter920 = new VTDObjectGetter(pi1807);
            VTDPropertyInfoBase pi1808 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter888 = new VTDObjectSetter(pi1808);
            bind_dir888 = new BindDirection(_flow.DbOpenConnection39,binding_getter920,binding_setter888,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir888);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi1809 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter921 = new VTDObjectGetter(pi1809);
            VTDPropertyInfoBase pi1810 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter889 = new VTDObjectSetter(pi1810);
            bind_dir889 = new BindDirection(_flow.DbOpenConnection39,binding_getter921,binding_setter889,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir889);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"305bbc2b43542b3d0203daffe9073c3cba5b47d9";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi1811 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter922 = new VTDXPathGetter(pi1811,XmlTypeCode.String);
            binding_getter922 = new XPathGetterDecorator(binding_getter922,"{Array0}",1);
            VTDPropertyInfoBase pi1812 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter890 = new VTDObjectSetter(pi1812);
            binding_setter890 = new StringFormaterDecorator(binding_setter890,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir890 = new BindDirection(_flow.DbFetchData57,binding_getter922,binding_setter890,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir890);
            VTDPropertyInfoBase pi1813 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter923 = new VTDXPathGetter(pi1813,XmlTypeCode.String);
            binding_getter923 = new XPathGetterDecorator(binding_getter923,"{Array0}",1);
            VTDPropertyInfoBase pi1814 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter891 = new VTDObjectSetter(pi1814);
            binding_setter891 = new StringFormaterDecorator(binding_setter891,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir891 = new BindDirection(_flow.DbFetchData252,binding_getter923,binding_setter891,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir891);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&myJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getUroom}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/getURoom.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi1815 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter924 = new VTDObjectGetter(pi1815);
            VTDPropertyInfoBase pi1816 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter892 = new VTDObjectSetter(pi1816);
            binding_setter892 = new StringFormaterDecorator(binding_setter892,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir892 = new BindDirection(this.DataCursorActivity264,binding_getter924,binding_setter892,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir892);
            VTDPropertyInfoBase pi1817 = new VTDPropertyInfoBase("getUroom");
            VTDBaseGetter binding_getter925 = new VTDObjectGetter(pi1817);
            VTDPropertyInfoBase pi1818 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter893 = new VTDObjectSetter(pi1818);
            binding_setter893 = new StringFormaterDecorator(binding_setter893,"{DataSource.tb_global_table.getUroom}");
            bind_dir893 = new BindDirection(this.DataCursorActivity264,binding_getter925,binding_setter893,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir893);
            VTDPropertyInfoBase pi1819 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter926 = new VTDObjectGetter(pi1819);
            VTDPropertyInfoBase pi1820 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter894 = new VTDObjectSetter(pi1820);
            binding_setter894 = new StringFormaterDecorator(binding_setter894,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir894 = new BindDirection(this.DataCursorActivity264,binding_getter926,binding_setter894,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir894);
            VTDPropertyInfoBase pi1821 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter927 = new VTDObjectGetter(pi1821);
            VTDPropertyInfoBase pi1822 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter895 = new VTDObjectSetter(pi1822);
            binding_setter895 = new StringFormaterDecorator(binding_setter895,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir895 = new BindDirection(this.DataCursorActivity264,binding_getter927,binding_setter895,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir895);
            VTDPropertyInfoBase pi1823 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter928 = new VTDObjectGetter(pi1823);
            VTDPropertyInfoBase pi1824 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter896 = new VTDObjectSetter(pi1824);
            binding_setter896 = new StringFormaterDecorator(binding_setter896,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir896 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter928,binding_setter896,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir896);
            VTDPropertyInfoBase pi1825 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter929 = new VTDXPathGetter(pi1825,XmlTypeCode.String);
            binding_getter929 = new XPathGetterDecorator(binding_getter929,"{Array0}",1);
            VTDPropertyInfoBase pi1826 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter897 = new VTDObjectSetter(pi1826);
            binding_setter897 = new StringFormaterDecorator(binding_setter897,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir897 = new BindDirection(_flow.DbFetchData57,binding_getter929,binding_setter897,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir897);
            VTDPropertyInfoBase pi1827 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter930 = new VTDObjectGetter(pi1827);
            VTDPropertyInfoBase pi1828 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter898 = new VTDObjectSetter(pi1828);
            binding_setter898 = new StringFormaterDecorator(binding_setter898,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir898 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter930,binding_setter898,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir898);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1829 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter931 = new VTDObjectGetter(pi1829);
            VTDPropertyInfoBase pi1830 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter899 = new VTDObjectSetter(pi1830);
            binding_setter899 = new StringFormaterDecorator(binding_setter899,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir899 = new BindDirection(_flow.HTTPActivity59,binding_getter931,binding_setter899,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir899);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getUroom_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi1831 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter932 = new VTDObjectGetter(pi1831);
            VTDPropertyInfoBase pi1832 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter900 = new VTDObjectSetter(pi1832);
            binding_setter900 = new StringFormaterDecorator(binding_setter900,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir900 = new BindDirection(_flow.HTTPActivity59,binding_getter932,binding_setter900,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir900);
            VTDPropertyInfoBase pi1833 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter933 = new VTDObjectGetter(pi1833);
            VTDPropertyInfoBase pi1834 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter901 = new VTDObjectSetter(pi1834);
            binding_setter901 = new StringFormaterDecorator(binding_setter901,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir901 = new BindDirection(_flow.Loop56,binding_getter933,binding_setter901,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir901);
            VTDPropertyInfoBase pi1835 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter934 = new VTDObjectGetter(pi1835);
            VTDPropertyInfoBase pi1836 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter902 = new VTDObjectSetter(pi1836);
            bind_dir902 = new BindDirection(_flow.DbOpenConnection39,binding_getter934,binding_setter902,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir902);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getUroom_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1837 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter935 = new VTDJsonGetter(pi1837);
            VTDPropertyInfoBase pi1838 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter903 = new VTDObjectSetter(pi1838);
            binding_setter903 = new StringFormaterDecorator(binding_setter903,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir903 = new BindDirection(_flow.StringToJsonActivity60,binding_getter935,binding_setter903,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir903);
            VTDPropertyInfoBase pi1839 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter936 = new VTDObjectGetter(pi1839);
            VTDPropertyInfoBase pi1840 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter904 = new VTDObjectSetter(pi1840);
            binding_setter904 = new StringFormaterDecorator(binding_setter904,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir904 = new BindDirection(_flow.Loop56,binding_getter936,binding_setter904,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir904);
            VTDPropertyInfoBase pi1841 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter937 = new VTDObjectGetter(pi1841);
            VTDPropertyInfoBase pi1842 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter905 = new VTDObjectSetter(pi1842);
            bind_dir905 = new BindDirection(_flow.DbOpenConnection39,binding_getter937,binding_setter905,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir905);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getUroom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1843 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter938 = new VTDObjectGetter(pi1843);
            VTDPropertyInfoBase pi1844 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter906 = new VTDObjectSetter(pi1844);
            binding_setter906 = new StringFormaterDecorator(binding_setter906,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir906 = new BindDirection(_flow.Loop56,binding_getter938,binding_setter906,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir906);
            VTDPropertyInfoBase pi1845 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter939 = new VTDObjectGetter(pi1845);
            VTDPropertyInfoBase pi1846 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter907 = new VTDObjectSetter(pi1846);
            bind_dir907 = new BindDirection(_flow.DbOpenConnection39,binding_getter939,binding_setter907,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir907);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getUroom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1847 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter940 = new VTDObjectGetter(pi1847);
            VTDPropertyInfoBase pi1848 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter908 = new VTDObjectSetter(pi1848);
            binding_setter908 = new StringFormaterDecorator(binding_setter908,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir908 = new BindDirection(_flow.Loop56,binding_getter940,binding_setter908,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir908);
            VTDPropertyInfoBase pi1849 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter941 = new VTDObjectGetter(pi1849);
            VTDPropertyInfoBase pi1850 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter909 = new VTDObjectSetter(pi1850);
            bind_dir909 = new BindDirection(_flow.DbOpenConnection39,binding_getter941,binding_setter909,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir909);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1851 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter942 = new VTDXPathGetter(pi1851,XmlTypeCode.String);
            binding_getter942 = new XPathGetterDecorator(binding_getter942,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter942),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1852 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter943 = new VTDXPathGetter(pi1852,XmlTypeCode.String);
            binding_getter943 = new XPathGetterDecorator(binding_getter943,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter943),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getUroom_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1853 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter944 = new VTDObjectGetter(pi1853);
            VTDPropertyInfoBase pi1854 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter910 = new VTDObjectSetter(pi1854);
            binding_setter910 = new StringFormaterDecorator(binding_setter910,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir910 = new BindDirection(_flow.Loop56,binding_getter944,binding_setter910,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir910);
            VTDPropertyInfoBase pi1855 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter945 = new VTDObjectGetter(pi1855);
            VTDPropertyInfoBase pi1856 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter911 = new VTDObjectSetter(pi1856);
            bind_dir911 = new BindDirection(_flow.DbOpenConnection39,binding_getter945,binding_setter911,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir911);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getUroom_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1857 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter946 = new VTDObjectGetter(pi1857);
            VTDPropertyInfoBase pi1858 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter912 = new VTDObjectSetter(pi1858);
            binding_setter912 = new StringFormaterDecorator(binding_setter912,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir912 = new BindDirection(_flow.Loop56,binding_getter946,binding_setter912,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir912);
            VTDPropertyInfoBase pi1859 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter947 = new VTDObjectGetter(pi1859);
            VTDPropertyInfoBase pi1860 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter913 = new VTDObjectSetter(pi1860);
            bind_dir913 = new BindDirection(_flow.DbOpenConnection39,binding_getter947,binding_setter913,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir913);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    