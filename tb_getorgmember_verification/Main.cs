/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getorgmember_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir914 = null;
        public BindDirection bind_dir915 = null;
        public BindDirection bind_dir916 = null;
        public BindDirection bind_dir917 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity263 = null;
        public BindDirection bind_dir918 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity263_Policy = null;
        public BindDirection bind_dir919 = null;
        public BindDirection bind_dir920 = null;
        public BindDirection bind_dir921 = null;
        public BindDirection bind_dir922 = null;
        public BindDirection bind_dir923 = null;
        public BindDirection bind_dir924 = null;
        public BindDirection bind_dir925 = null;
        public BindDirection bind_dir926 = null;
        public BindDirection bind_dir927 = null;
        public BindDirection bind_dir928 = null;
        public BindDirection bind_dir929 = null;
        public BindDirection bind_dir930 = null;
        public BindDirection bind_dir931 = null;
        public BindDirection bind_dir932 = null;
        public BindDirection bind_dir933 = null;
        public BindDirection bind_dir934 = null;
        public BindDirection bind_dir935 = null;
        public BindDirection bind_dir936 = null;
        public BindDirection bind_dir937 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir938 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir939 = null;
        public BindDirection bind_dir940 = null;
        public BindDirection bind_dir941 = null;
        public BindDirection bind_dir942 = null;
        public BindDirection bind_dir943 = null;
        public BindDirection bind_dir944 = null;
        public BindDirection bind_dir945 = null;
        public BindDirection bind_dir946 = null;
        public BindDirection bind_dir947 = null;
        public BindDirection bind_dir948 = null;
        public BindDirection bind_dir949 = null;
        public BindDirection bind_dir950 = null;
        public BindDirection bind_dir951 = null;
        public BindDirection bind_dir952 = null;
        public BindDirection bind_dir953 = null;
        public BindDirection bind_dir954 = null;
        public BindDirection bind_dir955 = null;
        public BindDirection bind_dir956 = null;
        public BindDirection bind_dir957 = null;
        public BindDirection bind_dir958 = null;
        public BindDirection bind_dir959 = null;
        public BindDirection bind_dir960 = null;
        public BindDirection bind_dir961 = null;
        public BindDirection bind_dir962 = null;
        public BindDirection bind_dir963 = null;
        public BindDirection bind_dir964 = null;
        public BindDirection bind_dir965 = null;
        public BindDirection bind_dir966 = null;
        public BindDirection bind_dir967 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity259 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity259");
            _flow.DataFetchActivity256 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity256");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity258 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity258");
            _flow.DataExporterActivity261 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity261");
            _flow.DataExporterCloseActivity262 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity262");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity257 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity257");
            _flow.DataDisconnectActivity260 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity260");
            this.DataCursorActivity263 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity263");
            this.DataCursorActivity263_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence254 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence254");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData249 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData249");
            _flow.DbFetchData251 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData251");
            _flow.CallQTPTest250 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest250");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity248 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity248");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity259.Comment = @"";
            _flow.DataFetchActivity259.IconPath = @"";
            _flow.DataFetchActivity259.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity259.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity259_QueryParameters_Document = new XmlDocument();
            DataFetchActivity259_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity259Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity259_QueryParameters_Document.LoadXml(xmlDataFetchActivity259Params);
            _flow.DataFetchActivity259.QueryParameters = DataFetchActivity259_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity259);
            this.Activities.Add (_flow.DataFetchActivity259);
            _flow.DataFetchActivity256.Comment = @"";
            _flow.DataFetchActivity256.IconPath = @"";
            _flow.DataFetchActivity256.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity256.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity256_QueryParameters_Document = new XmlDocument();
            DataFetchActivity256_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity256Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity256_QueryParameters_Document.LoadXml(xmlDataFetchActivity256Params);
            _flow.DataFetchActivity256.QueryParameters = DataFetchActivity256_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity256);
            this.Activities.Add (_flow.DataFetchActivity256);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity263);
            _flow.Loop2.Activities.Add (_flow.Sequence254);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity258.Comment = @"";
            _flow.DataExporterActivity258.IconPath = @"";
            VTDPropertyInfoBase pi1861 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter948 = new VTDObjectGetter(pi1861);
            VTDPropertyInfoBase pi1862 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter914 = new VTDObjectSetter(pi1862);
            binding_setter914 = new StringFormaterDecorator(binding_setter914,"{Step.DataFetchActivity256.OutTable}");
            bind_dir914 = new BindDirection(_flow.DataFetchActivity256,binding_getter948,binding_setter914,BindTargetType.ToInProperty);
            _flow.DataExporterActivity258.InDirections.Add(bind_dir914);
            this.Activities.Add (_flow.DataExporterActivity258);
            _flow.DataExporterActivity261.Comment = @"";
            _flow.DataExporterActivity261.IconPath = @"";
            VTDPropertyInfoBase pi1863 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter949 = new VTDObjectGetter(pi1863);
            VTDPropertyInfoBase pi1864 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter915 = new VTDObjectSetter(pi1864);
            binding_setter915 = new StringFormaterDecorator(binding_setter915,"{Step.DataFetchActivity259.OutTable}");
            bind_dir915 = new BindDirection(_flow.DataFetchActivity259,binding_getter949,binding_setter915,BindTargetType.ToInProperty);
            _flow.DataExporterActivity261.InDirections.Add(bind_dir915);
            this.Activities.Add (_flow.DataExporterActivity261);
            _flow.DataExporterCloseActivity262.Comment = @"";
            _flow.DataExporterCloseActivity262.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity262);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity257.Comment = @"";
            _flow.DataDisconnectActivity257.IconPath = @"";
            VTDPropertyInfoBase pi1865 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter950 = new VTDObjectGetter(pi1865);
            VTDPropertyInfoBase pi1866 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter916 = new VTDObjectSetter(pi1866);
            binding_setter916 = new StringFormaterDecorator(binding_setter916,"{Step.DataFetchActivity256.OutTable}");
            bind_dir916 = new BindDirection(_flow.DataFetchActivity256,binding_getter950,binding_setter916,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity257.InDirections.Add(bind_dir916);
            this.Activities.Add (_flow.DataDisconnectActivity257);
            _flow.DataDisconnectActivity260.Comment = @"";
            _flow.DataDisconnectActivity260.IconPath = @"";
            VTDPropertyInfoBase pi1867 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter951 = new VTDObjectGetter(pi1867);
            VTDPropertyInfoBase pi1868 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter917 = new VTDObjectSetter(pi1868);
            binding_setter917 = new StringFormaterDecorator(binding_setter917,"{Step.DataFetchActivity259.OutTable}");
            bind_dir917 = new BindDirection(_flow.DataFetchActivity259,binding_getter951,binding_setter917,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity260.InDirections.Add(bind_dir917);
            this.Activities.Add (_flow.DataDisconnectActivity260);
            this.DataCursorActivity263.Comment = @"";
            this.DataCursorActivity263.IconPath = @"";
            VTDPropertyInfoBase pi1869 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter952 = new VTDObjectGetter(pi1869);
            VTDPropertyInfoBase pi1870 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter918 = new VTDObjectSetter(pi1870);
            binding_setter918 = new StringFormaterDecorator(binding_setter918,"{Step.DataFetchActivity256.OutTable}");
            bind_dir918 = new BindDirection(_flow.DataFetchActivity256,binding_getter952,binding_setter918,BindTargetType.ToInProperty);
            this.DataCursorActivity263.InDirections.Add(bind_dir918);
            this.DataCursorActivity263_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity263_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.StartCondition.Value = "";
            this.DataCursorActivity263_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity263_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.EndCondition.Value = "";
            this.DataCursorActivity263_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity263_Policy.StepSize = 1;
            this.DataCursorActivity263_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity263.Policy = this.DataCursorActivity263_Policy;
            this.DataCursorActivity263.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity263.ResetCursor;
            _flow.Sequence254.Comment = @"";
            _flow.Sequence254.IconPath = @"";
            _flow.Sequence254.Name = @"序列254";
            _flow.Sequence254.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData249);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData251);
            _flow.Sequence254.Activities.Add (_flow.CallQTPTest250);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence254.Activities.Add (_flow.Loop56);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence254.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence254.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getorgmember_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_sendMessage_verification表有效行数";
            VTDPropertyInfoBase pi1871 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter953 = new VTDObjectGetter(pi1871);
            VTDPropertyInfoBase pi1872 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter919 = new VTDObjectSetter(pi1872);
            bind_dir919 = new BindDirection(_flow.DbOpenConnection39,binding_getter953,binding_setter919,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir919);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData249.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData249.Timeout = (int)30;
            _flow.DbFetchData249.Comment = @"";
            _flow.DbFetchData249.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData249.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi1873 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter954 = new VTDObjectGetter(pi1873);
            VTDPropertyInfoBase pi1874 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter920 = new VTDObjectSetter(pi1874);
            bind_dir920 = new BindDirection(_flow.DbOpenConnection39,binding_getter954,binding_setter920,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir920);
            XmlDocument DbFetchData249_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData249_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData249_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData249.ExpectedOutputProperties = DbFetchData249_ExpectedOutputProperties_Document;
            _flow.DbFetchData251.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData249.ResultTable.Row[1].ResponseXsid}DcVvwMFWs5' where TestCase = 1";
            _flow.DbFetchData251.Timeout = (int)30;
            _flow.DbFetchData251.Comment = @"";
            _flow.DbFetchData251.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData251.Name = @"对/xmp/getOrgMember.php接口token实行加密";
            VTDPropertyInfoBase pi1875 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter955 = new VTDXPathGetter(pi1875,XmlTypeCode.String);
            binding_getter955 = new XPathGetterDecorator(binding_getter955,"{Array0}",1);
            VTDPropertyInfoBase pi1876 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter921 = new VTDObjectSetter(pi1876);
            binding_setter921 = new StringFormaterDecorator(binding_setter921,"{Step.OutputProperties.DbFetchData249.ResultTable.Row[1].ResponseXsid}");
            bind_dir921 = new BindDirection(_flow.DbFetchData249,binding_getter955,binding_setter921,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir921);
            VTDPropertyInfoBase pi1877 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter956 = new VTDObjectGetter(pi1877);
            VTDPropertyInfoBase pi1878 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter922 = new VTDObjectSetter(pi1878);
            bind_dir922 = new BindDirection(_flow.DbOpenConnection39,binding_getter956,binding_setter922,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir922);
            XmlDocument DbFetchData251_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData251_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData251_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData251.ExpectedOutputProperties = DbFetchData251_ExpectedOutputProperties_Document;
            _flow.CallQTPTest250.Comment = @"";
            _flow.CallQTPTest250.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest250.Name = @"Encryption.SHA1";
            _flow.CallQTPTest250.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ScriptPath}");
            _flow.CallQTPTest250.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ActionName}");
            _flow.CallQTPTest250.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.Description}");
            _flow.CallQTPTest250.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.IsActionSelected}");
            _flow.CallQTPTest250.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.ResultLocation}");
            _flow.CallQTPTest250.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest250.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"对/xmp/getOrgMember.php接口token实行加密";
            VTDPropertyInfoBase pi1879 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter957 = new VTDObjectGetter(pi1879);
            VTDPropertyInfoBase pi1880 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter923 = new VTDObjectSetter(pi1880);
            bind_dir923 = new BindDirection(_flow.DbOpenConnection39,binding_getter957,binding_setter923,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir923);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop56.NumberOfIterations = (int)0;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getorgmember_verification中的测试用例";
            VTDPropertyInfoBase pi1881 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter958 = new VTDXPathGetter(pi1881,XmlTypeCode.Long);
            binding_getter958 = new XPathGetterDecorator(binding_getter958,"{Array0}",1);
            VTDPropertyInfoBase pi1882 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter924 = new VTDObjectSetter(pi1882);
            bind_dir924 = new BindDirection(_flow.DbFetchData58,binding_getter958,binding_setter924,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir924);
            _flow.Loop56.Activities.Add (this.DataCursorActivity264);
            _flow.Loop56.Activities.Add (_flow.Sequence255);
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi1883 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter959 = new VTDObjectGetter(pi1883);
            VTDPropertyInfoBase pi1884 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter925 = new VTDObjectSetter(pi1884);
            bind_dir925 = new BindDirection(_flow.DbOpenConnection39,binding_getter959,binding_setter925,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir925);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}DcVvwMFWs5' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/xmp/getOrgMember.php接口token实行加密";
            VTDPropertyInfoBase pi1885 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter960 = new VTDXPathGetter(pi1885,XmlTypeCode.String);
            binding_getter960 = new XPathGetterDecorator(binding_getter960,"{Array0}",1);
            VTDPropertyInfoBase pi1886 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter926 = new VTDObjectSetter(pi1886);
            binding_setter926 = new StringFormaterDecorator(binding_setter926,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir926 = new BindDirection(_flow.DbFetchData247,binding_getter960,binding_setter926,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir926);
            VTDPropertyInfoBase pi1887 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter961 = new VTDObjectGetter(pi1887);
            VTDPropertyInfoBase pi1888 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter927 = new VTDObjectSetter(pi1888);
            bind_dir927 = new BindDirection(_flow.DbOpenConnection39,binding_getter961,binding_setter927,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir927);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1889 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter962 = new VTDObjectGetter(pi1889);
            VTDPropertyInfoBase pi1890 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter928 = new VTDObjectSetter(pi1890);
            bind_dir928 = new BindDirection(_flow.DbOpenConnection39,binding_getter962,binding_setter928,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir928);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}&orgID=&Jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getOrgMember}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/xmp/createGroup.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi1891 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter963 = new VTDObjectGetter(pi1891);
            VTDPropertyInfoBase pi1892 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter929 = new VTDObjectSetter(pi1892);
            binding_setter929 = new StringFormaterDecorator(binding_setter929,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir929 = new BindDirection(this.DataCursorActivity263,binding_getter963,binding_setter929,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir929);
            VTDPropertyInfoBase pi1893 = new VTDPropertyInfoBase("getOrgMember");
            VTDBaseGetter binding_getter964 = new VTDObjectGetter(pi1893);
            VTDPropertyInfoBase pi1894 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter930 = new VTDObjectSetter(pi1894);
            binding_setter930 = new StringFormaterDecorator(binding_setter930,"{DataSource.tb_global_table.getOrgMember}");
            bind_dir930 = new BindDirection(this.DataCursorActivity263,binding_getter964,binding_setter930,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir930);
            VTDPropertyInfoBase pi1895 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter965 = new VTDObjectGetter(pi1895);
            VTDPropertyInfoBase pi1896 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter931 = new VTDObjectSetter(pi1896);
            binding_setter931 = new StringFormaterDecorator(binding_setter931,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir931 = new BindDirection(this.DataCursorActivity263,binding_getter965,binding_setter931,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir931);
            VTDPropertyInfoBase pi1897 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter966 = new VTDObjectGetter(pi1897);
            VTDPropertyInfoBase pi1898 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter932 = new VTDObjectSetter(pi1898);
            binding_setter932 = new StringFormaterDecorator(binding_setter932,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir932 = new BindDirection(this.DataCursorActivity263,binding_getter966,binding_setter932,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir932);
            VTDPropertyInfoBase pi1899 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter967 = new VTDXPathGetter(pi1899,XmlTypeCode.String);
            binding_getter967 = new XPathGetterDecorator(binding_getter967,"{Array0}",1);
            VTDPropertyInfoBase pi1900 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter933 = new VTDObjectSetter(pi1900);
            binding_setter933 = new StringFormaterDecorator(binding_setter933,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir933 = new BindDirection(_flow.DbFetchData247,binding_getter967,binding_setter933,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir933);
            VTDPropertyInfoBase pi1901 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter968 = new VTDXPathGetter(pi1901,XmlTypeCode.String);
            binding_getter968 = new XPathGetterDecorator(binding_getter968,"{Array0}",1);
            VTDPropertyInfoBase pi1902 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter934 = new VTDObjectSetter(pi1902);
            binding_setter934 = new StringFormaterDecorator(binding_setter934,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir934 = new BindDirection(_flow.DbFetchData76,binding_getter968,binding_setter934,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir934);
            VTDPropertyInfoBase pi1903 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter969 = new VTDObjectGetter(pi1903);
            VTDPropertyInfoBase pi1904 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter935 = new VTDObjectSetter(pi1904);
            binding_setter935 = new StringFormaterDecorator(binding_setter935,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir935 = new BindDirection(this.DataCursorActivity263,binding_getter969,binding_setter935,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir935);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/xmp/getOrgMember.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1905 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter970 = new VTDObjectGetter(pi1905);
            VTDPropertyInfoBase pi1906 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter936 = new VTDObjectSetter(pi1906);
            binding_setter936 = new StringFormaterDecorator(binding_setter936,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir936 = new BindDirection(_flow.HTTPActivity73,binding_getter970,binding_setter936,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir936);
            VTDPropertyInfoBase pi1907 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter971 = new VTDObjectGetter(pi1907);
            VTDPropertyInfoBase pi1908 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter937 = new VTDObjectSetter(pi1908);
            bind_dir937 = new BindDirection(_flow.DbOpenConnection39,binding_getter971,binding_setter937,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir937);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1909 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter972 = new VTDObjectGetter(pi1909);
            VTDPropertyInfoBase pi1910 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter938 = new VTDObjectSetter(pi1910);
            binding_setter938 = new StringFormaterDecorator(binding_setter938,"{Step.DataFetchActivity256.OutTable}");
            bind_dir938 = new BindDirection(_flow.DataFetchActivity256,binding_getter972,binding_setter938,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir938);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity248);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence255.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence255.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,orgID,Jid,token from tb_getorgmember_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getorgmember_verification表中字段信息";
            VTDPropertyInfoBase pi1911 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter973 = new VTDObjectGetter(pi1911);
            VTDPropertyInfoBase pi1912 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter939 = new VTDObjectSetter(pi1912);
            binding_setter939 = new StringFormaterDecorator(binding_setter939,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir939 = new BindDirection(_flow.Loop56,binding_getter973,binding_setter939,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir939);
            VTDPropertyInfoBase pi1913 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter974 = new VTDObjectGetter(pi1913);
            VTDPropertyInfoBase pi1914 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter940 = new VTDObjectSetter(pi1914);
            bind_dir940 = new BindDirection(_flow.DbOpenConnection39,binding_getter974,binding_setter940,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir940);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><orgID /><Jid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity248.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity248.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity248.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData249.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity248.CaseSensitive = true;
            _flow.ReplaceStringActivity248.Comment = @"";
            _flow.ReplaceStringActivity248.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity248.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi1915 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter975 = new VTDXPathGetter(pi1915,XmlTypeCode.String);
            binding_getter975 = new XPathGetterDecorator(binding_getter975,"{Array0}",1);
            VTDPropertyInfoBase pi1916 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter941 = new VTDObjectSetter(pi1916);
            binding_setter941 = new StringFormaterDecorator(binding_setter941,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir941 = new BindDirection(_flow.DbFetchData57,binding_getter975,binding_setter941,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir941);
            VTDPropertyInfoBase pi1917 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter976 = new VTDXPathGetter(pi1917,XmlTypeCode.String);
            binding_getter976 = new XPathGetterDecorator(binding_getter976,"{Array0}",1);
            VTDPropertyInfoBase pi1918 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter942 = new VTDObjectSetter(pi1918);
            binding_setter942 = new StringFormaterDecorator(binding_setter942,"{Step.OutputProperties.DbFetchData249.ResultTable.Row[1].ResponseXsid}");
            bind_dir942 = new BindDirection(_flow.DbFetchData249,binding_getter976,binding_setter942,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir942);
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"a5ca1fe10dc99569be635b6a51463b98034a925e";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi1919 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter977 = new VTDXPathGetter(pi1919,XmlTypeCode.String);
            binding_getter977 = new XPathGetterDecorator(binding_getter977,"{Array0}",1);
            VTDPropertyInfoBase pi1920 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter943 = new VTDObjectSetter(pi1920);
            binding_setter943 = new StringFormaterDecorator(binding_setter943,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir943 = new BindDirection(_flow.DbFetchData57,binding_getter977,binding_setter943,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir943);
            VTDPropertyInfoBase pi1921 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter978 = new VTDXPathGetter(pi1921,XmlTypeCode.String);
            binding_getter978 = new XPathGetterDecorator(binding_getter978,"{Array0}",1);
            VTDPropertyInfoBase pi1922 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter944 = new VTDObjectSetter(pi1922);
            binding_setter944 = new StringFormaterDecorator(binding_setter944,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir944 = new BindDirection(_flow.DbFetchData252,binding_getter978,binding_setter944,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir944);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity248.Result}&token={Step.OutputProperties.ReplaceStringActivity253.Result}&orgID={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].orgID}&Jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getOrgMember}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/xmp/getOrgMember.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi1923 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter979 = new VTDObjectGetter(pi1923);
            VTDPropertyInfoBase pi1924 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter945 = new VTDObjectSetter(pi1924);
            binding_setter945 = new StringFormaterDecorator(binding_setter945,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir945 = new BindDirection(this.DataCursorActivity264,binding_getter979,binding_setter945,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir945);
            VTDPropertyInfoBase pi1925 = new VTDPropertyInfoBase("getOrgMember");
            VTDBaseGetter binding_getter980 = new VTDObjectGetter(pi1925);
            VTDPropertyInfoBase pi1926 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter946 = new VTDObjectSetter(pi1926);
            binding_setter946 = new StringFormaterDecorator(binding_setter946,"{DataSource.tb_global_table.getOrgMember}");
            bind_dir946 = new BindDirection(this.DataCursorActivity264,binding_getter980,binding_setter946,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir946);
            VTDPropertyInfoBase pi1927 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter981 = new VTDObjectGetter(pi1927);
            VTDPropertyInfoBase pi1928 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter947 = new VTDObjectSetter(pi1928);
            binding_setter947 = new StringFormaterDecorator(binding_setter947,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir947 = new BindDirection(this.DataCursorActivity264,binding_getter981,binding_setter947,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir947);
            VTDPropertyInfoBase pi1929 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter982 = new VTDObjectGetter(pi1929);
            VTDPropertyInfoBase pi1930 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter948 = new VTDObjectSetter(pi1930);
            binding_setter948 = new StringFormaterDecorator(binding_setter948,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir948 = new BindDirection(this.DataCursorActivity264,binding_getter982,binding_setter948,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir948);
            VTDPropertyInfoBase pi1931 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter983 = new VTDObjectGetter(pi1931);
            VTDPropertyInfoBase pi1932 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter949 = new VTDObjectSetter(pi1932);
            binding_setter949 = new StringFormaterDecorator(binding_setter949,"{Step.OutputProperties.ReplaceStringActivity248.Result}");
            bind_dir949 = new BindDirection(_flow.ReplaceStringActivity248,binding_getter983,binding_setter949,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir949);
            VTDPropertyInfoBase pi1933 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter984 = new VTDObjectGetter(pi1933);
            VTDPropertyInfoBase pi1934 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter950 = new VTDObjectSetter(pi1934);
            binding_setter950 = new StringFormaterDecorator(binding_setter950,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir950 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter984,binding_setter950,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir950);
            VTDPropertyInfoBase pi1935 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='orgID'][1]");
            VTDBaseGetter binding_getter985 = new VTDXPathGetter(pi1935,XmlTypeCode.String);
            binding_getter985 = new XPathGetterDecorator(binding_getter985,"{Array0}",1);
            VTDPropertyInfoBase pi1936 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter951 = new VTDObjectSetter(pi1936);
            binding_setter951 = new StringFormaterDecorator(binding_setter951,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].orgID}");
            bind_dir951 = new BindDirection(_flow.DbFetchData57,binding_getter985,binding_setter951,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir951);
            VTDPropertyInfoBase pi1937 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter986 = new VTDXPathGetter(pi1937,XmlTypeCode.String);
            binding_getter986 = new XPathGetterDecorator(binding_getter986,"{Array0}",1);
            VTDPropertyInfoBase pi1938 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter952 = new VTDObjectSetter(pi1938);
            binding_setter952 = new StringFormaterDecorator(binding_setter952,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir952 = new BindDirection(_flow.DbFetchData57,binding_getter986,binding_setter952,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir952);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1939 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter987 = new VTDObjectGetter(pi1939);
            VTDPropertyInfoBase pi1940 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter953 = new VTDObjectSetter(pi1940);
            binding_setter953 = new StringFormaterDecorator(binding_setter953,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir953 = new BindDirection(_flow.HTTPActivity59,binding_getter987,binding_setter953,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir953);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getorgmember_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi1941 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter988 = new VTDObjectGetter(pi1941);
            VTDPropertyInfoBase pi1942 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter954 = new VTDObjectSetter(pi1942);
            binding_setter954 = new StringFormaterDecorator(binding_setter954,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir954 = new BindDirection(_flow.HTTPActivity59,binding_getter988,binding_setter954,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir954);
            VTDPropertyInfoBase pi1943 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter989 = new VTDObjectGetter(pi1943);
            VTDPropertyInfoBase pi1944 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter955 = new VTDObjectSetter(pi1944);
            binding_setter955 = new StringFormaterDecorator(binding_setter955,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir955 = new BindDirection(_flow.Loop56,binding_getter989,binding_setter955,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir955);
            VTDPropertyInfoBase pi1945 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter990 = new VTDObjectGetter(pi1945);
            VTDPropertyInfoBase pi1946 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter956 = new VTDObjectSetter(pi1946);
            bind_dir956 = new BindDirection(_flow.DbOpenConnection39,binding_getter990,binding_setter956,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir956);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getorgmember_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1947 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter991 = new VTDJsonGetter(pi1947);
            VTDPropertyInfoBase pi1948 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter957 = new VTDObjectSetter(pi1948);
            binding_setter957 = new StringFormaterDecorator(binding_setter957,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir957 = new BindDirection(_flow.StringToJsonActivity60,binding_getter991,binding_setter957,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir957);
            VTDPropertyInfoBase pi1949 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter992 = new VTDObjectGetter(pi1949);
            VTDPropertyInfoBase pi1950 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter958 = new VTDObjectSetter(pi1950);
            binding_setter958 = new StringFormaterDecorator(binding_setter958,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir958 = new BindDirection(_flow.Loop56,binding_getter992,binding_setter958,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir958);
            VTDPropertyInfoBase pi1951 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter993 = new VTDObjectGetter(pi1951);
            VTDPropertyInfoBase pi1952 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter959 = new VTDObjectSetter(pi1952);
            bind_dir959 = new BindDirection(_flow.DbOpenConnection39,binding_getter993,binding_setter959,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir959);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getorgmember_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1953 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter994 = new VTDObjectGetter(pi1953);
            VTDPropertyInfoBase pi1954 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter960 = new VTDObjectSetter(pi1954);
            binding_setter960 = new StringFormaterDecorator(binding_setter960,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir960 = new BindDirection(_flow.Loop56,binding_getter994,binding_setter960,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir960);
            VTDPropertyInfoBase pi1955 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter995 = new VTDObjectGetter(pi1955);
            VTDPropertyInfoBase pi1956 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter961 = new VTDObjectSetter(pi1956);
            bind_dir961 = new BindDirection(_flow.DbOpenConnection39,binding_getter995,binding_setter961,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir961);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getorgmember_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1957 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter996 = new VTDObjectGetter(pi1957);
            VTDPropertyInfoBase pi1958 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter962 = new VTDObjectSetter(pi1958);
            binding_setter962 = new StringFormaterDecorator(binding_setter962,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir962 = new BindDirection(_flow.Loop56,binding_getter996,binding_setter962,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir962);
            VTDPropertyInfoBase pi1959 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter997 = new VTDObjectGetter(pi1959);
            VTDPropertyInfoBase pi1960 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter963 = new VTDObjectSetter(pi1960);
            bind_dir963 = new BindDirection(_flow.DbOpenConnection39,binding_getter997,binding_setter963,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir963);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1961 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter998 = new VTDXPathGetter(pi1961,XmlTypeCode.String);
            binding_getter998 = new XPathGetterDecorator(binding_getter998,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter998),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1962 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter999 = new VTDXPathGetter(pi1962,XmlTypeCode.String);
            binding_getter999 = new XPathGetterDecorator(binding_getter999,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter999),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getorgmember_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1963 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1000 = new VTDObjectGetter(pi1963);
            VTDPropertyInfoBase pi1964 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter964 = new VTDObjectSetter(pi1964);
            binding_setter964 = new StringFormaterDecorator(binding_setter964,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir964 = new BindDirection(_flow.Loop56,binding_getter1000,binding_setter964,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir964);
            VTDPropertyInfoBase pi1965 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1001 = new VTDObjectGetter(pi1965);
            VTDPropertyInfoBase pi1966 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter965 = new VTDObjectSetter(pi1966);
            bind_dir965 = new BindDirection(_flow.DbOpenConnection39,binding_getter1001,binding_setter965,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir965);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getorgmember_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1967 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1002 = new VTDObjectGetter(pi1967);
            VTDPropertyInfoBase pi1968 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter966 = new VTDObjectSetter(pi1968);
            binding_setter966 = new StringFormaterDecorator(binding_setter966,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir966 = new BindDirection(_flow.Loop56,binding_getter1002,binding_setter966,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir966);
            VTDPropertyInfoBase pi1969 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1003 = new VTDObjectGetter(pi1969);
            VTDPropertyInfoBase pi1970 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter967 = new VTDObjectSetter(pi1970);
            bind_dir967 = new BindDirection(_flow.DbOpenConnection39,binding_getter1003,binding_setter967,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir967);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    