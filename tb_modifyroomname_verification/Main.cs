/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_modifyroomname_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1790 = null;
        public BindDirection bind_dir1791 = null;
        public BindDirection bind_dir1792 = null;
        public BindDirection bind_dir1793 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir1794 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir1795 = null;
        public BindDirection bind_dir1796 = null;
        public BindDirection bind_dir1797 = null;
        public BindDirection bind_dir1798 = null;
        public BindDirection bind_dir1799 = null;
        public BindDirection bind_dir1800 = null;
        public BindDirection bind_dir1801 = null;
        public BindDirection bind_dir1802 = null;
        public BindDirection bind_dir1803 = null;
        public BindDirection bind_dir1804 = null;
        public BindDirection bind_dir1805 = null;
        public BindDirection bind_dir1806 = null;
        public BindDirection bind_dir1807 = null;
        public BindDirection bind_dir1808 = null;
        public BindDirection bind_dir1809 = null;
        public BindDirection bind_dir1810 = null;
        public BindDirection bind_dir1811 = null;
        public BindDirection bind_dir1812 = null;
        public BindDirection bind_dir1813 = null;
        public BindDirection bind_dir1814 = null;
        public BindDirection bind_dir1815 = null;
        public BindDirection bind_dir1816 = null;
        public BindDirection bind_dir1817 = null;
        public BindDirection bind_dir1818 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity265 = null;
        public BindDirection bind_dir1819 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity265_Policy = null;
        public BindDirection bind_dir1820 = null;
        public BindDirection bind_dir1821 = null;
        public BindDirection bind_dir1822 = null;
        public BindDirection bind_dir1823 = null;
        public BindDirection bind_dir1824 = null;
        public BindDirection bind_dir1825 = null;
        public BindDirection bind_dir1826 = null;
        public BindDirection bind_dir1827 = null;
        public BindDirection bind_dir1828 = null;
        public BindDirection bind_dir1829 = null;
        public BindDirection bind_dir1830 = null;
        public BindDirection bind_dir1831 = null;
        public BindDirection bind_dir1832 = null;
        public BindDirection bind_dir1833 = null;
        public BindDirection bind_dir1834 = null;
        public BindDirection bind_dir1835 = null;
        public BindDirection bind_dir1836 = null;
        public BindDirection bind_dir1837 = null;
        public BindDirection bind_dir1838 = null;
        public BindDirection bind_dir1839 = null;
        public BindDirection bind_dir1840 = null;
        public BindDirection bind_dir1841 = null;
        public BindDirection bind_dir1842 = null;
        public BindDirection bind_dir1843 = null;
        public BindDirection bind_dir1844 = null;
        public BindDirection bind_dir1845 = null;
        public BindDirection bind_dir1846 = null;
        public BindDirection bind_dir1847 = null;
        public BindDirection bind_dir1848 = null;
        public BindDirection bind_dir1849 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity260 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity260");
            _flow.DataFetchActivity257 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity257");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity259 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity259");
            _flow.DataExporterActivity262 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity262");
            _flow.DataExporterCloseActivity263 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity263");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity258 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity258");
            _flow.DataDisconnectActivity261 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity261");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.DbFetchData251 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData251");
            _flow.CallQTPTest252 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest252");
            _flow.DbFetchData253 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData253");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity265 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity265");
            this.DataCursorActivity265_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence256 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence256");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.ReplaceStringActivity254 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity254");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity260.Comment = @"";
            _flow.DataFetchActivity260.IconPath = @"";
            _flow.DataFetchActivity260.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity260.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity260_QueryParameters_Document = new XmlDocument();
            DataFetchActivity260_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity260Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity260_QueryParameters_Document.LoadXml(xmlDataFetchActivity260Params);
            _flow.DataFetchActivity260.QueryParameters = DataFetchActivity260_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity260);
            this.Activities.Add (_flow.DataFetchActivity260);
            _flow.DataFetchActivity257.Comment = @"";
            _flow.DataFetchActivity257.IconPath = @"";
            _flow.DataFetchActivity257.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity257.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity257_QueryParameters_Document = new XmlDocument();
            DataFetchActivity257_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity257Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity257_QueryParameters_Document.LoadXml(xmlDataFetchActivity257Params);
            _flow.DataFetchActivity257.QueryParameters = DataFetchActivity257_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity257);
            this.Activities.Add (_flow.DataFetchActivity257);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity264);
            _flow.Loop2.Activities.Add (_flow.Sequence255);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity259.Comment = @"";
            _flow.DataExporterActivity259.IconPath = @"";
            VTDPropertyInfoBase pi3635 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1846 = new VTDObjectGetter(pi3635);
            VTDPropertyInfoBase pi3636 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1790 = new VTDObjectSetter(pi3636);
            binding_setter1790 = new StringFormaterDecorator(binding_setter1790,"{Step.DataFetchActivity257.OutTable}");
            bind_dir1790 = new BindDirection(_flow.DataFetchActivity257,binding_getter1846,binding_setter1790,BindTargetType.ToInProperty);
            _flow.DataExporterActivity259.InDirections.Add(bind_dir1790);
            this.Activities.Add (_flow.DataExporterActivity259);
            _flow.DataExporterActivity262.Comment = @"";
            _flow.DataExporterActivity262.IconPath = @"";
            VTDPropertyInfoBase pi3637 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1847 = new VTDObjectGetter(pi3637);
            VTDPropertyInfoBase pi3638 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1791 = new VTDObjectSetter(pi3638);
            binding_setter1791 = new StringFormaterDecorator(binding_setter1791,"{Step.DataFetchActivity260.OutTable}");
            bind_dir1791 = new BindDirection(_flow.DataFetchActivity260,binding_getter1847,binding_setter1791,BindTargetType.ToInProperty);
            _flow.DataExporterActivity262.InDirections.Add(bind_dir1791);
            this.Activities.Add (_flow.DataExporterActivity262);
            _flow.DataExporterCloseActivity263.Comment = @"";
            _flow.DataExporterCloseActivity263.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity263);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity258.Comment = @"";
            _flow.DataDisconnectActivity258.IconPath = @"";
            VTDPropertyInfoBase pi3639 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1848 = new VTDObjectGetter(pi3639);
            VTDPropertyInfoBase pi3640 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1792 = new VTDObjectSetter(pi3640);
            binding_setter1792 = new StringFormaterDecorator(binding_setter1792,"{Step.DataFetchActivity257.OutTable}");
            bind_dir1792 = new BindDirection(_flow.DataFetchActivity257,binding_getter1848,binding_setter1792,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity258.InDirections.Add(bind_dir1792);
            this.Activities.Add (_flow.DataDisconnectActivity258);
            _flow.DataDisconnectActivity261.Comment = @"";
            _flow.DataDisconnectActivity261.IconPath = @"";
            VTDPropertyInfoBase pi3641 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1849 = new VTDObjectGetter(pi3641);
            VTDPropertyInfoBase pi3642 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1793 = new VTDObjectSetter(pi3642);
            binding_setter1793 = new StringFormaterDecorator(binding_setter1793,"{Step.DataFetchActivity260.OutTable}");
            bind_dir1793 = new BindDirection(_flow.DataFetchActivity260,binding_getter1849,binding_setter1793,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity261.InDirections.Add(bind_dir1793);
            this.Activities.Add (_flow.DataDisconnectActivity261);
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi3643 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1850 = new VTDObjectGetter(pi3643);
            VTDPropertyInfoBase pi3644 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1794 = new VTDObjectSetter(pi3644);
            binding_setter1794 = new StringFormaterDecorator(binding_setter1794,"{Step.DataFetchActivity257.OutTable}");
            bind_dir1794 = new BindDirection(_flow.DataFetchActivity257,binding_getter1850,binding_setter1794,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir1794);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData251);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest252);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData253);
            _flow.Sequence255.Activities.Add (_flow.Loop56);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"{DataSource.tb_global_table.MysqlOdbc}";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            VTDPropertyInfoBase pi3645 = new VTDPropertyInfoBase("MysqlOdbc");
            VTDBaseGetter binding_getter1851 = new VTDObjectGetter(pi3645);
            VTDPropertyInfoBase pi3646 = new VTDPropertyInfoBase("ConnectionString");
            VTDBaseSetter binding_setter1795 = new VTDObjectSetter(pi3646);
            binding_setter1795 = new StringFormaterDecorator(binding_setter1795,"{DataSource.tb_global_table.MysqlOdbc}");
            bind_dir1795 = new BindDirection(this.DataCursorActivity264,binding_getter1851,binding_setter1795,BindTargetType.ToInProperty);
            _flow.DbOpenConnection39.InDirections.Add(bind_dir1795);
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_modifyroomname_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_sendMessage_verification表有效行数";
            VTDPropertyInfoBase pi3647 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1852 = new VTDObjectGetter(pi3647);
            VTDPropertyInfoBase pi3648 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1796 = new VTDObjectSetter(pi3648);
            bind_dir1796 = new BindDirection(_flow.DbOpenConnection39,binding_getter1852,binding_setter1796,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir1796);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData250.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3649 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1853 = new VTDObjectGetter(pi3649);
            VTDPropertyInfoBase pi3650 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1797 = new VTDObjectSetter(pi3650);
            bind_dir1797 = new BindDirection(_flow.DbOpenConnection39,binding_getter1853,binding_setter1797,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir1797);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.DbFetchData248.QueryString = @"select groupJid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询tb_global_table表中groupJid值";
            VTDPropertyInfoBase pi3651 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1854 = new VTDObjectGetter(pi3651);
            VTDPropertyInfoBase pi3652 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1798 = new VTDObjectSetter(pi3652);
            bind_dir1798 = new BindDirection(_flow.DbOpenConnection39,binding_getter1854,binding_setter1798,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir1798);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><groupJid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.DbFetchData251.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}DcVvwMFWs5{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}' where TestCase = 1";
            _flow.DbFetchData251.Timeout = (int)30;
            _flow.DbFetchData251.Comment = @"";
            _flow.DbFetchData251.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData251.Name = @"对/xmp/modifyRoomName.php接口token实行加密";
            VTDPropertyInfoBase pi3653 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1855 = new VTDXPathGetter(pi3653,XmlTypeCode.String);
            binding_getter1855 = new XPathGetterDecorator(binding_getter1855,"{Array0}",1);
            VTDPropertyInfoBase pi3654 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1799 = new VTDObjectSetter(pi3654);
            binding_setter1799 = new StringFormaterDecorator(binding_setter1799,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir1799 = new BindDirection(_flow.DbFetchData250,binding_getter1855,binding_setter1799,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1799);
            VTDPropertyInfoBase pi3655 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1856 = new VTDXPathGetter(pi3655,XmlTypeCode.String);
            binding_getter1856 = new XPathGetterDecorator(binding_getter1856,"{Array0}",1);
            VTDPropertyInfoBase pi3656 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1800 = new VTDObjectSetter(pi3656);
            binding_setter1800 = new StringFormaterDecorator(binding_setter1800,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1800 = new BindDirection(_flow.DbFetchData248,binding_getter1856,binding_setter1800,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1800);
            VTDPropertyInfoBase pi3657 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1857 = new VTDObjectGetter(pi3657);
            VTDPropertyInfoBase pi3658 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1801 = new VTDObjectSetter(pi3658);
            bind_dir1801 = new BindDirection(_flow.DbOpenConnection39,binding_getter1857,binding_setter1801,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1801);
            XmlDocument DbFetchData251_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData251_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData251_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData251.ExpectedOutputProperties = DbFetchData251_ExpectedOutputProperties_Document;
            _flow.CallQTPTest252.Comment = @"";
            _flow.CallQTPTest252.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest252.Name = @"Encryption.SHA1";
            _flow.CallQTPTest252.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ScriptPath}");
            _flow.CallQTPTest252.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ActionName}");
            _flow.CallQTPTest252.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.Description}");
            _flow.CallQTPTest252.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.IsActionSelected}");
            _flow.CallQTPTest252.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ResultLocation}");
            _flow.CallQTPTest252.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.QCScriptPath}");
            _flow.DbFetchData253.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData253.Timeout = (int)30;
            _flow.DbFetchData253.Comment = @"";
            _flow.DbFetchData253.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData253.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi3659 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1858 = new VTDObjectGetter(pi3659);
            VTDPropertyInfoBase pi3660 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1802 = new VTDObjectSetter(pi3660);
            bind_dir1802 = new BindDirection(_flow.DbOpenConnection39,binding_getter1858,binding_setter1802,BindTargetType.ToInProperty);
            _flow.DbFetchData253.InDirections.Add(bind_dir1802);
            XmlDocument DbFetchData253_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData253_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData253_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData253.ExpectedOutputProperties = DbFetchData253_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop56.NumberOfIterations = (int)1;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_modifyroomname_verification中的测试用例";
            VTDPropertyInfoBase pi3661 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter1859 = new VTDXPathGetter(pi3661,XmlTypeCode.Long);
            binding_getter1859 = new XPathGetterDecorator(binding_getter1859,"{Array0}",1);
            VTDPropertyInfoBase pi3662 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter1803 = new VTDObjectSetter(pi3662);
            bind_dir1803 = new BindDirection(_flow.DbFetchData58,binding_getter1859,binding_setter1803,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir1803);
            _flow.Loop56.Activities.Add (this.DataCursorActivity265);
            _flow.Loop56.Activities.Add (_flow.Sequence256);
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3663 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1860 = new VTDObjectGetter(pi3663);
            VTDPropertyInfoBase pi3664 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1804 = new VTDObjectSetter(pi3664);
            bind_dir1804 = new BindDirection(_flow.DbOpenConnection39,binding_getter1860,binding_setter1804,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir1804);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}DcVvwMFWs5{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/xmp/createGroup.php接口token实行加密";
            VTDPropertyInfoBase pi3665 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1861 = new VTDXPathGetter(pi3665,XmlTypeCode.String);
            binding_getter1861 = new XPathGetterDecorator(binding_getter1861,"{Array0}",1);
            VTDPropertyInfoBase pi3666 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1805 = new VTDObjectSetter(pi3666);
            binding_setter1805 = new StringFormaterDecorator(binding_setter1805,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1805 = new BindDirection(_flow.DbFetchData247,binding_getter1861,binding_setter1805,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1805);
            VTDPropertyInfoBase pi3667 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1862 = new VTDXPathGetter(pi3667,XmlTypeCode.String);
            binding_getter1862 = new XPathGetterDecorator(binding_getter1862,"{Array0}",1);
            VTDPropertyInfoBase pi3668 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1806 = new VTDObjectSetter(pi3668);
            binding_setter1806 = new StringFormaterDecorator(binding_setter1806,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1806 = new BindDirection(_flow.DbFetchData248,binding_getter1862,binding_setter1806,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1806);
            VTDPropertyInfoBase pi3669 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1863 = new VTDObjectGetter(pi3669);
            VTDPropertyInfoBase pi3670 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1807 = new VTDObjectSetter(pi3670);
            bind_dir1807 = new BindDirection(_flow.DbOpenConnection39,binding_getter1863,binding_setter1807,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1807);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi3671 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1864 = new VTDObjectGetter(pi3671);
            VTDPropertyInfoBase pi3672 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1808 = new VTDObjectSetter(pi3672);
            bind_dir1808 = new BindDirection(_flow.DbOpenConnection39,binding_getter1864,binding_setter1808,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir1808);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}&roomJid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}&Jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&roomName=更新测试群&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.modifyRoomName}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/xmp/createGroup.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi3673 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1865 = new VTDObjectGetter(pi3673);
            VTDPropertyInfoBase pi3674 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1809 = new VTDObjectSetter(pi3674);
            binding_setter1809 = new StringFormaterDecorator(binding_setter1809,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1809 = new BindDirection(this.DataCursorActivity264,binding_getter1865,binding_setter1809,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1809);
            VTDPropertyInfoBase pi3675 = new VTDPropertyInfoBase("modifyRoomName");
            VTDBaseGetter binding_getter1866 = new VTDObjectGetter(pi3675);
            VTDPropertyInfoBase pi3676 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1810 = new VTDObjectSetter(pi3676);
            binding_setter1810 = new StringFormaterDecorator(binding_setter1810,"{DataSource.tb_global_table.modifyRoomName}");
            bind_dir1810 = new BindDirection(this.DataCursorActivity264,binding_getter1866,binding_setter1810,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1810);
            VTDPropertyInfoBase pi3677 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1867 = new VTDObjectGetter(pi3677);
            VTDPropertyInfoBase pi3678 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1811 = new VTDObjectSetter(pi3678);
            binding_setter1811 = new StringFormaterDecorator(binding_setter1811,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1811 = new BindDirection(this.DataCursorActivity264,binding_getter1867,binding_setter1811,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1811);
            VTDPropertyInfoBase pi3679 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1868 = new VTDObjectGetter(pi3679);
            VTDPropertyInfoBase pi3680 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1812 = new VTDObjectSetter(pi3680);
            binding_setter1812 = new StringFormaterDecorator(binding_setter1812,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1812 = new BindDirection(this.DataCursorActivity264,binding_getter1868,binding_setter1812,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1812);
            VTDPropertyInfoBase pi3681 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1869 = new VTDXPathGetter(pi3681,XmlTypeCode.String);
            binding_getter1869 = new XPathGetterDecorator(binding_getter1869,"{Array0}",1);
            VTDPropertyInfoBase pi3682 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1813 = new VTDObjectSetter(pi3682);
            binding_setter1813 = new StringFormaterDecorator(binding_setter1813,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1813 = new BindDirection(_flow.DbFetchData247,binding_getter1869,binding_setter1813,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1813);
            VTDPropertyInfoBase pi3683 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1870 = new VTDXPathGetter(pi3683,XmlTypeCode.String);
            binding_getter1870 = new XPathGetterDecorator(binding_getter1870,"{Array0}",1);
            VTDPropertyInfoBase pi3684 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1814 = new VTDObjectSetter(pi3684);
            binding_setter1814 = new StringFormaterDecorator(binding_setter1814,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1814 = new BindDirection(_flow.DbFetchData248,binding_getter1870,binding_setter1814,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1814);
            VTDPropertyInfoBase pi3685 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1871 = new VTDObjectGetter(pi3685);
            VTDPropertyInfoBase pi3686 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1815 = new VTDObjectSetter(pi3686);
            binding_setter1815 = new StringFormaterDecorator(binding_setter1815,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1815 = new BindDirection(this.DataCursorActivity264,binding_getter1871,binding_setter1815,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1815);
            VTDPropertyInfoBase pi3687 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1872 = new VTDXPathGetter(pi3687,XmlTypeCode.String);
            binding_getter1872 = new XPathGetterDecorator(binding_getter1872,"{Array0}",1);
            VTDPropertyInfoBase pi3688 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1816 = new VTDObjectSetter(pi3688);
            binding_setter1816 = new StringFormaterDecorator(binding_setter1816,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir1816 = new BindDirection(_flow.DbFetchData76,binding_getter1872,binding_setter1816,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1816);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/xmp/modifyRoomName.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi3689 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1873 = new VTDObjectGetter(pi3689);
            VTDPropertyInfoBase pi3690 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1817 = new VTDObjectSetter(pi3690);
            binding_setter1817 = new StringFormaterDecorator(binding_setter1817,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir1817 = new BindDirection(_flow.HTTPActivity73,binding_getter1873,binding_setter1817,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1817);
            VTDPropertyInfoBase pi3691 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1874 = new VTDObjectGetter(pi3691);
            VTDPropertyInfoBase pi3692 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1818 = new VTDObjectSetter(pi3692);
            bind_dir1818 = new BindDirection(_flow.DbOpenConnection39,binding_getter1874,binding_setter1818,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1818);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity265.Comment = @"";
            this.DataCursorActivity265.IconPath = @"";
            VTDPropertyInfoBase pi3693 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1875 = new VTDObjectGetter(pi3693);
            VTDPropertyInfoBase pi3694 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1819 = new VTDObjectSetter(pi3694);
            binding_setter1819 = new StringFormaterDecorator(binding_setter1819,"{Step.DataFetchActivity257.OutTable}");
            bind_dir1819 = new BindDirection(_flow.DataFetchActivity257,binding_getter1875,binding_setter1819,BindTargetType.ToInProperty);
            this.DataCursorActivity265.InDirections.Add(bind_dir1819);
            this.DataCursorActivity265_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity265_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.StartCondition.Value = "";
            this.DataCursorActivity265_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity265_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.EndCondition.Value = "";
            this.DataCursorActivity265_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity265_Policy.StepSize = 1;
            this.DataCursorActivity265_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity265.Policy = this.DataCursorActivity265_Policy;
            this.DataCursorActivity265.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity265.ResetCursor;
            _flow.Sequence256.Comment = @"";
            _flow.Sequence256.IconPath = @"";
            _flow.Sequence256.Name = @"序列256";
            _flow.Sequence256.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence256.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence256.Activities.Add (_flow.ReplaceStringActivity254);
            _flow.Sequence256.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence256.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence256.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,roomJid,roomName,Jid,token from tb_modifyroomname_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_modifyroomname_verification表中字段信息";
            VTDPropertyInfoBase pi3695 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1876 = new VTDObjectGetter(pi3695);
            VTDPropertyInfoBase pi3696 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1820 = new VTDObjectSetter(pi3696);
            binding_setter1820 = new StringFormaterDecorator(binding_setter1820,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1820 = new BindDirection(_flow.Loop56,binding_getter1876,binding_setter1820,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1820);
            VTDPropertyInfoBase pi3697 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1877 = new VTDObjectGetter(pi3697);
            VTDPropertyInfoBase pi3698 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1821 = new VTDObjectSetter(pi3698);
            bind_dir1821 = new BindDirection(_flow.DbOpenConnection39,binding_getter1877,binding_setter1821,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1821);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><roomJid /><roomName /><Jid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi3699 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter1878 = new VTDXPathGetter(pi3699,XmlTypeCode.String);
            binding_getter1878 = new XPathGetterDecorator(binding_getter1878,"{Array0}",1);
            VTDPropertyInfoBase pi3700 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1822 = new VTDObjectSetter(pi3700);
            binding_setter1822 = new StringFormaterDecorator(binding_setter1822,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir1822 = new BindDirection(_flow.DbFetchData57,binding_getter1878,binding_setter1822,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir1822);
            VTDPropertyInfoBase pi3701 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1879 = new VTDXPathGetter(pi3701,XmlTypeCode.String);
            binding_getter1879 = new XPathGetterDecorator(binding_getter1879,"{Array0}",1);
            VTDPropertyInfoBase pi3702 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1823 = new VTDObjectSetter(pi3702);
            binding_setter1823 = new StringFormaterDecorator(binding_setter1823,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir1823 = new BindDirection(_flow.DbFetchData250,binding_getter1879,binding_setter1823,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir1823);
            _flow.ReplaceStringActivity254.SourceString = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}";
            _flow.ReplaceStringActivity254.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity254.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity254.SearchReplaceString[0].Key = @"b84ff35507754b1db1631c26abdc61f0@muc.365ime.com";
            _flow.ReplaceStringActivity254.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}";
            _flow.ReplaceStringActivity254.CaseSensitive = true;
            _flow.ReplaceStringActivity254.Comment = @"";
            _flow.ReplaceStringActivity254.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity254.Name = @"将roomJid更新至最新值";
            VTDPropertyInfoBase pi3703 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1880 = new VTDXPathGetter(pi3703,XmlTypeCode.String);
            binding_getter1880 = new XPathGetterDecorator(binding_getter1880,"{Array0}",1);
            VTDPropertyInfoBase pi3704 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1824 = new VTDObjectSetter(pi3704);
            binding_setter1824 = new StringFormaterDecorator(binding_setter1824,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1824 = new BindDirection(_flow.DbFetchData248,binding_getter1880,binding_setter1824,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity254.InDirections.Add(bind_dir1824);
            VTDPropertyInfoBase pi3705 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1881 = new VTDXPathGetter(pi3705,XmlTypeCode.String);
            binding_getter1881 = new XPathGetterDecorator(binding_getter1881,"{Array0}",1);
            VTDPropertyInfoBase pi3706 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1825 = new VTDObjectSetter(pi3706);
            binding_setter1825 = new StringFormaterDecorator(binding_setter1825,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].groupJid}");
            bind_dir1825 = new BindDirection(_flow.DbFetchData248,binding_getter1881,binding_setter1825,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity254.InDirections.Add(bind_dir1825);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}&roomJid={Step.OutputProperties.ReplaceStringActivity254.Result}&Jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}&roomName={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomName}&token={Step.OutputProperties.DbFetchData253.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.modifyRoomName}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/xmp/modifyRoomName.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi3707 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1882 = new VTDObjectGetter(pi3707);
            VTDPropertyInfoBase pi3708 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1826 = new VTDObjectSetter(pi3708);
            binding_setter1826 = new StringFormaterDecorator(binding_setter1826,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1826 = new BindDirection(this.DataCursorActivity265,binding_getter1882,binding_setter1826,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1826);
            VTDPropertyInfoBase pi3709 = new VTDPropertyInfoBase("modifyRoomName");
            VTDBaseGetter binding_getter1883 = new VTDObjectGetter(pi3709);
            VTDPropertyInfoBase pi3710 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1827 = new VTDObjectSetter(pi3710);
            binding_setter1827 = new StringFormaterDecorator(binding_setter1827,"{DataSource.tb_global_table.modifyRoomName}");
            bind_dir1827 = new BindDirection(this.DataCursorActivity265,binding_getter1883,binding_setter1827,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1827);
            VTDPropertyInfoBase pi3711 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1884 = new VTDObjectGetter(pi3711);
            VTDPropertyInfoBase pi3712 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1828 = new VTDObjectSetter(pi3712);
            binding_setter1828 = new StringFormaterDecorator(binding_setter1828,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1828 = new BindDirection(this.DataCursorActivity265,binding_getter1884,binding_setter1828,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1828);
            VTDPropertyInfoBase pi3713 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1885 = new VTDObjectGetter(pi3713);
            VTDPropertyInfoBase pi3714 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1829 = new VTDObjectSetter(pi3714);
            binding_setter1829 = new StringFormaterDecorator(binding_setter1829,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1829 = new BindDirection(this.DataCursorActivity265,binding_getter1885,binding_setter1829,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1829);
            VTDPropertyInfoBase pi3715 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1886 = new VTDXPathGetter(pi3715,XmlTypeCode.String);
            binding_getter1886 = new XPathGetterDecorator(binding_getter1886,"{Array0}",1);
            VTDPropertyInfoBase pi3716 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1830 = new VTDObjectSetter(pi3716);
            binding_setter1830 = new StringFormaterDecorator(binding_setter1830,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir1830 = new BindDirection(_flow.DbFetchData250,binding_getter1886,binding_setter1830,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1830);
            VTDPropertyInfoBase pi3717 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1887 = new VTDObjectGetter(pi3717);
            VTDPropertyInfoBase pi3718 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1831 = new VTDObjectSetter(pi3718);
            binding_setter1831 = new StringFormaterDecorator(binding_setter1831,"{Step.OutputProperties.ReplaceStringActivity254.Result}");
            bind_dir1831 = new BindDirection(_flow.ReplaceStringActivity254,binding_getter1887,binding_setter1831,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1831);
            VTDPropertyInfoBase pi3719 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter1888 = new VTDXPathGetter(pi3719,XmlTypeCode.String);
            binding_getter1888 = new XPathGetterDecorator(binding_getter1888,"{Array0}",1);
            VTDPropertyInfoBase pi3720 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1832 = new VTDObjectSetter(pi3720);
            binding_setter1832 = new StringFormaterDecorator(binding_setter1832,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir1832 = new BindDirection(_flow.DbFetchData57,binding_getter1888,binding_setter1832,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1832);
            VTDPropertyInfoBase pi3721 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='roomName'][1]");
            VTDBaseGetter binding_getter1889 = new VTDXPathGetter(pi3721,XmlTypeCode.String);
            binding_getter1889 = new XPathGetterDecorator(binding_getter1889,"{Array0}",1);
            VTDPropertyInfoBase pi3722 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1833 = new VTDObjectSetter(pi3722);
            binding_setter1833 = new StringFormaterDecorator(binding_setter1833,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomName}");
            bind_dir1833 = new BindDirection(_flow.DbFetchData57,binding_getter1889,binding_setter1833,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1833);
            VTDPropertyInfoBase pi3723 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1890 = new VTDXPathGetter(pi3723,XmlTypeCode.String);
            binding_getter1890 = new XPathGetterDecorator(binding_getter1890,"{Array0}",1);
            VTDPropertyInfoBase pi3724 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1834 = new VTDObjectSetter(pi3724);
            binding_setter1834 = new StringFormaterDecorator(binding_setter1834,"{Step.OutputProperties.DbFetchData253.ResultTable.Row[1].EncryptionResult}");
            bind_dir1834 = new BindDirection(_flow.DbFetchData253,binding_getter1890,binding_setter1834,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1834);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi3725 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1891 = new VTDObjectGetter(pi3725);
            VTDPropertyInfoBase pi3726 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1835 = new VTDObjectSetter(pi3726);
            binding_setter1835 = new StringFormaterDecorator(binding_setter1835,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1835 = new BindDirection(_flow.HTTPActivity59,binding_getter1891,binding_setter1835,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir1835);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_modifyroomname_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi3727 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1892 = new VTDObjectGetter(pi3727);
            VTDPropertyInfoBase pi3728 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1836 = new VTDObjectSetter(pi3728);
            binding_setter1836 = new StringFormaterDecorator(binding_setter1836,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1836 = new BindDirection(_flow.HTTPActivity59,binding_getter1892,binding_setter1836,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1836);
            VTDPropertyInfoBase pi3729 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1893 = new VTDObjectGetter(pi3729);
            VTDPropertyInfoBase pi3730 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1837 = new VTDObjectSetter(pi3730);
            binding_setter1837 = new StringFormaterDecorator(binding_setter1837,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1837 = new BindDirection(_flow.Loop56,binding_getter1893,binding_setter1837,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1837);
            VTDPropertyInfoBase pi3731 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1894 = new VTDObjectGetter(pi3731);
            VTDPropertyInfoBase pi3732 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1838 = new VTDObjectSetter(pi3732);
            bind_dir1838 = new BindDirection(_flow.DbOpenConnection39,binding_getter1894,binding_setter1838,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1838);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_modifyroomname_verification set OutputValue= 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi3733 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1895 = new VTDJsonGetter(pi3733);
            VTDPropertyInfoBase pi3734 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1839 = new VTDObjectSetter(pi3734);
            binding_setter1839 = new StringFormaterDecorator(binding_setter1839,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir1839 = new BindDirection(_flow.StringToJsonActivity60,binding_getter1895,binding_setter1839,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1839);
            VTDPropertyInfoBase pi3735 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1896 = new VTDObjectGetter(pi3735);
            VTDPropertyInfoBase pi3736 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1840 = new VTDObjectSetter(pi3736);
            binding_setter1840 = new StringFormaterDecorator(binding_setter1840,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1840 = new BindDirection(_flow.Loop56,binding_getter1896,binding_setter1840,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1840);
            VTDPropertyInfoBase pi3737 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1897 = new VTDObjectGetter(pi3737);
            VTDPropertyInfoBase pi3738 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1841 = new VTDObjectSetter(pi3738);
            bind_dir1841 = new BindDirection(_flow.DbOpenConnection39,binding_getter1897,binding_setter1841,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1841);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_modifyroomname_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi3739 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1898 = new VTDObjectGetter(pi3739);
            VTDPropertyInfoBase pi3740 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1842 = new VTDObjectSetter(pi3740);
            binding_setter1842 = new StringFormaterDecorator(binding_setter1842,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1842 = new BindDirection(_flow.Loop56,binding_getter1898,binding_setter1842,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1842);
            VTDPropertyInfoBase pi3741 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1899 = new VTDObjectGetter(pi3741);
            VTDPropertyInfoBase pi3742 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1843 = new VTDObjectSetter(pi3742);
            bind_dir1843 = new BindDirection(_flow.DbOpenConnection39,binding_getter1899,binding_setter1843,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1843);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_modifyroomname_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi3743 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1900 = new VTDObjectGetter(pi3743);
            VTDPropertyInfoBase pi3744 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1844 = new VTDObjectSetter(pi3744);
            binding_setter1844 = new StringFormaterDecorator(binding_setter1844,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1844 = new BindDirection(_flow.Loop56,binding_getter1900,binding_setter1844,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1844);
            VTDPropertyInfoBase pi3745 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1901 = new VTDObjectGetter(pi3745);
            VTDPropertyInfoBase pi3746 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1845 = new VTDObjectSetter(pi3746);
            bind_dir1845 = new BindDirection(_flow.DbOpenConnection39,binding_getter1901,binding_setter1845,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1845);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi3747 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1902 = new VTDXPathGetter(pi3747,XmlTypeCode.String);
            binding_getter1902 = new XPathGetterDecorator(binding_getter1902,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter1902),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi3748 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1903 = new VTDXPathGetter(pi3748,XmlTypeCode.String);
            binding_getter1903 = new XPathGetterDecorator(binding_getter1903,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter1903),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_modifyroomname_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi3749 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1904 = new VTDObjectGetter(pi3749);
            VTDPropertyInfoBase pi3750 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1846 = new VTDObjectSetter(pi3750);
            binding_setter1846 = new StringFormaterDecorator(binding_setter1846,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1846 = new BindDirection(_flow.Loop56,binding_getter1904,binding_setter1846,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1846);
            VTDPropertyInfoBase pi3751 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1905 = new VTDObjectGetter(pi3751);
            VTDPropertyInfoBase pi3752 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1847 = new VTDObjectSetter(pi3752);
            bind_dir1847 = new BindDirection(_flow.DbOpenConnection39,binding_getter1905,binding_setter1847,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1847);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_modifyroomname_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi3753 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1906 = new VTDObjectGetter(pi3753);
            VTDPropertyInfoBase pi3754 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1848 = new VTDObjectSetter(pi3754);
            binding_setter1848 = new StringFormaterDecorator(binding_setter1848,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1848 = new BindDirection(_flow.Loop56,binding_getter1906,binding_setter1848,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1848);
            VTDPropertyInfoBase pi3755 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1907 = new VTDObjectGetter(pi3755);
            VTDPropertyInfoBase pi3756 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1849 = new VTDObjectSetter(pi3756);
            bind_dir1849 = new BindDirection(_flow.DbOpenConnection39,binding_getter1907,binding_setter1849,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1849);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    