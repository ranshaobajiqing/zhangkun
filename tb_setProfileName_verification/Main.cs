/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_setProfileName_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1202 = null;
        public BindDirection bind_dir1203 = null;
        public BindDirection bind_dir1204 = null;
        public BindDirection bind_dir1205 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity265 = null;
        public BindDirection bind_dir1206 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity265_Policy = null;
        public BindDirection bind_dir1207 = null;
        public BindDirection bind_dir1208 = null;
        public BindDirection bind_dir1209 = null;
        public BindDirection bind_dir1210 = null;
        public BindDirection bind_dir1211 = null;
        public BindDirection bind_dir1212 = null;
        public BindDirection bind_dir1213 = null;
        public BindDirection bind_dir1214 = null;
        public BindDirection bind_dir1215 = null;
        public BindDirection bind_dir1216 = null;
        public BindDirection bind_dir1217 = null;
        public BindDirection bind_dir1218 = null;
        public BindDirection bind_dir1219 = null;
        public BindDirection bind_dir1220 = null;
        public BindDirection bind_dir1221 = null;
        public BindDirection bind_dir1222 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity266 = null;
        public BindDirection bind_dir1223 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity266_Policy = null;
        public BindDirection bind_dir1224 = null;
        public BindDirection bind_dir1225 = null;
        public BindDirection bind_dir1226 = null;
        public BindDirection bind_dir1227 = null;
        public BindDirection bind_dir1228 = null;
        public BindDirection bind_dir1229 = null;
        public BindDirection bind_dir1230 = null;
        public BindDirection bind_dir1231 = null;
        public BindDirection bind_dir1232 = null;
        public BindDirection bind_dir1233 = null;
        public BindDirection bind_dir1234 = null;
        public BindDirection bind_dir1235 = null;
        public BindDirection bind_dir1236 = null;
        public BindDirection bind_dir1237 = null;
        public BindDirection bind_dir1238 = null;
        public BindDirection bind_dir1239 = null;
        public BindDirection bind_dir1240 = null;
        public BindDirection bind_dir1241 = null;
        public BindDirection bind_dir1242 = null;
        public BindDirection bind_dir1243 = null;
        public BindDirection bind_dir1244 = null;
        public BindDirection bind_dir1245 = null;
        public BindDirection bind_dir1246 = null;
        public BindDirection bind_dir1247 = null;
        public BindDirection bind_dir1248 = null;
        public BindDirection bind_dir1249 = null;
        public BindDirection bind_dir1250 = null;
        public BindDirection bind_dir1251 = null;
        public BindDirection bind_dir1252 = null;
        public BindDirection bind_dir1253 = null;
        public BindDirection bind_dir1254 = null;
        public BindDirection bind_dir1255 = null;
        public BindDirection bind_dir1256 = null;
        public BindDirection bind_dir1257 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity261 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity261");
            _flow.DataFetchActivity258 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity258");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity260 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity260");
            _flow.DataExporterActivity263 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity263");
            _flow.DataExporterCloseActivity264 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity264");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity259 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity259");
            _flow.DataDisconnectActivity262 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity262");
            this.DataCursorActivity265 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity265");
            this.DataCursorActivity265_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence256 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence256");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity266 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity266");
            this.DataCursorActivity266_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence257 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence257");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.DbFetchData251 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData251");
            _flow.CallQTPTest252 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest252");
            _flow.DbFetchData253 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData253");
            _flow.ReplaceStringActivity255 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity255");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity261.Comment = @"";
            _flow.DataFetchActivity261.IconPath = @"";
            _flow.DataFetchActivity261.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity261.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity261_QueryParameters_Document = new XmlDocument();
            DataFetchActivity261_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity261Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity261_QueryParameters_Document.LoadXml(xmlDataFetchActivity261Params);
            _flow.DataFetchActivity261.QueryParameters = DataFetchActivity261_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity261);
            this.Activities.Add (_flow.DataFetchActivity261);
            _flow.DataFetchActivity258.Comment = @"";
            _flow.DataFetchActivity258.IconPath = @"";
            _flow.DataFetchActivity258.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity258.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity258_QueryParameters_Document = new XmlDocument();
            DataFetchActivity258_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity258Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity258_QueryParameters_Document.LoadXml(xmlDataFetchActivity258Params);
            _flow.DataFetchActivity258.QueryParameters = DataFetchActivity258_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity258);
            this.Activities.Add (_flow.DataFetchActivity258);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity265);
            _flow.Loop2.Activities.Add (_flow.Sequence256);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity260.Comment = @"";
            _flow.DataExporterActivity260.IconPath = @"";
            VTDPropertyInfoBase pi2445 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1244 = new VTDObjectGetter(pi2445);
            VTDPropertyInfoBase pi2446 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1202 = new VTDObjectSetter(pi2446);
            binding_setter1202 = new StringFormaterDecorator(binding_setter1202,"{Step.DataFetchActivity258.OutTable}");
            bind_dir1202 = new BindDirection(_flow.DataFetchActivity258,binding_getter1244,binding_setter1202,BindTargetType.ToInProperty);
            _flow.DataExporterActivity260.InDirections.Add(bind_dir1202);
            this.Activities.Add (_flow.DataExporterActivity260);
            _flow.DataExporterActivity263.Comment = @"";
            _flow.DataExporterActivity263.IconPath = @"";
            VTDPropertyInfoBase pi2447 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1245 = new VTDObjectGetter(pi2447);
            VTDPropertyInfoBase pi2448 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1203 = new VTDObjectSetter(pi2448);
            binding_setter1203 = new StringFormaterDecorator(binding_setter1203,"{Step.DataFetchActivity261.OutTable}");
            bind_dir1203 = new BindDirection(_flow.DataFetchActivity261,binding_getter1245,binding_setter1203,BindTargetType.ToInProperty);
            _flow.DataExporterActivity263.InDirections.Add(bind_dir1203);
            this.Activities.Add (_flow.DataExporterActivity263);
            _flow.DataExporterCloseActivity264.Comment = @"";
            _flow.DataExporterCloseActivity264.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity264);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity259.Comment = @"";
            _flow.DataDisconnectActivity259.IconPath = @"";
            VTDPropertyInfoBase pi2449 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1246 = new VTDObjectGetter(pi2449);
            VTDPropertyInfoBase pi2450 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1204 = new VTDObjectSetter(pi2450);
            binding_setter1204 = new StringFormaterDecorator(binding_setter1204,"{Step.DataFetchActivity258.OutTable}");
            bind_dir1204 = new BindDirection(_flow.DataFetchActivity258,binding_getter1246,binding_setter1204,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity259.InDirections.Add(bind_dir1204);
            this.Activities.Add (_flow.DataDisconnectActivity259);
            _flow.DataDisconnectActivity262.Comment = @"";
            _flow.DataDisconnectActivity262.IconPath = @"";
            VTDPropertyInfoBase pi2451 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1247 = new VTDObjectGetter(pi2451);
            VTDPropertyInfoBase pi2452 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1205 = new VTDObjectSetter(pi2452);
            binding_setter1205 = new StringFormaterDecorator(binding_setter1205,"{Step.DataFetchActivity261.OutTable}");
            bind_dir1205 = new BindDirection(_flow.DataFetchActivity261,binding_getter1247,binding_setter1205,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity262.InDirections.Add(bind_dir1205);
            this.Activities.Add (_flow.DataDisconnectActivity262);
            this.DataCursorActivity265.Comment = @"";
            this.DataCursorActivity265.IconPath = @"";
            VTDPropertyInfoBase pi2453 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1248 = new VTDObjectGetter(pi2453);
            VTDPropertyInfoBase pi2454 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1206 = new VTDObjectSetter(pi2454);
            binding_setter1206 = new StringFormaterDecorator(binding_setter1206,"{Step.DataFetchActivity258.OutTable}");
            bind_dir1206 = new BindDirection(_flow.DataFetchActivity258,binding_getter1248,binding_setter1206,BindTargetType.ToInProperty);
            this.DataCursorActivity265.InDirections.Add(bind_dir1206);
            this.DataCursorActivity265_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity265_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.StartCondition.Value = "";
            this.DataCursorActivity265_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity265_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.EndCondition.Value = "";
            this.DataCursorActivity265_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity265_Policy.StepSize = 1;
            this.DataCursorActivity265_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity265.Policy = this.DataCursorActivity265_Policy;
            this.DataCursorActivity265.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity265.ResetCursor;
            _flow.Sequence256.Comment = @"";
            _flow.Sequence256.IconPath = @"";
            _flow.Sequence256.Name = @"序列256";
            _flow.Sequence256.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence256.Activities.Add (_flow.Loop56);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence256.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence256.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_setProfileName_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_modifyroomname_verification表有效行数";
            VTDPropertyInfoBase pi2455 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1249 = new VTDObjectGetter(pi2455);
            VTDPropertyInfoBase pi2456 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1207 = new VTDObjectSetter(pi2456);
            bind_dir1207 = new BindDirection(_flow.DbOpenConnection39,binding_getter1249,binding_setter1207,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir1207);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData250.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi2457 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1250 = new VTDObjectGetter(pi2457);
            VTDPropertyInfoBase pi2458 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1208 = new VTDObjectSetter(pi2458);
            bind_dir1208 = new BindDirection(_flow.DbOpenConnection39,binding_getter1250,binding_setter1208,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir1208);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop56.NumberOfIterations = (int)1;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执tb_modifyroomname_verification中的测试用例";
            _flow.Loop56.Activities.Add (this.DataCursorActivity266);
            _flow.Loop56.Activities.Add (_flow.Sequence257);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6{DataSource.tb_global_table.LoginStudentUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/xmp/createGroup.php接口token实行加密";
            VTDPropertyInfoBase pi2459 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1251 = new VTDObjectGetter(pi2459);
            VTDPropertyInfoBase pi2460 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1209 = new VTDObjectSetter(pi2460);
            binding_setter1209 = new StringFormaterDecorator(binding_setter1209,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1209 = new BindDirection(this.DataCursorActivity265,binding_getter1251,binding_setter1209,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1209);
            VTDPropertyInfoBase pi2461 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter1252 = new VTDObjectGetter(pi2461);
            VTDPropertyInfoBase pi2462 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1210 = new VTDObjectSetter(pi2462);
            binding_setter1210 = new StringFormaterDecorator(binding_setter1210,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1210 = new BindDirection(this.DataCursorActivity265,binding_getter1252,binding_setter1210,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1210);
            VTDPropertyInfoBase pi2463 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1253 = new VTDObjectGetter(pi2463);
            VTDPropertyInfoBase pi2464 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1211 = new VTDObjectSetter(pi2464);
            bind_dir1211 = new BindDirection(_flow.DbOpenConnection39,binding_getter1253,binding_setter1211,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1211);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi2465 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1254 = new VTDObjectGetter(pi2465);
            VTDPropertyInfoBase pi2466 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1212 = new VTDObjectSetter(pi2466);
            bind_dir1212 = new BindDirection(_flow.DbOpenConnection39,binding_getter1254,binding_setter1212,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir1212);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}&myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&jid={DataSource.tb_global_table.LoginStudentUsername}@365ime.com&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}&name=测试修改其昵称";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.setProfileName}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/xmp/name.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi2467 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1255 = new VTDObjectGetter(pi2467);
            VTDPropertyInfoBase pi2468 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1213 = new VTDObjectSetter(pi2468);
            binding_setter1213 = new StringFormaterDecorator(binding_setter1213,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1213 = new BindDirection(this.DataCursorActivity265,binding_getter1255,binding_setter1213,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1213);
            VTDPropertyInfoBase pi2469 = new VTDPropertyInfoBase("setProfileName");
            VTDBaseGetter binding_getter1256 = new VTDObjectGetter(pi2469);
            VTDPropertyInfoBase pi2470 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1214 = new VTDObjectSetter(pi2470);
            binding_setter1214 = new StringFormaterDecorator(binding_setter1214,"{DataSource.tb_global_table.setProfileName}");
            bind_dir1214 = new BindDirection(this.DataCursorActivity265,binding_getter1256,binding_setter1214,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1214);
            VTDPropertyInfoBase pi2471 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1257 = new VTDObjectGetter(pi2471);
            VTDPropertyInfoBase pi2472 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1215 = new VTDObjectSetter(pi2472);
            binding_setter1215 = new StringFormaterDecorator(binding_setter1215,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1215 = new BindDirection(this.DataCursorActivity265,binding_getter1257,binding_setter1215,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1215);
            VTDPropertyInfoBase pi2473 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1258 = new VTDObjectGetter(pi2473);
            VTDPropertyInfoBase pi2474 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1216 = new VTDObjectSetter(pi2474);
            binding_setter1216 = new StringFormaterDecorator(binding_setter1216,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1216 = new BindDirection(this.DataCursorActivity265,binding_getter1258,binding_setter1216,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1216);
            VTDPropertyInfoBase pi2475 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1259 = new VTDXPathGetter(pi2475,XmlTypeCode.String);
            binding_getter1259 = new XPathGetterDecorator(binding_getter1259,"{Array0}",1);
            VTDPropertyInfoBase pi2476 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1217 = new VTDObjectSetter(pi2476);
            binding_setter1217 = new StringFormaterDecorator(binding_setter1217,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir1217 = new BindDirection(_flow.DbFetchData250,binding_getter1259,binding_setter1217,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1217);
            VTDPropertyInfoBase pi2477 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1260 = new VTDObjectGetter(pi2477);
            VTDPropertyInfoBase pi2478 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1218 = new VTDObjectSetter(pi2478);
            binding_setter1218 = new StringFormaterDecorator(binding_setter1218,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1218 = new BindDirection(this.DataCursorActivity265,binding_getter1260,binding_setter1218,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1218);
            VTDPropertyInfoBase pi2479 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter1261 = new VTDObjectGetter(pi2479);
            VTDPropertyInfoBase pi2480 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1219 = new VTDObjectSetter(pi2480);
            binding_setter1219 = new StringFormaterDecorator(binding_setter1219,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1219 = new BindDirection(this.DataCursorActivity265,binding_getter1261,binding_setter1219,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1219);
            VTDPropertyInfoBase pi2481 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1262 = new VTDXPathGetter(pi2481,XmlTypeCode.String);
            binding_getter1262 = new XPathGetterDecorator(binding_getter1262,"{Array0}",1);
            VTDPropertyInfoBase pi2482 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1220 = new VTDObjectSetter(pi2482);
            binding_setter1220 = new StringFormaterDecorator(binding_setter1220,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir1220 = new BindDirection(_flow.DbFetchData76,binding_getter1262,binding_setter1220,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1220);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/xmp/name.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi2483 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1263 = new VTDObjectGetter(pi2483);
            VTDPropertyInfoBase pi2484 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1221 = new VTDObjectSetter(pi2484);
            binding_setter1221 = new StringFormaterDecorator(binding_setter1221,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir1221 = new BindDirection(_flow.HTTPActivity73,binding_getter1263,binding_setter1221,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1221);
            VTDPropertyInfoBase pi2485 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1264 = new VTDObjectGetter(pi2485);
            VTDPropertyInfoBase pi2486 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1222 = new VTDObjectSetter(pi2486);
            bind_dir1222 = new BindDirection(_flow.DbOpenConnection39,binding_getter1264,binding_setter1222,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1222);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity266.Comment = @"";
            this.DataCursorActivity266.IconPath = @"";
            VTDPropertyInfoBase pi2487 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1265 = new VTDObjectGetter(pi2487);
            VTDPropertyInfoBase pi2488 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1223 = new VTDObjectSetter(pi2488);
            binding_setter1223 = new StringFormaterDecorator(binding_setter1223,"{Step.DataFetchActivity258.OutTable}");
            bind_dir1223 = new BindDirection(_flow.DataFetchActivity258,binding_getter1265,binding_setter1223,BindTargetType.ToInProperty);
            this.DataCursorActivity266.InDirections.Add(bind_dir1223);
            this.DataCursorActivity266_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity266_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.StartCondition.Value = "";
            this.DataCursorActivity266_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity266_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.EndCondition.Value = "";
            this.DataCursorActivity266_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity266_Policy.StepSize = 1;
            this.DataCursorActivity266_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity266.Policy = this.DataCursorActivity266_Policy;
            this.DataCursorActivity266.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity266.ResetCursor;
            _flow.Sequence257.Comment = @"";
            _flow.Sequence257.IconPath = @"";
            _flow.Sequence257.Name = @"序列257";
            _flow.Sequence257.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData251);
            _flow.Sequence257.Activities.Add (_flow.CallQTPTest252);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData253);
            _flow.Sequence257.Activities.Add (_flow.ReplaceStringActivity255);
            _flow.Sequence257.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence257.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence257.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence257.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,Jid,name,myJid,token from tb_setProfileName_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_setProfileName_verification表中字段信息";
            VTDPropertyInfoBase pi2489 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1266 = new VTDObjectGetter(pi2489);
            VTDPropertyInfoBase pi2490 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1224 = new VTDObjectSetter(pi2490);
            binding_setter1224 = new StringFormaterDecorator(binding_setter1224,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1224 = new BindDirection(_flow.Loop56,binding_getter1266,binding_setter1224,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1224);
            VTDPropertyInfoBase pi2491 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1267 = new VTDObjectGetter(pi2491);
            VTDPropertyInfoBase pi2492 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1225 = new VTDObjectSetter(pi2492);
            bind_dir1225 = new BindDirection(_flow.DbOpenConnection39,binding_getter1267,binding_setter1225,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1225);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><Jid /><name /><myJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.DbFetchData251.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}DeVawMFWs6{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}' where TestCase = 1";
            _flow.DbFetchData251.Timeout = (int)30;
            _flow.DbFetchData251.Comment = @"";
            _flow.DbFetchData251.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData251.Name = @"对/xmp/modifyRoomName.php接口token实行加密";
            VTDPropertyInfoBase pi2493 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter1268 = new VTDXPathGetter(pi2493,XmlTypeCode.String);
            binding_getter1268 = new XPathGetterDecorator(binding_getter1268,"{Array0}",1);
            VTDPropertyInfoBase pi2494 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1226 = new VTDObjectSetter(pi2494);
            binding_setter1226 = new StringFormaterDecorator(binding_setter1226,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir1226 = new BindDirection(_flow.DbFetchData57,binding_getter1268,binding_setter1226,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1226);
            VTDPropertyInfoBase pi2495 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter1269 = new VTDXPathGetter(pi2495,XmlTypeCode.String);
            binding_getter1269 = new XPathGetterDecorator(binding_getter1269,"{Array0}",1);
            VTDPropertyInfoBase pi2496 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1227 = new VTDObjectSetter(pi2496);
            binding_setter1227 = new StringFormaterDecorator(binding_setter1227,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir1227 = new BindDirection(_flow.DbFetchData57,binding_getter1269,binding_setter1227,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1227);
            VTDPropertyInfoBase pi2497 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1270 = new VTDObjectGetter(pi2497);
            VTDPropertyInfoBase pi2498 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1228 = new VTDObjectSetter(pi2498);
            bind_dir1228 = new BindDirection(_flow.DbOpenConnection39,binding_getter1270,binding_setter1228,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1228);
            XmlDocument DbFetchData251_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData251_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData251_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData251.ExpectedOutputProperties = DbFetchData251_ExpectedOutputProperties_Document;
            _flow.CallQTPTest252.Comment = @"";
            _flow.CallQTPTest252.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest252.Name = @"Encryption.SHA1";
            _flow.CallQTPTest252.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ScriptPath}");
            _flow.CallQTPTest252.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ActionName}");
            _flow.CallQTPTest252.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.Description}");
            _flow.CallQTPTest252.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.IsActionSelected}");
            _flow.CallQTPTest252.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.ResultLocation}");
            _flow.CallQTPTest252.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest252.QCScriptPath}");
            _flow.DbFetchData253.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData253.Timeout = (int)30;
            _flow.DbFetchData253.Comment = @"";
            _flow.DbFetchData253.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData253.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi2499 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1271 = new VTDObjectGetter(pi2499);
            VTDPropertyInfoBase pi2500 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1229 = new VTDObjectSetter(pi2500);
            bind_dir1229 = new BindDirection(_flow.DbOpenConnection39,binding_getter1271,binding_setter1229,BindTargetType.ToInProperty);
            _flow.DbFetchData253.InDirections.Add(bind_dir1229);
            XmlDocument DbFetchData253_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData253_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData253_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData253.ExpectedOutputProperties = DbFetchData253_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity255.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity255.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity255.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity255.SearchReplaceString[0].Key = @"b7bf9dd48970c484fbf991dad673a4efec488698";
            _flow.ReplaceStringActivity255.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData253.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity255.CaseSensitive = true;
            _flow.ReplaceStringActivity255.Comment = @"";
            _flow.ReplaceStringActivity255.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity255.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi2501 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter1272 = new VTDXPathGetter(pi2501,XmlTypeCode.String);
            binding_getter1272 = new XPathGetterDecorator(binding_getter1272,"{Array0}",1);
            VTDPropertyInfoBase pi2502 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1230 = new VTDObjectSetter(pi2502);
            binding_setter1230 = new StringFormaterDecorator(binding_setter1230,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir1230 = new BindDirection(_flow.DbFetchData57,binding_getter1272,binding_setter1230,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity255.InDirections.Add(bind_dir1230);
            VTDPropertyInfoBase pi2503 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1273 = new VTDXPathGetter(pi2503,XmlTypeCode.String);
            binding_getter1273 = new XPathGetterDecorator(binding_getter1273,"{Array0}",1);
            VTDPropertyInfoBase pi2504 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1231 = new VTDObjectSetter(pi2504);
            binding_setter1231 = new StringFormaterDecorator(binding_setter1231,"{Step.OutputProperties.DbFetchData253.ResultTable.Row[1].EncryptionResult}");
            bind_dir1231 = new BindDirection(_flow.DbFetchData253,binding_getter1273,binding_setter1231,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity255.InDirections.Add(bind_dir1231);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi2505 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter1274 = new VTDXPathGetter(pi2505,XmlTypeCode.String);
            binding_getter1274 = new XPathGetterDecorator(binding_getter1274,"{Array0}",1);
            VTDPropertyInfoBase pi2506 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1232 = new VTDObjectSetter(pi2506);
            binding_setter1232 = new StringFormaterDecorator(binding_setter1232,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir1232 = new BindDirection(_flow.DbFetchData57,binding_getter1274,binding_setter1232,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir1232);
            VTDPropertyInfoBase pi2507 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1275 = new VTDXPathGetter(pi2507,XmlTypeCode.String);
            binding_getter1275 = new XPathGetterDecorator(binding_getter1275,"{Array0}",1);
            VTDPropertyInfoBase pi2508 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1233 = new VTDObjectSetter(pi2508);
            binding_setter1233 = new StringFormaterDecorator(binding_setter1233,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir1233 = new BindDirection(_flow.DbFetchData250,binding_getter1275,binding_setter1233,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir1233);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&myJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}&jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}&token={Step.OutputProperties.ReplaceStringActivity255.Result}&name={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].name}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.setProfileName}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/xmp/name.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi2509 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1276 = new VTDObjectGetter(pi2509);
            VTDPropertyInfoBase pi2510 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1234 = new VTDObjectSetter(pi2510);
            binding_setter1234 = new StringFormaterDecorator(binding_setter1234,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1234 = new BindDirection(this.DataCursorActivity266,binding_getter1276,binding_setter1234,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1234);
            VTDPropertyInfoBase pi2511 = new VTDPropertyInfoBase("setProfileName");
            VTDBaseGetter binding_getter1277 = new VTDObjectGetter(pi2511);
            VTDPropertyInfoBase pi2512 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1235 = new VTDObjectSetter(pi2512);
            binding_setter1235 = new StringFormaterDecorator(binding_setter1235,"{DataSource.tb_global_table.setProfileName}");
            bind_dir1235 = new BindDirection(this.DataCursorActivity266,binding_getter1277,binding_setter1235,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1235);
            VTDPropertyInfoBase pi2513 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1278 = new VTDObjectGetter(pi2513);
            VTDPropertyInfoBase pi2514 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1236 = new VTDObjectSetter(pi2514);
            binding_setter1236 = new StringFormaterDecorator(binding_setter1236,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1236 = new BindDirection(this.DataCursorActivity266,binding_getter1278,binding_setter1236,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1236);
            VTDPropertyInfoBase pi2515 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1279 = new VTDObjectGetter(pi2515);
            VTDPropertyInfoBase pi2516 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1237 = new VTDObjectSetter(pi2516);
            binding_setter1237 = new StringFormaterDecorator(binding_setter1237,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1237 = new BindDirection(this.DataCursorActivity266,binding_getter1279,binding_setter1237,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1237);
            VTDPropertyInfoBase pi2517 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1280 = new VTDObjectGetter(pi2517);
            VTDPropertyInfoBase pi2518 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1238 = new VTDObjectSetter(pi2518);
            binding_setter1238 = new StringFormaterDecorator(binding_setter1238,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir1238 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter1280,binding_setter1238,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1238);
            VTDPropertyInfoBase pi2519 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter1281 = new VTDXPathGetter(pi2519,XmlTypeCode.String);
            binding_getter1281 = new XPathGetterDecorator(binding_getter1281,"{Array0}",1);
            VTDPropertyInfoBase pi2520 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1239 = new VTDObjectSetter(pi2520);
            binding_setter1239 = new StringFormaterDecorator(binding_setter1239,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir1239 = new BindDirection(_flow.DbFetchData57,binding_getter1281,binding_setter1239,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1239);
            VTDPropertyInfoBase pi2521 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter1282 = new VTDXPathGetter(pi2521,XmlTypeCode.String);
            binding_getter1282 = new XPathGetterDecorator(binding_getter1282,"{Array0}",1);
            VTDPropertyInfoBase pi2522 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1240 = new VTDObjectSetter(pi2522);
            binding_setter1240 = new StringFormaterDecorator(binding_setter1240,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir1240 = new BindDirection(_flow.DbFetchData57,binding_getter1282,binding_setter1240,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1240);
            VTDPropertyInfoBase pi2523 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1283 = new VTDObjectGetter(pi2523);
            VTDPropertyInfoBase pi2524 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1241 = new VTDObjectSetter(pi2524);
            binding_setter1241 = new StringFormaterDecorator(binding_setter1241,"{Step.OutputProperties.ReplaceStringActivity255.Result}");
            bind_dir1241 = new BindDirection(_flow.ReplaceStringActivity255,binding_getter1283,binding_setter1241,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1241);
            VTDPropertyInfoBase pi2525 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='name'][1]");
            VTDBaseGetter binding_getter1284 = new VTDXPathGetter(pi2525,XmlTypeCode.String);
            binding_getter1284 = new XPathGetterDecorator(binding_getter1284,"{Array0}",1);
            VTDPropertyInfoBase pi2526 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1242 = new VTDObjectSetter(pi2526);
            binding_setter1242 = new StringFormaterDecorator(binding_setter1242,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].name}");
            bind_dir1242 = new BindDirection(_flow.DbFetchData57,binding_getter1284,binding_setter1242,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1242);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi2527 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1285 = new VTDObjectGetter(pi2527);
            VTDPropertyInfoBase pi2528 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1243 = new VTDObjectSetter(pi2528);
            binding_setter1243 = new StringFormaterDecorator(binding_setter1243,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1243 = new BindDirection(_flow.HTTPActivity59,binding_getter1285,binding_setter1243,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir1243);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_setProfileName_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi2529 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1286 = new VTDObjectGetter(pi2529);
            VTDPropertyInfoBase pi2530 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1244 = new VTDObjectSetter(pi2530);
            binding_setter1244 = new StringFormaterDecorator(binding_setter1244,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1244 = new BindDirection(_flow.HTTPActivity59,binding_getter1286,binding_setter1244,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1244);
            VTDPropertyInfoBase pi2531 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1287 = new VTDObjectGetter(pi2531);
            VTDPropertyInfoBase pi2532 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1245 = new VTDObjectSetter(pi2532);
            binding_setter1245 = new StringFormaterDecorator(binding_setter1245,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1245 = new BindDirection(_flow.Loop56,binding_getter1287,binding_setter1245,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1245);
            VTDPropertyInfoBase pi2533 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1288 = new VTDObjectGetter(pi2533);
            VTDPropertyInfoBase pi2534 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1246 = new VTDObjectSetter(pi2534);
            bind_dir1246 = new BindDirection(_flow.DbOpenConnection39,binding_getter1288,binding_setter1246,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1246);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_setProfileName_verification set OutputValue= 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi2535 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1289 = new VTDJsonGetter(pi2535);
            VTDPropertyInfoBase pi2536 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1247 = new VTDObjectSetter(pi2536);
            binding_setter1247 = new StringFormaterDecorator(binding_setter1247,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir1247 = new BindDirection(_flow.StringToJsonActivity60,binding_getter1289,binding_setter1247,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1247);
            VTDPropertyInfoBase pi2537 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1290 = new VTDObjectGetter(pi2537);
            VTDPropertyInfoBase pi2538 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1248 = new VTDObjectSetter(pi2538);
            binding_setter1248 = new StringFormaterDecorator(binding_setter1248,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1248 = new BindDirection(_flow.Loop56,binding_getter1290,binding_setter1248,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1248);
            VTDPropertyInfoBase pi2539 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1291 = new VTDObjectGetter(pi2539);
            VTDPropertyInfoBase pi2540 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1249 = new VTDObjectSetter(pi2540);
            bind_dir1249 = new BindDirection(_flow.DbOpenConnection39,binding_getter1291,binding_setter1249,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1249);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_setProfileName_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi2541 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1292 = new VTDObjectGetter(pi2541);
            VTDPropertyInfoBase pi2542 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1250 = new VTDObjectSetter(pi2542);
            binding_setter1250 = new StringFormaterDecorator(binding_setter1250,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1250 = new BindDirection(_flow.Loop56,binding_getter1292,binding_setter1250,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1250);
            VTDPropertyInfoBase pi2543 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1293 = new VTDObjectGetter(pi2543);
            VTDPropertyInfoBase pi2544 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1251 = new VTDObjectSetter(pi2544);
            bind_dir1251 = new BindDirection(_flow.DbOpenConnection39,binding_getter1293,binding_setter1251,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1251);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_setProfileName_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi2545 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1294 = new VTDObjectGetter(pi2545);
            VTDPropertyInfoBase pi2546 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1252 = new VTDObjectSetter(pi2546);
            binding_setter1252 = new StringFormaterDecorator(binding_setter1252,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1252 = new BindDirection(_flow.Loop56,binding_getter1294,binding_setter1252,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1252);
            VTDPropertyInfoBase pi2547 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1295 = new VTDObjectGetter(pi2547);
            VTDPropertyInfoBase pi2548 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1253 = new VTDObjectSetter(pi2548);
            bind_dir1253 = new BindDirection(_flow.DbOpenConnection39,binding_getter1295,binding_setter1253,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1253);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi2549 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1296 = new VTDXPathGetter(pi2549,XmlTypeCode.String);
            binding_getter1296 = new XPathGetterDecorator(binding_getter1296,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter1296),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi2550 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1297 = new VTDXPathGetter(pi2550,XmlTypeCode.String);
            binding_getter1297 = new XPathGetterDecorator(binding_getter1297,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter1297),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_setProfileName_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi2551 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1298 = new VTDObjectGetter(pi2551);
            VTDPropertyInfoBase pi2552 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1254 = new VTDObjectSetter(pi2552);
            binding_setter1254 = new StringFormaterDecorator(binding_setter1254,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1254 = new BindDirection(_flow.Loop56,binding_getter1298,binding_setter1254,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1254);
            VTDPropertyInfoBase pi2553 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1299 = new VTDObjectGetter(pi2553);
            VTDPropertyInfoBase pi2554 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1255 = new VTDObjectSetter(pi2554);
            bind_dir1255 = new BindDirection(_flow.DbOpenConnection39,binding_getter1299,binding_setter1255,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1255);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_setProfileName_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi2555 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1300 = new VTDObjectGetter(pi2555);
            VTDPropertyInfoBase pi2556 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1256 = new VTDObjectSetter(pi2556);
            binding_setter1256 = new StringFormaterDecorator(binding_setter1256,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1256 = new BindDirection(_flow.Loop56,binding_getter1300,binding_setter1256,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1256);
            VTDPropertyInfoBase pi2557 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1301 = new VTDObjectGetter(pi2557);
            VTDPropertyInfoBase pi2558 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1257 = new VTDObjectSetter(pi2558);
            bind_dir1257 = new BindDirection(_flow.DbOpenConnection39,binding_getter1301,binding_setter1257,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1257);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    