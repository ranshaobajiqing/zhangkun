/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_new_sendmessage_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1047 = null;
        public BindDirection bind_dir1048 = null;
        public BindDirection bind_dir1049 = null;
        public BindDirection bind_dir1050 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity258 = null;
        public BindDirection bind_dir1051 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity258_Policy = null;
        public BindDirection bind_dir1052 = null;
        public BindDirection bind_dir1053 = null;
        public BindDirection bind_dir1054 = null;
        public BindDirection bind_dir1055 = null;
        public BindDirection bind_dir1056 = null;
        public BindDirection bind_dir1057 = null;
        public BindDirection bind_dir1058 = null;
        public BindDirection bind_dir1059 = null;
        public BindDirection bind_dir1060 = null;
        public BindDirection bind_dir1061 = null;
        public BindDirection bind_dir1062 = null;
        public BindDirection bind_dir1063 = null;
        public BindDirection bind_dir1064 = null;
        public BindDirection bind_dir1065 = null;
        public BindDirection bind_dir1066 = null;
        public BindDirection bind_dir1067 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity259 = null;
        public BindDirection bind_dir1068 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity259_Policy = null;
        public BindDirection bind_dir1069 = null;
        public BindDirection bind_dir1070 = null;
        public BindDirection bind_dir1071 = null;
        public BindDirection bind_dir1072 = null;
        public BindDirection bind_dir1073 = null;
        public BindDirection bind_dir1074 = null;
        public BindDirection bind_dir1075 = null;
        public BindDirection bind_dir1076 = null;
        public BindDirection bind_dir1077 = null;
        public BindDirection bind_dir1078 = null;
        public BindDirection bind_dir1079 = null;
        public BindDirection bind_dir1080 = null;
        public BindDirection bind_dir1081 = null;
        public BindDirection bind_dir1082 = null;
        public BindDirection bind_dir1083 = null;
        public BindDirection bind_dir1084 = null;
        public BindDirection bind_dir1085 = null;
        public BindDirection bind_dir1086 = null;
        public BindDirection bind_dir1087 = null;
        public BindDirection bind_dir1088 = null;
        public BindDirection bind_dir1089 = null;
        public BindDirection bind_dir1090 = null;
        public BindDirection bind_dir1091 = null;
        public BindDirection bind_dir1092 = null;
        public BindDirection bind_dir1093 = null;
        public BindDirection bind_dir1094 = null;
        public BindDirection bind_dir1095 = null;
        public BindDirection bind_dir1096 = null;
        public BindDirection bind_dir1097 = null;
        public BindDirection bind_dir1098 = null;
        public BindDirection bind_dir1099 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity254 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity254");
            _flow.DataFetchActivity251 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity251");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity253 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity253");
            _flow.DataExporterActivity256 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity256");
            _flow.DataExporterCloseActivity257 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity257");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity252 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity252");
            _flow.DataDisconnectActivity255 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity255");
            this.DataCursorActivity258 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity258");
            this.DataCursorActivity258_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence249 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence249");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData139 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData139");
            _flow.Loop140 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop140Input>(_context,"Loop140",LoopType.For);
            _flow.DbFetchData153 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData153");
            _flow.CallQTPTest154 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest154");
            _flow.DbFetchData155 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData155");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.HTTPActivity156 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity156");
            _flow.DbFetchData157 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData157");
            this.DataCursorActivity259 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity259");
            this.DataCursorActivity259_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence250 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence250");
            _flow.DbFetchData141 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData141");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.ReplaceStringActivity248 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity248");
            _flow.HTTPActivity142 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity142");
            _flow.StringToJsonActivity143 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity143");
            _flow.DbFetchData144 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData144");
            _flow.DbFetchData145 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData145");
            _flow.DbFetchData146 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData146");
            _flow.DbFetchData147 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData147");
            _flow.IfElse148 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse148Input>(_context,"IfElse148");
            _flow.IfElseBranch149 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch149");
            _flow.IfElseBranch151 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch151");
            _flow.DbFetchData150 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData150");
            _flow.DbFetchData152 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData152");
            _flow.DataFetchActivity254.Comment = @"";
            _flow.DataFetchActivity254.IconPath = @"";
            _flow.DataFetchActivity254.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity254.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity254_QueryParameters_Document = new XmlDocument();
            DataFetchActivity254_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity254Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity254_QueryParameters_Document.LoadXml(xmlDataFetchActivity254Params);
            _flow.DataFetchActivity254.QueryParameters = DataFetchActivity254_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity254);
            this.Activities.Add (_flow.DataFetchActivity254);
            _flow.DataFetchActivity251.Comment = @"";
            _flow.DataFetchActivity251.IconPath = @"";
            _flow.DataFetchActivity251.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity251.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity251_QueryParameters_Document = new XmlDocument();
            DataFetchActivity251_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity251Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity251_QueryParameters_Document.LoadXml(xmlDataFetchActivity251Params);
            _flow.DataFetchActivity251.QueryParameters = DataFetchActivity251_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity251);
            this.Activities.Add (_flow.DataFetchActivity251);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity258);
            _flow.Loop2.Activities.Add (_flow.Sequence249);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity253.Comment = @"";
            _flow.DataExporterActivity253.IconPath = @"";
            VTDPropertyInfoBase pi2131 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1085 = new VTDObjectGetter(pi2131);
            VTDPropertyInfoBase pi2132 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1047 = new VTDObjectSetter(pi2132);
            binding_setter1047 = new StringFormaterDecorator(binding_setter1047,"{Step.DataFetchActivity251.OutTable}");
            bind_dir1047 = new BindDirection(_flow.DataFetchActivity251,binding_getter1085,binding_setter1047,BindTargetType.ToInProperty);
            _flow.DataExporterActivity253.InDirections.Add(bind_dir1047);
            this.Activities.Add (_flow.DataExporterActivity253);
            _flow.DataExporterActivity256.Comment = @"";
            _flow.DataExporterActivity256.IconPath = @"";
            VTDPropertyInfoBase pi2133 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1086 = new VTDObjectGetter(pi2133);
            VTDPropertyInfoBase pi2134 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1048 = new VTDObjectSetter(pi2134);
            binding_setter1048 = new StringFormaterDecorator(binding_setter1048,"{Step.DataFetchActivity254.OutTable}");
            bind_dir1048 = new BindDirection(_flow.DataFetchActivity254,binding_getter1086,binding_setter1048,BindTargetType.ToInProperty);
            _flow.DataExporterActivity256.InDirections.Add(bind_dir1048);
            this.Activities.Add (_flow.DataExporterActivity256);
            _flow.DataExporterCloseActivity257.Comment = @"";
            _flow.DataExporterCloseActivity257.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity257);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity252.Comment = @"";
            _flow.DataDisconnectActivity252.IconPath = @"";
            VTDPropertyInfoBase pi2135 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1087 = new VTDObjectGetter(pi2135);
            VTDPropertyInfoBase pi2136 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1049 = new VTDObjectSetter(pi2136);
            binding_setter1049 = new StringFormaterDecorator(binding_setter1049,"{Step.DataFetchActivity251.OutTable}");
            bind_dir1049 = new BindDirection(_flow.DataFetchActivity251,binding_getter1087,binding_setter1049,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity252.InDirections.Add(bind_dir1049);
            this.Activities.Add (_flow.DataDisconnectActivity252);
            _flow.DataDisconnectActivity255.Comment = @"";
            _flow.DataDisconnectActivity255.IconPath = @"";
            VTDPropertyInfoBase pi2137 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1088 = new VTDObjectGetter(pi2137);
            VTDPropertyInfoBase pi2138 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1050 = new VTDObjectSetter(pi2138);
            binding_setter1050 = new StringFormaterDecorator(binding_setter1050,"{Step.DataFetchActivity254.OutTable}");
            bind_dir1050 = new BindDirection(_flow.DataFetchActivity254,binding_getter1088,binding_setter1050,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity255.InDirections.Add(bind_dir1050);
            this.Activities.Add (_flow.DataDisconnectActivity255);
            this.DataCursorActivity258.Comment = @"";
            this.DataCursorActivity258.IconPath = @"";
            VTDPropertyInfoBase pi2139 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1089 = new VTDObjectGetter(pi2139);
            VTDPropertyInfoBase pi2140 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1051 = new VTDObjectSetter(pi2140);
            binding_setter1051 = new StringFormaterDecorator(binding_setter1051,"{Step.DataFetchActivity251.OutTable}");
            bind_dir1051 = new BindDirection(_flow.DataFetchActivity251,binding_getter1089,binding_setter1051,BindTargetType.ToInProperty);
            this.DataCursorActivity258.InDirections.Add(bind_dir1051);
            this.DataCursorActivity258_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity258_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity258_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity258_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity258_Policy.StartCondition.Value = "";
            this.DataCursorActivity258_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity258_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity258_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity258_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity258_Policy.EndCondition.Value = "";
            this.DataCursorActivity258_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity258_Policy.StepSize = 1;
            this.DataCursorActivity258_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity258.Policy = this.DataCursorActivity258_Policy;
            this.DataCursorActivity258.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity258.ResetCursor;
            _flow.Sequence249.Comment = @"";
            _flow.Sequence249.IconPath = @"";
            _flow.Sequence249.Name = @"序列249";
            _flow.Sequence249.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData139);
            _flow.Sequence249.Activities.Add (_flow.Loop140);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData153);
            _flow.Sequence249.Activities.Add (_flow.CallQTPTest154);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData155);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence249.Activities.Add (_flow.HTTPActivity156);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData157);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData139.QueryString = @"select count(*) as 'Row' from tb_new_sendmessage_verification";
            _flow.DbFetchData139.Timeout = (int)30;
            _flow.DbFetchData139.Comment = @"";
            _flow.DbFetchData139.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData139.Name = @"获取到tb_new_sendmessage_verification表有效行数";
            VTDPropertyInfoBase pi2141 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1090 = new VTDObjectGetter(pi2141);
            VTDPropertyInfoBase pi2142 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1052 = new VTDObjectSetter(pi2142);
            bind_dir1052 = new BindDirection(_flow.DbOpenConnection39,binding_getter1090,binding_setter1052,BindTargetType.ToInProperty);
            _flow.DbFetchData139.InDirections.Add(bind_dir1052);
            XmlDocument DbFetchData139_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData139_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData139_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData139.ExpectedOutputProperties = DbFetchData139_ExpectedOutputProperties_Document;
            _flow.Loop140.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop140.NumberOfIterations = (int)1;
            _flow.Loop140.Comment = @"";
            _flow.Loop140.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop140.Name = @"循环执行tb_new_sendmessage_verification中的测试用例";
            _flow.Loop140.Activities.Add (this.DataCursorActivity259);
            _flow.Loop140.Activities.Add (_flow.Sequence250);
            _flow.DbFetchData153.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comgG674Fhgd9{DataSource.tb_global_table.LoginStudentUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData153.Timeout = (int)30;
            _flow.DbFetchData153.Comment = @"";
            _flow.DbFetchData153.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData153.Name = @"对/SeedMsg/sendMessage接口token实行加密";
            VTDPropertyInfoBase pi2143 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1091 = new VTDObjectGetter(pi2143);
            VTDPropertyInfoBase pi2144 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1053 = new VTDObjectSetter(pi2144);
            binding_setter1053 = new StringFormaterDecorator(binding_setter1053,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1053 = new BindDirection(this.DataCursorActivity258,binding_getter1091,binding_setter1053,BindTargetType.ToInProperty);
            _flow.DbFetchData153.InDirections.Add(bind_dir1053);
            VTDPropertyInfoBase pi2145 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter1092 = new VTDObjectGetter(pi2145);
            VTDPropertyInfoBase pi2146 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1054 = new VTDObjectSetter(pi2146);
            binding_setter1054 = new StringFormaterDecorator(binding_setter1054,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1054 = new BindDirection(this.DataCursorActivity258,binding_getter1092,binding_setter1054,BindTargetType.ToInProperty);
            _flow.DbFetchData153.InDirections.Add(bind_dir1054);
            VTDPropertyInfoBase pi2147 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1093 = new VTDObjectGetter(pi2147);
            VTDPropertyInfoBase pi2148 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1055 = new VTDObjectSetter(pi2148);
            bind_dir1055 = new BindDirection(_flow.DbOpenConnection39,binding_getter1093,binding_setter1055,BindTargetType.ToInProperty);
            _flow.DbFetchData153.InDirections.Add(bind_dir1055);
            XmlDocument DbFetchData153_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData153_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData153_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData153.ExpectedOutputProperties = DbFetchData153_ExpectedOutputProperties_Document;
            _flow.CallQTPTest154.Comment = @"";
            _flow.CallQTPTest154.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest154.Name = @"Encryption.SHA1";
            _flow.CallQTPTest154.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ScriptPath}");
            _flow.CallQTPTest154.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ActionName}");
            _flow.CallQTPTest154.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.Description}");
            _flow.CallQTPTest154.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.IsActionSelected}");
            _flow.CallQTPTest154.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.ResultLocation}");
            _flow.CallQTPTest154.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest154.QCScriptPath}");
            _flow.DbFetchData155.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData155.Timeout = (int)30;
            _flow.DbFetchData155.Comment = @"";
            _flow.DbFetchData155.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData155.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi2149 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1094 = new VTDObjectGetter(pi2149);
            VTDPropertyInfoBase pi2150 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1056 = new VTDObjectSetter(pi2150);
            bind_dir1056 = new BindDirection(_flow.DbOpenConnection39,binding_getter1094,binding_setter1056,BindTargetType.ToInProperty);
            _flow.DbFetchData155.InDirections.Add(bind_dir1056);
            XmlDocument DbFetchData155_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData155_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData155_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData155.ExpectedOutputProperties = DbFetchData155_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi2151 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1095 = new VTDObjectGetter(pi2151);
            VTDPropertyInfoBase pi2152 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1057 = new VTDObjectSetter(pi2152);
            bind_dir1057 = new BindDirection(_flow.DbOpenConnection39,binding_getter1095,binding_setter1057,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir1057);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.HTTPActivity156.TextBody = @"xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&messageType=2&from={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&cqid=2&content=测试语文作业&token={Step.OutputProperties.DbFetchData155.ResultTable.Row[1].EncryptionResult}&to={DataSource.tb_global_table.LoginStudentUsername}@365ime.com";
            _flow.HTTPActivity156.TextXmlBody = @"";
            _flow.HTTPActivity156.FileBody = @"";
            _flow.HTTPActivity156.PostBody = @"";
            _flow.HTTPActivity156.Url = @"{DataSource.tb_global_table.JXTHost}{DataSource.tb_global_table.newsendMessage}";
            _flow.HTTPActivity156.HttpMethod = @"POST";
            _flow.HTTPActivity156.HttpVersion = @"1.1";
            _flow.HTTPActivity156.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity156.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity156.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity156.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity156.Comment = @"";
            _flow.HTTPActivity156.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity156.RequestBodyType = @"Text";
            _flow.HTTPActivity156.ResponseType = @"Text";
            _flow.HTTPActivity156.Name = @"调用new/SeedMsg/sendMessage";
            _flow.HTTPActivity156.Proxy.Server = @"";
            _flow.HTTPActivity156.Proxy.Username = @"";
            _flow.HTTPActivity156.Proxy.Password = @"";
            _flow.HTTPActivity156.Authentication.Username = @"";
            _flow.HTTPActivity156.Authentication.Password = @"";
            _flow.HTTPActivity156.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity156.Timeout = (int)100000;
            _flow.HTTPActivity156.ClientCertificate.Password = @"";
            _flow.HTTPActivity156.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity156.UseClientCertificate = false;
            _flow.HTTPActivity156.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity156.AllowRedirections = true;
            _flow.HTTPActivity156.ReuseCookies = false;
            _flow.HTTPActivity156.ExpectServerError = false;
            XmlDocument HTTPActivity156_XMLBody_Document = new XmlDocument();
            HTTPActivity156_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity156_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity156.XMLBody = HTTPActivity156_XMLBody_Document;
            XmlDocument HTTPActivity156_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity156_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity156_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity156.RequestMultipartInfoXml = HTTPActivity156_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity156.Multipart=false;
            VTDPropertyInfoBase pi2153 = new VTDPropertyInfoBase("JXTHost");
            VTDBaseGetter binding_getter1096 = new VTDObjectGetter(pi2153);
            VTDPropertyInfoBase pi2154 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1058 = new VTDObjectSetter(pi2154);
            binding_setter1058 = new StringFormaterDecorator(binding_setter1058,"{DataSource.tb_global_table.JXTHost}");
            bind_dir1058 = new BindDirection(this.DataCursorActivity258,binding_getter1096,binding_setter1058,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir1058);
            VTDPropertyInfoBase pi2155 = new VTDPropertyInfoBase("newsendMessage");
            VTDBaseGetter binding_getter1097 = new VTDObjectGetter(pi2155);
            VTDPropertyInfoBase pi2156 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1059 = new VTDObjectSetter(pi2156);
            binding_setter1059 = new StringFormaterDecorator(binding_setter1059,"{DataSource.tb_global_table.newsendMessage}");
            bind_dir1059 = new BindDirection(this.DataCursorActivity258,binding_getter1097,binding_setter1059,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir1059);
            VTDPropertyInfoBase pi2157 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1098 = new VTDObjectGetter(pi2157);
            VTDPropertyInfoBase pi2158 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1060 = new VTDObjectSetter(pi2158);
            binding_setter1060 = new StringFormaterDecorator(binding_setter1060,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1060 = new BindDirection(this.DataCursorActivity258,binding_getter1098,binding_setter1060,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir1060);
            VTDPropertyInfoBase pi2159 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1099 = new VTDObjectGetter(pi2159);
            VTDPropertyInfoBase pi2160 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1061 = new VTDObjectSetter(pi2160);
            binding_setter1061 = new StringFormaterDecorator(binding_setter1061,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1061 = new BindDirection(this.DataCursorActivity258,binding_getter1099,binding_setter1061,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir1061);
            VTDPropertyInfoBase pi2161 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1100 = new VTDXPathGetter(pi2161,XmlTypeCode.String);
            binding_getter1100 = new XPathGetterDecorator(binding_getter1100,"{Array0}",1);
            VTDPropertyInfoBase pi2162 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1062 = new VTDObjectSetter(pi2162);
            binding_setter1062 = new StringFormaterDecorator(binding_setter1062,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir1062 = new BindDirection(_flow.DbFetchData246,binding_getter1100,binding_setter1062,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir1062);
            VTDPropertyInfoBase pi2163 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1101 = new VTDObjectGetter(pi2163);
            VTDPropertyInfoBase pi2164 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1063 = new VTDObjectSetter(pi2164);
            binding_setter1063 = new StringFormaterDecorator(binding_setter1063,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1063 = new BindDirection(this.DataCursorActivity258,binding_getter1101,binding_setter1063,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir1063);
            VTDPropertyInfoBase pi2165 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1102 = new VTDXPathGetter(pi2165,XmlTypeCode.String);
            binding_getter1102 = new XPathGetterDecorator(binding_getter1102,"{Array0}",1);
            VTDPropertyInfoBase pi2166 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1064 = new VTDObjectSetter(pi2166);
            binding_setter1064 = new StringFormaterDecorator(binding_setter1064,"{Step.OutputProperties.DbFetchData155.ResultTable.Row[1].EncryptionResult}");
            bind_dir1064 = new BindDirection(_flow.DbFetchData155,binding_getter1102,binding_setter1064,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir1064);
            VTDPropertyInfoBase pi2167 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter1103 = new VTDObjectGetter(pi2167);
            VTDPropertyInfoBase pi2168 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1065 = new VTDObjectSetter(pi2168);
            binding_setter1065 = new StringFormaterDecorator(binding_setter1065,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1065 = new BindDirection(this.DataCursorActivity258,binding_getter1103,binding_setter1065,BindTargetType.ToInProperty);
            _flow.HTTPActivity156.InDirections.Add(bind_dir1065);
            XmlDocument HTTPActivity156_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity156_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity156_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity156.ExpectedResponseXmlBody = HTTPActivity156_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity156_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity156_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity156_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity156.ExpectedResponseJsonBody = HTTPActivity156_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity156_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity156_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity156_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity156.ExpectedOutputProperties = HTTPActivity156_ExpectedOutputProperties_Document;
            _flow.DbFetchData157.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity156.ResponseBody}' where InterfaceName = '/SeedMsg/sendMessage'";
            _flow.DbFetchData157.Timeout = (int)30;
            _flow.DbFetchData157.Comment = @"";
            _flow.DbFetchData157.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData157.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi2169 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1104 = new VTDObjectGetter(pi2169);
            VTDPropertyInfoBase pi2170 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1066 = new VTDObjectSetter(pi2170);
            binding_setter1066 = new StringFormaterDecorator(binding_setter1066,"{Step.OutputProperties.HTTPActivity156.ResponseBody}");
            bind_dir1066 = new BindDirection(_flow.HTTPActivity156,binding_getter1104,binding_setter1066,BindTargetType.ToInProperty);
            _flow.DbFetchData157.InDirections.Add(bind_dir1066);
            VTDPropertyInfoBase pi2171 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1105 = new VTDObjectGetter(pi2171);
            VTDPropertyInfoBase pi2172 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1067 = new VTDObjectSetter(pi2172);
            bind_dir1067 = new BindDirection(_flow.DbOpenConnection39,binding_getter1105,binding_setter1067,BindTargetType.ToInProperty);
            _flow.DbFetchData157.InDirections.Add(bind_dir1067);
            XmlDocument DbFetchData157_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData157_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData157_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData157.ExpectedOutputProperties = DbFetchData157_ExpectedOutputProperties_Document;
            this.DataCursorActivity259.Comment = @"";
            this.DataCursorActivity259.IconPath = @"";
            VTDPropertyInfoBase pi2173 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1106 = new VTDObjectGetter(pi2173);
            VTDPropertyInfoBase pi2174 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1068 = new VTDObjectSetter(pi2174);
            binding_setter1068 = new StringFormaterDecorator(binding_setter1068,"{Step.DataFetchActivity251.OutTable}");
            bind_dir1068 = new BindDirection(_flow.DataFetchActivity251,binding_getter1106,binding_setter1068,BindTargetType.ToInProperty);
            this.DataCursorActivity259.InDirections.Add(bind_dir1068);
            this.DataCursorActivity259_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity259_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity259_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity259_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity259_Policy.StartCondition.Value = "";
            this.DataCursorActivity259_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity259_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity259_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity259_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity259_Policy.EndCondition.Value = "";
            this.DataCursorActivity259_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity259_Policy.StepSize = 1;
            this.DataCursorActivity259_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity259.Policy = this.DataCursorActivity259_Policy;
            this.DataCursorActivity259.ReportStepData = false;
            _flow.Loop140.BeforeExecuteStepEvent += this.DataCursorActivity259.ResetCursor;
            _flow.Sequence250.Comment = @"";
            _flow.Sequence250.IconPath = @"";
            _flow.Sequence250.Name = @"序列250";
            _flow.Sequence250.Activities.Add (_flow.DbFetchData141);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence250.Activities.Add (_flow.ReplaceStringActivity248);
            _flow.Sequence250.Activities.Add (_flow.HTTPActivity142);
            _flow.Sequence250.Activities.Add (_flow.StringToJsonActivity143);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData144);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData145);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData146);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData147);
            _flow.Sequence250.Activities.Add (_flow.IfElse148);
            _flow.DbFetchData141.QueryString = @"select xsid,tostr,messageType,content,cqid,token,fromstr from tb_new_sendmessage_verification where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData141.Timeout = (int)30;
            _flow.DbFetchData141.Comment = @"";
            _flow.DbFetchData141.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData141.Name = @"查询tb_new_sendmessage_verification表中数据";
            VTDPropertyInfoBase pi2175 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1107 = new VTDObjectGetter(pi2175);
            VTDPropertyInfoBase pi2176 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1069 = new VTDObjectSetter(pi2176);
            binding_setter1069 = new StringFormaterDecorator(binding_setter1069,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir1069 = new BindDirection(_flow.Loop140,binding_getter1107,binding_setter1069,BindTargetType.ToInProperty);
            _flow.DbFetchData141.InDirections.Add(bind_dir1069);
            VTDPropertyInfoBase pi2177 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1108 = new VTDObjectGetter(pi2177);
            VTDPropertyInfoBase pi2178 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1070 = new VTDObjectSetter(pi2178);
            bind_dir1070 = new BindDirection(_flow.DbOpenConnection39,binding_getter1108,binding_setter1070,BindTargetType.ToInProperty);
            _flow.DbFetchData141.InDirections.Add(bind_dir1070);
            XmlDocument DbFetchData141_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData141_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData141_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><tostr /><messageType>1</messageType><content /><cqid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token><fromstr /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData141.ExpectedOutputProperties = DbFetchData141_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi2179 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1109 = new VTDObjectGetter(pi2179);
            VTDPropertyInfoBase pi2180 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1071 = new VTDObjectSetter(pi2180);
            bind_dir1071 = new BindDirection(_flow.DbOpenConnection39,binding_getter1109,binding_setter1071,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir1071);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity248.SourceString = @"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity248.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity248.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity248.CaseSensitive = true;
            _flow.ReplaceStringActivity248.Comment = @"";
            _flow.ReplaceStringActivity248.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity248.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi2181 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter1110 = new VTDXPathGetter(pi2181,XmlTypeCode.String);
            binding_getter1110 = new XPathGetterDecorator(binding_getter1110,"{Array0}",1);
            VTDPropertyInfoBase pi2182 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1072 = new VTDObjectSetter(pi2182);
            binding_setter1072 = new StringFormaterDecorator(binding_setter1072,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].xsid}");
            bind_dir1072 = new BindDirection(_flow.DbFetchData141,binding_getter1110,binding_setter1072,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir1072);
            VTDPropertyInfoBase pi2183 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1111 = new VTDXPathGetter(pi2183,XmlTypeCode.String);
            binding_getter1111 = new XPathGetterDecorator(binding_getter1111,"{Array0}",1);
            VTDPropertyInfoBase pi2184 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1073 = new VTDObjectSetter(pi2184);
            binding_setter1073 = new StringFormaterDecorator(binding_setter1073,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1073 = new BindDirection(_flow.DbFetchData247,binding_getter1111,binding_setter1073,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir1073);
            _flow.HTTPActivity142.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity248.Result}&messageType={Step.OutputProperties.DbFetchData141.ResultTable.Row[1].messageType}&from={Step.OutputProperties.DbFetchData141.ResultTable.Row[1].fromstr}&cqid={Step.OutputProperties.DbFetchData141.ResultTable.Row[1].cqid}&content={Step.OutputProperties.DbFetchData141.ResultTable.Row[1].content}&token={Step.OutputProperties.DbFetchData141.ResultTable.Row[1].token}&to={Step.OutputProperties.DbFetchData141.ResultTable.Row[1].tostr}";
            _flow.HTTPActivity142.TextXmlBody = @"";
            _flow.HTTPActivity142.FileBody = @"";
            _flow.HTTPActivity142.PostBody = @"";
            _flow.HTTPActivity142.Url = @"{DataSource.tb_global_table.JXTHost}{DataSource.tb_global_table.newsendMessage}";
            _flow.HTTPActivity142.HttpMethod = @"POST";
            _flow.HTTPActivity142.HttpVersion = @"1.1";
            _flow.HTTPActivity142.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity142.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity142.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity142.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity142.Comment = @"";
            _flow.HTTPActivity142.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity142.RequestBodyType = @"Text";
            _flow.HTTPActivity142.ResponseType = @"Text";
            _flow.HTTPActivity142.Name = @"调用new/SeedMsg/sendMessage";
            _flow.HTTPActivity142.Proxy.Server = @"";
            _flow.HTTPActivity142.Proxy.Username = @"";
            _flow.HTTPActivity142.Proxy.Password = @"";
            _flow.HTTPActivity142.Authentication.Username = @"";
            _flow.HTTPActivity142.Authentication.Password = @"";
            _flow.HTTPActivity142.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity142.Timeout = (int)100000;
            _flow.HTTPActivity142.ClientCertificate.Password = @"";
            _flow.HTTPActivity142.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity142.UseClientCertificate = false;
            _flow.HTTPActivity142.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity142.AllowRedirections = true;
            _flow.HTTPActivity142.ReuseCookies = false;
            _flow.HTTPActivity142.ExpectServerError = false;
            XmlDocument HTTPActivity142_XMLBody_Document = new XmlDocument();
            HTTPActivity142_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity142_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity142.XMLBody = HTTPActivity142_XMLBody_Document;
            XmlDocument HTTPActivity142_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity142_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity142_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity142.RequestMultipartInfoXml = HTTPActivity142_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity142.Multipart=false;
            VTDPropertyInfoBase pi2185 = new VTDPropertyInfoBase("JXTHost");
            VTDBaseGetter binding_getter1112 = new VTDObjectGetter(pi2185);
            VTDPropertyInfoBase pi2186 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1074 = new VTDObjectSetter(pi2186);
            binding_setter1074 = new StringFormaterDecorator(binding_setter1074,"{DataSource.tb_global_table.JXTHost}");
            bind_dir1074 = new BindDirection(this.DataCursorActivity259,binding_getter1112,binding_setter1074,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1074);
            VTDPropertyInfoBase pi2187 = new VTDPropertyInfoBase("newsendMessage");
            VTDBaseGetter binding_getter1113 = new VTDObjectGetter(pi2187);
            VTDPropertyInfoBase pi2188 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1075 = new VTDObjectSetter(pi2188);
            binding_setter1075 = new StringFormaterDecorator(binding_setter1075,"{DataSource.tb_global_table.newsendMessage}");
            bind_dir1075 = new BindDirection(this.DataCursorActivity259,binding_getter1113,binding_setter1075,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1075);
            VTDPropertyInfoBase pi2189 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1114 = new VTDObjectGetter(pi2189);
            VTDPropertyInfoBase pi2190 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1076 = new VTDObjectSetter(pi2190);
            binding_setter1076 = new StringFormaterDecorator(binding_setter1076,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1076 = new BindDirection(this.DataCursorActivity259,binding_getter1114,binding_setter1076,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1076);
            VTDPropertyInfoBase pi2191 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1115 = new VTDObjectGetter(pi2191);
            VTDPropertyInfoBase pi2192 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1077 = new VTDObjectSetter(pi2192);
            binding_setter1077 = new StringFormaterDecorator(binding_setter1077,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1077 = new BindDirection(this.DataCursorActivity259,binding_getter1115,binding_setter1077,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1077);
            VTDPropertyInfoBase pi2193 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1116 = new VTDObjectGetter(pi2193);
            VTDPropertyInfoBase pi2194 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1078 = new VTDObjectSetter(pi2194);
            binding_setter1078 = new StringFormaterDecorator(binding_setter1078,"{Step.OutputProperties.ReplaceStringActivity248.Result}");
            bind_dir1078 = new BindDirection(_flow.ReplaceStringActivity248,binding_getter1116,binding_setter1078,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1078);
            VTDPropertyInfoBase pi2195 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='messageType'][1]");
            VTDBaseGetter binding_getter1117 = new VTDXPathGetter(pi2195,XmlTypeCode.String);
            binding_getter1117 = new XPathGetterDecorator(binding_getter1117,"{Array0}",1);
            VTDPropertyInfoBase pi2196 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1079 = new VTDObjectSetter(pi2196);
            binding_setter1079 = new StringFormaterDecorator(binding_setter1079,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].messageType}");
            bind_dir1079 = new BindDirection(_flow.DbFetchData141,binding_getter1117,binding_setter1079,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1079);
            VTDPropertyInfoBase pi2197 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='fromstr'][1]");
            VTDBaseGetter binding_getter1118 = new VTDXPathGetter(pi2197,XmlTypeCode.String);
            binding_getter1118 = new XPathGetterDecorator(binding_getter1118,"{Array0}",1);
            VTDPropertyInfoBase pi2198 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1080 = new VTDObjectSetter(pi2198);
            binding_setter1080 = new StringFormaterDecorator(binding_setter1080,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].fromstr}");
            bind_dir1080 = new BindDirection(_flow.DbFetchData141,binding_getter1118,binding_setter1080,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1080);
            VTDPropertyInfoBase pi2199 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='cqid'][1]");
            VTDBaseGetter binding_getter1119 = new VTDXPathGetter(pi2199,XmlTypeCode.String);
            binding_getter1119 = new XPathGetterDecorator(binding_getter1119,"{Array0}",1);
            VTDPropertyInfoBase pi2200 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1081 = new VTDObjectSetter(pi2200);
            binding_setter1081 = new StringFormaterDecorator(binding_setter1081,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].cqid}");
            bind_dir1081 = new BindDirection(_flow.DbFetchData141,binding_getter1119,binding_setter1081,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1081);
            VTDPropertyInfoBase pi2201 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='content'][1]");
            VTDBaseGetter binding_getter1120 = new VTDXPathGetter(pi2201,XmlTypeCode.String);
            binding_getter1120 = new XPathGetterDecorator(binding_getter1120,"{Array0}",1);
            VTDPropertyInfoBase pi2202 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1082 = new VTDObjectSetter(pi2202);
            binding_setter1082 = new StringFormaterDecorator(binding_setter1082,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].content}");
            bind_dir1082 = new BindDirection(_flow.DbFetchData141,binding_getter1120,binding_setter1082,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1082);
            VTDPropertyInfoBase pi2203 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter1121 = new VTDXPathGetter(pi2203,XmlTypeCode.String);
            binding_getter1121 = new XPathGetterDecorator(binding_getter1121,"{Array0}",1);
            VTDPropertyInfoBase pi2204 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1083 = new VTDObjectSetter(pi2204);
            binding_setter1083 = new StringFormaterDecorator(binding_setter1083,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].token}");
            bind_dir1083 = new BindDirection(_flow.DbFetchData141,binding_getter1121,binding_setter1083,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1083);
            VTDPropertyInfoBase pi2205 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='tostr'][1]");
            VTDBaseGetter binding_getter1122 = new VTDXPathGetter(pi2205,XmlTypeCode.String);
            binding_getter1122 = new XPathGetterDecorator(binding_getter1122,"{Array0}",1);
            VTDPropertyInfoBase pi2206 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1084 = new VTDObjectSetter(pi2206);
            binding_setter1084 = new StringFormaterDecorator(binding_setter1084,"{Step.OutputProperties.DbFetchData141.ResultTable.Row[1].tostr}");
            bind_dir1084 = new BindDirection(_flow.DbFetchData141,binding_getter1122,binding_setter1084,BindTargetType.ToInProperty);
            _flow.HTTPActivity142.InDirections.Add(bind_dir1084);
            XmlDocument HTTPActivity142_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity142_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity142_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity142.ExpectedResponseXmlBody = HTTPActivity142_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity142_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity142_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity142_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity142.ExpectedResponseJsonBody = HTTPActivity142_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity142_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity142_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity142_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity142.ExpectedOutputProperties = HTTPActivity142_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity143.InputString = @"{Step.OutputProperties.HTTPActivity142.ResponseBody}";
            _flow.StringToJsonActivity143.Comment = @"";
            _flow.StringToJsonActivity143.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity143.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi2207 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1123 = new VTDObjectGetter(pi2207);
            VTDPropertyInfoBase pi2208 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1085 = new VTDObjectSetter(pi2208);
            binding_setter1085 = new StringFormaterDecorator(binding_setter1085,"{Step.OutputProperties.HTTPActivity142.ResponseBody}");
            bind_dir1085 = new BindDirection(_flow.HTTPActivity142,binding_getter1123,binding_setter1085,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity143.InDirections.Add(bind_dir1085);
            _flow.DbFetchData144.QueryString = @"UPDATE tb_new_sendmessage_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity142.ResponseBody}' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData144.Timeout = (int)30;
            _flow.DbFetchData144.Comment = @"";
            _flow.DbFetchData144.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData144.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi2209 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1124 = new VTDObjectGetter(pi2209);
            VTDPropertyInfoBase pi2210 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1086 = new VTDObjectSetter(pi2210);
            binding_setter1086 = new StringFormaterDecorator(binding_setter1086,"{Step.OutputProperties.HTTPActivity142.ResponseBody}");
            bind_dir1086 = new BindDirection(_flow.HTTPActivity142,binding_getter1124,binding_setter1086,BindTargetType.ToInProperty);
            _flow.DbFetchData144.InDirections.Add(bind_dir1086);
            VTDPropertyInfoBase pi2211 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1125 = new VTDObjectGetter(pi2211);
            VTDPropertyInfoBase pi2212 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1087 = new VTDObjectSetter(pi2212);
            binding_setter1087 = new StringFormaterDecorator(binding_setter1087,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir1087 = new BindDirection(_flow.Loop140,binding_getter1125,binding_setter1087,BindTargetType.ToInProperty);
            _flow.DbFetchData144.InDirections.Add(bind_dir1087);
            VTDPropertyInfoBase pi2213 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1126 = new VTDObjectGetter(pi2213);
            VTDPropertyInfoBase pi2214 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1088 = new VTDObjectSetter(pi2214);
            bind_dir1088 = new BindDirection(_flow.DbOpenConnection39,binding_getter1126,binding_setter1088,BindTargetType.ToInProperty);
            _flow.DbFetchData144.InDirections.Add(bind_dir1088);
            XmlDocument DbFetchData144_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData144_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData144_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData144.ExpectedOutputProperties = DbFetchData144_ExpectedOutputProperties_Document;
            _flow.DbFetchData145.QueryString = @"update tb_new_sendmessage_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity143.errorCode}' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData145.Timeout = (int)30;
            _flow.DbFetchData145.Comment = @"";
            _flow.DbFetchData145.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData145.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi2215 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1127 = new VTDJsonGetter(pi2215);
            VTDPropertyInfoBase pi2216 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1089 = new VTDObjectSetter(pi2216);
            binding_setter1089 = new StringFormaterDecorator(binding_setter1089,"{Step.JsonContent.StringToJsonActivity143.errorCode}");
            bind_dir1089 = new BindDirection(_flow.StringToJsonActivity143,binding_getter1127,binding_setter1089,BindTargetType.ToInProperty);
            _flow.DbFetchData145.InDirections.Add(bind_dir1089);
            VTDPropertyInfoBase pi2217 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1128 = new VTDObjectGetter(pi2217);
            VTDPropertyInfoBase pi2218 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1090 = new VTDObjectSetter(pi2218);
            binding_setter1090 = new StringFormaterDecorator(binding_setter1090,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir1090 = new BindDirection(_flow.Loop140,binding_getter1128,binding_setter1090,BindTargetType.ToInProperty);
            _flow.DbFetchData145.InDirections.Add(bind_dir1090);
            VTDPropertyInfoBase pi2219 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1129 = new VTDObjectGetter(pi2219);
            VTDPropertyInfoBase pi2220 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1091 = new VTDObjectSetter(pi2220);
            bind_dir1091 = new BindDirection(_flow.DbOpenConnection39,binding_getter1129,binding_setter1091,BindTargetType.ToInProperty);
            _flow.DbFetchData145.InDirections.Add(bind_dir1091);
            XmlDocument DbFetchData145_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData145_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData145_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData145.ExpectedOutputProperties = DbFetchData145_ExpectedOutputProperties_Document;
            _flow.DbFetchData146.QueryString = @"select OutputValue from tb_new_sendmessage_verification where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData146.Timeout = (int)30;
            _flow.DbFetchData146.Comment = @"";
            _flow.DbFetchData146.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData146.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi2221 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1130 = new VTDObjectGetter(pi2221);
            VTDPropertyInfoBase pi2222 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1092 = new VTDObjectSetter(pi2222);
            binding_setter1092 = new StringFormaterDecorator(binding_setter1092,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir1092 = new BindDirection(_flow.Loop140,binding_getter1130,binding_setter1092,BindTargetType.ToInProperty);
            _flow.DbFetchData146.InDirections.Add(bind_dir1092);
            VTDPropertyInfoBase pi2223 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1131 = new VTDObjectGetter(pi2223);
            VTDPropertyInfoBase pi2224 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1093 = new VTDObjectSetter(pi2224);
            bind_dir1093 = new BindDirection(_flow.DbOpenConnection39,binding_getter1131,binding_setter1093,BindTargetType.ToInProperty);
            _flow.DbFetchData146.InDirections.Add(bind_dir1093);
            XmlDocument DbFetchData146_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData146_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData146_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData146.ExpectedOutputProperties = DbFetchData146_ExpectedOutputProperties_Document;
            _flow.DbFetchData147.QueryString = @"select ExpectationValue from tb_new_sendmessage_verification where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData147.Timeout = (int)30;
            _flow.DbFetchData147.Comment = @"";
            _flow.DbFetchData147.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData147.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi2225 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1132 = new VTDObjectGetter(pi2225);
            VTDPropertyInfoBase pi2226 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1094 = new VTDObjectSetter(pi2226);
            binding_setter1094 = new StringFormaterDecorator(binding_setter1094,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir1094 = new BindDirection(_flow.Loop140,binding_getter1132,binding_setter1094,BindTargetType.ToInProperty);
            _flow.DbFetchData147.InDirections.Add(bind_dir1094);
            VTDPropertyInfoBase pi2227 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1133 = new VTDObjectGetter(pi2227);
            VTDPropertyInfoBase pi2228 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1095 = new VTDObjectSetter(pi2228);
            bind_dir1095 = new BindDirection(_flow.DbOpenConnection39,binding_getter1133,binding_setter1095,BindTargetType.ToInProperty);
            _flow.DbFetchData147.InDirections.Add(bind_dir1095);
            XmlDocument DbFetchData147_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData147_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData147_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData147.ExpectedOutputProperties = DbFetchData147_ExpectedOutputProperties_Document;
            _flow.IfElse148.ConditionAsString = @"{Step.OutputProperties.DbFetchData146.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData147.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse148.Comment = @"";
            _flow.IfElse148.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse148.Name = @"填写Result";
            _flow.IfElse148.Activities.Add (_flow.IfElseBranch149);
            _flow.IfElse148.Activities.Add (_flow.IfElseBranch151);
            _flow.IfElseBranch149.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi2229 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1134 = new VTDXPathGetter(pi2229,XmlTypeCode.String);
            binding_getter1134 = new XPathGetterDecorator(binding_getter1134,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData146.GetParam(binding_getter1134),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi2230 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1135 = new VTDXPathGetter(pi2230,XmlTypeCode.String);
            binding_getter1135 = new XPathGetterDecorator(binding_getter1135,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData147.GetParam(binding_getter1135),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch149.Comment = @"";
            _flow.IfElseBranch149.IconPath = @"";
            _flow.IfElseBranch149.Name = @"是";
            _flow.IfElseBranch149.Activities.Add (_flow.DbFetchData150);
            _flow.IfElseBranch151.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch151.Comment = @"";
            _flow.IfElseBranch151.IconPath = @"";
            _flow.IfElseBranch151.Name = @"否";
            _flow.IfElseBranch151.Activities.Add (_flow.DbFetchData152);
            _flow.DbFetchData150.QueryString = @"update tb_new_sendmessage_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData150.Timeout = (int)30;
            _flow.DbFetchData150.Comment = @"";
            _flow.DbFetchData150.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData150.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi2231 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1136 = new VTDObjectGetter(pi2231);
            VTDPropertyInfoBase pi2232 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1096 = new VTDObjectSetter(pi2232);
            binding_setter1096 = new StringFormaterDecorator(binding_setter1096,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir1096 = new BindDirection(_flow.Loop140,binding_getter1136,binding_setter1096,BindTargetType.ToInProperty);
            _flow.DbFetchData150.InDirections.Add(bind_dir1096);
            VTDPropertyInfoBase pi2233 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1137 = new VTDObjectGetter(pi2233);
            VTDPropertyInfoBase pi2234 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1097 = new VTDObjectSetter(pi2234);
            bind_dir1097 = new BindDirection(_flow.DbOpenConnection39,binding_getter1137,binding_setter1097,BindTargetType.ToInProperty);
            _flow.DbFetchData150.InDirections.Add(bind_dir1097);
            XmlDocument DbFetchData150_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData150_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData150_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData150.ExpectedOutputProperties = DbFetchData150_ExpectedOutputProperties_Document;
            _flow.DbFetchData152.QueryString = @"update tb_new_sendmessage_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop140.CurrentIterationNumber}";
            _flow.DbFetchData152.Timeout = (int)30;
            _flow.DbFetchData152.Comment = @"";
            _flow.DbFetchData152.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData152.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi2235 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1138 = new VTDObjectGetter(pi2235);
            VTDPropertyInfoBase pi2236 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1098 = new VTDObjectSetter(pi2236);
            binding_setter1098 = new StringFormaterDecorator(binding_setter1098,"{Step.OutputProperties.Loop140.CurrentIterationNumber}");
            bind_dir1098 = new BindDirection(_flow.Loop140,binding_getter1138,binding_setter1098,BindTargetType.ToInProperty);
            _flow.DbFetchData152.InDirections.Add(bind_dir1098);
            VTDPropertyInfoBase pi2237 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1139 = new VTDObjectGetter(pi2237);
            VTDPropertyInfoBase pi2238 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1099 = new VTDObjectSetter(pi2238);
            bind_dir1099 = new BindDirection(_flow.DbOpenConnection39,binding_getter1139,binding_setter1099,BindTargetType.ToInProperty);
            _flow.DbFetchData152.InDirections.Add(bind_dir1099);
            XmlDocument DbFetchData152_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData152_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData152_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData152.ExpectedOutputProperties = DbFetchData152_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    