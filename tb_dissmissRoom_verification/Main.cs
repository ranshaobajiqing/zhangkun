/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_dissmissRoom_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir968 = null;
        public BindDirection bind_dir969 = null;
        public BindDirection bind_dir970 = null;
        public BindDirection bind_dir971 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity280 = null;
        public BindDirection bind_dir972 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity280_Policy = null;
        public BindDirection bind_dir973 = null;
        public BindDirection bind_dir974 = null;
        public BindDirection bind_dir975 = null;
        public BindDirection bind_dir976 = null;
        public BindDirection bind_dir977 = null;
        public BindDirection bind_dir978 = null;
        public BindDirection bind_dir979 = null;
        public BindDirection bind_dir980 = null;
        public BindDirection bind_dir981 = null;
        public BindDirection bind_dir982 = null;
        public BindDirection bind_dir983 = null;
        public BindDirection bind_dir984 = null;
        public BindDirection bind_dir985 = null;
        public BindDirection bind_dir986 = null;
        public BindDirection bind_dir987 = null;
        public BindDirection bind_dir988 = null;
        public BindDirection bind_dir989 = null;
        public BindDirection bind_dir990 = null;
        public BindDirection bind_dir991 = null;
        public BindDirection bind_dir992 = null;
        public BindDirection bind_dir993 = null;
        public BindDirection bind_dir994 = null;
        public BindDirection bind_dir995 = null;
        public BindDirection bind_dir996 = null;
        public BindDirection bind_dir997 = null;
        public BindDirection bind_dir998 = null;
        public BindDirection bind_dir999 = null;
        public BindDirection bind_dir1000 = null;
        public BindDirection bind_dir1001 = null;
        public BindDirection bind_dir1002 = null;
        public BindDirection bind_dir1003 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity281 = null;
        public BindDirection bind_dir1004 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity281_Policy = null;
        public BindDirection bind_dir1005 = null;
        public BindDirection bind_dir1006 = null;
        public BindDirection bind_dir1007 = null;
        public BindDirection bind_dir1008 = null;
        public BindDirection bind_dir1009 = null;
        public BindDirection bind_dir1010 = null;
        public BindDirection bind_dir1011 = null;
        public BindDirection bind_dir1012 = null;
        public BindDirection bind_dir1013 = null;
        public BindDirection bind_dir1014 = null;
        public BindDirection bind_dir1015 = null;
        public BindDirection bind_dir1016 = null;
        public BindDirection bind_dir1017 = null;
        public BindDirection bind_dir1018 = null;
        public BindDirection bind_dir1019 = null;
        public BindDirection bind_dir1020 = null;
        public BindDirection bind_dir1021 = null;
        public BindDirection bind_dir1022 = null;
        public BindDirection bind_dir1023 = null;
        public BindDirection bind_dir1024 = null;
        public BindDirection bind_dir1025 = null;
        public BindDirection bind_dir1026 = null;
        public BindDirection bind_dir1027 = null;
        public BindDirection bind_dir1028 = null;
        public BindDirection bind_dir1029 = null;
        public BindDirection bind_dir1030 = null;
        public BindDirection bind_dir1031 = null;
        public BindDirection bind_dir1032 = null;
        public BindDirection bind_dir1033 = null;
        public BindDirection bind_dir1034 = null;
        public BindDirection bind_dir1035 = null;
        public BindDirection bind_dir1036 = null;
        public BindDirection bind_dir1037 = null;
        public BindDirection bind_dir1038 = null;
        public BindDirection bind_dir1039 = null;
        public BindDirection bind_dir1040 = null;
        public BindDirection bind_dir1041 = null;
        public BindDirection bind_dir1042 = null;
        public BindDirection bind_dir1043 = null;
        public BindDirection bind_dir1044 = null;
        public BindDirection bind_dir1045 = null;
        public BindDirection bind_dir1046 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            FeaturesGroup fg3 = new FeaturesGroup();
            FeaturesGroup fg4 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity276 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity276");
            _flow.DataFetchActivity273 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity273");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity275 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity275");
            _flow.DataExporterActivity278 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity278");
            _flow.DataExporterCloseActivity279 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity279");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity274 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity274");
            _flow.DataDisconnectActivity277 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity277");
            this.DataCursorActivity280 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity280");
            this.DataCursorActivity280_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence271 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence271");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.CallQTPTest253 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest253");
            _flow.DbFetchData254 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData254");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData265 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData265");
            _flow.CallQTPTest266 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest266");
            _flow.DbFetchData267 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData267");
            _flow.HTTPActivity262 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity262");
            _flow.StringToJsonActivity263 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity263");
            _flow.DbFetchData268 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData268");
            _flow.CallQTPTest269 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest269");
            _flow.DbFetchData270 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData270");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity281 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity281");
            this.DataCursorActivity281_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence272 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence272");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity250 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity250");
            _flow.HTTPActivity251 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity251");
            _flow.StringToJsonActivity255 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity255");
            _flow.ReplaceStringActivity257 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity257");
            _flow.DbFetchData258 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData258");
            _flow.CallQTPTest259 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest259");
            _flow.DbFetchData260 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData260");
            _flow.ReplaceStringActivity261 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity261");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity276.Comment = @"";
            _flow.DataFetchActivity276.IconPath = @"";
            _flow.DataFetchActivity276.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity276.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity276_QueryParameters_Document = new XmlDocument();
            DataFetchActivity276_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity276Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity276_QueryParameters_Document.LoadXml(xmlDataFetchActivity276Params);
            _flow.DataFetchActivity276.QueryParameters = DataFetchActivity276_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity276);
            this.Activities.Add (_flow.DataFetchActivity276);
            _flow.DataFetchActivity273.Comment = @"";
            _flow.DataFetchActivity273.IconPath = @"";
            _flow.DataFetchActivity273.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity273.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity273_QueryParameters_Document = new XmlDocument();
            DataFetchActivity273_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity273Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity273_QueryParameters_Document.LoadXml(xmlDataFetchActivity273Params);
            _flow.DataFetchActivity273.QueryParameters = DataFetchActivity273_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity273);
            this.Activities.Add (_flow.DataFetchActivity273);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity280);
            _flow.Loop2.Activities.Add (_flow.Sequence271);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity275.Comment = @"";
            _flow.DataExporterActivity275.IconPath = @"";
            VTDPropertyInfoBase pi1971 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1004 = new VTDObjectGetter(pi1971);
            VTDPropertyInfoBase pi1972 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter968 = new VTDObjectSetter(pi1972);
            binding_setter968 = new StringFormaterDecorator(binding_setter968,"{Step.DataFetchActivity273.OutTable}");
            bind_dir968 = new BindDirection(_flow.DataFetchActivity273,binding_getter1004,binding_setter968,BindTargetType.ToInProperty);
            _flow.DataExporterActivity275.InDirections.Add(bind_dir968);
            this.Activities.Add (_flow.DataExporterActivity275);
            _flow.DataExporterActivity278.Comment = @"";
            _flow.DataExporterActivity278.IconPath = @"";
            VTDPropertyInfoBase pi1973 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1005 = new VTDObjectGetter(pi1973);
            VTDPropertyInfoBase pi1974 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter969 = new VTDObjectSetter(pi1974);
            binding_setter969 = new StringFormaterDecorator(binding_setter969,"{Step.DataFetchActivity276.OutTable}");
            bind_dir969 = new BindDirection(_flow.DataFetchActivity276,binding_getter1005,binding_setter969,BindTargetType.ToInProperty);
            _flow.DataExporterActivity278.InDirections.Add(bind_dir969);
            this.Activities.Add (_flow.DataExporterActivity278);
            _flow.DataExporterCloseActivity279.Comment = @"";
            _flow.DataExporterCloseActivity279.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity279);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity274.Comment = @"";
            _flow.DataDisconnectActivity274.IconPath = @"";
            VTDPropertyInfoBase pi1975 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1006 = new VTDObjectGetter(pi1975);
            VTDPropertyInfoBase pi1976 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter970 = new VTDObjectSetter(pi1976);
            binding_setter970 = new StringFormaterDecorator(binding_setter970,"{Step.DataFetchActivity273.OutTable}");
            bind_dir970 = new BindDirection(_flow.DataFetchActivity273,binding_getter1006,binding_setter970,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity274.InDirections.Add(bind_dir970);
            this.Activities.Add (_flow.DataDisconnectActivity274);
            _flow.DataDisconnectActivity277.Comment = @"";
            _flow.DataDisconnectActivity277.IconPath = @"";
            VTDPropertyInfoBase pi1977 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1007 = new VTDObjectGetter(pi1977);
            VTDPropertyInfoBase pi1978 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter971 = new VTDObjectSetter(pi1978);
            binding_setter971 = new StringFormaterDecorator(binding_setter971,"{Step.DataFetchActivity276.OutTable}");
            bind_dir971 = new BindDirection(_flow.DataFetchActivity276,binding_getter1007,binding_setter971,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity277.InDirections.Add(bind_dir971);
            this.Activities.Add (_flow.DataDisconnectActivity277);
            this.DataCursorActivity280.Comment = @"";
            this.DataCursorActivity280.IconPath = @"";
            VTDPropertyInfoBase pi1979 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1008 = new VTDObjectGetter(pi1979);
            VTDPropertyInfoBase pi1980 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter972 = new VTDObjectSetter(pi1980);
            binding_setter972 = new StringFormaterDecorator(binding_setter972,"{Step.DataFetchActivity273.OutTable}");
            bind_dir972 = new BindDirection(_flow.DataFetchActivity273,binding_getter1008,binding_setter972,BindTargetType.ToInProperty);
            this.DataCursorActivity280.InDirections.Add(bind_dir972);
            this.DataCursorActivity280_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity280_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity280_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity280_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity280_Policy.StartCondition.Value = "";
            this.DataCursorActivity280_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity280_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity280_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity280_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity280_Policy.EndCondition.Value = "";
            this.DataCursorActivity280_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity280_Policy.StepSize = 1;
            this.DataCursorActivity280_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity280.Policy = this.DataCursorActivity280_Policy;
            this.DataCursorActivity280.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity280.ResetCursor;
            _flow.Sequence271.Comment = @"";
            _flow.Sequence271.IconPath = @"";
            _flow.Sequence271.Name = @"序列271";
            _flow.Sequence271.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence271.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence271.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence271.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence271.Activities.Add (_flow.CallQTPTest253);
            _flow.Sequence271.Activities.Add (_flow.DbFetchData254);
            _flow.Sequence271.Activities.Add (_flow.Loop56);
            _flow.Sequence271.Activities.Add (_flow.DbFetchData265);
            _flow.Sequence271.Activities.Add (_flow.CallQTPTest266);
            _flow.Sequence271.Activities.Add (_flow.DbFetchData267);
            _flow.Sequence271.Activities.Add (_flow.HTTPActivity262);
            _flow.Sequence271.Activities.Add (_flow.StringToJsonActivity263);
            _flow.Sequence271.Activities.Add (_flow.DbFetchData268);
            _flow.Sequence271.Activities.Add (_flow.CallQTPTest269);
            _flow.Sequence271.Activities.Add (_flow.DbFetchData270);
            _flow.Sequence271.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence271.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_creategroup_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_dissmissRoom_verification表有效行数";
            VTDPropertyInfoBase pi1981 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1009 = new VTDObjectGetter(pi1981);
            VTDPropertyInfoBase pi1982 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter973 = new VTDObjectSetter(pi1982);
            bind_dir973 = new BindDirection(_flow.DbOpenConnection39,binding_getter1009,binding_setter973,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir973);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi1983 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1010 = new VTDObjectGetter(pi1983);
            VTDPropertyInfoBase pi1984 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter974 = new VTDObjectSetter(pi1984);
            bind_dir974 = new BindDirection(_flow.DbOpenConnection39,binding_getter1010,binding_setter974,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir974);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.DbFetchData252.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}DcVvwMFWs5{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"对/xmp/createGroup.php接口进行加密操作";
            VTDPropertyInfoBase pi1985 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1011 = new VTDXPathGetter(pi1985,XmlTypeCode.String);
            binding_getter1011 = new XPathGetterDecorator(binding_getter1011,"{Array0}",1);
            VTDPropertyInfoBase pi1986 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter975 = new VTDObjectSetter(pi1986);
            binding_setter975 = new StringFormaterDecorator(binding_setter975,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir975 = new BindDirection(_flow.DbFetchData247,binding_getter1011,binding_setter975,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir975);
            VTDPropertyInfoBase pi1987 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1012 = new VTDObjectGetter(pi1987);
            VTDPropertyInfoBase pi1988 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter976 = new VTDObjectSetter(pi1988);
            binding_setter976 = new StringFormaterDecorator(binding_setter976,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir976 = new BindDirection(this.DataCursorActivity280,binding_getter1012,binding_setter976,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir976);
            VTDPropertyInfoBase pi1989 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1013 = new VTDObjectGetter(pi1989);
            VTDPropertyInfoBase pi1990 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter977 = new VTDObjectSetter(pi1990);
            bind_dir977 = new BindDirection(_flow.DbOpenConnection39,binding_getter1013,binding_setter977,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir977);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.CallQTPTest253.Comment = @"";
            _flow.CallQTPTest253.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest253.Name = @"Encryption.SHA1";
            _flow.CallQTPTest253.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ScriptPath}");
            _flow.CallQTPTest253.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ActionName}");
            _flow.CallQTPTest253.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.Description}");
            _flow.CallQTPTest253.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.IsActionSelected}");
            _flow.CallQTPTest253.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ResultLocation}");
            _flow.CallQTPTest253.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.QCScriptPath}");
            _flow.DbFetchData254.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData254.Timeout = (int)30;
            _flow.DbFetchData254.Comment = @"";
            _flow.DbFetchData254.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData254.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1991 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1014 = new VTDObjectGetter(pi1991);
            VTDPropertyInfoBase pi1992 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter978 = new VTDObjectSetter(pi1992);
            bind_dir978 = new BindDirection(_flow.DbOpenConnection39,binding_getter1014,binding_setter978,BindTargetType.ToInProperty);
            _flow.DbFetchData254.InDirections.Add(bind_dir978);
            XmlDocument DbFetchData254_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData254_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData254_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData254.ExpectedOutputProperties = DbFetchData254_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop56.NumberOfIterations = (int)1;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_dissmissRoom_verification中的测试用例";
            _flow.Loop56.Activities.Add (this.DataCursorActivity281);
            _flow.Loop56.Activities.Add (_flow.Sequence272);
            _flow.DbFetchData265.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}DcVvwMFWs5{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData265.Timeout = (int)30;
            _flow.DbFetchData265.Comment = @"";
            _flow.DbFetchData265.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData265.Name = @"对/xmp/createGroup.php接口进行加密操作";
            VTDPropertyInfoBase pi1993 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1015 = new VTDXPathGetter(pi1993,XmlTypeCode.String);
            binding_getter1015 = new XPathGetterDecorator(binding_getter1015,"{Array0}",1);
            VTDPropertyInfoBase pi1994 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter979 = new VTDObjectSetter(pi1994);
            binding_setter979 = new StringFormaterDecorator(binding_setter979,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir979 = new BindDirection(_flow.DbFetchData247,binding_getter1015,binding_setter979,BindTargetType.ToInProperty);
            _flow.DbFetchData265.InDirections.Add(bind_dir979);
            VTDPropertyInfoBase pi1995 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1016 = new VTDObjectGetter(pi1995);
            VTDPropertyInfoBase pi1996 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter980 = new VTDObjectSetter(pi1996);
            binding_setter980 = new StringFormaterDecorator(binding_setter980,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir980 = new BindDirection(this.DataCursorActivity280,binding_getter1016,binding_setter980,BindTargetType.ToInProperty);
            _flow.DbFetchData265.InDirections.Add(bind_dir980);
            VTDPropertyInfoBase pi1997 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1017 = new VTDObjectGetter(pi1997);
            VTDPropertyInfoBase pi1998 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter981 = new VTDObjectSetter(pi1998);
            bind_dir981 = new BindDirection(_flow.DbOpenConnection39,binding_getter1017,binding_setter981,BindTargetType.ToInProperty);
            _flow.DbFetchData265.InDirections.Add(bind_dir981);
            XmlDocument DbFetchData265_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData265_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData265_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData265.ExpectedOutputProperties = DbFetchData265_ExpectedOutputProperties_Document;
            _flow.CallQTPTest266.Comment = @"";
            _flow.CallQTPTest266.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest266.Name = @"Encryption.SHA1";
            _flow.CallQTPTest266.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ScriptPath}");
            _flow.CallQTPTest266.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ActionName}");
            _flow.CallQTPTest266.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.Description}");
            _flow.CallQTPTest266.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.IsActionSelected}");
            _flow.CallQTPTest266.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.ResultLocation}");
            _flow.CallQTPTest266.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest266.QCScriptPath}");
            _flow.DbFetchData267.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData267.Timeout = (int)30;
            _flow.DbFetchData267.Comment = @"";
            _flow.DbFetchData267.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData267.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1999 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1018 = new VTDObjectGetter(pi1999);
            VTDPropertyInfoBase pi2000 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter982 = new VTDObjectSetter(pi2000);
            bind_dir982 = new BindDirection(_flow.DbOpenConnection39,binding_getter1018,binding_setter982,BindTargetType.ToInProperty);
            _flow.DbFetchData267.InDirections.Add(bind_dir982);
            XmlDocument DbFetchData267_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData267_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData267_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData267.ExpectedOutputProperties = DbFetchData267_ExpectedOutputProperties_Document;
            _flow.HTTPActivity262.TextBody = @"xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}&Jid=77401169@365ime.com&groupName=测试群&groupDesc=hello，大家好！欢迎加入测试群&token={Step.OutputProperties.DbFetchData267.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity262.TextXmlBody = @"";
            _flow.HTTPActivity262.FileBody = @"";
            _flow.HTTPActivity262.PostBody = @"";
            _flow.HTTPActivity262.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.createGroup}";
            _flow.HTTPActivity262.HttpMethod = @"POST";
            _flow.HTTPActivity262.HttpVersion = @"1.1";
            _flow.HTTPActivity262.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity262.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity262.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity262.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity262.Comment = @"";
            _flow.HTTPActivity262.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity262.RequestBodyType = @"Text";
            _flow.HTTPActivity262.ResponseType = @"Text";
            _flow.HTTPActivity262.Name = @"调用/xmp/createGroup.php接口获取新的groupJid";
            _flow.HTTPActivity262.Proxy.Server = @"";
            _flow.HTTPActivity262.Proxy.Username = @"";
            _flow.HTTPActivity262.Proxy.Password = @"";
            _flow.HTTPActivity262.Authentication.Username = @"";
            _flow.HTTPActivity262.Authentication.Password = @"";
            _flow.HTTPActivity262.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity262.Timeout = (int)100000;
            _flow.HTTPActivity262.ClientCertificate.Password = @"";
            _flow.HTTPActivity262.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity262.UseClientCertificate = false;
            _flow.HTTPActivity262.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity262.AllowRedirections = true;
            _flow.HTTPActivity262.ReuseCookies = false;
            _flow.HTTPActivity262.ExpectServerError = false;
            XmlDocument HTTPActivity262_XMLBody_Document = new XmlDocument();
            HTTPActivity262_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity262_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity262.XMLBody = HTTPActivity262_XMLBody_Document;
            XmlDocument HTTPActivity262_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity262_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity262_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity262.RequestMultipartInfoXml = HTTPActivity262_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity262.Multipart=false;
            VTDPropertyInfoBase pi2001 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1019 = new VTDObjectGetter(pi2001);
            VTDPropertyInfoBase pi2002 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter983 = new VTDObjectSetter(pi2002);
            binding_setter983 = new StringFormaterDecorator(binding_setter983,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir983 = new BindDirection(this.DataCursorActivity280,binding_getter1019,binding_setter983,BindTargetType.ToInProperty);
            _flow.HTTPActivity262.InDirections.Add(bind_dir983);
            VTDPropertyInfoBase pi2003 = new VTDPropertyInfoBase("createGroup");
            VTDBaseGetter binding_getter1020 = new VTDObjectGetter(pi2003);
            VTDPropertyInfoBase pi2004 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter984 = new VTDObjectSetter(pi2004);
            binding_setter984 = new StringFormaterDecorator(binding_setter984,"{DataSource.tb_global_table.createGroup}");
            bind_dir984 = new BindDirection(this.DataCursorActivity280,binding_getter1020,binding_setter984,BindTargetType.ToInProperty);
            _flow.HTTPActivity262.InDirections.Add(bind_dir984);
            VTDPropertyInfoBase pi2005 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1021 = new VTDObjectGetter(pi2005);
            VTDPropertyInfoBase pi2006 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter985 = new VTDObjectSetter(pi2006);
            binding_setter985 = new StringFormaterDecorator(binding_setter985,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir985 = new BindDirection(this.DataCursorActivity280,binding_getter1021,binding_setter985,BindTargetType.ToInProperty);
            _flow.HTTPActivity262.InDirections.Add(bind_dir985);
            VTDPropertyInfoBase pi2007 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1022 = new VTDObjectGetter(pi2007);
            VTDPropertyInfoBase pi2008 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter986 = new VTDObjectSetter(pi2008);
            binding_setter986 = new StringFormaterDecorator(binding_setter986,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir986 = new BindDirection(this.DataCursorActivity280,binding_getter1022,binding_setter986,BindTargetType.ToInProperty);
            _flow.HTTPActivity262.InDirections.Add(bind_dir986);
            VTDPropertyInfoBase pi2009 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1023 = new VTDXPathGetter(pi2009,XmlTypeCode.String);
            binding_getter1023 = new XPathGetterDecorator(binding_getter1023,"{Array0}",1);
            VTDPropertyInfoBase pi2010 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter987 = new VTDObjectSetter(pi2010);
            binding_setter987 = new StringFormaterDecorator(binding_setter987,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir987 = new BindDirection(_flow.DbFetchData247,binding_getter1023,binding_setter987,BindTargetType.ToInProperty);
            _flow.HTTPActivity262.InDirections.Add(bind_dir987);
            VTDPropertyInfoBase pi2011 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1024 = new VTDXPathGetter(pi2011,XmlTypeCode.String);
            binding_getter1024 = new XPathGetterDecorator(binding_getter1024,"{Array0}",1);
            VTDPropertyInfoBase pi2012 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter988 = new VTDObjectSetter(pi2012);
            binding_setter988 = new StringFormaterDecorator(binding_setter988,"{Step.OutputProperties.DbFetchData267.ResultTable.Row[1].EncryptionResult}");
            bind_dir988 = new BindDirection(_flow.DbFetchData267,binding_getter1024,binding_setter988,BindTargetType.ToInProperty);
            _flow.HTTPActivity262.InDirections.Add(bind_dir988);
            XmlDocument HTTPActivity262_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity262_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity262_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity262.ExpectedResponseXmlBody = HTTPActivity262_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity262_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity262_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity262_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity262.ExpectedResponseJsonBody = HTTPActivity262_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity262_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity262_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity262_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity262.ExpectedOutputProperties = HTTPActivity262_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity263.InputString = @"{Step.OutputProperties.HTTPActivity262.ResponseBody}";
            _flow.StringToJsonActivity263.Comment = @"";
            _flow.StringToJsonActivity263.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity263.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi2013 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1025 = new VTDObjectGetter(pi2013);
            VTDPropertyInfoBase pi2014 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter989 = new VTDObjectSetter(pi2014);
            binding_setter989 = new StringFormaterDecorator(binding_setter989,"{Step.OutputProperties.HTTPActivity262.ResponseBody}");
            bind_dir989 = new BindDirection(_flow.HTTPActivity262,binding_getter1025,binding_setter989,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity263.InDirections.Add(bind_dir989);
            _flow.DbFetchData268.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6{Step.JsonContent.StringToJsonActivity263.groupJid}' where TestCase = 1";
            _flow.DbFetchData268.Timeout = (int)30;
            _flow.DbFetchData268.Comment = @"";
            _flow.DbFetchData268.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData268.Name = @"对/xmp/diss.php接口进行加密操作";
            VTDPropertyInfoBase pi2015 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1026 = new VTDObjectGetter(pi2015);
            VTDPropertyInfoBase pi2016 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter990 = new VTDObjectSetter(pi2016);
            binding_setter990 = new StringFormaterDecorator(binding_setter990,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir990 = new BindDirection(this.DataCursorActivity280,binding_getter1026,binding_setter990,BindTargetType.ToInProperty);
            _flow.DbFetchData268.InDirections.Add(bind_dir990);
            VTDPropertyInfoBase pi2017 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1027 = new VTDJsonGetter(pi2017);
            VTDPropertyInfoBase pi2018 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter991 = new VTDObjectSetter(pi2018);
            binding_setter991 = new StringFormaterDecorator(binding_setter991,"{Step.JsonContent.StringToJsonActivity263.groupJid}");
            bind_dir991 = new BindDirection(_flow.StringToJsonActivity263,binding_getter1027,binding_setter991,BindTargetType.ToInProperty);
            _flow.DbFetchData268.InDirections.Add(bind_dir991);
            VTDPropertyInfoBase pi2019 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1028 = new VTDObjectGetter(pi2019);
            VTDPropertyInfoBase pi2020 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter992 = new VTDObjectSetter(pi2020);
            bind_dir992 = new BindDirection(_flow.DbOpenConnection39,binding_getter1028,binding_setter992,BindTargetType.ToInProperty);
            _flow.DbFetchData268.InDirections.Add(bind_dir992);
            XmlDocument DbFetchData268_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData268_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData268_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData268.ExpectedOutputProperties = DbFetchData268_ExpectedOutputProperties_Document;
            _flow.CallQTPTest269.Comment = @"";
            _flow.CallQTPTest269.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest269.Name = @"Encryption.SHA1";
            _flow.CallQTPTest269.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.ScriptPath}");
            _flow.CallQTPTest269.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.ActionName}");
            _flow.CallQTPTest269.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.Description}");
            _flow.CallQTPTest269.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.IsActionSelected}");
            _flow.CallQTPTest269.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.ResultLocation}");
            _flow.CallQTPTest269.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest269.QCScriptPath}");
            _flow.DbFetchData270.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData270.Timeout = (int)30;
            _flow.DbFetchData270.Comment = @"";
            _flow.DbFetchData270.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData270.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi2021 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1029 = new VTDObjectGetter(pi2021);
            VTDPropertyInfoBase pi2022 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter993 = new VTDObjectSetter(pi2022);
            bind_dir993 = new BindDirection(_flow.DbOpenConnection39,binding_getter1029,binding_setter993,BindTargetType.ToInProperty);
            _flow.DbFetchData270.InDirections.Add(bind_dir993);
            XmlDocument DbFetchData270_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData270_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData270_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData270.ExpectedOutputProperties = DbFetchData270_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}&Jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&roomJid={Step.JsonContent.StringToJsonActivity263.groupJid}&token={Step.OutputProperties.DbFetchData270.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.dissmissRoom}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/xmp/diss.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi2023 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1030 = new VTDObjectGetter(pi2023);
            VTDPropertyInfoBase pi2024 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter994 = new VTDObjectSetter(pi2024);
            binding_setter994 = new StringFormaterDecorator(binding_setter994,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir994 = new BindDirection(this.DataCursorActivity280,binding_getter1030,binding_setter994,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir994);
            VTDPropertyInfoBase pi2025 = new VTDPropertyInfoBase("dissmissRoom");
            VTDBaseGetter binding_getter1031 = new VTDObjectGetter(pi2025);
            VTDPropertyInfoBase pi2026 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter995 = new VTDObjectSetter(pi2026);
            binding_setter995 = new StringFormaterDecorator(binding_setter995,"{DataSource.tb_global_table.dissmissRoom}");
            bind_dir995 = new BindDirection(this.DataCursorActivity280,binding_getter1031,binding_setter995,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir995);
            VTDPropertyInfoBase pi2027 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1032 = new VTDObjectGetter(pi2027);
            VTDPropertyInfoBase pi2028 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter996 = new VTDObjectSetter(pi2028);
            binding_setter996 = new StringFormaterDecorator(binding_setter996,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir996 = new BindDirection(this.DataCursorActivity280,binding_getter1032,binding_setter996,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir996);
            VTDPropertyInfoBase pi2029 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1033 = new VTDObjectGetter(pi2029);
            VTDPropertyInfoBase pi2030 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter997 = new VTDObjectSetter(pi2030);
            binding_setter997 = new StringFormaterDecorator(binding_setter997,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir997 = new BindDirection(this.DataCursorActivity280,binding_getter1033,binding_setter997,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir997);
            VTDPropertyInfoBase pi2031 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1034 = new VTDXPathGetter(pi2031,XmlTypeCode.String);
            binding_getter1034 = new XPathGetterDecorator(binding_getter1034,"{Array0}",1);
            VTDPropertyInfoBase pi2032 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter998 = new VTDObjectSetter(pi2032);
            binding_setter998 = new StringFormaterDecorator(binding_setter998,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir998 = new BindDirection(_flow.DbFetchData247,binding_getter1034,binding_setter998,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir998);
            VTDPropertyInfoBase pi2033 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1035 = new VTDObjectGetter(pi2033);
            VTDPropertyInfoBase pi2034 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter999 = new VTDObjectSetter(pi2034);
            binding_setter999 = new StringFormaterDecorator(binding_setter999,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir999 = new BindDirection(this.DataCursorActivity280,binding_getter1035,binding_setter999,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir999);
            VTDPropertyInfoBase pi2035 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1036 = new VTDJsonGetter(pi2035);
            VTDPropertyInfoBase pi2036 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1000 = new VTDObjectSetter(pi2036);
            binding_setter1000 = new StringFormaterDecorator(binding_setter1000,"{Step.JsonContent.StringToJsonActivity263.groupJid}");
            bind_dir1000 = new BindDirection(_flow.StringToJsonActivity263,binding_getter1036,binding_setter1000,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1000);
            VTDPropertyInfoBase pi2037 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1037 = new VTDXPathGetter(pi2037,XmlTypeCode.String);
            binding_getter1037 = new XPathGetterDecorator(binding_getter1037,"{Array0}",1);
            VTDPropertyInfoBase pi2038 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1001 = new VTDObjectSetter(pi2038);
            binding_setter1001 = new StringFormaterDecorator(binding_setter1001,"{Step.OutputProperties.DbFetchData270.ResultTable.Row[1].EncryptionResult}");
            bind_dir1001 = new BindDirection(_flow.DbFetchData270,binding_getter1037,binding_setter1001,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1001);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/xmp/diss.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi2039 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1038 = new VTDObjectGetter(pi2039);
            VTDPropertyInfoBase pi2040 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1002 = new VTDObjectSetter(pi2040);
            binding_setter1002 = new StringFormaterDecorator(binding_setter1002,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir1002 = new BindDirection(_flow.HTTPActivity73,binding_getter1038,binding_setter1002,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1002);
            VTDPropertyInfoBase pi2041 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1039 = new VTDObjectGetter(pi2041);
            VTDPropertyInfoBase pi2042 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1003 = new VTDObjectSetter(pi2042);
            bind_dir1003 = new BindDirection(_flow.DbOpenConnection39,binding_getter1039,binding_setter1003,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1003);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity281.Comment = @"";
            this.DataCursorActivity281.IconPath = @"";
            VTDPropertyInfoBase pi2043 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1040 = new VTDObjectGetter(pi2043);
            VTDPropertyInfoBase pi2044 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1004 = new VTDObjectSetter(pi2044);
            binding_setter1004 = new StringFormaterDecorator(binding_setter1004,"{Step.DataFetchActivity273.OutTable}");
            bind_dir1004 = new BindDirection(_flow.DataFetchActivity273,binding_getter1040,binding_setter1004,BindTargetType.ToInProperty);
            this.DataCursorActivity281.InDirections.Add(bind_dir1004);
            this.DataCursorActivity281_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity281_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity281_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity281_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity281_Policy.StartCondition.Value = "";
            this.DataCursorActivity281_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity281_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity281_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity281_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity281_Policy.EndCondition.Value = "";
            this.DataCursorActivity281_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity281_Policy.StepSize = 1;
            this.DataCursorActivity281_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity281.Policy = this.DataCursorActivity281_Policy;
            this.DataCursorActivity281.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity281.ResetCursor;
            _flow.Sequence272.Comment = @"";
            _flow.Sequence272.IconPath = @"";
            _flow.Sequence272.Name = @"序列272";
            _flow.Sequence272.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence272.Activities.Add (_flow.ReplaceStringActivity250);
            _flow.Sequence272.Activities.Add (_flow.HTTPActivity251);
            _flow.Sequence272.Activities.Add (_flow.StringToJsonActivity255);
            _flow.Sequence272.Activities.Add (_flow.ReplaceStringActivity257);
            _flow.Sequence272.Activities.Add (_flow.DbFetchData258);
            _flow.Sequence272.Activities.Add (_flow.CallQTPTest259);
            _flow.Sequence272.Activities.Add (_flow.DbFetchData260);
            _flow.Sequence272.Activities.Add (_flow.ReplaceStringActivity261);
            _flow.Sequence272.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence272.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence272.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence272.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence272.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence272.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence272.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,roomJid,Jid,token from tb_dissmissRoom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_dissmissRoom_verification表中字段信息";
            VTDPropertyInfoBase pi2045 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1041 = new VTDObjectGetter(pi2045);
            VTDPropertyInfoBase pi2046 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1005 = new VTDObjectSetter(pi2046);
            binding_setter1005 = new StringFormaterDecorator(binding_setter1005,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1005 = new BindDirection(_flow.Loop56,binding_getter1041,binding_setter1005,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1005);
            VTDPropertyInfoBase pi2047 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1042 = new VTDObjectGetter(pi2047);
            VTDPropertyInfoBase pi2048 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1006 = new VTDObjectSetter(pi2048);
            bind_dir1006 = new BindDirection(_flow.DbOpenConnection39,binding_getter1042,binding_setter1006,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1006);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><roomJid /><Jid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity250.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity250.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity250.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity250.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity250.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity250.CaseSensitive = true;
            _flow.ReplaceStringActivity250.Comment = @"";
            _flow.ReplaceStringActivity250.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity250.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi2049 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter1043 = new VTDXPathGetter(pi2049,XmlTypeCode.String);
            binding_getter1043 = new XPathGetterDecorator(binding_getter1043,"{Array0}",1);
            VTDPropertyInfoBase pi2050 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1007 = new VTDObjectSetter(pi2050);
            binding_setter1007 = new StringFormaterDecorator(binding_setter1007,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir1007 = new BindDirection(_flow.DbFetchData57,binding_getter1043,binding_setter1007,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity250.InDirections.Add(bind_dir1007);
            VTDPropertyInfoBase pi2051 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1044 = new VTDXPathGetter(pi2051,XmlTypeCode.String);
            binding_getter1044 = new XPathGetterDecorator(binding_getter1044,"{Array0}",1);
            VTDPropertyInfoBase pi2052 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1008 = new VTDObjectSetter(pi2052);
            binding_setter1008 = new StringFormaterDecorator(binding_setter1008,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1008 = new BindDirection(_flow.DbFetchData247,binding_getter1044,binding_setter1008,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity250.InDirections.Add(bind_dir1008);
            _flow.HTTPActivity251.TextBody = @"xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}&Jid=77401169@365ime.com&groupName=测试群&groupDesc=hello，大家好！欢迎加入测试群&token={Step.OutputProperties.DbFetchData254.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity251.TextXmlBody = @"";
            _flow.HTTPActivity251.FileBody = @"";
            _flow.HTTPActivity251.PostBody = @"";
            _flow.HTTPActivity251.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.createGroup}";
            _flow.HTTPActivity251.HttpMethod = @"POST";
            _flow.HTTPActivity251.HttpVersion = @"1.1";
            _flow.HTTPActivity251.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity251.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity251.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity251.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity251.Comment = @"";
            _flow.HTTPActivity251.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity251.RequestBodyType = @"Text";
            _flow.HTTPActivity251.ResponseType = @"Text";
            _flow.HTTPActivity251.Name = @"调用/xmp/createGroup.php接口获取新的groupJid";
            _flow.HTTPActivity251.Proxy.Server = @"";
            _flow.HTTPActivity251.Proxy.Username = @"";
            _flow.HTTPActivity251.Proxy.Password = @"";
            _flow.HTTPActivity251.Authentication.Username = @"";
            _flow.HTTPActivity251.Authentication.Password = @"";
            _flow.HTTPActivity251.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity251.Timeout = (int)100000;
            _flow.HTTPActivity251.ClientCertificate.Password = @"";
            _flow.HTTPActivity251.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity251.UseClientCertificate = false;
            _flow.HTTPActivity251.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity251.AllowRedirections = true;
            _flow.HTTPActivity251.ReuseCookies = false;
            _flow.HTTPActivity251.ExpectServerError = false;
            XmlDocument HTTPActivity251_XMLBody_Document = new XmlDocument();
            HTTPActivity251_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity251_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity251.XMLBody = HTTPActivity251_XMLBody_Document;
            XmlDocument HTTPActivity251_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity251_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity251_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity251.RequestMultipartInfoXml = HTTPActivity251_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity251.Multipart=false;
            VTDPropertyInfoBase pi2053 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1045 = new VTDObjectGetter(pi2053);
            VTDPropertyInfoBase pi2054 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1009 = new VTDObjectSetter(pi2054);
            binding_setter1009 = new StringFormaterDecorator(binding_setter1009,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1009 = new BindDirection(this.DataCursorActivity281,binding_getter1045,binding_setter1009,BindTargetType.ToInProperty);
            _flow.HTTPActivity251.InDirections.Add(bind_dir1009);
            VTDPropertyInfoBase pi2055 = new VTDPropertyInfoBase("createGroup");
            VTDBaseGetter binding_getter1046 = new VTDObjectGetter(pi2055);
            VTDPropertyInfoBase pi2056 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1010 = new VTDObjectSetter(pi2056);
            binding_setter1010 = new StringFormaterDecorator(binding_setter1010,"{DataSource.tb_global_table.createGroup}");
            bind_dir1010 = new BindDirection(this.DataCursorActivity281,binding_getter1046,binding_setter1010,BindTargetType.ToInProperty);
            _flow.HTTPActivity251.InDirections.Add(bind_dir1010);
            VTDPropertyInfoBase pi2057 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1047 = new VTDObjectGetter(pi2057);
            VTDPropertyInfoBase pi2058 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1011 = new VTDObjectSetter(pi2058);
            binding_setter1011 = new StringFormaterDecorator(binding_setter1011,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1011 = new BindDirection(this.DataCursorActivity281,binding_getter1047,binding_setter1011,BindTargetType.ToInProperty);
            _flow.HTTPActivity251.InDirections.Add(bind_dir1011);
            VTDPropertyInfoBase pi2059 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1048 = new VTDObjectGetter(pi2059);
            VTDPropertyInfoBase pi2060 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1012 = new VTDObjectSetter(pi2060);
            binding_setter1012 = new StringFormaterDecorator(binding_setter1012,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1012 = new BindDirection(this.DataCursorActivity281,binding_getter1048,binding_setter1012,BindTargetType.ToInProperty);
            _flow.HTTPActivity251.InDirections.Add(bind_dir1012);
            VTDPropertyInfoBase pi2061 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1049 = new VTDXPathGetter(pi2061,XmlTypeCode.String);
            binding_getter1049 = new XPathGetterDecorator(binding_getter1049,"{Array0}",1);
            VTDPropertyInfoBase pi2062 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1013 = new VTDObjectSetter(pi2062);
            binding_setter1013 = new StringFormaterDecorator(binding_setter1013,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1013 = new BindDirection(_flow.DbFetchData247,binding_getter1049,binding_setter1013,BindTargetType.ToInProperty);
            _flow.HTTPActivity251.InDirections.Add(bind_dir1013);
            VTDPropertyInfoBase pi2063 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1050 = new VTDXPathGetter(pi2063,XmlTypeCode.String);
            binding_getter1050 = new XPathGetterDecorator(binding_getter1050,"{Array0}",1);
            VTDPropertyInfoBase pi2064 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1014 = new VTDObjectSetter(pi2064);
            binding_setter1014 = new StringFormaterDecorator(binding_setter1014,"{Step.OutputProperties.DbFetchData254.ResultTable.Row[1].EncryptionResult}");
            bind_dir1014 = new BindDirection(_flow.DbFetchData254,binding_getter1050,binding_setter1014,BindTargetType.ToInProperty);
            _flow.HTTPActivity251.InDirections.Add(bind_dir1014);
            XmlDocument HTTPActivity251_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity251_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity251_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity251.ExpectedResponseXmlBody = HTTPActivity251_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity251_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity251_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity251_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity251.ExpectedResponseJsonBody = HTTPActivity251_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity251_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity251_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity251_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity251.ExpectedOutputProperties = HTTPActivity251_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity255.InputString = @"{Step.OutputProperties.HTTPActivity251.ResponseBody}";
            _flow.StringToJsonActivity255.Comment = @"";
            _flow.StringToJsonActivity255.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity255.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi2065 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1051 = new VTDObjectGetter(pi2065);
            VTDPropertyInfoBase pi2066 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1015 = new VTDObjectSetter(pi2066);
            binding_setter1015 = new StringFormaterDecorator(binding_setter1015,"{Step.OutputProperties.HTTPActivity251.ResponseBody}");
            bind_dir1015 = new BindDirection(_flow.HTTPActivity251,binding_getter1051,binding_setter1015,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity255.InDirections.Add(bind_dir1015);
            _flow.ReplaceStringActivity257.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}";
            _flow.ReplaceStringActivity257.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity257.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity257.SearchReplaceString[0].Key = @"b84ff35507754b1db1631c26abdc61f0@muc.365ime.com";
            _flow.ReplaceStringActivity257.SearchReplaceString[0].Value = @"{Step.JsonContent.StringToJsonActivity255.groupJid}";
            _flow.ReplaceStringActivity257.CaseSensitive = true;
            _flow.ReplaceStringActivity257.Comment = @"";
            _flow.ReplaceStringActivity257.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity257.Name = @"更新groupJid";
            VTDPropertyInfoBase pi2067 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='roomJid'][1]");
            VTDBaseGetter binding_getter1052 = new VTDXPathGetter(pi2067,XmlTypeCode.String);
            binding_getter1052 = new XPathGetterDecorator(binding_getter1052,"{Array0}",1);
            VTDPropertyInfoBase pi2068 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1016 = new VTDObjectSetter(pi2068);
            binding_setter1016 = new StringFormaterDecorator(binding_setter1016,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}");
            bind_dir1016 = new BindDirection(_flow.DbFetchData57,binding_getter1052,binding_setter1016,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity257.InDirections.Add(bind_dir1016);
            VTDPropertyInfoBase pi2069 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1053 = new VTDJsonGetter(pi2069);
            VTDPropertyInfoBase pi2070 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1017 = new VTDObjectSetter(pi2070);
            binding_setter1017 = new StringFormaterDecorator(binding_setter1017,"{Step.JsonContent.StringToJsonActivity255.groupJid}");
            bind_dir1017 = new BindDirection(_flow.StringToJsonActivity255,binding_getter1053,binding_setter1017,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity257.InDirections.Add(bind_dir1017);
            _flow.DbFetchData258.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}DeVawMFWs6{Step.OutputProperties.ReplaceStringActivity257.Result}' where TestCase = 1";
            _flow.DbFetchData258.Timeout = (int)30;
            _flow.DbFetchData258.Comment = @"";
            _flow.DbFetchData258.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData258.Name = @"对/xmp/diss.php接口token进行加密";
            VTDPropertyInfoBase pi2071 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter1054 = new VTDXPathGetter(pi2071,XmlTypeCode.String);
            binding_getter1054 = new XPathGetterDecorator(binding_getter1054,"{Array0}",1);
            VTDPropertyInfoBase pi2072 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1018 = new VTDObjectSetter(pi2072);
            binding_setter1018 = new StringFormaterDecorator(binding_setter1018,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir1018 = new BindDirection(_flow.DbFetchData57,binding_getter1054,binding_setter1018,BindTargetType.ToInProperty);
            _flow.DbFetchData258.InDirections.Add(bind_dir1018);
            VTDPropertyInfoBase pi2073 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1055 = new VTDObjectGetter(pi2073);
            VTDPropertyInfoBase pi2074 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1019 = new VTDObjectSetter(pi2074);
            binding_setter1019 = new StringFormaterDecorator(binding_setter1019,"{Step.OutputProperties.ReplaceStringActivity257.Result}");
            bind_dir1019 = new BindDirection(_flow.ReplaceStringActivity257,binding_getter1055,binding_setter1019,BindTargetType.ToInProperty);
            _flow.DbFetchData258.InDirections.Add(bind_dir1019);
            VTDPropertyInfoBase pi2075 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1056 = new VTDObjectGetter(pi2075);
            VTDPropertyInfoBase pi2076 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1020 = new VTDObjectSetter(pi2076);
            bind_dir1020 = new BindDirection(_flow.DbOpenConnection39,binding_getter1056,binding_setter1020,BindTargetType.ToInProperty);
            _flow.DbFetchData258.InDirections.Add(bind_dir1020);
            XmlDocument DbFetchData258_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData258_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData258_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData258.ExpectedOutputProperties = DbFetchData258_ExpectedOutputProperties_Document;
            _flow.CallQTPTest259.Comment = @"";
            _flow.CallQTPTest259.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest259.Name = @"Encryption.SHA1";
            _flow.CallQTPTest259.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ScriptPath}");
            _flow.CallQTPTest259.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ActionName}");
            _flow.CallQTPTest259.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.Description}");
            _flow.CallQTPTest259.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.IsActionSelected}");
            _flow.CallQTPTest259.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.ResultLocation}");
            _flow.CallQTPTest259.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest259.QCScriptPath}");
            _flow.DbFetchData260.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData260.Timeout = (int)30;
            _flow.DbFetchData260.Comment = @"";
            _flow.DbFetchData260.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData260.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi2077 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1057 = new VTDObjectGetter(pi2077);
            VTDPropertyInfoBase pi2078 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1021 = new VTDObjectSetter(pi2078);
            bind_dir1021 = new BindDirection(_flow.DbOpenConnection39,binding_getter1057,binding_setter1021,BindTargetType.ToInProperty);
            _flow.DbFetchData260.InDirections.Add(bind_dir1021);
            XmlDocument DbFetchData260_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData260_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData260_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData260.ExpectedOutputProperties = DbFetchData260_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity261.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity261.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity261.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity261.SearchReplaceString[0].Key = @"72738f03c2eb66d693992576857807ee7718b2fc";
            _flow.ReplaceStringActivity261.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData260.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity261.CaseSensitive = true;
            _flow.ReplaceStringActivity261.Comment = @"";
            _flow.ReplaceStringActivity261.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity261.Name = @"替换token";
            VTDPropertyInfoBase pi2079 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter1058 = new VTDXPathGetter(pi2079,XmlTypeCode.String);
            binding_getter1058 = new XPathGetterDecorator(binding_getter1058,"{Array0}",1);
            VTDPropertyInfoBase pi2080 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1022 = new VTDObjectSetter(pi2080);
            binding_setter1022 = new StringFormaterDecorator(binding_setter1022,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir1022 = new BindDirection(_flow.DbFetchData57,binding_getter1058,binding_setter1022,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity261.InDirections.Add(bind_dir1022);
            VTDPropertyInfoBase pi2081 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1059 = new VTDXPathGetter(pi2081,XmlTypeCode.String);
            binding_getter1059 = new XPathGetterDecorator(binding_getter1059,"{Array0}",1);
            VTDPropertyInfoBase pi2082 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1023 = new VTDObjectSetter(pi2082);
            binding_setter1023 = new StringFormaterDecorator(binding_setter1023,"{Step.OutputProperties.DbFetchData260.ResultTable.Row[1].EncryptionResult}");
            bind_dir1023 = new BindDirection(_flow.DbFetchData260,binding_getter1059,binding_setter1023,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity261.InDirections.Add(bind_dir1023);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity250.Result}&Jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}&roomJid={Step.OutputProperties.ReplaceStringActivity257.Result}&token={Step.OutputProperties.ReplaceStringActivity261.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.dissmissRoom}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/xmp/diss.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi2083 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1060 = new VTDObjectGetter(pi2083);
            VTDPropertyInfoBase pi2084 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1024 = new VTDObjectSetter(pi2084);
            binding_setter1024 = new StringFormaterDecorator(binding_setter1024,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1024 = new BindDirection(this.DataCursorActivity281,binding_getter1060,binding_setter1024,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1024);
            VTDPropertyInfoBase pi2085 = new VTDPropertyInfoBase("dissmissRoom");
            VTDBaseGetter binding_getter1061 = new VTDObjectGetter(pi2085);
            VTDPropertyInfoBase pi2086 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1025 = new VTDObjectSetter(pi2086);
            binding_setter1025 = new StringFormaterDecorator(binding_setter1025,"{DataSource.tb_global_table.dissmissRoom}");
            bind_dir1025 = new BindDirection(this.DataCursorActivity281,binding_getter1061,binding_setter1025,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1025);
            VTDPropertyInfoBase pi2087 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1062 = new VTDObjectGetter(pi2087);
            VTDPropertyInfoBase pi2088 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1026 = new VTDObjectSetter(pi2088);
            binding_setter1026 = new StringFormaterDecorator(binding_setter1026,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1026 = new BindDirection(this.DataCursorActivity281,binding_getter1062,binding_setter1026,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1026);
            VTDPropertyInfoBase pi2089 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1063 = new VTDObjectGetter(pi2089);
            VTDPropertyInfoBase pi2090 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1027 = new VTDObjectSetter(pi2090);
            binding_setter1027 = new StringFormaterDecorator(binding_setter1027,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1027 = new BindDirection(this.DataCursorActivity281,binding_getter1063,binding_setter1027,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1027);
            VTDPropertyInfoBase pi2091 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1064 = new VTDObjectGetter(pi2091);
            VTDPropertyInfoBase pi2092 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1028 = new VTDObjectSetter(pi2092);
            binding_setter1028 = new StringFormaterDecorator(binding_setter1028,"{Step.OutputProperties.ReplaceStringActivity250.Result}");
            bind_dir1028 = new BindDirection(_flow.ReplaceStringActivity250,binding_getter1064,binding_setter1028,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1028);
            VTDPropertyInfoBase pi2093 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter1065 = new VTDXPathGetter(pi2093,XmlTypeCode.String);
            binding_getter1065 = new XPathGetterDecorator(binding_getter1065,"{Array0}",1);
            VTDPropertyInfoBase pi2094 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1029 = new VTDObjectSetter(pi2094);
            binding_setter1029 = new StringFormaterDecorator(binding_setter1029,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir1029 = new BindDirection(_flow.DbFetchData57,binding_getter1065,binding_setter1029,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1029);
            VTDPropertyInfoBase pi2095 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1066 = new VTDObjectGetter(pi2095);
            VTDPropertyInfoBase pi2096 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1030 = new VTDObjectSetter(pi2096);
            binding_setter1030 = new StringFormaterDecorator(binding_setter1030,"{Step.OutputProperties.ReplaceStringActivity257.Result}");
            bind_dir1030 = new BindDirection(_flow.ReplaceStringActivity257,binding_getter1066,binding_setter1030,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1030);
            VTDPropertyInfoBase pi2097 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1067 = new VTDObjectGetter(pi2097);
            VTDPropertyInfoBase pi2098 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1031 = new VTDObjectSetter(pi2098);
            binding_setter1031 = new StringFormaterDecorator(binding_setter1031,"{Step.OutputProperties.ReplaceStringActivity261.Result}");
            bind_dir1031 = new BindDirection(_flow.ReplaceStringActivity261,binding_getter1067,binding_setter1031,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1031);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi2099 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1068 = new VTDObjectGetter(pi2099);
            VTDPropertyInfoBase pi2100 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1032 = new VTDObjectSetter(pi2100);
            binding_setter1032 = new StringFormaterDecorator(binding_setter1032,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1032 = new BindDirection(_flow.HTTPActivity59,binding_getter1068,binding_setter1032,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir1032);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_dissmissRoom_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi2101 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1069 = new VTDObjectGetter(pi2101);
            VTDPropertyInfoBase pi2102 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1033 = new VTDObjectSetter(pi2102);
            binding_setter1033 = new StringFormaterDecorator(binding_setter1033,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1033 = new BindDirection(_flow.HTTPActivity59,binding_getter1069,binding_setter1033,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1033);
            VTDPropertyInfoBase pi2103 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1070 = new VTDObjectGetter(pi2103);
            VTDPropertyInfoBase pi2104 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1034 = new VTDObjectSetter(pi2104);
            binding_setter1034 = new StringFormaterDecorator(binding_setter1034,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1034 = new BindDirection(_flow.Loop56,binding_getter1070,binding_setter1034,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1034);
            VTDPropertyInfoBase pi2105 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1071 = new VTDObjectGetter(pi2105);
            VTDPropertyInfoBase pi2106 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1035 = new VTDObjectSetter(pi2106);
            bind_dir1035 = new BindDirection(_flow.DbOpenConnection39,binding_getter1071,binding_setter1035,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1035);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_dissmissRoom_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi2107 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1072 = new VTDJsonGetter(pi2107);
            VTDPropertyInfoBase pi2108 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1036 = new VTDObjectSetter(pi2108);
            binding_setter1036 = new StringFormaterDecorator(binding_setter1036,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir1036 = new BindDirection(_flow.StringToJsonActivity60,binding_getter1072,binding_setter1036,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1036);
            VTDPropertyInfoBase pi2109 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1073 = new VTDObjectGetter(pi2109);
            VTDPropertyInfoBase pi2110 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1037 = new VTDObjectSetter(pi2110);
            binding_setter1037 = new StringFormaterDecorator(binding_setter1037,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1037 = new BindDirection(_flow.Loop56,binding_getter1073,binding_setter1037,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1037);
            VTDPropertyInfoBase pi2111 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1074 = new VTDObjectGetter(pi2111);
            VTDPropertyInfoBase pi2112 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1038 = new VTDObjectSetter(pi2112);
            bind_dir1038 = new BindDirection(_flow.DbOpenConnection39,binding_getter1074,binding_setter1038,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1038);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_dissmissRoom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi2113 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1075 = new VTDObjectGetter(pi2113);
            VTDPropertyInfoBase pi2114 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1039 = new VTDObjectSetter(pi2114);
            binding_setter1039 = new StringFormaterDecorator(binding_setter1039,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1039 = new BindDirection(_flow.Loop56,binding_getter1075,binding_setter1039,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1039);
            VTDPropertyInfoBase pi2115 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1076 = new VTDObjectGetter(pi2115);
            VTDPropertyInfoBase pi2116 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1040 = new VTDObjectSetter(pi2116);
            bind_dir1040 = new BindDirection(_flow.DbOpenConnection39,binding_getter1076,binding_setter1040,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1040);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_dissmissRoom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi2117 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1077 = new VTDObjectGetter(pi2117);
            VTDPropertyInfoBase pi2118 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1041 = new VTDObjectSetter(pi2118);
            binding_setter1041 = new StringFormaterDecorator(binding_setter1041,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1041 = new BindDirection(_flow.Loop56,binding_getter1077,binding_setter1041,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1041);
            VTDPropertyInfoBase pi2119 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1078 = new VTDObjectGetter(pi2119);
            VTDPropertyInfoBase pi2120 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1042 = new VTDObjectSetter(pi2120);
            bind_dir1042 = new BindDirection(_flow.DbOpenConnection39,binding_getter1078,binding_setter1042,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1042);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi2121 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1079 = new VTDXPathGetter(pi2121,XmlTypeCode.String);
            binding_getter1079 = new XPathGetterDecorator(binding_getter1079,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter1079),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi2122 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1080 = new VTDXPathGetter(pi2122,XmlTypeCode.String);
            binding_getter1080 = new XPathGetterDecorator(binding_getter1080,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter1080),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_dissmissRoom_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi2123 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1081 = new VTDObjectGetter(pi2123);
            VTDPropertyInfoBase pi2124 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1043 = new VTDObjectSetter(pi2124);
            binding_setter1043 = new StringFormaterDecorator(binding_setter1043,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1043 = new BindDirection(_flow.Loop56,binding_getter1081,binding_setter1043,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1043);
            VTDPropertyInfoBase pi2125 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1082 = new VTDObjectGetter(pi2125);
            VTDPropertyInfoBase pi2126 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1044 = new VTDObjectSetter(pi2126);
            bind_dir1044 = new BindDirection(_flow.DbOpenConnection39,binding_getter1082,binding_setter1044,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1044);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_dissmissRoom_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi2127 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1083 = new VTDObjectGetter(pi2127);
            VTDPropertyInfoBase pi2128 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1045 = new VTDObjectSetter(pi2128);
            binding_setter1045 = new StringFormaterDecorator(binding_setter1045,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1045 = new BindDirection(_flow.Loop56,binding_getter1083,binding_setter1045,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1045);
            VTDPropertyInfoBase pi2129 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1084 = new VTDObjectGetter(pi2129);
            VTDPropertyInfoBase pi2130 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1046 = new VTDObjectSetter(pi2130);
            bind_dir1046 = new BindDirection(_flow.DbOpenConnection39,binding_getter1084,binding_setter1046,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1046);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    