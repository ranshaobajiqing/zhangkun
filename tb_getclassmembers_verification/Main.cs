/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getclassmembers_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir223 = null;
        public BindDirection bind_dir224 = null;
        public BindDirection bind_dir225 = null;
        public BindDirection bind_dir226 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity261 = null;
        public BindDirection bind_dir227 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity261_Policy = null;
        public BindDirection bind_dir228 = null;
        public BindDirection bind_dir229 = null;
        public BindDirection bind_dir230 = null;
        public BindDirection bind_dir231 = null;
        public BindDirection bind_dir232 = null;
        public BindDirection bind_dir233 = null;
        public BindDirection bind_dir234 = null;
        public BindDirection bind_dir235 = null;
        public BindDirection bind_dir236 = null;
        public BindDirection bind_dir237 = null;
        public BindDirection bind_dir238 = null;
        public BindDirection bind_dir239 = null;
        public BindDirection bind_dir240 = null;
        public BindDirection bind_dir241 = null;
        public BindDirection bind_dir242 = null;
        public BindDirection bind_dir243 = null;
        public BindDirection bind_dir244 = null;
        public BindDirection bind_dir245 = null;
        public BindDirection bind_dir246 = null;
        public BindDirection bind_dir247 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity262 = null;
        public BindDirection bind_dir248 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity262_Policy = null;
        public BindDirection bind_dir249 = null;
        public BindDirection bind_dir250 = null;
        public BindDirection bind_dir251 = null;
        public BindDirection bind_dir252 = null;
        public BindDirection bind_dir253 = null;
        public BindDirection bind_dir254 = null;
        public BindDirection bind_dir255 = null;
        public BindDirection bind_dir256 = null;
        public BindDirection bind_dir257 = null;
        public BindDirection bind_dir258 = null;
        public BindDirection bind_dir259 = null;
        public BindDirection bind_dir260 = null;
        public BindDirection bind_dir261 = null;
        public BindDirection bind_dir262 = null;
        public BindDirection bind_dir263 = null;
        public BindDirection bind_dir264 = null;
        public BindDirection bind_dir265 = null;
        public BindDirection bind_dir266 = null;
        public BindDirection bind_dir267 = null;
        public BindDirection bind_dir268 = null;
        public BindDirection bind_dir269 = null;
        public BindDirection bind_dir270 = null;
        public BindDirection bind_dir271 = null;
        public BindDirection bind_dir272 = null;
        public BindDirection bind_dir273 = null;
        public BindDirection bind_dir274 = null;
        public BindDirection bind_dir275 = null;
        public BindDirection bind_dir276 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity257 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity257");
            _flow.DataFetchActivity254 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity254");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity256 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity256");
            _flow.DataExporterActivity259 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity259");
            _flow.DataExporterCloseActivity260 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity260");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity255 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity255");
            _flow.DataDisconnectActivity258 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity258");
            this.DataCursorActivity261 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity261");
            this.DataCursorActivity261_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence252 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence252");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData158 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData158");
            _flow.Loop159 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop159Input>(_context,"Loop159",LoopType.For);
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.DbFetchData172 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData172");
            _flow.CallQTPTest173 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest173");
            _flow.DbFetchData178 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData178");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.HTTPActivity175 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity175");
            _flow.StringToJsonActivity179 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity179");
            _flow.DbFetchData176 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData176");
            this.DataCursorActivity262 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity262");
            this.DataCursorActivity262_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence253 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence253");
            _flow.DbFetchData160 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData160");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.HTTPActivity161 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity161");
            _flow.StringToJsonActivity162 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity162");
            _flow.DbFetchData163 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData163");
            _flow.DbFetchData164 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData164");
            _flow.DbFetchData165 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData165");
            _flow.DbFetchData166 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData166");
            _flow.IfElse167 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse167Input>(_context,"IfElse167");
            _flow.IfElseBranch168 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch168");
            _flow.IfElseBranch170 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch170");
            _flow.DbFetchData169 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData169");
            _flow.DbFetchData171 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData171");
            _flow.DataFetchActivity257.Comment = @"";
            _flow.DataFetchActivity257.IconPath = @"";
            _flow.DataFetchActivity257.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity257.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity257_QueryParameters_Document = new XmlDocument();
            DataFetchActivity257_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity257Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity257_QueryParameters_Document.LoadXml(xmlDataFetchActivity257Params);
            _flow.DataFetchActivity257.QueryParameters = DataFetchActivity257_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity257);
            this.Activities.Add (_flow.DataFetchActivity257);
            _flow.DataFetchActivity254.Comment = @"";
            _flow.DataFetchActivity254.IconPath = @"";
            _flow.DataFetchActivity254.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity254.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity254_QueryParameters_Document = new XmlDocument();
            DataFetchActivity254_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity254Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity254_QueryParameters_Document.LoadXml(xmlDataFetchActivity254Params);
            _flow.DataFetchActivity254.QueryParameters = DataFetchActivity254_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity254);
            this.Activities.Add (_flow.DataFetchActivity254);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity261);
            _flow.Loop2.Activities.Add (_flow.Sequence252);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity256.Comment = @"";
            _flow.DataExporterActivity256.IconPath = @"";
            VTDPropertyInfoBase pi453 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter231 = new VTDObjectGetter(pi453);
            VTDPropertyInfoBase pi454 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter223 = new VTDObjectSetter(pi454);
            binding_setter223 = new StringFormaterDecorator(binding_setter223,"{Step.DataFetchActivity254.OutTable}");
            bind_dir223 = new BindDirection(_flow.DataFetchActivity254,binding_getter231,binding_setter223,BindTargetType.ToInProperty);
            _flow.DataExporterActivity256.InDirections.Add(bind_dir223);
            this.Activities.Add (_flow.DataExporterActivity256);
            _flow.DataExporterActivity259.Comment = @"";
            _flow.DataExporterActivity259.IconPath = @"";
            VTDPropertyInfoBase pi455 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter232 = new VTDObjectGetter(pi455);
            VTDPropertyInfoBase pi456 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter224 = new VTDObjectSetter(pi456);
            binding_setter224 = new StringFormaterDecorator(binding_setter224,"{Step.DataFetchActivity257.OutTable}");
            bind_dir224 = new BindDirection(_flow.DataFetchActivity257,binding_getter232,binding_setter224,BindTargetType.ToInProperty);
            _flow.DataExporterActivity259.InDirections.Add(bind_dir224);
            this.Activities.Add (_flow.DataExporterActivity259);
            _flow.DataExporterCloseActivity260.Comment = @"";
            _flow.DataExporterCloseActivity260.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity260);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity255.Comment = @"";
            _flow.DataDisconnectActivity255.IconPath = @"";
            VTDPropertyInfoBase pi457 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter233 = new VTDObjectGetter(pi457);
            VTDPropertyInfoBase pi458 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter225 = new VTDObjectSetter(pi458);
            binding_setter225 = new StringFormaterDecorator(binding_setter225,"{Step.DataFetchActivity254.OutTable}");
            bind_dir225 = new BindDirection(_flow.DataFetchActivity254,binding_getter233,binding_setter225,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity255.InDirections.Add(bind_dir225);
            this.Activities.Add (_flow.DataDisconnectActivity255);
            _flow.DataDisconnectActivity258.Comment = @"";
            _flow.DataDisconnectActivity258.IconPath = @"";
            VTDPropertyInfoBase pi459 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter234 = new VTDObjectGetter(pi459);
            VTDPropertyInfoBase pi460 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter226 = new VTDObjectSetter(pi460);
            binding_setter226 = new StringFormaterDecorator(binding_setter226,"{Step.DataFetchActivity257.OutTable}");
            bind_dir226 = new BindDirection(_flow.DataFetchActivity257,binding_getter234,binding_setter226,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity258.InDirections.Add(bind_dir226);
            this.Activities.Add (_flow.DataDisconnectActivity258);
            this.DataCursorActivity261.Comment = @"";
            this.DataCursorActivity261.IconPath = @"";
            VTDPropertyInfoBase pi461 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter235 = new VTDObjectGetter(pi461);
            VTDPropertyInfoBase pi462 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter227 = new VTDObjectSetter(pi462);
            binding_setter227 = new StringFormaterDecorator(binding_setter227,"{Step.DataFetchActivity254.OutTable}");
            bind_dir227 = new BindDirection(_flow.DataFetchActivity254,binding_getter235,binding_setter227,BindTargetType.ToInProperty);
            this.DataCursorActivity261.InDirections.Add(bind_dir227);
            this.DataCursorActivity261_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity261_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity261_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity261_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity261_Policy.StartCondition.Value = "";
            this.DataCursorActivity261_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity261_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity261_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity261_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity261_Policy.EndCondition.Value = "";
            this.DataCursorActivity261_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity261_Policy.StepSize = 1;
            this.DataCursorActivity261_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity261.Policy = this.DataCursorActivity261_Policy;
            this.DataCursorActivity261.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity261.ResetCursor;
            _flow.Sequence252.Comment = @"";
            _flow.Sequence252.IconPath = @"";
            _flow.Sequence252.Name = @"序列252";
            _flow.Sequence252.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData158);
            _flow.Sequence252.Activities.Add (_flow.Loop159);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData172);
            _flow.Sequence252.Activities.Add (_flow.CallQTPTest173);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData178);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence252.Activities.Add (_flow.HTTPActivity175);
            _flow.Sequence252.Activities.Add (_flow.StringToJsonActivity179);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData176);
            _flow.DbOpenConnection39.ConnectionString = @"{DataSource.tb_global_table.MysqlOdbc}";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            VTDPropertyInfoBase pi463 = new VTDPropertyInfoBase("MysqlOdbc");
            VTDBaseGetter binding_getter236 = new VTDObjectGetter(pi463);
            VTDPropertyInfoBase pi464 = new VTDPropertyInfoBase("ConnectionString");
            VTDBaseSetter binding_setter228 = new VTDObjectSetter(pi464);
            binding_setter228 = new StringFormaterDecorator(binding_setter228,"{DataSource.tb_global_table.MysqlOdbc}");
            bind_dir228 = new BindDirection(this.DataCursorActivity261,binding_getter236,binding_setter228,BindTargetType.ToInProperty);
            _flow.DbOpenConnection39.InDirections.Add(bind_dir228);
            _flow.DbFetchData158.QueryString = @"select count(*) as 'Row' from tb_getclassmembers_verification";
            _flow.DbFetchData158.Timeout = (int)30;
            _flow.DbFetchData158.Comment = @"";
            _flow.DbFetchData158.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData158.Name = @"获取到tb_getclassmembers_verification表有效行数";
            VTDPropertyInfoBase pi465 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter237 = new VTDObjectGetter(pi465);
            VTDPropertyInfoBase pi466 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter229 = new VTDObjectSetter(pi466);
            bind_dir229 = new BindDirection(_flow.DbOpenConnection39,binding_getter237,binding_setter229,BindTargetType.ToInProperty);
            _flow.DbFetchData158.InDirections.Add(bind_dir229);
            XmlDocument DbFetchData158_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData158_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData158_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData158.ExpectedOutputProperties = DbFetchData158_ExpectedOutputProperties_Document;
            _flow.Loop159.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop159.NumberOfIterations = (int)1;
            _flow.Loop159.Comment = @"";
            _flow.Loop159.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop159.Name = @"循环执行tb_getclassmembers_verification中的测试用例";
            VTDPropertyInfoBase pi467 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter238 = new VTDXPathGetter(pi467,XmlTypeCode.Long);
            binding_getter238 = new XPathGetterDecorator(binding_getter238,"{Array0}",1);
            VTDPropertyInfoBase pi468 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter230 = new VTDObjectSetter(pi468);
            bind_dir230 = new BindDirection(_flow.DbFetchData158,binding_getter238,binding_setter230,BindTargetType.ToInProperty);
            _flow.Loop159.InDirections.Add(bind_dir230);
            _flow.Loop159.Activities.Add (this.DataCursorActivity262);
            _flow.Loop159.Activities.Add (_flow.Sequence253);
            _flow.DbFetchData246.QueryString = @"select classJid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中classJid值";
            VTDPropertyInfoBase pi469 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter239 = new VTDObjectGetter(pi469);
            VTDPropertyInfoBase pi470 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter231 = new VTDObjectSetter(pi470);
            bind_dir231 = new BindDirection(_flow.DbOpenConnection39,binding_getter239,binding_setter231,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir231);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><classJid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.DbFetchData172.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].classJid}' where TestCase = 1";
            _flow.DbFetchData172.Timeout = (int)30;
            _flow.DbFetchData172.Comment = @"";
            _flow.DbFetchData172.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData172.Name = @"对/jxt/getClassMembers.php接口token实行加密";
            VTDPropertyInfoBase pi471 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter240 = new VTDObjectGetter(pi471);
            VTDPropertyInfoBase pi472 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter232 = new VTDObjectSetter(pi472);
            binding_setter232 = new StringFormaterDecorator(binding_setter232,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir232 = new BindDirection(this.DataCursorActivity261,binding_getter240,binding_setter232,BindTargetType.ToInProperty);
            _flow.DbFetchData172.InDirections.Add(bind_dir232);
            VTDPropertyInfoBase pi473 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='classJid'][1]");
            VTDBaseGetter binding_getter241 = new VTDXPathGetter(pi473,XmlTypeCode.String);
            binding_getter241 = new XPathGetterDecorator(binding_getter241,"{Array0}",1);
            VTDPropertyInfoBase pi474 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter233 = new VTDObjectSetter(pi474);
            binding_setter233 = new StringFormaterDecorator(binding_setter233,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].classJid}");
            bind_dir233 = new BindDirection(_flow.DbFetchData246,binding_getter241,binding_setter233,BindTargetType.ToInProperty);
            _flow.DbFetchData172.InDirections.Add(bind_dir233);
            VTDPropertyInfoBase pi475 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter242 = new VTDObjectGetter(pi475);
            VTDPropertyInfoBase pi476 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter234 = new VTDObjectSetter(pi476);
            bind_dir234 = new BindDirection(_flow.DbOpenConnection39,binding_getter242,binding_setter234,BindTargetType.ToInProperty);
            _flow.DbFetchData172.InDirections.Add(bind_dir234);
            XmlDocument DbFetchData172_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData172_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData172_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData172.ExpectedOutputProperties = DbFetchData172_ExpectedOutputProperties_Document;
            _flow.CallQTPTest173.Comment = @"";
            _flow.CallQTPTest173.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest173.Name = @"Encryption.SHA1";
            _flow.CallQTPTest173.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ScriptPath}");
            _flow.CallQTPTest173.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ActionName}");
            _flow.CallQTPTest173.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.Description}");
            _flow.CallQTPTest173.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.IsActionSelected}");
            _flow.CallQTPTest173.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ResultLocation}");
            _flow.CallQTPTest173.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.QCScriptPath}");
            _flow.DbFetchData178.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData178.Timeout = (int)30;
            _flow.DbFetchData178.Comment = @"";
            _flow.DbFetchData178.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData178.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi477 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter243 = new VTDObjectGetter(pi477);
            VTDPropertyInfoBase pi478 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter235 = new VTDObjectSetter(pi478);
            bind_dir235 = new BindDirection(_flow.DbOpenConnection39,binding_getter243,binding_setter235,BindTargetType.ToInProperty);
            _flow.DbFetchData178.InDirections.Add(bind_dir235);
            XmlDocument DbFetchData178_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData178_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData178_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData178.ExpectedOutputProperties = DbFetchData178_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi479 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter244 = new VTDObjectGetter(pi479);
            VTDPropertyInfoBase pi480 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter236 = new VTDObjectSetter(pi480);
            bind_dir236 = new BindDirection(_flow.DbOpenConnection39,binding_getter244,binding_setter236,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir236);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.HTTPActivity175.TextBody = @"myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}&token={Step.OutputProperties.DbFetchData178.ResultTable.Row[1].EncryptionResult}&classJid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].classJid}";
            _flow.HTTPActivity175.TextXmlBody = @"";
            _flow.HTTPActivity175.FileBody = @"";
            _flow.HTTPActivity175.PostBody = @"";
            _flow.HTTPActivity175.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getClassMembers}";
            _flow.HTTPActivity175.HttpMethod = @"POST";
            _flow.HTTPActivity175.HttpVersion = @"1.1";
            _flow.HTTPActivity175.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity175.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity175.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity175.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity175.Comment = @"";
            _flow.HTTPActivity175.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity175.RequestBodyType = @"Text";
            _flow.HTTPActivity175.ResponseType = @"Text";
            _flow.HTTPActivity175.Name = @"调用/jxt/getClassMembers.php";
            _flow.HTTPActivity175.Proxy.Server = @"";
            _flow.HTTPActivity175.Proxy.Username = @"";
            _flow.HTTPActivity175.Proxy.Password = @"";
            _flow.HTTPActivity175.Authentication.Username = @"";
            _flow.HTTPActivity175.Authentication.Password = @"";
            _flow.HTTPActivity175.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity175.Timeout = (int)100000;
            _flow.HTTPActivity175.ClientCertificate.Password = @"";
            _flow.HTTPActivity175.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity175.UseClientCertificate = false;
            _flow.HTTPActivity175.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity175.AllowRedirections = true;
            _flow.HTTPActivity175.ReuseCookies = false;
            _flow.HTTPActivity175.ExpectServerError = false;
            XmlDocument HTTPActivity175_XMLBody_Document = new XmlDocument();
            HTTPActivity175_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity175_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity175.XMLBody = HTTPActivity175_XMLBody_Document;
            XmlDocument HTTPActivity175_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity175_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity175_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity175.RequestMultipartInfoXml = HTTPActivity175_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity175.Multipart=false;
            VTDPropertyInfoBase pi481 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter245 = new VTDObjectGetter(pi481);
            VTDPropertyInfoBase pi482 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter237 = new VTDObjectSetter(pi482);
            binding_setter237 = new StringFormaterDecorator(binding_setter237,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir237 = new BindDirection(this.DataCursorActivity261,binding_getter245,binding_setter237,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir237);
            VTDPropertyInfoBase pi483 = new VTDPropertyInfoBase("getClassMembers");
            VTDBaseGetter binding_getter246 = new VTDObjectGetter(pi483);
            VTDPropertyInfoBase pi484 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter238 = new VTDObjectSetter(pi484);
            binding_setter238 = new StringFormaterDecorator(binding_setter238,"{DataSource.tb_global_table.getClassMembers}");
            bind_dir238 = new BindDirection(this.DataCursorActivity261,binding_getter246,binding_setter238,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir238);
            VTDPropertyInfoBase pi485 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter247 = new VTDObjectGetter(pi485);
            VTDPropertyInfoBase pi486 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter239 = new VTDObjectSetter(pi486);
            binding_setter239 = new StringFormaterDecorator(binding_setter239,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir239 = new BindDirection(this.DataCursorActivity261,binding_getter247,binding_setter239,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir239);
            VTDPropertyInfoBase pi487 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter248 = new VTDObjectGetter(pi487);
            VTDPropertyInfoBase pi488 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter240 = new VTDObjectSetter(pi488);
            binding_setter240 = new StringFormaterDecorator(binding_setter240,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir240 = new BindDirection(this.DataCursorActivity261,binding_getter248,binding_setter240,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir240);
            VTDPropertyInfoBase pi489 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter249 = new VTDObjectGetter(pi489);
            VTDPropertyInfoBase pi490 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter241 = new VTDObjectSetter(pi490);
            binding_setter241 = new StringFormaterDecorator(binding_setter241,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir241 = new BindDirection(this.DataCursorActivity261,binding_getter249,binding_setter241,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir241);
            VTDPropertyInfoBase pi491 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter250 = new VTDXPathGetter(pi491,XmlTypeCode.String);
            binding_getter250 = new XPathGetterDecorator(binding_getter250,"{Array0}",1);
            VTDPropertyInfoBase pi492 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter242 = new VTDObjectSetter(pi492);
            binding_setter242 = new StringFormaterDecorator(binding_setter242,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir242 = new BindDirection(_flow.DbFetchData247,binding_getter250,binding_setter242,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir242);
            VTDPropertyInfoBase pi493 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter251 = new VTDXPathGetter(pi493,XmlTypeCode.String);
            binding_getter251 = new XPathGetterDecorator(binding_getter251,"{Array0}",1);
            VTDPropertyInfoBase pi494 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter243 = new VTDObjectSetter(pi494);
            binding_setter243 = new StringFormaterDecorator(binding_setter243,"{Step.OutputProperties.DbFetchData178.ResultTable.Row[1].EncryptionResult}");
            bind_dir243 = new BindDirection(_flow.DbFetchData178,binding_getter251,binding_setter243,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir243);
            VTDPropertyInfoBase pi495 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='classJid'][1]");
            VTDBaseGetter binding_getter252 = new VTDXPathGetter(pi495,XmlTypeCode.String);
            binding_getter252 = new XPathGetterDecorator(binding_getter252,"{Array0}",1);
            VTDPropertyInfoBase pi496 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter244 = new VTDObjectSetter(pi496);
            binding_setter244 = new StringFormaterDecorator(binding_setter244,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].classJid}");
            bind_dir244 = new BindDirection(_flow.DbFetchData246,binding_getter252,binding_setter244,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir244);
            XmlDocument HTTPActivity175_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity175_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity175_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity175.ExpectedResponseXmlBody = HTTPActivity175_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity175_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity175_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity175_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity175.ExpectedResponseJsonBody = HTTPActivity175_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity175_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity175_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity175_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity175.ExpectedOutputProperties = HTTPActivity175_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity179.InputString = @"{Step.OutputProperties.HTTPActivity175.ResponseBody}";
            _flow.StringToJsonActivity179.Comment = @"";
            _flow.StringToJsonActivity179.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity179.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi497 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter253 = new VTDObjectGetter(pi497);
            VTDPropertyInfoBase pi498 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter245 = new VTDObjectSetter(pi498);
            binding_setter245 = new StringFormaterDecorator(binding_setter245,"{Step.OutputProperties.HTTPActivity175.ResponseBody}");
            bind_dir245 = new BindDirection(_flow.HTTPActivity175,binding_getter253,binding_setter245,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity179.InDirections.Add(bind_dir245);
            _flow.DbFetchData176.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity175.ResponseBody}' where InterfaceName = '/jxt/getClassMembers.php'";
            _flow.DbFetchData176.Timeout = (int)30;
            _flow.DbFetchData176.Comment = @"";
            _flow.DbFetchData176.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData176.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi499 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter254 = new VTDObjectGetter(pi499);
            VTDPropertyInfoBase pi500 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter246 = new VTDObjectSetter(pi500);
            binding_setter246 = new StringFormaterDecorator(binding_setter246,"{Step.OutputProperties.HTTPActivity175.ResponseBody}");
            bind_dir246 = new BindDirection(_flow.HTTPActivity175,binding_getter254,binding_setter246,BindTargetType.ToInProperty);
            _flow.DbFetchData176.InDirections.Add(bind_dir246);
            VTDPropertyInfoBase pi501 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter255 = new VTDObjectGetter(pi501);
            VTDPropertyInfoBase pi502 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter247 = new VTDObjectSetter(pi502);
            bind_dir247 = new BindDirection(_flow.DbOpenConnection39,binding_getter255,binding_setter247,BindTargetType.ToInProperty);
            _flow.DbFetchData176.InDirections.Add(bind_dir247);
            XmlDocument DbFetchData176_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData176_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData176_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData176.ExpectedOutputProperties = DbFetchData176_ExpectedOutputProperties_Document;
            this.DataCursorActivity262.Comment = @"";
            this.DataCursorActivity262.IconPath = @"";
            VTDPropertyInfoBase pi503 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter256 = new VTDObjectGetter(pi503);
            VTDPropertyInfoBase pi504 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter248 = new VTDObjectSetter(pi504);
            binding_setter248 = new StringFormaterDecorator(binding_setter248,"{Step.DataFetchActivity254.OutTable}");
            bind_dir248 = new BindDirection(_flow.DataFetchActivity254,binding_getter256,binding_setter248,BindTargetType.ToInProperty);
            this.DataCursorActivity262.InDirections.Add(bind_dir248);
            this.DataCursorActivity262_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity262_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity262_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity262_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity262_Policy.StartCondition.Value = "";
            this.DataCursorActivity262_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity262_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity262_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity262_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity262_Policy.EndCondition.Value = "";
            this.DataCursorActivity262_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity262_Policy.StepSize = 1;
            this.DataCursorActivity262_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity262.Policy = this.DataCursorActivity262_Policy;
            this.DataCursorActivity262.ReportStepData = false;
            _flow.Loop159.BeforeExecuteStepEvent += this.DataCursorActivity262.ResetCursor;
            _flow.Sequence253.Comment = @"";
            _flow.Sequence253.IconPath = @"";
            _flow.Sequence253.Name = @"序列253";
            _flow.Sequence253.Activities.Add (_flow.DbFetchData160);
            _flow.Sequence253.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence253.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence253.Activities.Add (_flow.HTTPActivity161);
            _flow.Sequence253.Activities.Add (_flow.StringToJsonActivity162);
            _flow.Sequence253.Activities.Add (_flow.DbFetchData163);
            _flow.Sequence253.Activities.Add (_flow.DbFetchData164);
            _flow.Sequence253.Activities.Add (_flow.DbFetchData165);
            _flow.Sequence253.Activities.Add (_flow.DbFetchData166);
            _flow.Sequence253.Activities.Add (_flow.IfElse167);
            _flow.DbFetchData160.QueryString = @"select xsid,myJid,classJid,token from tb_getclassmembers_verification where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData160.Timeout = (int)30;
            _flow.DbFetchData160.Comment = @"";
            _flow.DbFetchData160.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData160.Name = @"查询tb_getclassmembers_verification表中数据";
            VTDPropertyInfoBase pi505 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter257 = new VTDObjectGetter(pi505);
            VTDPropertyInfoBase pi506 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter249 = new VTDObjectSetter(pi506);
            binding_setter249 = new StringFormaterDecorator(binding_setter249,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir249 = new BindDirection(_flow.Loop159,binding_getter257,binding_setter249,BindTargetType.ToInProperty);
            _flow.DbFetchData160.InDirections.Add(bind_dir249);
            VTDPropertyInfoBase pi507 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter258 = new VTDObjectGetter(pi507);
            VTDPropertyInfoBase pi508 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter250 = new VTDObjectSetter(pi508);
            bind_dir250 = new BindDirection(_flow.DbOpenConnection39,binding_getter258,binding_setter250,BindTargetType.ToInProperty);
            _flow.DbFetchData160.InDirections.Add(bind_dir250);
            XmlDocument DbFetchData160_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData160_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData160_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><myJid /><classJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData160.ExpectedOutputProperties = DbFetchData160_ExpectedOutputProperties_Document;
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi509 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter259 = new VTDObjectGetter(pi509);
            VTDPropertyInfoBase pi510 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter251 = new VTDObjectSetter(pi510);
            bind_dir251 = new BindDirection(_flow.DbOpenConnection39,binding_getter259,binding_setter251,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir251);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi511 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter260 = new VTDXPathGetter(pi511,XmlTypeCode.String);
            binding_getter260 = new XPathGetterDecorator(binding_getter260,"{Array0}",1);
            VTDPropertyInfoBase pi512 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter252 = new VTDObjectSetter(pi512);
            binding_setter252 = new StringFormaterDecorator(binding_setter252,"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].xsid}");
            bind_dir252 = new BindDirection(_flow.DbFetchData160,binding_getter260,binding_setter252,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir252);
            VTDPropertyInfoBase pi513 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter261 = new VTDXPathGetter(pi513,XmlTypeCode.String);
            binding_getter261 = new XPathGetterDecorator(binding_getter261,"{Array0}",1);
            VTDPropertyInfoBase pi514 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter253 = new VTDObjectSetter(pi514);
            binding_setter253 = new StringFormaterDecorator(binding_setter253,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir253 = new BindDirection(_flow.DbFetchData248,binding_getter261,binding_setter253,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir253);
            _flow.HTTPActivity161.TextBody = @"myJid={Step.OutputProperties.DbFetchData160.ResultTable.Row[1].myJid}&xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&token={Step.OutputProperties.DbFetchData160.ResultTable.Row[1].token}&classJid={Step.OutputProperties.DbFetchData160.ResultTable.Row[1].classJid}";
            _flow.HTTPActivity161.TextXmlBody = @"";
            _flow.HTTPActivity161.FileBody = @"";
            _flow.HTTPActivity161.PostBody = @"";
            _flow.HTTPActivity161.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getClassMembers}";
            _flow.HTTPActivity161.HttpMethod = @"POST";
            _flow.HTTPActivity161.HttpVersion = @"1.1";
            _flow.HTTPActivity161.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity161.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity161.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity161.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity161.Comment = @"";
            _flow.HTTPActivity161.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity161.RequestBodyType = @"Text";
            _flow.HTTPActivity161.ResponseType = @"Text";
            _flow.HTTPActivity161.Name = @"调用/jxt/getClassMembers.php";
            _flow.HTTPActivity161.Proxy.Server = @"";
            _flow.HTTPActivity161.Proxy.Username = @"";
            _flow.HTTPActivity161.Proxy.Password = @"";
            _flow.HTTPActivity161.Authentication.Username = @"";
            _flow.HTTPActivity161.Authentication.Password = @"";
            _flow.HTTPActivity161.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity161.Timeout = (int)100000;
            _flow.HTTPActivity161.ClientCertificate.Password = @"";
            _flow.HTTPActivity161.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity161.UseClientCertificate = false;
            _flow.HTTPActivity161.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity161.AllowRedirections = true;
            _flow.HTTPActivity161.ReuseCookies = false;
            _flow.HTTPActivity161.ExpectServerError = false;
            XmlDocument HTTPActivity161_XMLBody_Document = new XmlDocument();
            HTTPActivity161_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity161_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity161.XMLBody = HTTPActivity161_XMLBody_Document;
            XmlDocument HTTPActivity161_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity161_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity161_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity161.RequestMultipartInfoXml = HTTPActivity161_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity161.Multipart=false;
            VTDPropertyInfoBase pi515 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter262 = new VTDObjectGetter(pi515);
            VTDPropertyInfoBase pi516 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter254 = new VTDObjectSetter(pi516);
            binding_setter254 = new StringFormaterDecorator(binding_setter254,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir254 = new BindDirection(this.DataCursorActivity262,binding_getter262,binding_setter254,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir254);
            VTDPropertyInfoBase pi517 = new VTDPropertyInfoBase("getClassMembers");
            VTDBaseGetter binding_getter263 = new VTDObjectGetter(pi517);
            VTDPropertyInfoBase pi518 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter255 = new VTDObjectSetter(pi518);
            binding_setter255 = new StringFormaterDecorator(binding_setter255,"{DataSource.tb_global_table.getClassMembers}");
            bind_dir255 = new BindDirection(this.DataCursorActivity262,binding_getter263,binding_setter255,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir255);
            VTDPropertyInfoBase pi519 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter264 = new VTDObjectGetter(pi519);
            VTDPropertyInfoBase pi520 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter256 = new VTDObjectSetter(pi520);
            binding_setter256 = new StringFormaterDecorator(binding_setter256,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir256 = new BindDirection(this.DataCursorActivity262,binding_getter264,binding_setter256,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir256);
            VTDPropertyInfoBase pi521 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter265 = new VTDObjectGetter(pi521);
            VTDPropertyInfoBase pi522 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter257 = new VTDObjectSetter(pi522);
            binding_setter257 = new StringFormaterDecorator(binding_setter257,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir257 = new BindDirection(this.DataCursorActivity262,binding_getter265,binding_setter257,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir257);
            VTDPropertyInfoBase pi523 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter266 = new VTDXPathGetter(pi523,XmlTypeCode.String);
            binding_getter266 = new XPathGetterDecorator(binding_getter266,"{Array0}",1);
            VTDPropertyInfoBase pi524 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter258 = new VTDObjectSetter(pi524);
            binding_setter258 = new StringFormaterDecorator(binding_setter258,"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].myJid}");
            bind_dir258 = new BindDirection(_flow.DbFetchData160,binding_getter266,binding_setter258,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir258);
            VTDPropertyInfoBase pi525 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter267 = new VTDObjectGetter(pi525);
            VTDPropertyInfoBase pi526 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter259 = new VTDObjectSetter(pi526);
            binding_setter259 = new StringFormaterDecorator(binding_setter259,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir259 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter267,binding_setter259,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir259);
            VTDPropertyInfoBase pi527 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter268 = new VTDXPathGetter(pi527,XmlTypeCode.String);
            binding_getter268 = new XPathGetterDecorator(binding_getter268,"{Array0}",1);
            VTDPropertyInfoBase pi528 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter260 = new VTDObjectSetter(pi528);
            binding_setter260 = new StringFormaterDecorator(binding_setter260,"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].token}");
            bind_dir260 = new BindDirection(_flow.DbFetchData160,binding_getter268,binding_setter260,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir260);
            VTDPropertyInfoBase pi529 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='classJid'][1]");
            VTDBaseGetter binding_getter269 = new VTDXPathGetter(pi529,XmlTypeCode.String);
            binding_getter269 = new XPathGetterDecorator(binding_getter269,"{Array0}",1);
            VTDPropertyInfoBase pi530 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter261 = new VTDObjectSetter(pi530);
            binding_setter261 = new StringFormaterDecorator(binding_setter261,"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].classJid}");
            bind_dir261 = new BindDirection(_flow.DbFetchData160,binding_getter269,binding_setter261,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir261);
            XmlDocument HTTPActivity161_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity161_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity161_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity161.ExpectedResponseXmlBody = HTTPActivity161_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity161_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity161_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity161_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity161.ExpectedResponseJsonBody = HTTPActivity161_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity161_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity161_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity161_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity161.ExpectedOutputProperties = HTTPActivity161_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity162.InputString = @"{Step.OutputProperties.HTTPActivity161.ResponseBody}";
            _flow.StringToJsonActivity162.Comment = @"";
            _flow.StringToJsonActivity162.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity162.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi531 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter270 = new VTDObjectGetter(pi531);
            VTDPropertyInfoBase pi532 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter262 = new VTDObjectSetter(pi532);
            binding_setter262 = new StringFormaterDecorator(binding_setter262,"{Step.OutputProperties.HTTPActivity161.ResponseBody}");
            bind_dir262 = new BindDirection(_flow.HTTPActivity161,binding_getter270,binding_setter262,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity162.InDirections.Add(bind_dir262);
            _flow.DbFetchData163.QueryString = @"UPDATE tb_getclassmembers_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity161.ResponseBody}' where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData163.Timeout = (int)30;
            _flow.DbFetchData163.Comment = @"";
            _flow.DbFetchData163.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData163.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi533 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter271 = new VTDObjectGetter(pi533);
            VTDPropertyInfoBase pi534 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter263 = new VTDObjectSetter(pi534);
            binding_setter263 = new StringFormaterDecorator(binding_setter263,"{Step.OutputProperties.HTTPActivity161.ResponseBody}");
            bind_dir263 = new BindDirection(_flow.HTTPActivity161,binding_getter271,binding_setter263,BindTargetType.ToInProperty);
            _flow.DbFetchData163.InDirections.Add(bind_dir263);
            VTDPropertyInfoBase pi535 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter272 = new VTDObjectGetter(pi535);
            VTDPropertyInfoBase pi536 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter264 = new VTDObjectSetter(pi536);
            binding_setter264 = new StringFormaterDecorator(binding_setter264,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir264 = new BindDirection(_flow.Loop159,binding_getter272,binding_setter264,BindTargetType.ToInProperty);
            _flow.DbFetchData163.InDirections.Add(bind_dir264);
            VTDPropertyInfoBase pi537 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter273 = new VTDObjectGetter(pi537);
            VTDPropertyInfoBase pi538 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter265 = new VTDObjectSetter(pi538);
            bind_dir265 = new BindDirection(_flow.DbOpenConnection39,binding_getter273,binding_setter265,BindTargetType.ToInProperty);
            _flow.DbFetchData163.InDirections.Add(bind_dir265);
            XmlDocument DbFetchData163_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData163_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData163_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData163.ExpectedOutputProperties = DbFetchData163_ExpectedOutputProperties_Document;
            _flow.DbFetchData164.QueryString = @"update tb_getclassmembers_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity162.errorCode}' where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData164.Timeout = (int)30;
            _flow.DbFetchData164.Comment = @"";
            _flow.DbFetchData164.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData164.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi539 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter274 = new VTDJsonGetter(pi539);
            VTDPropertyInfoBase pi540 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter266 = new VTDObjectSetter(pi540);
            binding_setter266 = new StringFormaterDecorator(binding_setter266,"{Step.JsonContent.StringToJsonActivity162.errorCode}");
            bind_dir266 = new BindDirection(_flow.StringToJsonActivity162,binding_getter274,binding_setter266,BindTargetType.ToInProperty);
            _flow.DbFetchData164.InDirections.Add(bind_dir266);
            VTDPropertyInfoBase pi541 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter275 = new VTDObjectGetter(pi541);
            VTDPropertyInfoBase pi542 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter267 = new VTDObjectSetter(pi542);
            binding_setter267 = new StringFormaterDecorator(binding_setter267,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir267 = new BindDirection(_flow.Loop159,binding_getter275,binding_setter267,BindTargetType.ToInProperty);
            _flow.DbFetchData164.InDirections.Add(bind_dir267);
            VTDPropertyInfoBase pi543 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter276 = new VTDObjectGetter(pi543);
            VTDPropertyInfoBase pi544 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter268 = new VTDObjectSetter(pi544);
            bind_dir268 = new BindDirection(_flow.DbOpenConnection39,binding_getter276,binding_setter268,BindTargetType.ToInProperty);
            _flow.DbFetchData164.InDirections.Add(bind_dir268);
            XmlDocument DbFetchData164_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData164_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData164_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData164.ExpectedOutputProperties = DbFetchData164_ExpectedOutputProperties_Document;
            _flow.DbFetchData165.QueryString = @"select OutputValue from tb_getclassmembers_verification where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData165.Timeout = (int)30;
            _flow.DbFetchData165.Comment = @"";
            _flow.DbFetchData165.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData165.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi545 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter277 = new VTDObjectGetter(pi545);
            VTDPropertyInfoBase pi546 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter269 = new VTDObjectSetter(pi546);
            binding_setter269 = new StringFormaterDecorator(binding_setter269,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir269 = new BindDirection(_flow.Loop159,binding_getter277,binding_setter269,BindTargetType.ToInProperty);
            _flow.DbFetchData165.InDirections.Add(bind_dir269);
            VTDPropertyInfoBase pi547 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter278 = new VTDObjectGetter(pi547);
            VTDPropertyInfoBase pi548 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter270 = new VTDObjectSetter(pi548);
            bind_dir270 = new BindDirection(_flow.DbOpenConnection39,binding_getter278,binding_setter270,BindTargetType.ToInProperty);
            _flow.DbFetchData165.InDirections.Add(bind_dir270);
            XmlDocument DbFetchData165_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData165_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData165_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData165.ExpectedOutputProperties = DbFetchData165_ExpectedOutputProperties_Document;
            _flow.DbFetchData166.QueryString = @"select ExpectationValue from tb_getclassmembers_verification where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData166.Timeout = (int)30;
            _flow.DbFetchData166.Comment = @"";
            _flow.DbFetchData166.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData166.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi549 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter279 = new VTDObjectGetter(pi549);
            VTDPropertyInfoBase pi550 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter271 = new VTDObjectSetter(pi550);
            binding_setter271 = new StringFormaterDecorator(binding_setter271,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir271 = new BindDirection(_flow.Loop159,binding_getter279,binding_setter271,BindTargetType.ToInProperty);
            _flow.DbFetchData166.InDirections.Add(bind_dir271);
            VTDPropertyInfoBase pi551 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter280 = new VTDObjectGetter(pi551);
            VTDPropertyInfoBase pi552 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter272 = new VTDObjectSetter(pi552);
            bind_dir272 = new BindDirection(_flow.DbOpenConnection39,binding_getter280,binding_setter272,BindTargetType.ToInProperty);
            _flow.DbFetchData166.InDirections.Add(bind_dir272);
            XmlDocument DbFetchData166_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData166_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData166_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData166.ExpectedOutputProperties = DbFetchData166_ExpectedOutputProperties_Document;
            _flow.IfElse167.ConditionAsString = @"{Step.OutputProperties.DbFetchData165.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData166.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse167.Comment = @"";
            _flow.IfElse167.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse167.Name = @"填写Result";
            _flow.IfElse167.Activities.Add (_flow.IfElseBranch168);
            _flow.IfElse167.Activities.Add (_flow.IfElseBranch170);
            _flow.IfElseBranch168.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi553 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter281 = new VTDXPathGetter(pi553,XmlTypeCode.String);
            binding_getter281 = new XPathGetterDecorator(binding_getter281,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData165.GetParam(binding_getter281),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi554 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter282 = new VTDXPathGetter(pi554,XmlTypeCode.String);
            binding_getter282 = new XPathGetterDecorator(binding_getter282,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData166.GetParam(binding_getter282),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch168.Comment = @"";
            _flow.IfElseBranch168.IconPath = @"";
            _flow.IfElseBranch168.Name = @"是";
            _flow.IfElseBranch168.Activities.Add (_flow.DbFetchData169);
            _flow.IfElseBranch170.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch170.Comment = @"";
            _flow.IfElseBranch170.IconPath = @"";
            _flow.IfElseBranch170.Name = @"否";
            _flow.IfElseBranch170.Activities.Add (_flow.DbFetchData171);
            _flow.DbFetchData169.QueryString = @"update tb_getclassmembers_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData169.Timeout = (int)30;
            _flow.DbFetchData169.Comment = @"";
            _flow.DbFetchData169.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData169.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi555 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter283 = new VTDObjectGetter(pi555);
            VTDPropertyInfoBase pi556 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter273 = new VTDObjectSetter(pi556);
            binding_setter273 = new StringFormaterDecorator(binding_setter273,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir273 = new BindDirection(_flow.Loop159,binding_getter283,binding_setter273,BindTargetType.ToInProperty);
            _flow.DbFetchData169.InDirections.Add(bind_dir273);
            VTDPropertyInfoBase pi557 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter284 = new VTDObjectGetter(pi557);
            VTDPropertyInfoBase pi558 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter274 = new VTDObjectSetter(pi558);
            bind_dir274 = new BindDirection(_flow.DbOpenConnection39,binding_getter284,binding_setter274,BindTargetType.ToInProperty);
            _flow.DbFetchData169.InDirections.Add(bind_dir274);
            XmlDocument DbFetchData169_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData169_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData169_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData169.ExpectedOutputProperties = DbFetchData169_ExpectedOutputProperties_Document;
            _flow.DbFetchData171.QueryString = @"update tb_getclassmembers_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData171.Timeout = (int)30;
            _flow.DbFetchData171.Comment = @"";
            _flow.DbFetchData171.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData171.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi559 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter285 = new VTDObjectGetter(pi559);
            VTDPropertyInfoBase pi560 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter275 = new VTDObjectSetter(pi560);
            binding_setter275 = new StringFormaterDecorator(binding_setter275,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir275 = new BindDirection(_flow.Loop159,binding_getter285,binding_setter275,BindTargetType.ToInProperty);
            _flow.DbFetchData171.InDirections.Add(bind_dir275);
            VTDPropertyInfoBase pi561 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter286 = new VTDObjectGetter(pi561);
            VTDPropertyInfoBase pi562 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter276 = new VTDObjectSetter(pi562);
            bind_dir276 = new BindDirection(_flow.DbOpenConnection39,binding_getter286,binding_setter276,BindTargetType.ToInProperty);
            _flow.DbFetchData171.InDirections.Add(bind_dir276);
            XmlDocument DbFetchData171_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData171_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData171_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData171.ExpectedOutputProperties = DbFetchData171_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    