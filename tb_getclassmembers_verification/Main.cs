/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getclassmembers_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir967 = null;
        public BindDirection bind_dir968 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity266 = null;
        public BindDirection bind_dir969 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity266_Policy = null;
        public BindDirection bind_dir970 = null;
        public BindDirection bind_dir971 = null;
        public BindDirection bind_dir972 = null;
        public BindDirection bind_dir973 = null;
        public BindDirection bind_dir974 = null;
        public BindDirection bind_dir975 = null;
        public BindDirection bind_dir976 = null;
        public BindDirection bind_dir977 = null;
        public BindDirection bind_dir978 = null;
        public BindDirection bind_dir979 = null;
        public BindDirection bind_dir980 = null;
        public BindDirection bind_dir981 = null;
        public BindDirection bind_dir982 = null;
        public BindDirection bind_dir983 = null;
        public BindDirection bind_dir984 = null;
        public BindDirection bind_dir985 = null;
        public BindDirection bind_dir986 = null;
        public BindDirection bind_dir987 = null;
        public BindDirection bind_dir988 = null;
        public BindDirection bind_dir989 = null;
        public BindDirection bind_dir990 = null;
        public BindDirection bind_dir991 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity267 = null;
        public BindDirection bind_dir992 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity267_Policy = null;
        public BindDirection bind_dir993 = null;
        public BindDirection bind_dir994 = null;
        public BindDirection bind_dir995 = null;
        public BindDirection bind_dir996 = null;
        public BindDirection bind_dir997 = null;
        public BindDirection bind_dir998 = null;
        public BindDirection bind_dir999 = null;
        public BindDirection bind_dir1000 = null;
        public BindDirection bind_dir1001 = null;
        public BindDirection bind_dir1002 = null;
        public BindDirection bind_dir1003 = null;
        public BindDirection bind_dir1004 = null;
        public BindDirection bind_dir1005 = null;
        public BindDirection bind_dir1006 = null;
        public BindDirection bind_dir1007 = null;
        public BindDirection bind_dir1008 = null;
        public BindDirection bind_dir1009 = null;
        public BindDirection bind_dir1010 = null;
        public BindDirection bind_dir1011 = null;
        public BindDirection bind_dir1012 = null;
        public BindDirection bind_dir1013 = null;
        public BindDirection bind_dir1014 = null;
        public BindDirection bind_dir1015 = null;
        public BindDirection bind_dir1016 = null;
        public BindDirection bind_dir1017 = null;
        public BindDirection bind_dir1018 = null;
        public BindDirection bind_dir1019 = null;
        public BindDirection bind_dir1020 = null;
        public BindDirection bind_dir1021 = null;
        public BindDirection bind_dir1022 = null;
        public BindDirection bind_dir1023 = null;
        public BindDirection bind_dir1024 = null;
        public BindDirection bind_dir1025 = null;
        public BindDirection bind_dir1026 = null;
        public BindDirection bind_dir1027 = null;
        public BindDirection bind_dir1028 = null;
        public BindDirection bind_dir1029 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity262 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity262");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity264 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity264");
            _flow.DataExporterCloseActivity265 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity265");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity263 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity263");
            this.DataCursorActivity266 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity266");
            this.DataCursorActivity266_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence260 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence260");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData158 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData158");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.DbFetchData253 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData253");
            _flow.Loop159 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop159Input>(_context,"Loop159",LoopType.For);
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.DbFetchData172 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData172");
            _flow.CallQTPTest173 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest173");
            _flow.DbFetchData178 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData178");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.HTTPActivity175 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity175");
            _flow.StringToJsonActivity179 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity179");
            _flow.DbFetchData176 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData176");
            this.DataCursorActivity267 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity267");
            this.DataCursorActivity267_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence261 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence261");
            _flow.DbFetchData160 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData160");
            _flow.ReplaceStringActivity255 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity255");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.ReplaceStringActivity254 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity254");
            _flow.DbFetchData256 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData256");
            _flow.CallQTPTest257 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest257");
            _flow.DbFetchData258 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData258");
            _flow.ReplaceStringActivity259 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity259");
            _flow.HTTPActivity161 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity161");
            _flow.StringToJsonActivity162 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity162");
            _flow.DbFetchData163 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData163");
            _flow.DbFetchData164 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData164");
            _flow.DbFetchData165 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData165");
            _flow.DbFetchData166 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData166");
            _flow.IfElse167 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse167Input>(_context,"IfElse167");
            _flow.IfElseBranch168 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch168");
            _flow.IfElseBranch170 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch170");
            _flow.DbFetchData169 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData169");
            _flow.DbFetchData171 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData171");
            _flow.DataFetchActivity262.Comment = @"";
            _flow.DataFetchActivity262.IconPath = @"";
            _flow.DataFetchActivity262.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity262.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity262_QueryParameters_Document = new XmlDocument();
            DataFetchActivity262_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity262Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity262_QueryParameters_Document.LoadXml(xmlDataFetchActivity262Params);
            _flow.DataFetchActivity262.QueryParameters = DataFetchActivity262_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity262);
            this.Activities.Add (_flow.DataFetchActivity262);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity266);
            _flow.Loop2.Activities.Add (_flow.Sequence260);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity264.Comment = @"";
            _flow.DataExporterActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1965 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter999 = new VTDObjectGetter(pi1965);
            VTDPropertyInfoBase pi1966 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter967 = new VTDObjectSetter(pi1966);
            binding_setter967 = new StringFormaterDecorator(binding_setter967,"{Step.DataFetchActivity262.OutTable}");
            bind_dir967 = new BindDirection(_flow.DataFetchActivity262,binding_getter999,binding_setter967,BindTargetType.ToInProperty);
            _flow.DataExporterActivity264.InDirections.Add(bind_dir967);
            this.Activities.Add (_flow.DataExporterActivity264);
            _flow.DataExporterCloseActivity265.Comment = @"";
            _flow.DataExporterCloseActivity265.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity265);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity263.Comment = @"";
            _flow.DataDisconnectActivity263.IconPath = @"";
            VTDPropertyInfoBase pi1967 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1000 = new VTDObjectGetter(pi1967);
            VTDPropertyInfoBase pi1968 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter968 = new VTDObjectSetter(pi1968);
            binding_setter968 = new StringFormaterDecorator(binding_setter968,"{Step.DataFetchActivity262.OutTable}");
            bind_dir968 = new BindDirection(_flow.DataFetchActivity262,binding_getter1000,binding_setter968,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity263.InDirections.Add(bind_dir968);
            this.Activities.Add (_flow.DataDisconnectActivity263);
            this.DataCursorActivity266.Comment = @"";
            this.DataCursorActivity266.IconPath = @"";
            VTDPropertyInfoBase pi1969 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1001 = new VTDObjectGetter(pi1969);
            VTDPropertyInfoBase pi1970 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter969 = new VTDObjectSetter(pi1970);
            binding_setter969 = new StringFormaterDecorator(binding_setter969,"{Step.DataFetchActivity262.OutTable}");
            bind_dir969 = new BindDirection(_flow.DataFetchActivity262,binding_getter1001,binding_setter969,BindTargetType.ToInProperty);
            this.DataCursorActivity266.InDirections.Add(bind_dir969);
            this.DataCursorActivity266_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity266_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.StartCondition.Value = "";
            this.DataCursorActivity266_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity266_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.EndCondition.Value = "";
            this.DataCursorActivity266_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity266_Policy.StepSize = 1;
            this.DataCursorActivity266_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity266.Policy = this.DataCursorActivity266_Policy;
            this.DataCursorActivity266.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity266.ResetCursor;
            _flow.Sequence260.Comment = @"";
            _flow.Sequence260.IconPath = @"";
            _flow.Sequence260.Name = @"序列260";
            _flow.Sequence260.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData158);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData253);
            _flow.Sequence260.Activities.Add (_flow.Loop159);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData172);
            _flow.Sequence260.Activities.Add (_flow.CallQTPTest173);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData178);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence260.Activities.Add (_flow.HTTPActivity175);
            _flow.Sequence260.Activities.Add (_flow.StringToJsonActivity179);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData176);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData158.QueryString = @"select count(*) as 'Row' from tb_getclassmembers_verification";
            _flow.DbFetchData158.Timeout = (int)30;
            _flow.DbFetchData158.Comment = @"";
            _flow.DbFetchData158.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData158.Name = @"获取到tb_getclassmembers_verification表有效行数";
            VTDPropertyInfoBase pi1971 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1002 = new VTDObjectGetter(pi1971);
            VTDPropertyInfoBase pi1972 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter970 = new VTDObjectSetter(pi1972);
            bind_dir970 = new BindDirection(_flow.DbOpenConnection39,binding_getter1002,binding_setter970,BindTargetType.ToInProperty);
            _flow.DbFetchData158.InDirections.Add(bind_dir970);
            XmlDocument DbFetchData158_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData158_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData158_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData158.ExpectedOutputProperties = DbFetchData158_ExpectedOutputProperties_Document;
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi1973 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1003 = new VTDObjectGetter(pi1973);
            VTDPropertyInfoBase pi1974 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter971 = new VTDObjectSetter(pi1974);
            bind_dir971 = new BindDirection(_flow.DbOpenConnection39,binding_getter1003,binding_setter971,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir971);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.DbFetchData252.QueryString = @"select LoginTeacherUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询tb_global_table表中LoginTeacherUsername值";
            VTDPropertyInfoBase pi1975 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1004 = new VTDObjectGetter(pi1975);
            VTDPropertyInfoBase pi1976 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter972 = new VTDObjectSetter(pi1976);
            bind_dir972 = new BindDirection(_flow.DbOpenConnection39,binding_getter1004,binding_setter972,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir972);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginTeacherUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.DbFetchData253.QueryString = @"select classJid from tb_global_table where TestCase = 1";
            _flow.DbFetchData253.Timeout = (int)30;
            _flow.DbFetchData253.Comment = @"";
            _flow.DbFetchData253.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData253.Name = @"查询tb_global_table表中classJid值";
            VTDPropertyInfoBase pi1977 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1005 = new VTDObjectGetter(pi1977);
            VTDPropertyInfoBase pi1978 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter973 = new VTDObjectSetter(pi1978);
            bind_dir973 = new BindDirection(_flow.DbOpenConnection39,binding_getter1005,binding_setter973,BindTargetType.ToInProperty);
            _flow.DbFetchData253.InDirections.Add(bind_dir973);
            XmlDocument DbFetchData253_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData253_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData253_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><classJid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData253.ExpectedOutputProperties = DbFetchData253_ExpectedOutputProperties_Document;
            _flow.Loop159.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop159.NumberOfIterations = (int)1;
            _flow.Loop159.Comment = @"";
            _flow.Loop159.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop159.Name = @"循环执行tb_getclassmembers_verification中的测试用例";
            VTDPropertyInfoBase pi1979 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter1006 = new VTDXPathGetter(pi1979,XmlTypeCode.Long);
            binding_getter1006 = new XPathGetterDecorator(binding_getter1006,"{Array0}",1);
            VTDPropertyInfoBase pi1980 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter974 = new VTDObjectSetter(pi1980);
            bind_dir974 = new BindDirection(_flow.DbFetchData158,binding_getter1006,binding_setter974,BindTargetType.ToInProperty);
            _flow.Loop159.InDirections.Add(bind_dir974);
            _flow.Loop159.Activities.Add (this.DataCursorActivity267);
            _flow.Loop159.Activities.Add (_flow.Sequence261);
            _flow.DbFetchData246.QueryString = @"select classJid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中classJid值";
            VTDPropertyInfoBase pi1981 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1007 = new VTDObjectGetter(pi1981);
            VTDPropertyInfoBase pi1982 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter975 = new VTDObjectSetter(pi1982);
            bind_dir975 = new BindDirection(_flow.DbOpenConnection39,binding_getter1007,binding_setter975,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir975);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><classJid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.DbFetchData172.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].classJid}' where TestCase = 1";
            _flow.DbFetchData172.Timeout = (int)30;
            _flow.DbFetchData172.Comment = @"";
            _flow.DbFetchData172.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData172.Name = @"对/jxt/getClassMembers.php接口token实行加密";
            VTDPropertyInfoBase pi1983 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1008 = new VTDObjectGetter(pi1983);
            VTDPropertyInfoBase pi1984 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter976 = new VTDObjectSetter(pi1984);
            binding_setter976 = new StringFormaterDecorator(binding_setter976,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir976 = new BindDirection(this.DataCursorActivity266,binding_getter1008,binding_setter976,BindTargetType.ToInProperty);
            _flow.DbFetchData172.InDirections.Add(bind_dir976);
            VTDPropertyInfoBase pi1985 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='classJid'][1]");
            VTDBaseGetter binding_getter1009 = new VTDXPathGetter(pi1985,XmlTypeCode.String);
            binding_getter1009 = new XPathGetterDecorator(binding_getter1009,"{Array0}",1);
            VTDPropertyInfoBase pi1986 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter977 = new VTDObjectSetter(pi1986);
            binding_setter977 = new StringFormaterDecorator(binding_setter977,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].classJid}");
            bind_dir977 = new BindDirection(_flow.DbFetchData246,binding_getter1009,binding_setter977,BindTargetType.ToInProperty);
            _flow.DbFetchData172.InDirections.Add(bind_dir977);
            VTDPropertyInfoBase pi1987 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1010 = new VTDObjectGetter(pi1987);
            VTDPropertyInfoBase pi1988 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter978 = new VTDObjectSetter(pi1988);
            bind_dir978 = new BindDirection(_flow.DbOpenConnection39,binding_getter1010,binding_setter978,BindTargetType.ToInProperty);
            _flow.DbFetchData172.InDirections.Add(bind_dir978);
            XmlDocument DbFetchData172_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData172_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData172_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData172.ExpectedOutputProperties = DbFetchData172_ExpectedOutputProperties_Document;
            _flow.CallQTPTest173.Comment = @"";
            _flow.CallQTPTest173.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest173.Name = @"Encryption.SHA1";
            _flow.CallQTPTest173.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ScriptPath}");
            _flow.CallQTPTest173.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ActionName}");
            _flow.CallQTPTest173.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.Description}");
            _flow.CallQTPTest173.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.IsActionSelected}");
            _flow.CallQTPTest173.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.ResultLocation}");
            _flow.CallQTPTest173.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest173.QCScriptPath}");
            _flow.DbFetchData178.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData178.Timeout = (int)30;
            _flow.DbFetchData178.Comment = @"";
            _flow.DbFetchData178.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData178.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1989 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1011 = new VTDObjectGetter(pi1989);
            VTDPropertyInfoBase pi1990 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter979 = new VTDObjectSetter(pi1990);
            bind_dir979 = new BindDirection(_flow.DbOpenConnection39,binding_getter1011,binding_setter979,BindTargetType.ToInProperty);
            _flow.DbFetchData178.InDirections.Add(bind_dir979);
            XmlDocument DbFetchData178_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData178_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData178_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData178.ExpectedOutputProperties = DbFetchData178_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi1991 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1012 = new VTDObjectGetter(pi1991);
            VTDPropertyInfoBase pi1992 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter980 = new VTDObjectSetter(pi1992);
            bind_dir980 = new BindDirection(_flow.DbOpenConnection39,binding_getter1012,binding_setter980,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir980);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.HTTPActivity175.TextBody = @"myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&xsid={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}&token={Step.OutputProperties.DbFetchData178.ResultTable.Row[1].EncryptionResult}&classJid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].classJid}";
            _flow.HTTPActivity175.TextXmlBody = @"";
            _flow.HTTPActivity175.FileBody = @"";
            _flow.HTTPActivity175.PostBody = @"";
            _flow.HTTPActivity175.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getClassMembers}";
            _flow.HTTPActivity175.HttpMethod = @"POST";
            _flow.HTTPActivity175.HttpVersion = @"1.1";
            _flow.HTTPActivity175.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity175.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity175.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity175.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity175.Comment = @"";
            _flow.HTTPActivity175.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity175.RequestBodyType = @"Text";
            _flow.HTTPActivity175.ResponseType = @"Text";
            _flow.HTTPActivity175.Name = @"调用/jxt/getClassMembers.php";
            _flow.HTTPActivity175.Proxy.Server = @"";
            _flow.HTTPActivity175.Proxy.Username = @"";
            _flow.HTTPActivity175.Proxy.Password = @"";
            _flow.HTTPActivity175.Authentication.Username = @"";
            _flow.HTTPActivity175.Authentication.Password = @"";
            _flow.HTTPActivity175.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity175.Timeout = (int)100000;
            _flow.HTTPActivity175.ClientCertificate.Password = @"";
            _flow.HTTPActivity175.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity175.UseClientCertificate = false;
            _flow.HTTPActivity175.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity175.AllowRedirections = true;
            _flow.HTTPActivity175.ReuseCookies = false;
            _flow.HTTPActivity175.ExpectServerError = false;
            XmlDocument HTTPActivity175_XMLBody_Document = new XmlDocument();
            HTTPActivity175_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity175_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity175.XMLBody = HTTPActivity175_XMLBody_Document;
            XmlDocument HTTPActivity175_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity175_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity175_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity175.RequestMultipartInfoXml = HTTPActivity175_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity175.Multipart=false;
            VTDPropertyInfoBase pi1993 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter1013 = new VTDObjectGetter(pi1993);
            VTDPropertyInfoBase pi1994 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter981 = new VTDObjectSetter(pi1994);
            binding_setter981 = new StringFormaterDecorator(binding_setter981,"{DataSource.tb_global_table.IQHost}");
            bind_dir981 = new BindDirection(this.DataCursorActivity266,binding_getter1013,binding_setter981,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir981);
            VTDPropertyInfoBase pi1995 = new VTDPropertyInfoBase("getClassMembers");
            VTDBaseGetter binding_getter1014 = new VTDObjectGetter(pi1995);
            VTDPropertyInfoBase pi1996 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter982 = new VTDObjectSetter(pi1996);
            binding_setter982 = new StringFormaterDecorator(binding_setter982,"{DataSource.tb_global_table.getClassMembers}");
            bind_dir982 = new BindDirection(this.DataCursorActivity266,binding_getter1014,binding_setter982,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir982);
            VTDPropertyInfoBase pi1997 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1015 = new VTDObjectGetter(pi1997);
            VTDPropertyInfoBase pi1998 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter983 = new VTDObjectSetter(pi1998);
            binding_setter983 = new StringFormaterDecorator(binding_setter983,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir983 = new BindDirection(this.DataCursorActivity266,binding_getter1015,binding_setter983,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir983);
            VTDPropertyInfoBase pi1999 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1016 = new VTDObjectGetter(pi1999);
            VTDPropertyInfoBase pi2000 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter984 = new VTDObjectSetter(pi2000);
            binding_setter984 = new StringFormaterDecorator(binding_setter984,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir984 = new BindDirection(this.DataCursorActivity266,binding_getter1016,binding_setter984,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir984);
            VTDPropertyInfoBase pi2001 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1017 = new VTDObjectGetter(pi2001);
            VTDPropertyInfoBase pi2002 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter985 = new VTDObjectSetter(pi2002);
            binding_setter985 = new StringFormaterDecorator(binding_setter985,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir985 = new BindDirection(this.DataCursorActivity266,binding_getter1017,binding_setter985,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir985);
            VTDPropertyInfoBase pi2003 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1018 = new VTDXPathGetter(pi2003,XmlTypeCode.String);
            binding_getter1018 = new XPathGetterDecorator(binding_getter1018,"{Array0}",1);
            VTDPropertyInfoBase pi2004 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter986 = new VTDObjectSetter(pi2004);
            binding_setter986 = new StringFormaterDecorator(binding_setter986,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir986 = new BindDirection(_flow.DbFetchData247,binding_getter1018,binding_setter986,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir986);
            VTDPropertyInfoBase pi2005 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1019 = new VTDXPathGetter(pi2005,XmlTypeCode.String);
            binding_getter1019 = new XPathGetterDecorator(binding_getter1019,"{Array0}",1);
            VTDPropertyInfoBase pi2006 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter987 = new VTDObjectSetter(pi2006);
            binding_setter987 = new StringFormaterDecorator(binding_setter987,"{Step.OutputProperties.DbFetchData178.ResultTable.Row[1].EncryptionResult}");
            bind_dir987 = new BindDirection(_flow.DbFetchData178,binding_getter1019,binding_setter987,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir987);
            VTDPropertyInfoBase pi2007 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='classJid'][1]");
            VTDBaseGetter binding_getter1020 = new VTDXPathGetter(pi2007,XmlTypeCode.String);
            binding_getter1020 = new XPathGetterDecorator(binding_getter1020,"{Array0}",1);
            VTDPropertyInfoBase pi2008 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter988 = new VTDObjectSetter(pi2008);
            binding_setter988 = new StringFormaterDecorator(binding_setter988,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].classJid}");
            bind_dir988 = new BindDirection(_flow.DbFetchData246,binding_getter1020,binding_setter988,BindTargetType.ToInProperty);
            _flow.HTTPActivity175.InDirections.Add(bind_dir988);
            XmlDocument HTTPActivity175_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity175_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity175_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity175.ExpectedResponseXmlBody = HTTPActivity175_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity175_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity175_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity175_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity175.ExpectedResponseJsonBody = HTTPActivity175_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity175_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity175_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity175_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity175.ExpectedOutputProperties = HTTPActivity175_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity179.InputString = @"{Step.OutputProperties.HTTPActivity175.ResponseBody}";
            _flow.StringToJsonActivity179.Comment = @"";
            _flow.StringToJsonActivity179.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity179.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi2009 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1021 = new VTDObjectGetter(pi2009);
            VTDPropertyInfoBase pi2010 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter989 = new VTDObjectSetter(pi2010);
            binding_setter989 = new StringFormaterDecorator(binding_setter989,"{Step.OutputProperties.HTTPActivity175.ResponseBody}");
            bind_dir989 = new BindDirection(_flow.HTTPActivity175,binding_getter1021,binding_setter989,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity179.InDirections.Add(bind_dir989);
            _flow.DbFetchData176.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity175.ResponseBody}' where InterfaceName = '/jxt/getClassMembers.php'";
            _flow.DbFetchData176.Timeout = (int)30;
            _flow.DbFetchData176.Comment = @"";
            _flow.DbFetchData176.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData176.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi2011 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1022 = new VTDObjectGetter(pi2011);
            VTDPropertyInfoBase pi2012 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter990 = new VTDObjectSetter(pi2012);
            binding_setter990 = new StringFormaterDecorator(binding_setter990,"{Step.OutputProperties.HTTPActivity175.ResponseBody}");
            bind_dir990 = new BindDirection(_flow.HTTPActivity175,binding_getter1022,binding_setter990,BindTargetType.ToInProperty);
            _flow.DbFetchData176.InDirections.Add(bind_dir990);
            VTDPropertyInfoBase pi2013 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1023 = new VTDObjectGetter(pi2013);
            VTDPropertyInfoBase pi2014 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter991 = new VTDObjectSetter(pi2014);
            bind_dir991 = new BindDirection(_flow.DbOpenConnection39,binding_getter1023,binding_setter991,BindTargetType.ToInProperty);
            _flow.DbFetchData176.InDirections.Add(bind_dir991);
            XmlDocument DbFetchData176_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData176_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData176_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData176.ExpectedOutputProperties = DbFetchData176_ExpectedOutputProperties_Document;
            this.DataCursorActivity267.Comment = @"";
            this.DataCursorActivity267.IconPath = @"";
            VTDPropertyInfoBase pi2015 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1024 = new VTDObjectGetter(pi2015);
            VTDPropertyInfoBase pi2016 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter992 = new VTDObjectSetter(pi2016);
            binding_setter992 = new StringFormaterDecorator(binding_setter992,"{Step.DataFetchActivity262.OutTable}");
            bind_dir992 = new BindDirection(_flow.DataFetchActivity262,binding_getter1024,binding_setter992,BindTargetType.ToInProperty);
            this.DataCursorActivity267.InDirections.Add(bind_dir992);
            this.DataCursorActivity267_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity267_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity267_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity267_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity267_Policy.StartCondition.Value = "";
            this.DataCursorActivity267_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity267_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity267_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity267_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity267_Policy.EndCondition.Value = "";
            this.DataCursorActivity267_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity267_Policy.StepSize = 1;
            this.DataCursorActivity267_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity267.Policy = this.DataCursorActivity267_Policy;
            this.DataCursorActivity267.ReportStepData = false;
            _flow.Loop159.BeforeExecuteStepEvent += this.DataCursorActivity267.ResetCursor;
            _flow.Sequence261.Comment = @"";
            _flow.Sequence261.IconPath = @"";
            _flow.Sequence261.Name = @"序列261";
            _flow.Sequence261.Activities.Add (_flow.DbFetchData160);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity255);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity254);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData256);
            _flow.Sequence261.Activities.Add (_flow.CallQTPTest257);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData258);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity259);
            _flow.Sequence261.Activities.Add (_flow.HTTPActivity161);
            _flow.Sequence261.Activities.Add (_flow.StringToJsonActivity162);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData163);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData164);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData165);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData166);
            _flow.Sequence261.Activities.Add (_flow.IfElse167);
            _flow.DbFetchData160.QueryString = @"select xsid,myJid,classJid,token from tb_getclassmembers_verification where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData160.Timeout = (int)30;
            _flow.DbFetchData160.Comment = @"";
            _flow.DbFetchData160.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData160.Name = @"查询tb_getclassmembers_verification表中数据";
            VTDPropertyInfoBase pi2017 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1025 = new VTDObjectGetter(pi2017);
            VTDPropertyInfoBase pi2018 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter993 = new VTDObjectSetter(pi2018);
            binding_setter993 = new StringFormaterDecorator(binding_setter993,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir993 = new BindDirection(_flow.Loop159,binding_getter1025,binding_setter993,BindTargetType.ToInProperty);
            _flow.DbFetchData160.InDirections.Add(bind_dir993);
            VTDPropertyInfoBase pi2019 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1026 = new VTDObjectGetter(pi2019);
            VTDPropertyInfoBase pi2020 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter994 = new VTDObjectSetter(pi2020);
            bind_dir994 = new BindDirection(_flow.DbOpenConnection39,binding_getter1026,binding_setter994,BindTargetType.ToInProperty);
            _flow.DbFetchData160.InDirections.Add(bind_dir994);
            XmlDocument DbFetchData160_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData160_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData160_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><myJid /><classJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData160.ExpectedOutputProperties = DbFetchData160_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity255.SourceString = @"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity255.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity255.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity255.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity255.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity255.CaseSensitive = true;
            _flow.ReplaceStringActivity255.Comment = @"";
            _flow.ReplaceStringActivity255.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity255.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi2021 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter1027 = new VTDXPathGetter(pi2021,XmlTypeCode.String);
            binding_getter1027 = new XPathGetterDecorator(binding_getter1027,"{Array0}",1);
            VTDPropertyInfoBase pi2022 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter995 = new VTDObjectSetter(pi2022);
            binding_setter995 = new StringFormaterDecorator(binding_setter995,"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].xsid}");
            bind_dir995 = new BindDirection(_flow.DbFetchData160,binding_getter1027,binding_setter995,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity255.InDirections.Add(bind_dir995);
            VTDPropertyInfoBase pi2023 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1028 = new VTDXPathGetter(pi2023,XmlTypeCode.String);
            binding_getter1028 = new XPathGetterDecorator(binding_getter1028,"{Array0}",1);
            VTDPropertyInfoBase pi2024 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter996 = new VTDObjectSetter(pi2024);
            binding_setter996 = new StringFormaterDecorator(binding_setter996,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir996 = new BindDirection(_flow.DbFetchData248,binding_getter1028,binding_setter996,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity255.InDirections.Add(bind_dir996);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].myJid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"77401169";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{DataSource.tb_global_table.LoginTeacherUsername}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将Myjid更新至最新值";
            VTDPropertyInfoBase pi2025 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter1029 = new VTDXPathGetter(pi2025,XmlTypeCode.String);
            binding_getter1029 = new XPathGetterDecorator(binding_getter1029,"{Array0}",1);
            VTDPropertyInfoBase pi2026 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter997 = new VTDObjectSetter(pi2026);
            binding_setter997 = new StringFormaterDecorator(binding_setter997,"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].myJid}");
            bind_dir997 = new BindDirection(_flow.DbFetchData160,binding_getter1029,binding_setter997,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir997);
            VTDPropertyInfoBase pi2027 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1030 = new VTDObjectGetter(pi2027);
            VTDPropertyInfoBase pi2028 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter998 = new VTDObjectSetter(pi2028);
            binding_setter998 = new StringFormaterDecorator(binding_setter998,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir998 = new BindDirection(this.DataCursorActivity267,binding_getter1030,binding_setter998,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir998);
            _flow.ReplaceStringActivity254.SourceString = @"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].classJid}";
            _flow.ReplaceStringActivity254.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity254.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity254.SearchReplaceString[0].Key = @"q622195-13@muc.365ime.com";
            _flow.ReplaceStringActivity254.SearchReplaceString[0].Value = @"{DataSource.tb_global_table.classJid}";
            _flow.ReplaceStringActivity254.CaseSensitive = true;
            _flow.ReplaceStringActivity254.Comment = @"";
            _flow.ReplaceStringActivity254.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity254.Name = @"将classJid更新至最新值";
            VTDPropertyInfoBase pi2029 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='classJid'][1]");
            VTDBaseGetter binding_getter1031 = new VTDXPathGetter(pi2029,XmlTypeCode.String);
            binding_getter1031 = new XPathGetterDecorator(binding_getter1031,"{Array0}",1);
            VTDPropertyInfoBase pi2030 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter999 = new VTDObjectSetter(pi2030);
            binding_setter999 = new StringFormaterDecorator(binding_setter999,"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].classJid}");
            bind_dir999 = new BindDirection(_flow.DbFetchData160,binding_getter1031,binding_setter999,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity254.InDirections.Add(bind_dir999);
            VTDPropertyInfoBase pi2031 = new VTDPropertyInfoBase("classJid");
            VTDBaseGetter binding_getter1032 = new VTDObjectGetter(pi2031);
            VTDPropertyInfoBase pi2032 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1000 = new VTDObjectSetter(pi2032);
            binding_setter1000 = new StringFormaterDecorator(binding_setter1000,"{DataSource.tb_global_table.classJid}");
            bind_dir1000 = new BindDirection(this.DataCursorActivity267,binding_getter1032,binding_setter1000,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity254.InDirections.Add(bind_dir1000);
            _flow.DbFetchData256.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.ReplaceStringActivity249.Result}DeVawMFWs6{Step.OutputProperties.ReplaceStringActivity254.Result}' where TestCase = 1";
            _flow.DbFetchData256.Timeout = (int)30;
            _flow.DbFetchData256.Comment = @"";
            _flow.DbFetchData256.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData256.Name = @"将加密数据更新至EncryptionStr字段中";
            VTDPropertyInfoBase pi2033 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1033 = new VTDObjectGetter(pi2033);
            VTDPropertyInfoBase pi2034 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1001 = new VTDObjectSetter(pi2034);
            binding_setter1001 = new StringFormaterDecorator(binding_setter1001,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir1001 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter1033,binding_setter1001,BindTargetType.ToInProperty);
            _flow.DbFetchData256.InDirections.Add(bind_dir1001);
            VTDPropertyInfoBase pi2035 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1034 = new VTDObjectGetter(pi2035);
            VTDPropertyInfoBase pi2036 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1002 = new VTDObjectSetter(pi2036);
            binding_setter1002 = new StringFormaterDecorator(binding_setter1002,"{Step.OutputProperties.ReplaceStringActivity254.Result}");
            bind_dir1002 = new BindDirection(_flow.ReplaceStringActivity254,binding_getter1034,binding_setter1002,BindTargetType.ToInProperty);
            _flow.DbFetchData256.InDirections.Add(bind_dir1002);
            VTDPropertyInfoBase pi2037 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1035 = new VTDObjectGetter(pi2037);
            VTDPropertyInfoBase pi2038 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1003 = new VTDObjectSetter(pi2038);
            bind_dir1003 = new BindDirection(_flow.DbOpenConnection39,binding_getter1035,binding_setter1003,BindTargetType.ToInProperty);
            _flow.DbFetchData256.InDirections.Add(bind_dir1003);
            XmlDocument DbFetchData256_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData256_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData256_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData256.ExpectedOutputProperties = DbFetchData256_ExpectedOutputProperties_Document;
            _flow.CallQTPTest257.Comment = @"";
            _flow.CallQTPTest257.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest257.Name = @"Encryption.SHA1";
            _flow.CallQTPTest257.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.ScriptPath}");
            _flow.CallQTPTest257.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.ActionName}");
            _flow.CallQTPTest257.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.Description}");
            _flow.CallQTPTest257.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.IsActionSelected}");
            _flow.CallQTPTest257.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.ResultLocation}");
            _flow.CallQTPTest257.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest257.QCScriptPath}");
            _flow.DbFetchData258.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData258.Timeout = (int)30;
            _flow.DbFetchData258.Comment = @"";
            _flow.DbFetchData258.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData258.Name = @"获取加密后的字符串";
            VTDPropertyInfoBase pi2039 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1036 = new VTDObjectGetter(pi2039);
            VTDPropertyInfoBase pi2040 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1004 = new VTDObjectSetter(pi2040);
            bind_dir1004 = new BindDirection(_flow.DbOpenConnection39,binding_getter1036,binding_setter1004,BindTargetType.ToInProperty);
            _flow.DbFetchData258.InDirections.Add(bind_dir1004);
            XmlDocument DbFetchData258_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData258_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData258_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData258.ExpectedOutputProperties = DbFetchData258_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity259.SourceString = @"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity259.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity259.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity259.SearchReplaceString[0].Key = @"153092fc89df2d9398ac7a33f46efbc7d802fd3f";
            _flow.ReplaceStringActivity259.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData258.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity259.CaseSensitive = true;
            _flow.ReplaceStringActivity259.Comment = @"";
            _flow.ReplaceStringActivity259.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity259.Name = @"将Token更新至最新值";
            VTDPropertyInfoBase pi2041 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter1037 = new VTDXPathGetter(pi2041,XmlTypeCode.String);
            binding_getter1037 = new XPathGetterDecorator(binding_getter1037,"{Array0}",1);
            VTDPropertyInfoBase pi2042 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1005 = new VTDObjectSetter(pi2042);
            binding_setter1005 = new StringFormaterDecorator(binding_setter1005,"{Step.OutputProperties.DbFetchData160.ResultTable.Row[1].token}");
            bind_dir1005 = new BindDirection(_flow.DbFetchData160,binding_getter1037,binding_setter1005,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity259.InDirections.Add(bind_dir1005);
            VTDPropertyInfoBase pi2043 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1038 = new VTDXPathGetter(pi2043,XmlTypeCode.String);
            binding_getter1038 = new XPathGetterDecorator(binding_getter1038,"{Array0}",1);
            VTDPropertyInfoBase pi2044 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1006 = new VTDObjectSetter(pi2044);
            binding_setter1006 = new StringFormaterDecorator(binding_setter1006,"{Step.OutputProperties.DbFetchData258.ResultTable.Row[1].EncryptionResult}");
            bind_dir1006 = new BindDirection(_flow.DbFetchData258,binding_getter1038,binding_setter1006,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity259.InDirections.Add(bind_dir1006);
            _flow.HTTPActivity161.TextBody = @"myJid={Step.OutputProperties.ReplaceStringActivity249.Result}&xsid={Step.OutputProperties.ReplaceStringActivity255.Result}&token={Step.OutputProperties.ReplaceStringActivity259.Result}&classJid={Step.OutputProperties.ReplaceStringActivity254.Result}";
            _flow.HTTPActivity161.TextXmlBody = @"";
            _flow.HTTPActivity161.FileBody = @"";
            _flow.HTTPActivity161.PostBody = @"";
            _flow.HTTPActivity161.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getClassMembers}";
            _flow.HTTPActivity161.HttpMethod = @"POST";
            _flow.HTTPActivity161.HttpVersion = @"1.1";
            _flow.HTTPActivity161.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity161.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity161.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity161.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity161.Comment = @"";
            _flow.HTTPActivity161.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity161.RequestBodyType = @"Text";
            _flow.HTTPActivity161.ResponseType = @"Text";
            _flow.HTTPActivity161.Name = @"调用/jxt/getClassMembers.php";
            _flow.HTTPActivity161.Proxy.Server = @"";
            _flow.HTTPActivity161.Proxy.Username = @"";
            _flow.HTTPActivity161.Proxy.Password = @"";
            _flow.HTTPActivity161.Authentication.Username = @"";
            _flow.HTTPActivity161.Authentication.Password = @"";
            _flow.HTTPActivity161.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity161.Timeout = (int)100000;
            _flow.HTTPActivity161.ClientCertificate.Password = @"";
            _flow.HTTPActivity161.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity161.UseClientCertificate = false;
            _flow.HTTPActivity161.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity161.AllowRedirections = true;
            _flow.HTTPActivity161.ReuseCookies = false;
            _flow.HTTPActivity161.ExpectServerError = false;
            XmlDocument HTTPActivity161_XMLBody_Document = new XmlDocument();
            HTTPActivity161_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity161_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity161.XMLBody = HTTPActivity161_XMLBody_Document;
            XmlDocument HTTPActivity161_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity161_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity161_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity161.RequestMultipartInfoXml = HTTPActivity161_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity161.Multipart=false;
            VTDPropertyInfoBase pi2045 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter1039 = new VTDObjectGetter(pi2045);
            VTDPropertyInfoBase pi2046 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1007 = new VTDObjectSetter(pi2046);
            binding_setter1007 = new StringFormaterDecorator(binding_setter1007,"{DataSource.tb_global_table.IQHost}");
            bind_dir1007 = new BindDirection(this.DataCursorActivity267,binding_getter1039,binding_setter1007,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir1007);
            VTDPropertyInfoBase pi2047 = new VTDPropertyInfoBase("getClassMembers");
            VTDBaseGetter binding_getter1040 = new VTDObjectGetter(pi2047);
            VTDPropertyInfoBase pi2048 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1008 = new VTDObjectSetter(pi2048);
            binding_setter1008 = new StringFormaterDecorator(binding_setter1008,"{DataSource.tb_global_table.getClassMembers}");
            bind_dir1008 = new BindDirection(this.DataCursorActivity267,binding_getter1040,binding_setter1008,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir1008);
            VTDPropertyInfoBase pi2049 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1041 = new VTDObjectGetter(pi2049);
            VTDPropertyInfoBase pi2050 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1009 = new VTDObjectSetter(pi2050);
            binding_setter1009 = new StringFormaterDecorator(binding_setter1009,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1009 = new BindDirection(this.DataCursorActivity267,binding_getter1041,binding_setter1009,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir1009);
            VTDPropertyInfoBase pi2051 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1042 = new VTDObjectGetter(pi2051);
            VTDPropertyInfoBase pi2052 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1010 = new VTDObjectSetter(pi2052);
            binding_setter1010 = new StringFormaterDecorator(binding_setter1010,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1010 = new BindDirection(this.DataCursorActivity267,binding_getter1042,binding_setter1010,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir1010);
            VTDPropertyInfoBase pi2053 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1043 = new VTDObjectGetter(pi2053);
            VTDPropertyInfoBase pi2054 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1011 = new VTDObjectSetter(pi2054);
            binding_setter1011 = new StringFormaterDecorator(binding_setter1011,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir1011 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter1043,binding_setter1011,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir1011);
            VTDPropertyInfoBase pi2055 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1044 = new VTDObjectGetter(pi2055);
            VTDPropertyInfoBase pi2056 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1012 = new VTDObjectSetter(pi2056);
            binding_setter1012 = new StringFormaterDecorator(binding_setter1012,"{Step.OutputProperties.ReplaceStringActivity255.Result}");
            bind_dir1012 = new BindDirection(_flow.ReplaceStringActivity255,binding_getter1044,binding_setter1012,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir1012);
            VTDPropertyInfoBase pi2057 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1045 = new VTDObjectGetter(pi2057);
            VTDPropertyInfoBase pi2058 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1013 = new VTDObjectSetter(pi2058);
            binding_setter1013 = new StringFormaterDecorator(binding_setter1013,"{Step.OutputProperties.ReplaceStringActivity259.Result}");
            bind_dir1013 = new BindDirection(_flow.ReplaceStringActivity259,binding_getter1045,binding_setter1013,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir1013);
            VTDPropertyInfoBase pi2059 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1046 = new VTDObjectGetter(pi2059);
            VTDPropertyInfoBase pi2060 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1014 = new VTDObjectSetter(pi2060);
            binding_setter1014 = new StringFormaterDecorator(binding_setter1014,"{Step.OutputProperties.ReplaceStringActivity254.Result}");
            bind_dir1014 = new BindDirection(_flow.ReplaceStringActivity254,binding_getter1046,binding_setter1014,BindTargetType.ToInProperty);
            _flow.HTTPActivity161.InDirections.Add(bind_dir1014);
            XmlDocument HTTPActivity161_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity161_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity161_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity161.ExpectedResponseXmlBody = HTTPActivity161_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity161_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity161_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity161_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity161.ExpectedResponseJsonBody = HTTPActivity161_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity161_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity161_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity161_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity161.ExpectedOutputProperties = HTTPActivity161_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity162.InputString = @"{Step.OutputProperties.HTTPActivity161.ResponseBody}";
            _flow.StringToJsonActivity162.Comment = @"";
            _flow.StringToJsonActivity162.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity162.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi2061 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1047 = new VTDObjectGetter(pi2061);
            VTDPropertyInfoBase pi2062 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1015 = new VTDObjectSetter(pi2062);
            binding_setter1015 = new StringFormaterDecorator(binding_setter1015,"{Step.OutputProperties.HTTPActivity161.ResponseBody}");
            bind_dir1015 = new BindDirection(_flow.HTTPActivity161,binding_getter1047,binding_setter1015,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity162.InDirections.Add(bind_dir1015);
            _flow.DbFetchData163.QueryString = @"UPDATE tb_getclassmembers_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity161.ResponseBody}' where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData163.Timeout = (int)30;
            _flow.DbFetchData163.Comment = @"";
            _flow.DbFetchData163.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData163.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi2063 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1048 = new VTDObjectGetter(pi2063);
            VTDPropertyInfoBase pi2064 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1016 = new VTDObjectSetter(pi2064);
            binding_setter1016 = new StringFormaterDecorator(binding_setter1016,"{Step.OutputProperties.HTTPActivity161.ResponseBody}");
            bind_dir1016 = new BindDirection(_flow.HTTPActivity161,binding_getter1048,binding_setter1016,BindTargetType.ToInProperty);
            _flow.DbFetchData163.InDirections.Add(bind_dir1016);
            VTDPropertyInfoBase pi2065 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1049 = new VTDObjectGetter(pi2065);
            VTDPropertyInfoBase pi2066 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1017 = new VTDObjectSetter(pi2066);
            binding_setter1017 = new StringFormaterDecorator(binding_setter1017,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir1017 = new BindDirection(_flow.Loop159,binding_getter1049,binding_setter1017,BindTargetType.ToInProperty);
            _flow.DbFetchData163.InDirections.Add(bind_dir1017);
            VTDPropertyInfoBase pi2067 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1050 = new VTDObjectGetter(pi2067);
            VTDPropertyInfoBase pi2068 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1018 = new VTDObjectSetter(pi2068);
            bind_dir1018 = new BindDirection(_flow.DbOpenConnection39,binding_getter1050,binding_setter1018,BindTargetType.ToInProperty);
            _flow.DbFetchData163.InDirections.Add(bind_dir1018);
            XmlDocument DbFetchData163_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData163_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData163_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData163.ExpectedOutputProperties = DbFetchData163_ExpectedOutputProperties_Document;
            _flow.DbFetchData164.QueryString = @"update tb_getclassmembers_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity162.errorCode}' where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData164.Timeout = (int)30;
            _flow.DbFetchData164.Comment = @"";
            _flow.DbFetchData164.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData164.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi2069 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1051 = new VTDJsonGetter(pi2069);
            VTDPropertyInfoBase pi2070 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1019 = new VTDObjectSetter(pi2070);
            binding_setter1019 = new StringFormaterDecorator(binding_setter1019,"{Step.JsonContent.StringToJsonActivity162.errorCode}");
            bind_dir1019 = new BindDirection(_flow.StringToJsonActivity162,binding_getter1051,binding_setter1019,BindTargetType.ToInProperty);
            _flow.DbFetchData164.InDirections.Add(bind_dir1019);
            VTDPropertyInfoBase pi2071 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1052 = new VTDObjectGetter(pi2071);
            VTDPropertyInfoBase pi2072 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1020 = new VTDObjectSetter(pi2072);
            binding_setter1020 = new StringFormaterDecorator(binding_setter1020,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir1020 = new BindDirection(_flow.Loop159,binding_getter1052,binding_setter1020,BindTargetType.ToInProperty);
            _flow.DbFetchData164.InDirections.Add(bind_dir1020);
            VTDPropertyInfoBase pi2073 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1053 = new VTDObjectGetter(pi2073);
            VTDPropertyInfoBase pi2074 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1021 = new VTDObjectSetter(pi2074);
            bind_dir1021 = new BindDirection(_flow.DbOpenConnection39,binding_getter1053,binding_setter1021,BindTargetType.ToInProperty);
            _flow.DbFetchData164.InDirections.Add(bind_dir1021);
            XmlDocument DbFetchData164_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData164_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData164_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData164.ExpectedOutputProperties = DbFetchData164_ExpectedOutputProperties_Document;
            _flow.DbFetchData165.QueryString = @"select OutputValue from tb_getclassmembers_verification where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData165.Timeout = (int)30;
            _flow.DbFetchData165.Comment = @"";
            _flow.DbFetchData165.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData165.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi2075 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1054 = new VTDObjectGetter(pi2075);
            VTDPropertyInfoBase pi2076 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1022 = new VTDObjectSetter(pi2076);
            binding_setter1022 = new StringFormaterDecorator(binding_setter1022,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir1022 = new BindDirection(_flow.Loop159,binding_getter1054,binding_setter1022,BindTargetType.ToInProperty);
            _flow.DbFetchData165.InDirections.Add(bind_dir1022);
            VTDPropertyInfoBase pi2077 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1055 = new VTDObjectGetter(pi2077);
            VTDPropertyInfoBase pi2078 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1023 = new VTDObjectSetter(pi2078);
            bind_dir1023 = new BindDirection(_flow.DbOpenConnection39,binding_getter1055,binding_setter1023,BindTargetType.ToInProperty);
            _flow.DbFetchData165.InDirections.Add(bind_dir1023);
            XmlDocument DbFetchData165_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData165_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData165_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData165.ExpectedOutputProperties = DbFetchData165_ExpectedOutputProperties_Document;
            _flow.DbFetchData166.QueryString = @"select ExpectationValue from tb_getclassmembers_verification where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData166.Timeout = (int)30;
            _flow.DbFetchData166.Comment = @"";
            _flow.DbFetchData166.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData166.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi2079 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1056 = new VTDObjectGetter(pi2079);
            VTDPropertyInfoBase pi2080 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1024 = new VTDObjectSetter(pi2080);
            binding_setter1024 = new StringFormaterDecorator(binding_setter1024,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir1024 = new BindDirection(_flow.Loop159,binding_getter1056,binding_setter1024,BindTargetType.ToInProperty);
            _flow.DbFetchData166.InDirections.Add(bind_dir1024);
            VTDPropertyInfoBase pi2081 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1057 = new VTDObjectGetter(pi2081);
            VTDPropertyInfoBase pi2082 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1025 = new VTDObjectSetter(pi2082);
            bind_dir1025 = new BindDirection(_flow.DbOpenConnection39,binding_getter1057,binding_setter1025,BindTargetType.ToInProperty);
            _flow.DbFetchData166.InDirections.Add(bind_dir1025);
            XmlDocument DbFetchData166_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData166_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData166_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData166.ExpectedOutputProperties = DbFetchData166_ExpectedOutputProperties_Document;
            _flow.IfElse167.ConditionAsString = @"{Step.OutputProperties.DbFetchData165.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData166.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse167.Comment = @"";
            _flow.IfElse167.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse167.Name = @"填写Result";
            _flow.IfElse167.Activities.Add (_flow.IfElseBranch168);
            _flow.IfElse167.Activities.Add (_flow.IfElseBranch170);
            _flow.IfElseBranch168.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi2083 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1058 = new VTDXPathGetter(pi2083,XmlTypeCode.String);
            binding_getter1058 = new XPathGetterDecorator(binding_getter1058,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData165.GetParam(binding_getter1058),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi2084 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1059 = new VTDXPathGetter(pi2084,XmlTypeCode.String);
            binding_getter1059 = new XPathGetterDecorator(binding_getter1059,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData166.GetParam(binding_getter1059),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch168.Comment = @"";
            _flow.IfElseBranch168.IconPath = @"";
            _flow.IfElseBranch168.Name = @"是";
            _flow.IfElseBranch168.Activities.Add (_flow.DbFetchData169);
            _flow.IfElseBranch170.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch170.Comment = @"";
            _flow.IfElseBranch170.IconPath = @"";
            _flow.IfElseBranch170.Name = @"否";
            _flow.IfElseBranch170.Activities.Add (_flow.DbFetchData171);
            _flow.DbFetchData169.QueryString = @"update tb_getclassmembers_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData169.Timeout = (int)30;
            _flow.DbFetchData169.Comment = @"";
            _flow.DbFetchData169.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData169.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi2085 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1060 = new VTDObjectGetter(pi2085);
            VTDPropertyInfoBase pi2086 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1026 = new VTDObjectSetter(pi2086);
            binding_setter1026 = new StringFormaterDecorator(binding_setter1026,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir1026 = new BindDirection(_flow.Loop159,binding_getter1060,binding_setter1026,BindTargetType.ToInProperty);
            _flow.DbFetchData169.InDirections.Add(bind_dir1026);
            VTDPropertyInfoBase pi2087 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1061 = new VTDObjectGetter(pi2087);
            VTDPropertyInfoBase pi2088 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1027 = new VTDObjectSetter(pi2088);
            bind_dir1027 = new BindDirection(_flow.DbOpenConnection39,binding_getter1061,binding_setter1027,BindTargetType.ToInProperty);
            _flow.DbFetchData169.InDirections.Add(bind_dir1027);
            XmlDocument DbFetchData169_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData169_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData169_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData169.ExpectedOutputProperties = DbFetchData169_ExpectedOutputProperties_Document;
            _flow.DbFetchData171.QueryString = @"update tb_getclassmembers_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop159.CurrentIterationNumber}";
            _flow.DbFetchData171.Timeout = (int)30;
            _flow.DbFetchData171.Comment = @"";
            _flow.DbFetchData171.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData171.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi2089 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1062 = new VTDObjectGetter(pi2089);
            VTDPropertyInfoBase pi2090 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1028 = new VTDObjectSetter(pi2090);
            binding_setter1028 = new StringFormaterDecorator(binding_setter1028,"{Step.OutputProperties.Loop159.CurrentIterationNumber}");
            bind_dir1028 = new BindDirection(_flow.Loop159,binding_getter1062,binding_setter1028,BindTargetType.ToInProperty);
            _flow.DbFetchData171.InDirections.Add(bind_dir1028);
            VTDPropertyInfoBase pi2091 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1063 = new VTDObjectGetter(pi2091);
            VTDPropertyInfoBase pi2092 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1029 = new VTDObjectSetter(pi2092);
            bind_dir1029 = new BindDirection(_flow.DbOpenConnection39,binding_getter1063,binding_setter1029,BindTargetType.ToInProperty);
            _flow.DbFetchData171.InDirections.Add(bind_dir1029);
            XmlDocument DbFetchData171_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData171_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData171_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData171.ExpectedOutputProperties = DbFetchData171_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    