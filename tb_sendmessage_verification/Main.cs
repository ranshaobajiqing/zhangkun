/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_sendmessage_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1678 = null;
        public BindDirection bind_dir1679 = null;
        public BindDirection bind_dir1680 = null;
        public BindDirection bind_dir1681 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity258 = null;
        public BindDirection bind_dir1682 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity258_Policy = null;
        public BindDirection bind_dir1683 = null;
        public BindDirection bind_dir1684 = null;
        public BindDirection bind_dir1685 = null;
        public BindDirection bind_dir1686 = null;
        public BindDirection bind_dir1687 = null;
        public BindDirection bind_dir1688 = null;
        public BindDirection bind_dir1689 = null;
        public BindDirection bind_dir1690 = null;
        public BindDirection bind_dir1691 = null;
        public BindDirection bind_dir1692 = null;
        public BindDirection bind_dir1693 = null;
        public BindDirection bind_dir1694 = null;
        public BindDirection bind_dir1695 = null;
        public BindDirection bind_dir1696 = null;
        public BindDirection bind_dir1697 = null;
        public BindDirection bind_dir1698 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity259 = null;
        public BindDirection bind_dir1699 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity259_Policy = null;
        public BindDirection bind_dir1700 = null;
        public BindDirection bind_dir1701 = null;
        public BindDirection bind_dir1702 = null;
        public BindDirection bind_dir1703 = null;
        public BindDirection bind_dir1704 = null;
        public BindDirection bind_dir1705 = null;
        public BindDirection bind_dir1706 = null;
        public BindDirection bind_dir1707 = null;
        public BindDirection bind_dir1708 = null;
        public BindDirection bind_dir1709 = null;
        public BindDirection bind_dir1710 = null;
        public BindDirection bind_dir1711 = null;
        public BindDirection bind_dir1712 = null;
        public BindDirection bind_dir1713 = null;
        public BindDirection bind_dir1714 = null;
        public BindDirection bind_dir1715 = null;
        public BindDirection bind_dir1716 = null;
        public BindDirection bind_dir1717 = null;
        public BindDirection bind_dir1718 = null;
        public BindDirection bind_dir1719 = null;
        public BindDirection bind_dir1720 = null;
        public BindDirection bind_dir1721 = null;
        public BindDirection bind_dir1722 = null;
        public BindDirection bind_dir1723 = null;
        public BindDirection bind_dir1724 = null;
        public BindDirection bind_dir1725 = null;
        public BindDirection bind_dir1726 = null;
        public BindDirection bind_dir1727 = null;
        public BindDirection bind_dir1728 = null;
        public BindDirection bind_dir1729 = null;
        public BindDirection bind_dir1730 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity254 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity254");
            _flow.DataFetchActivity251 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity251");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity253 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity253");
            _flow.DataExporterActivity256 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity256");
            _flow.DataExporterCloseActivity257 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity257");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity252 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity252");
            _flow.DataDisconnectActivity255 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity255");
            this.DataCursorActivity258 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity258");
            this.DataCursorActivity258_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence249 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence249");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity259 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity259");
            this.DataCursorActivity259_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence250 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence250");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.ReplaceStringActivity248 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity248");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity254.Comment = @"";
            _flow.DataFetchActivity254.IconPath = @"";
            _flow.DataFetchActivity254.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity254.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity254_QueryParameters_Document = new XmlDocument();
            DataFetchActivity254_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity254Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity254_QueryParameters_Document.LoadXml(xmlDataFetchActivity254Params);
            _flow.DataFetchActivity254.QueryParameters = DataFetchActivity254_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity254);
            this.Activities.Add (_flow.DataFetchActivity254);
            _flow.DataFetchActivity251.Comment = @"";
            _flow.DataFetchActivity251.IconPath = @"";
            _flow.DataFetchActivity251.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity251.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity251_QueryParameters_Document = new XmlDocument();
            DataFetchActivity251_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity251Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity251_QueryParameters_Document.LoadXml(xmlDataFetchActivity251Params);
            _flow.DataFetchActivity251.QueryParameters = DataFetchActivity251_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity251);
            this.Activities.Add (_flow.DataFetchActivity251);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity258);
            _flow.Loop2.Activities.Add (_flow.Sequence249);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity253.Comment = @"";
            _flow.DataExporterActivity253.IconPath = @"";
            VTDPropertyInfoBase pi3407 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1730 = new VTDObjectGetter(pi3407);
            VTDPropertyInfoBase pi3408 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1678 = new VTDObjectSetter(pi3408);
            binding_setter1678 = new StringFormaterDecorator(binding_setter1678,"{Step.DataFetchActivity251.OutTable}");
            bind_dir1678 = new BindDirection(_flow.DataFetchActivity251,binding_getter1730,binding_setter1678,BindTargetType.ToInProperty);
            _flow.DataExporterActivity253.InDirections.Add(bind_dir1678);
            this.Activities.Add (_flow.DataExporterActivity253);
            _flow.DataExporterActivity256.Comment = @"";
            _flow.DataExporterActivity256.IconPath = @"";
            VTDPropertyInfoBase pi3409 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1731 = new VTDObjectGetter(pi3409);
            VTDPropertyInfoBase pi3410 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1679 = new VTDObjectSetter(pi3410);
            binding_setter1679 = new StringFormaterDecorator(binding_setter1679,"{Step.DataFetchActivity254.OutTable}");
            bind_dir1679 = new BindDirection(_flow.DataFetchActivity254,binding_getter1731,binding_setter1679,BindTargetType.ToInProperty);
            _flow.DataExporterActivity256.InDirections.Add(bind_dir1679);
            this.Activities.Add (_flow.DataExporterActivity256);
            _flow.DataExporterCloseActivity257.Comment = @"";
            _flow.DataExporterCloseActivity257.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity257);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity252.Comment = @"";
            _flow.DataDisconnectActivity252.IconPath = @"";
            VTDPropertyInfoBase pi3411 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1732 = new VTDObjectGetter(pi3411);
            VTDPropertyInfoBase pi3412 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1680 = new VTDObjectSetter(pi3412);
            binding_setter1680 = new StringFormaterDecorator(binding_setter1680,"{Step.DataFetchActivity251.OutTable}");
            bind_dir1680 = new BindDirection(_flow.DataFetchActivity251,binding_getter1732,binding_setter1680,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity252.InDirections.Add(bind_dir1680);
            this.Activities.Add (_flow.DataDisconnectActivity252);
            _flow.DataDisconnectActivity255.Comment = @"";
            _flow.DataDisconnectActivity255.IconPath = @"";
            VTDPropertyInfoBase pi3413 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1733 = new VTDObjectGetter(pi3413);
            VTDPropertyInfoBase pi3414 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1681 = new VTDObjectSetter(pi3414);
            binding_setter1681 = new StringFormaterDecorator(binding_setter1681,"{Step.DataFetchActivity254.OutTable}");
            bind_dir1681 = new BindDirection(_flow.DataFetchActivity254,binding_getter1733,binding_setter1681,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity255.InDirections.Add(bind_dir1681);
            this.Activities.Add (_flow.DataDisconnectActivity255);
            this.DataCursorActivity258.Comment = @"";
            this.DataCursorActivity258.IconPath = @"";
            VTDPropertyInfoBase pi3415 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1734 = new VTDObjectGetter(pi3415);
            VTDPropertyInfoBase pi3416 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1682 = new VTDObjectSetter(pi3416);
            binding_setter1682 = new StringFormaterDecorator(binding_setter1682,"{Step.DataFetchActivity251.OutTable}");
            bind_dir1682 = new BindDirection(_flow.DataFetchActivity251,binding_getter1734,binding_setter1682,BindTargetType.ToInProperty);
            this.DataCursorActivity258.InDirections.Add(bind_dir1682);
            this.DataCursorActivity258_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity258_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity258_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity258_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity258_Policy.StartCondition.Value = "";
            this.DataCursorActivity258_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity258_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity258_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity258_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity258_Policy.EndCondition.Value = "";
            this.DataCursorActivity258_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity258_Policy.StepSize = 1;
            this.DataCursorActivity258_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity258.Policy = this.DataCursorActivity258_Policy;
            this.DataCursorActivity258.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity258.ResetCursor;
            _flow.Sequence249.Comment = @"";
            _flow.Sequence249.IconPath = @"";
            _flow.Sequence249.Name = @"序列249";
            _flow.Sequence249.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence249.Activities.Add (_flow.Loop56);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence249.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence249.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence249.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_sendMessage_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_sendMessage_verification表有效行数";
            VTDPropertyInfoBase pi3417 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1735 = new VTDObjectGetter(pi3417);
            VTDPropertyInfoBase pi3418 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1683 = new VTDObjectSetter(pi3418);
            bind_dir1683 = new BindDirection(_flow.DbOpenConnection39,binding_getter1735,binding_setter1683,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir1683);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count>1</Count><Result>true</Result><ResultMessage>成功</ResultMessage><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop56.NumberOfIterations = (int)1;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_sendMessage_verification中的测试用例";
            _flow.Loop56.Activities.Add (this.DataCursorActivity259);
            _flow.Loop56.Activities.Add (_flow.Sequence250);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comHhJd6K4dGd4{DataSource.tb_global_table.LoginStudentUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/Msg/sendMessage接口token实行加密";
            VTDPropertyInfoBase pi3419 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1736 = new VTDObjectGetter(pi3419);
            VTDPropertyInfoBase pi3420 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1684 = new VTDObjectSetter(pi3420);
            binding_setter1684 = new StringFormaterDecorator(binding_setter1684,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1684 = new BindDirection(this.DataCursorActivity258,binding_getter1736,binding_setter1684,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1684);
            VTDPropertyInfoBase pi3421 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter1737 = new VTDObjectGetter(pi3421);
            VTDPropertyInfoBase pi3422 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1685 = new VTDObjectSetter(pi3422);
            binding_setter1685 = new StringFormaterDecorator(binding_setter1685,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1685 = new BindDirection(this.DataCursorActivity258,binding_getter1737,binding_setter1685,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1685);
            VTDPropertyInfoBase pi3423 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1738 = new VTDObjectGetter(pi3423);
            VTDPropertyInfoBase pi3424 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1686 = new VTDObjectSetter(pi3424);
            bind_dir1686 = new BindDirection(_flow.DbOpenConnection39,binding_getter1738,binding_setter1686,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1686);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi3425 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1739 = new VTDObjectGetter(pi3425);
            VTDPropertyInfoBase pi3426 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1687 = new VTDObjectSetter(pi3426);
            bind_dir1687 = new BindDirection(_flow.DbOpenConnection39,binding_getter1739,binding_setter1687,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir1687);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中xsid的值";
            VTDPropertyInfoBase pi3427 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1740 = new VTDObjectGetter(pi3427);
            VTDPropertyInfoBase pi3428 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1688 = new VTDObjectSetter(pi3428);
            bind_dir1688 = new BindDirection(_flow.DbOpenConnection39,binding_getter1740,binding_setter1688,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir1688);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&messageType=1&jid={DataSource.tb_global_table.LoginStudentUsername}@365ime.com&messageContent='作业测试'&api='http://www.baidu.com'&myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTHost}{DataSource.tb_global_table.sendMessage}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/Msg/sendMessage";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi3429 = new VTDPropertyInfoBase("JXTHost");
            VTDBaseGetter binding_getter1741 = new VTDObjectGetter(pi3429);
            VTDPropertyInfoBase pi3430 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1689 = new VTDObjectSetter(pi3430);
            binding_setter1689 = new StringFormaterDecorator(binding_setter1689,"{DataSource.tb_global_table.JXTHost}");
            bind_dir1689 = new BindDirection(this.DataCursorActivity258,binding_getter1741,binding_setter1689,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1689);
            VTDPropertyInfoBase pi3431 = new VTDPropertyInfoBase("sendMessage");
            VTDBaseGetter binding_getter1742 = new VTDObjectGetter(pi3431);
            VTDPropertyInfoBase pi3432 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1690 = new VTDObjectSetter(pi3432);
            binding_setter1690 = new StringFormaterDecorator(binding_setter1690,"{DataSource.tb_global_table.sendMessage}");
            bind_dir1690 = new BindDirection(this.DataCursorActivity258,binding_getter1742,binding_setter1690,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1690);
            VTDPropertyInfoBase pi3433 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1743 = new VTDObjectGetter(pi3433);
            VTDPropertyInfoBase pi3434 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1691 = new VTDObjectSetter(pi3434);
            binding_setter1691 = new StringFormaterDecorator(binding_setter1691,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1691 = new BindDirection(this.DataCursorActivity258,binding_getter1743,binding_setter1691,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1691);
            VTDPropertyInfoBase pi3435 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1744 = new VTDObjectGetter(pi3435);
            VTDPropertyInfoBase pi3436 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1692 = new VTDObjectSetter(pi3436);
            binding_setter1692 = new StringFormaterDecorator(binding_setter1692,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1692 = new BindDirection(this.DataCursorActivity258,binding_getter1744,binding_setter1692,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1692);
            VTDPropertyInfoBase pi3437 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1745 = new VTDXPathGetter(pi3437,XmlTypeCode.String);
            binding_getter1745 = new XPathGetterDecorator(binding_getter1745,"{Array0}",1);
            VTDPropertyInfoBase pi3438 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1693 = new VTDObjectSetter(pi3438);
            binding_setter1693 = new StringFormaterDecorator(binding_setter1693,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir1693 = new BindDirection(_flow.DbFetchData246,binding_getter1745,binding_setter1693,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1693);
            VTDPropertyInfoBase pi3439 = new VTDPropertyInfoBase("LoginStudentUsername");
            VTDBaseGetter binding_getter1746 = new VTDObjectGetter(pi3439);
            VTDPropertyInfoBase pi3440 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1694 = new VTDObjectSetter(pi3440);
            binding_setter1694 = new StringFormaterDecorator(binding_setter1694,"{DataSource.tb_global_table.LoginStudentUsername}");
            bind_dir1694 = new BindDirection(this.DataCursorActivity258,binding_getter1746,binding_setter1694,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1694);
            VTDPropertyInfoBase pi3441 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1747 = new VTDObjectGetter(pi3441);
            VTDPropertyInfoBase pi3442 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1695 = new VTDObjectSetter(pi3442);
            binding_setter1695 = new StringFormaterDecorator(binding_setter1695,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1695 = new BindDirection(this.DataCursorActivity258,binding_getter1747,binding_setter1695,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1695);
            VTDPropertyInfoBase pi3443 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1748 = new VTDXPathGetter(pi3443,XmlTypeCode.String);
            binding_getter1748 = new XPathGetterDecorator(binding_getter1748,"{Array0}",1);
            VTDPropertyInfoBase pi3444 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1696 = new VTDObjectSetter(pi3444);
            binding_setter1696 = new StringFormaterDecorator(binding_setter1696,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir1696 = new BindDirection(_flow.DbFetchData76,binding_getter1748,binding_setter1696,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1696);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/Msg/sendMessage'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi3445 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1749 = new VTDObjectGetter(pi3445);
            VTDPropertyInfoBase pi3446 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1697 = new VTDObjectSetter(pi3446);
            binding_setter1697 = new StringFormaterDecorator(binding_setter1697,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir1697 = new BindDirection(_flow.HTTPActivity73,binding_getter1749,binding_setter1697,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1697);
            VTDPropertyInfoBase pi3447 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1750 = new VTDObjectGetter(pi3447);
            VTDPropertyInfoBase pi3448 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1698 = new VTDObjectSetter(pi3448);
            bind_dir1698 = new BindDirection(_flow.DbOpenConnection39,binding_getter1750,binding_setter1698,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1698);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity259.Comment = @"";
            this.DataCursorActivity259.IconPath = @"";
            VTDPropertyInfoBase pi3449 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1751 = new VTDObjectGetter(pi3449);
            VTDPropertyInfoBase pi3450 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1699 = new VTDObjectSetter(pi3450);
            binding_setter1699 = new StringFormaterDecorator(binding_setter1699,"{Step.DataFetchActivity251.OutTable}");
            bind_dir1699 = new BindDirection(_flow.DataFetchActivity251,binding_getter1751,binding_setter1699,BindTargetType.ToInProperty);
            this.DataCursorActivity259.InDirections.Add(bind_dir1699);
            this.DataCursorActivity259_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity259_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity259_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity259_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity259_Policy.StartCondition.Value = "";
            this.DataCursorActivity259_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity259_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity259_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity259_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity259_Policy.EndCondition.Value = "";
            this.DataCursorActivity259_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity259_Policy.StepSize = 1;
            this.DataCursorActivity259_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity259.Policy = this.DataCursorActivity259_Policy;
            this.DataCursorActivity259.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity259.ResetCursor;
            _flow.Sequence250.Comment = @"";
            _flow.Sequence250.IconPath = @"";
            _flow.Sequence250.Name = @"序列250";
            _flow.Sequence250.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence250.Activities.Add (_flow.ReplaceStringActivity248);
            _flow.Sequence250.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence250.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence250.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,jid,messageType,messageContent,api,token,myJid from tb_sendMessage_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_sendMessage_verification表中字段信息";
            VTDPropertyInfoBase pi3451 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1752 = new VTDObjectGetter(pi3451);
            VTDPropertyInfoBase pi3452 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1700 = new VTDObjectSetter(pi3452);
            binding_setter1700 = new StringFormaterDecorator(binding_setter1700,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1700 = new BindDirection(_flow.Loop56,binding_getter1752,binding_setter1700,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1700);
            VTDPropertyInfoBase pi3453 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1753 = new VTDObjectGetter(pi3453);
            VTDPropertyInfoBase pi3454 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1701 = new VTDObjectSetter(pi3454);
            bind_dir1701 = new BindDirection(_flow.DbOpenConnection39,binding_getter1753,binding_setter1701,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1701);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count>1</Count><Result>true</Result><ResultMessage>成功</ResultMessage><ResultTable><Row><xsid></xsid><jid>249901780@365ime.com</jid><messageType>1</messageType><messageContent>作业测试</messageContent><api>test</api><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token><myJid>887021520@365ime.com</myJid></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3455 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1754 = new VTDObjectGetter(pi3455);
            VTDPropertyInfoBase pi3456 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1702 = new VTDObjectSetter(pi3456);
            bind_dir1702 = new BindDirection(_flow.DbOpenConnection39,binding_getter1754,binding_setter1702,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir1702);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity248.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity248.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity248.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity248.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity248.CaseSensitive = true;
            _flow.ReplaceStringActivity248.Comment = @"";
            _flow.ReplaceStringActivity248.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity248.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi3457 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter1755 = new VTDXPathGetter(pi3457,XmlTypeCode.String);
            binding_getter1755 = new XPathGetterDecorator(binding_getter1755,"{Array0}",1);
            VTDPropertyInfoBase pi3458 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1703 = new VTDObjectSetter(pi3458);
            binding_setter1703 = new StringFormaterDecorator(binding_setter1703,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir1703 = new BindDirection(_flow.DbFetchData57,binding_getter1755,binding_setter1703,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir1703);
            VTDPropertyInfoBase pi3459 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1756 = new VTDXPathGetter(pi3459,XmlTypeCode.String);
            binding_getter1756 = new XPathGetterDecorator(binding_getter1756,"{Array0}",1);
            VTDPropertyInfoBase pi3460 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1704 = new VTDObjectSetter(pi3460);
            binding_setter1704 = new StringFormaterDecorator(binding_setter1704,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1704 = new BindDirection(_flow.DbFetchData247,binding_getter1756,binding_setter1704,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity248.InDirections.Add(bind_dir1704);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity248.Result}&messageType={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].messageType}&jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}&messageContent={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].messageContent}&api={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].api}&myJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}&token={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTHost}{DataSource.tb_global_table.sendMessage}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/Msg/sendMessage";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi3461 = new VTDPropertyInfoBase("JXTHost");
            VTDBaseGetter binding_getter1757 = new VTDObjectGetter(pi3461);
            VTDPropertyInfoBase pi3462 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1705 = new VTDObjectSetter(pi3462);
            binding_setter1705 = new StringFormaterDecorator(binding_setter1705,"{DataSource.tb_global_table.JXTHost}");
            bind_dir1705 = new BindDirection(this.DataCursorActivity259,binding_getter1757,binding_setter1705,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1705);
            VTDPropertyInfoBase pi3463 = new VTDPropertyInfoBase("sendMessage");
            VTDBaseGetter binding_getter1758 = new VTDObjectGetter(pi3463);
            VTDPropertyInfoBase pi3464 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1706 = new VTDObjectSetter(pi3464);
            binding_setter1706 = new StringFormaterDecorator(binding_setter1706,"{DataSource.tb_global_table.sendMessage}");
            bind_dir1706 = new BindDirection(this.DataCursorActivity259,binding_getter1758,binding_setter1706,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1706);
            VTDPropertyInfoBase pi3465 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1759 = new VTDObjectGetter(pi3465);
            VTDPropertyInfoBase pi3466 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1707 = new VTDObjectSetter(pi3466);
            binding_setter1707 = new StringFormaterDecorator(binding_setter1707,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1707 = new BindDirection(this.DataCursorActivity259,binding_getter1759,binding_setter1707,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1707);
            VTDPropertyInfoBase pi3467 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1760 = new VTDObjectGetter(pi3467);
            VTDPropertyInfoBase pi3468 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1708 = new VTDObjectSetter(pi3468);
            binding_setter1708 = new StringFormaterDecorator(binding_setter1708,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1708 = new BindDirection(this.DataCursorActivity259,binding_getter1760,binding_setter1708,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1708);
            VTDPropertyInfoBase pi3469 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1761 = new VTDObjectGetter(pi3469);
            VTDPropertyInfoBase pi3470 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1709 = new VTDObjectSetter(pi3470);
            binding_setter1709 = new StringFormaterDecorator(binding_setter1709,"{Step.OutputProperties.ReplaceStringActivity248.Result}");
            bind_dir1709 = new BindDirection(_flow.ReplaceStringActivity248,binding_getter1761,binding_setter1709,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1709);
            VTDPropertyInfoBase pi3471 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='messageType'][1]");
            VTDBaseGetter binding_getter1762 = new VTDXPathGetter(pi3471,XmlTypeCode.String);
            binding_getter1762 = new XPathGetterDecorator(binding_getter1762,"{Array0}",1);
            VTDPropertyInfoBase pi3472 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1710 = new VTDObjectSetter(pi3472);
            binding_setter1710 = new StringFormaterDecorator(binding_setter1710,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].messageType}");
            bind_dir1710 = new BindDirection(_flow.DbFetchData57,binding_getter1762,binding_setter1710,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1710);
            VTDPropertyInfoBase pi3473 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='jid'][1]");
            VTDBaseGetter binding_getter1763 = new VTDXPathGetter(pi3473,XmlTypeCode.String);
            binding_getter1763 = new XPathGetterDecorator(binding_getter1763,"{Array0}",1);
            VTDPropertyInfoBase pi3474 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1711 = new VTDObjectSetter(pi3474);
            binding_setter1711 = new StringFormaterDecorator(binding_setter1711,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].jid}");
            bind_dir1711 = new BindDirection(_flow.DbFetchData57,binding_getter1763,binding_setter1711,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1711);
            VTDPropertyInfoBase pi3475 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='messageContent'][1]");
            VTDBaseGetter binding_getter1764 = new VTDXPathGetter(pi3475,XmlTypeCode.String);
            binding_getter1764 = new XPathGetterDecorator(binding_getter1764,"{Array0}",1);
            VTDPropertyInfoBase pi3476 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1712 = new VTDObjectSetter(pi3476);
            binding_setter1712 = new StringFormaterDecorator(binding_setter1712,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].messageContent}");
            bind_dir1712 = new BindDirection(_flow.DbFetchData57,binding_getter1764,binding_setter1712,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1712);
            VTDPropertyInfoBase pi3477 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='api'][1]");
            VTDBaseGetter binding_getter1765 = new VTDXPathGetter(pi3477,XmlTypeCode.String);
            binding_getter1765 = new XPathGetterDecorator(binding_getter1765,"{Array0}",1);
            VTDPropertyInfoBase pi3478 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1713 = new VTDObjectSetter(pi3478);
            binding_setter1713 = new StringFormaterDecorator(binding_setter1713,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].api}");
            bind_dir1713 = new BindDirection(_flow.DbFetchData57,binding_getter1765,binding_setter1713,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1713);
            VTDPropertyInfoBase pi3479 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter1766 = new VTDXPathGetter(pi3479,XmlTypeCode.String);
            binding_getter1766 = new XPathGetterDecorator(binding_getter1766,"{Array0}",1);
            VTDPropertyInfoBase pi3480 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1714 = new VTDObjectSetter(pi3480);
            binding_setter1714 = new StringFormaterDecorator(binding_setter1714,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir1714 = new BindDirection(_flow.DbFetchData57,binding_getter1766,binding_setter1714,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1714);
            VTDPropertyInfoBase pi3481 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter1767 = new VTDXPathGetter(pi3481,XmlTypeCode.String);
            binding_getter1767 = new XPathGetterDecorator(binding_getter1767,"{Array0}",1);
            VTDPropertyInfoBase pi3482 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1715 = new VTDObjectSetter(pi3482);
            binding_setter1715 = new StringFormaterDecorator(binding_setter1715,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir1715 = new BindDirection(_flow.DbFetchData57,binding_getter1767,binding_setter1715,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1715);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi3483 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1768 = new VTDObjectGetter(pi3483);
            VTDPropertyInfoBase pi3484 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1716 = new VTDObjectSetter(pi3484);
            binding_setter1716 = new StringFormaterDecorator(binding_setter1716,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1716 = new BindDirection(_flow.HTTPActivity59,binding_getter1768,binding_setter1716,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir1716);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_sendMessage_verification set InterfaceResponse = 'errorCode={Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi3485 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1769 = new VTDObjectGetter(pi3485);
            VTDPropertyInfoBase pi3486 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1717 = new VTDObjectSetter(pi3486);
            binding_setter1717 = new StringFormaterDecorator(binding_setter1717,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1717 = new BindDirection(_flow.HTTPActivity59,binding_getter1769,binding_setter1717,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1717);
            VTDPropertyInfoBase pi3487 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1770 = new VTDObjectGetter(pi3487);
            VTDPropertyInfoBase pi3488 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1718 = new VTDObjectSetter(pi3488);
            binding_setter1718 = new StringFormaterDecorator(binding_setter1718,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1718 = new BindDirection(_flow.Loop56,binding_getter1770,binding_setter1718,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1718);
            VTDPropertyInfoBase pi3489 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1771 = new VTDObjectGetter(pi3489);
            VTDPropertyInfoBase pi3490 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1719 = new VTDObjectSetter(pi3490);
            bind_dir1719 = new BindDirection(_flow.DbOpenConnection39,binding_getter1771,binding_setter1719,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1719);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_sendMessage_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi3491 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1772 = new VTDJsonGetter(pi3491);
            VTDPropertyInfoBase pi3492 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1720 = new VTDObjectSetter(pi3492);
            binding_setter1720 = new StringFormaterDecorator(binding_setter1720,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir1720 = new BindDirection(_flow.StringToJsonActivity60,binding_getter1772,binding_setter1720,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1720);
            VTDPropertyInfoBase pi3493 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1773 = new VTDObjectGetter(pi3493);
            VTDPropertyInfoBase pi3494 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1721 = new VTDObjectSetter(pi3494);
            binding_setter1721 = new StringFormaterDecorator(binding_setter1721,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1721 = new BindDirection(_flow.Loop56,binding_getter1773,binding_setter1721,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1721);
            VTDPropertyInfoBase pi3495 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1774 = new VTDObjectGetter(pi3495);
            VTDPropertyInfoBase pi3496 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1722 = new VTDObjectSetter(pi3496);
            bind_dir1722 = new BindDirection(_flow.DbOpenConnection39,binding_getter1774,binding_setter1722,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1722);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_sendMessage_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi3497 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1775 = new VTDObjectGetter(pi3497);
            VTDPropertyInfoBase pi3498 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1723 = new VTDObjectSetter(pi3498);
            binding_setter1723 = new StringFormaterDecorator(binding_setter1723,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1723 = new BindDirection(_flow.Loop56,binding_getter1775,binding_setter1723,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1723);
            VTDPropertyInfoBase pi3499 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1776 = new VTDObjectGetter(pi3499);
            VTDPropertyInfoBase pi3500 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1724 = new VTDObjectSetter(pi3500);
            bind_dir1724 = new BindDirection(_flow.DbOpenConnection39,binding_getter1776,binding_setter1724,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1724);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_sendMessage_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi3501 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1777 = new VTDObjectGetter(pi3501);
            VTDPropertyInfoBase pi3502 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1725 = new VTDObjectSetter(pi3502);
            binding_setter1725 = new StringFormaterDecorator(binding_setter1725,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1725 = new BindDirection(_flow.Loop56,binding_getter1777,binding_setter1725,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1725);
            VTDPropertyInfoBase pi3503 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1778 = new VTDObjectGetter(pi3503);
            VTDPropertyInfoBase pi3504 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1726 = new VTDObjectSetter(pi3504);
            bind_dir1726 = new BindDirection(_flow.DbOpenConnection39,binding_getter1778,binding_setter1726,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1726);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi3505 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1779 = new VTDXPathGetter(pi3505,XmlTypeCode.String);
            binding_getter1779 = new XPathGetterDecorator(binding_getter1779,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter1779),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi3506 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1780 = new VTDXPathGetter(pi3506,XmlTypeCode.String);
            binding_getter1780 = new XPathGetterDecorator(binding_getter1780,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter1780),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_sendMessage_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi3507 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1781 = new VTDObjectGetter(pi3507);
            VTDPropertyInfoBase pi3508 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1727 = new VTDObjectSetter(pi3508);
            binding_setter1727 = new StringFormaterDecorator(binding_setter1727,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1727 = new BindDirection(_flow.Loop56,binding_getter1781,binding_setter1727,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1727);
            VTDPropertyInfoBase pi3509 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1782 = new VTDObjectGetter(pi3509);
            VTDPropertyInfoBase pi3510 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1728 = new VTDObjectSetter(pi3510);
            bind_dir1728 = new BindDirection(_flow.DbOpenConnection39,binding_getter1782,binding_setter1728,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1728);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_sendMessage_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi3511 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1783 = new VTDObjectGetter(pi3511);
            VTDPropertyInfoBase pi3512 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1729 = new VTDObjectSetter(pi3512);
            binding_setter1729 = new StringFormaterDecorator(binding_setter1729,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1729 = new BindDirection(_flow.Loop56,binding_getter1783,binding_setter1729,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1729);
            VTDPropertyInfoBase pi3513 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1784 = new VTDObjectGetter(pi3513);
            VTDPropertyInfoBase pi3514 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1730 = new VTDObjectSetter(pi3514);
            bind_dir1730 = new BindDirection(_flow.DbOpenConnection39,binding_getter1784,binding_setter1730,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1730);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    