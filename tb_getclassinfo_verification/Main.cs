/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getclassinfo_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir842 = null;
        public BindDirection bind_dir843 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity267 = null;
        public BindDirection bind_dir844 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity267_Policy = null;
        public BindDirection bind_dir845 = null;
        public BindDirection bind_dir846 = null;
        public BindDirection bind_dir847 = null;
        public BindDirection bind_dir848 = null;
        public BindDirection bind_dir849 = null;
        public BindDirection bind_dir850 = null;
        public BindDirection bind_dir851 = null;
        public BindDirection bind_dir852 = null;
        public BindDirection bind_dir853 = null;
        public BindDirection bind_dir854 = null;
        public BindDirection bind_dir855 = null;
        public BindDirection bind_dir856 = null;
        public BindDirection bind_dir857 = null;
        public BindDirection bind_dir858 = null;
        public BindDirection bind_dir859 = null;
        public BindDirection bind_dir860 = null;
        public BindDirection bind_dir861 = null;
        public BindDirection bind_dir862 = null;
        public BindDirection bind_dir863 = null;
        public BindDirection bind_dir864 = null;
        public BindDirection bind_dir865 = null;
        public BindDirection bind_dir866 = null;
        public BindDirection bind_dir867 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity268 = null;
        public BindDirection bind_dir868 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity268_Policy = null;
        public BindDirection bind_dir869 = null;
        public BindDirection bind_dir870 = null;
        public BindDirection bind_dir871 = null;
        public BindDirection bind_dir872 = null;
        public BindDirection bind_dir873 = null;
        public BindDirection bind_dir874 = null;
        public BindDirection bind_dir875 = null;
        public BindDirection bind_dir876 = null;
        public BindDirection bind_dir877 = null;
        public BindDirection bind_dir878 = null;
        public BindDirection bind_dir879 = null;
        public BindDirection bind_dir880 = null;
        public BindDirection bind_dir881 = null;
        public BindDirection bind_dir882 = null;
        public BindDirection bind_dir883 = null;
        public BindDirection bind_dir884 = null;
        public BindDirection bind_dir885 = null;
        public BindDirection bind_dir886 = null;
        public BindDirection bind_dir887 = null;
        public BindDirection bind_dir888 = null;
        public BindDirection bind_dir889 = null;
        public BindDirection bind_dir890 = null;
        public BindDirection bind_dir891 = null;
        public BindDirection bind_dir892 = null;
        public BindDirection bind_dir893 = null;
        public BindDirection bind_dir894 = null;
        public BindDirection bind_dir895 = null;
        public BindDirection bind_dir896 = null;
        public BindDirection bind_dir897 = null;
        public BindDirection bind_dir898 = null;
        public BindDirection bind_dir899 = null;
        public BindDirection bind_dir900 = null;
        public BindDirection bind_dir901 = null;
        public BindDirection bind_dir902 = null;
        public BindDirection bind_dir903 = null;
        public BindDirection bind_dir904 = null;
        public BindDirection bind_dir905 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity263 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity263");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity265 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity265");
            _flow.DataExporterCloseActivity266 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity266");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity264 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity264");
            this.DataCursorActivity267 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity267");
            this.DataCursorActivity267_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence261 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence261");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData97 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData97");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.DbFetchData251 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.Loop98 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop98Input>(_context,"Loop98",LoopType.For);
            _flow.DbFetchData111 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData111");
            _flow.CallQTPTest112 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest112");
            _flow.DbFetchData113 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData113");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.HTTPActivity114 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity114");
            _flow.ReplaceStringActivity260 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity260");
            _flow.StringToJsonActivity177 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity177");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.DbFetchData116 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData116");
            this.DataCursorActivity268 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity268");
            this.DataCursorActivity268_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence262 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence262");
            _flow.DbFetchData99 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData99");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.ReplaceStringActivity254 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity254");
            _flow.DbFetchData255 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData255");
            _flow.CallQTPTest256 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest256");
            _flow.DbFetchData257 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData257");
            _flow.ReplaceStringActivity258 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity258");
            _flow.HTTPActivity100 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity100");
            _flow.StringToJsonActivity101 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity101");
            _flow.ReplaceStringActivity259 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity259");
            _flow.DbFetchData102 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData102");
            _flow.DbFetchData103 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData103");
            _flow.DbFetchData104 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData104");
            _flow.DbFetchData105 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData105");
            _flow.IfElse106 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse106Input>(_context,"IfElse106");
            _flow.IfElseBranch107 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch107");
            _flow.IfElseBranch108 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch108");
            _flow.DbFetchData109 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData109");
            _flow.DbFetchData110 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData110");
            _flow.DataFetchActivity263.Comment = @"";
            _flow.DataFetchActivity263.IconPath = @"";
            _flow.DataFetchActivity263.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity263.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity263_QueryParameters_Document = new XmlDocument();
            DataFetchActivity263_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity263Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value></Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity263_QueryParameters_Document.LoadXml(xmlDataFetchActivity263Params);
            _flow.DataFetchActivity263.QueryParameters = DataFetchActivity263_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity263);
            this.Activities.Add (_flow.DataFetchActivity263);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity267);
            _flow.Loop2.Activities.Add (_flow.Sequence261);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity265.Comment = @"";
            _flow.DataExporterActivity265.IconPath = @"";
            VTDPropertyInfoBase pi1711 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter870 = new VTDObjectGetter(pi1711);
            VTDPropertyInfoBase pi1712 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter842 = new VTDObjectSetter(pi1712);
            binding_setter842 = new StringFormaterDecorator(binding_setter842,"{Step.DataFetchActivity263.OutTable}");
            bind_dir842 = new BindDirection(_flow.DataFetchActivity263,binding_getter870,binding_setter842,BindTargetType.ToInProperty);
            _flow.DataExporterActivity265.InDirections.Add(bind_dir842);
            this.Activities.Add (_flow.DataExporterActivity265);
            _flow.DataExporterCloseActivity266.Comment = @"";
            _flow.DataExporterCloseActivity266.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity266);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity264.Comment = @"";
            _flow.DataDisconnectActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1713 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter871 = new VTDObjectGetter(pi1713);
            VTDPropertyInfoBase pi1714 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter843 = new VTDObjectSetter(pi1714);
            binding_setter843 = new StringFormaterDecorator(binding_setter843,"{Step.DataFetchActivity263.OutTable}");
            bind_dir843 = new BindDirection(_flow.DataFetchActivity263,binding_getter871,binding_setter843,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity264.InDirections.Add(bind_dir843);
            this.Activities.Add (_flow.DataDisconnectActivity264);
            this.DataCursorActivity267.Comment = @"";
            this.DataCursorActivity267.IconPath = @"";
            VTDPropertyInfoBase pi1715 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter872 = new VTDObjectGetter(pi1715);
            VTDPropertyInfoBase pi1716 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter844 = new VTDObjectSetter(pi1716);
            binding_setter844 = new StringFormaterDecorator(binding_setter844,"{Step.DataFetchActivity263.OutTable}");
            bind_dir844 = new BindDirection(_flow.DataFetchActivity263,binding_getter872,binding_setter844,BindTargetType.ToInProperty);
            this.DataCursorActivity267.InDirections.Add(bind_dir844);
            this.DataCursorActivity267_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity267_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity267_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity267_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity267_Policy.StartCondition.Value = "";
            this.DataCursorActivity267_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity267_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity267_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity267_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity267_Policy.EndCondition.Value = "";
            this.DataCursorActivity267_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity267_Policy.StepSize = 1;
            this.DataCursorActivity267_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity267.Policy = this.DataCursorActivity267_Policy;
            this.DataCursorActivity267.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity267.ResetCursor;
            _flow.Sequence261.Comment = @"";
            _flow.Sequence261.IconPath = @"";
            _flow.Sequence261.Name = @"序列261";
            _flow.Sequence261.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData97);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData251);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence261.Activities.Add (_flow.Loop98);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData111);
            _flow.Sequence261.Activities.Add (_flow.CallQTPTest112);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData113);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence261.Activities.Add (_flow.HTTPActivity114);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity260);
            _flow.Sequence261.Activities.Add (_flow.StringToJsonActivity177);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData116);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData97.QueryString = @"select count(*) as 'Row' from tb_getclassinfo_verification";
            _flow.DbFetchData97.Timeout = (int)30;
            _flow.DbFetchData97.Comment = @"";
            _flow.DbFetchData97.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData97.Name = @"获取到tb_getclassinfo_verification表有效行数";
            VTDPropertyInfoBase pi1717 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter873 = new VTDObjectGetter(pi1717);
            VTDPropertyInfoBase pi1718 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter845 = new VTDObjectSetter(pi1718);
            bind_dir845 = new BindDirection(_flow.DbOpenConnection39,binding_getter873,binding_setter845,BindTargetType.ToInProperty);
            _flow.DbFetchData97.InDirections.Add(bind_dir845);
            XmlDocument DbFetchData97_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData97_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData97_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData97.ExpectedOutputProperties = DbFetchData97_ExpectedOutputProperties_Document;
            _flow.DbFetchData250.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi1719 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter874 = new VTDObjectGetter(pi1719);
            VTDPropertyInfoBase pi1720 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter846 = new VTDObjectSetter(pi1720);
            bind_dir846 = new BindDirection(_flow.DbOpenConnection39,binding_getter874,binding_setter846,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir846);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.DbFetchData251.QueryString = @"select schoolCode from tb_global_table where TestCase = 1";
            _flow.DbFetchData251.Timeout = (int)30;
            _flow.DbFetchData251.Comment = @"";
            _flow.DbFetchData251.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData251.Name = @"查询tb_global_table表中schoolCode值";
            VTDPropertyInfoBase pi1721 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter875 = new VTDObjectGetter(pi1721);
            VTDPropertyInfoBase pi1722 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter847 = new VTDObjectSetter(pi1722);
            bind_dir847 = new BindDirection(_flow.DbOpenConnection39,binding_getter875,binding_setter847,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir847);
            XmlDocument DbFetchData251_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData251_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData251_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><schoolCode /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData251.ExpectedOutputProperties = DbFetchData251_ExpectedOutputProperties_Document;
            _flow.DbFetchData252.QueryString = @"select LoginTeacherUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询tb_global_table表中LoginTeacherUsername值";
            VTDPropertyInfoBase pi1723 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter876 = new VTDObjectGetter(pi1723);
            VTDPropertyInfoBase pi1724 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter848 = new VTDObjectSetter(pi1724);
            bind_dir848 = new BindDirection(_flow.DbOpenConnection39,binding_getter876,binding_setter848,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir848);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginTeacherUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.Loop98.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop98.NumberOfIterations = (int)1;
            _flow.Loop98.Comment = @"";
            _flow.Loop98.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop98.Name = @"循环执行tb_getclassinfo_verification中的测试用例";
            VTDPropertyInfoBase pi1725 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter877 = new VTDXPathGetter(pi1725,XmlTypeCode.Long);
            binding_getter877 = new XPathGetterDecorator(binding_getter877,"{Array0}",1);
            VTDPropertyInfoBase pi1726 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter849 = new VTDObjectSetter(pi1726);
            bind_dir849 = new BindDirection(_flow.DbFetchData97,binding_getter877,binding_setter849,BindTargetType.ToInProperty);
            _flow.Loop98.InDirections.Add(bind_dir849);
            _flow.Loop98.Activities.Add (this.DataCursorActivity268);
            _flow.Loop98.Activities.Add (_flow.Sequence262);
            _flow.DbFetchData111.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6' where TestCase = 1";
            _flow.DbFetchData111.Timeout = (int)30;
            _flow.DbFetchData111.Comment = @"";
            _flow.DbFetchData111.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData111.Name = @"对/jxt/class.php接口token实行加密";
            VTDPropertyInfoBase pi1727 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter878 = new VTDObjectGetter(pi1727);
            VTDPropertyInfoBase pi1728 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter850 = new VTDObjectSetter(pi1728);
            binding_setter850 = new StringFormaterDecorator(binding_setter850,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir850 = new BindDirection(this.DataCursorActivity267,binding_getter878,binding_setter850,BindTargetType.ToInProperty);
            _flow.DbFetchData111.InDirections.Add(bind_dir850);
            VTDPropertyInfoBase pi1729 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter879 = new VTDObjectGetter(pi1729);
            VTDPropertyInfoBase pi1730 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter851 = new VTDObjectSetter(pi1730);
            bind_dir851 = new BindDirection(_flow.DbOpenConnection39,binding_getter879,binding_setter851,BindTargetType.ToInProperty);
            _flow.DbFetchData111.InDirections.Add(bind_dir851);
            XmlDocument DbFetchData111_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData111_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData111_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData111.ExpectedOutputProperties = DbFetchData111_ExpectedOutputProperties_Document;
            _flow.CallQTPTest112.Comment = @"";
            _flow.CallQTPTest112.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest112.Name = @"Encryption.SHA1";
            _flow.CallQTPTest112.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ScriptPath}");
            _flow.CallQTPTest112.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ActionName}");
            _flow.CallQTPTest112.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.Description}");
            _flow.CallQTPTest112.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.IsActionSelected}");
            _flow.CallQTPTest112.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ResultLocation}");
            _flow.CallQTPTest112.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.QCScriptPath}");
            _flow.DbFetchData113.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData113.Timeout = (int)30;
            _flow.DbFetchData113.Comment = @"";
            _flow.DbFetchData113.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData113.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1731 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter880 = new VTDObjectGetter(pi1731);
            VTDPropertyInfoBase pi1732 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter852 = new VTDObjectSetter(pi1732);
            bind_dir852 = new BindDirection(_flow.DbOpenConnection39,binding_getter880,binding_setter852,BindTargetType.ToInProperty);
            _flow.DbFetchData113.InDirections.Add(bind_dir852);
            XmlDocument DbFetchData113_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData113_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData113_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData113.ExpectedOutputProperties = DbFetchData113_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi1733 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter881 = new VTDObjectGetter(pi1733);
            VTDPropertyInfoBase pi1734 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter853 = new VTDObjectSetter(pi1734);
            bind_dir853 = new BindDirection(_flow.DbOpenConnection39,binding_getter881,binding_setter853,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir853);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select schoolCode from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中schoolCode值";
            VTDPropertyInfoBase pi1735 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter882 = new VTDObjectGetter(pi1735);
            VTDPropertyInfoBase pi1736 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter854 = new VTDObjectSetter(pi1736);
            bind_dir854 = new BindDirection(_flow.DbOpenConnection39,binding_getter882,binding_setter854,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir854);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><schoolCode /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.HTTPActivity114.TextBody = @"myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&token={Step.OutputProperties.DbFetchData113.ResultTable.Row[1].EncryptionResult}&xxcode={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].schoolCode}";
            _flow.HTTPActivity114.TextXmlBody = @"";
            _flow.HTTPActivity114.FileBody = @"";
            _flow.HTTPActivity114.PostBody = @"";
            _flow.HTTPActivity114.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getClassInfo}";
            _flow.HTTPActivity114.HttpMethod = @"POST";
            _flow.HTTPActivity114.HttpVersion = @"1.1";
            _flow.HTTPActivity114.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity114.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity114.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity114.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity114.Comment = @"";
            _flow.HTTPActivity114.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity114.RequestBodyType = @"Text";
            _flow.HTTPActivity114.ResponseType = @"Text";
            _flow.HTTPActivity114.Name = @"调用/jxt/class.php";
            _flow.HTTPActivity114.Proxy.Server = @"";
            _flow.HTTPActivity114.Proxy.Username = @"";
            _flow.HTTPActivity114.Proxy.Password = @"";
            _flow.HTTPActivity114.Authentication.Username = @"";
            _flow.HTTPActivity114.Authentication.Password = @"";
            _flow.HTTPActivity114.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity114.Timeout = (int)100000;
            _flow.HTTPActivity114.ClientCertificate.Password = @"";
            _flow.HTTPActivity114.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity114.UseClientCertificate = false;
            _flow.HTTPActivity114.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity114.AllowRedirections = true;
            _flow.HTTPActivity114.ReuseCookies = false;
            _flow.HTTPActivity114.ExpectServerError = false;
            XmlDocument HTTPActivity114_XMLBody_Document = new XmlDocument();
            HTTPActivity114_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity114_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity114.XMLBody = HTTPActivity114_XMLBody_Document;
            XmlDocument HTTPActivity114_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity114_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity114_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity114.RequestMultipartInfoXml = HTTPActivity114_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity114.Multipart=false;
            VTDPropertyInfoBase pi1737 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter883 = new VTDObjectGetter(pi1737);
            VTDPropertyInfoBase pi1738 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter855 = new VTDObjectSetter(pi1738);
            binding_setter855 = new StringFormaterDecorator(binding_setter855,"{DataSource.tb_global_table.IQHost}");
            bind_dir855 = new BindDirection(this.DataCursorActivity267,binding_getter883,binding_setter855,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir855);
            VTDPropertyInfoBase pi1739 = new VTDPropertyInfoBase("getClassInfo");
            VTDBaseGetter binding_getter884 = new VTDObjectGetter(pi1739);
            VTDPropertyInfoBase pi1740 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter856 = new VTDObjectSetter(pi1740);
            binding_setter856 = new StringFormaterDecorator(binding_setter856,"{DataSource.tb_global_table.getClassInfo}");
            bind_dir856 = new BindDirection(this.DataCursorActivity267,binding_getter884,binding_setter856,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir856);
            VTDPropertyInfoBase pi1741 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter885 = new VTDObjectGetter(pi1741);
            VTDPropertyInfoBase pi1742 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter857 = new VTDObjectSetter(pi1742);
            binding_setter857 = new StringFormaterDecorator(binding_setter857,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir857 = new BindDirection(this.DataCursorActivity267,binding_getter885,binding_setter857,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir857);
            VTDPropertyInfoBase pi1743 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter886 = new VTDObjectGetter(pi1743);
            VTDPropertyInfoBase pi1744 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter858 = new VTDObjectSetter(pi1744);
            binding_setter858 = new StringFormaterDecorator(binding_setter858,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir858 = new BindDirection(this.DataCursorActivity267,binding_getter886,binding_setter858,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir858);
            VTDPropertyInfoBase pi1745 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter887 = new VTDObjectGetter(pi1745);
            VTDPropertyInfoBase pi1746 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter859 = new VTDObjectSetter(pi1746);
            binding_setter859 = new StringFormaterDecorator(binding_setter859,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir859 = new BindDirection(this.DataCursorActivity267,binding_getter887,binding_setter859,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir859);
            VTDPropertyInfoBase pi1747 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter888 = new VTDXPathGetter(pi1747,XmlTypeCode.String);
            binding_getter888 = new XPathGetterDecorator(binding_getter888,"{Array0}",1);
            VTDPropertyInfoBase pi1748 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter860 = new VTDObjectSetter(pi1748);
            binding_setter860 = new StringFormaterDecorator(binding_setter860,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir860 = new BindDirection(_flow.DbFetchData246,binding_getter888,binding_setter860,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir860);
            VTDPropertyInfoBase pi1749 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter889 = new VTDXPathGetter(pi1749,XmlTypeCode.String);
            binding_getter889 = new XPathGetterDecorator(binding_getter889,"{Array0}",1);
            VTDPropertyInfoBase pi1750 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter861 = new VTDObjectSetter(pi1750);
            binding_setter861 = new StringFormaterDecorator(binding_setter861,"{Step.OutputProperties.DbFetchData113.ResultTable.Row[1].EncryptionResult}");
            bind_dir861 = new BindDirection(_flow.DbFetchData113,binding_getter889,binding_setter861,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir861);
            VTDPropertyInfoBase pi1751 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='schoolCode'][1]");
            VTDBaseGetter binding_getter890 = new VTDXPathGetter(pi1751,XmlTypeCode.String);
            binding_getter890 = new XPathGetterDecorator(binding_getter890,"{Array0}",1);
            VTDPropertyInfoBase pi1752 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter862 = new VTDObjectSetter(pi1752);
            binding_setter862 = new StringFormaterDecorator(binding_setter862,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].schoolCode}");
            bind_dir862 = new BindDirection(_flow.DbFetchData247,binding_getter890,binding_setter862,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir862);
            XmlDocument HTTPActivity114_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity114_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity114_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity114.ExpectedResponseXmlBody = HTTPActivity114_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity114_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity114_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity114_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity114.ExpectedResponseJsonBody = HTTPActivity114_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity114_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity114_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity114_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity114.ExpectedOutputProperties = HTTPActivity114_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity260.SourceString = @"{Step.OutputProperties.HTTPActivity114.ResponseBody}";
            _flow.ReplaceStringActivity260.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity260.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity260.SearchReplaceString[0].Key = @"'";
            _flow.ReplaceStringActivity260.SearchReplaceString[0].Value = @"\'";
            _flow.ReplaceStringActivity260.CaseSensitive = true;
            _flow.ReplaceStringActivity260.Comment = @"";
            _flow.ReplaceStringActivity260.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity260.Name = @"Response替换'";
            VTDPropertyInfoBase pi1753 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter891 = new VTDObjectGetter(pi1753);
            VTDPropertyInfoBase pi1754 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter863 = new VTDObjectSetter(pi1754);
            binding_setter863 = new StringFormaterDecorator(binding_setter863,"{Step.OutputProperties.HTTPActivity114.ResponseBody}");
            bind_dir863 = new BindDirection(_flow.HTTPActivity114,binding_getter891,binding_setter863,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity260.InDirections.Add(bind_dir863);
            _flow.StringToJsonActivity177.InputString = @"{Step.OutputProperties.HTTPActivity114.ResponseBody}";
            _flow.StringToJsonActivity177.Comment = @"";
            _flow.StringToJsonActivity177.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity177.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1755 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter892 = new VTDObjectGetter(pi1755);
            VTDPropertyInfoBase pi1756 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter864 = new VTDObjectSetter(pi1756);
            binding_setter864 = new StringFormaterDecorator(binding_setter864,"{Step.OutputProperties.HTTPActivity114.ResponseBody}");
            bind_dir864 = new BindDirection(_flow.HTTPActivity114,binding_getter892,binding_setter864,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity177.InDirections.Add(bind_dir864);
            _flow.DbFetchData248.QueryString = @"update tb_global_table set classJid = '117a2b2edad14f0badff74e72de67f7b' where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"更新tb_global_table表中classJid值";
            VTDPropertyInfoBase pi1757 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter893 = new VTDObjectGetter(pi1757);
            VTDPropertyInfoBase pi1758 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter865 = new VTDObjectSetter(pi1758);
            bind_dir865 = new BindDirection(_flow.DbOpenConnection39,binding_getter893,binding_setter865,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir865);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.DbFetchData116.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.ReplaceStringActivity260.Result}' where InterfaceName = '/jxt/class.php'";
            _flow.DbFetchData116.Timeout = (int)30;
            _flow.DbFetchData116.Comment = @"";
            _flow.DbFetchData116.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData116.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1759 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter894 = new VTDObjectGetter(pi1759);
            VTDPropertyInfoBase pi1760 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter866 = new VTDObjectSetter(pi1760);
            binding_setter866 = new StringFormaterDecorator(binding_setter866,"{Step.OutputProperties.ReplaceStringActivity260.Result}");
            bind_dir866 = new BindDirection(_flow.ReplaceStringActivity260,binding_getter894,binding_setter866,BindTargetType.ToInProperty);
            _flow.DbFetchData116.InDirections.Add(bind_dir866);
            VTDPropertyInfoBase pi1761 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter895 = new VTDObjectGetter(pi1761);
            VTDPropertyInfoBase pi1762 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter867 = new VTDObjectSetter(pi1762);
            bind_dir867 = new BindDirection(_flow.DbOpenConnection39,binding_getter895,binding_setter867,BindTargetType.ToInProperty);
            _flow.DbFetchData116.InDirections.Add(bind_dir867);
            XmlDocument DbFetchData116_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData116_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData116_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData116.ExpectedOutputProperties = DbFetchData116_ExpectedOutputProperties_Document;
            this.DataCursorActivity268.Comment = @"";
            this.DataCursorActivity268.IconPath = @"";
            VTDPropertyInfoBase pi1763 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter896 = new VTDObjectGetter(pi1763);
            VTDPropertyInfoBase pi1764 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter868 = new VTDObjectSetter(pi1764);
            binding_setter868 = new StringFormaterDecorator(binding_setter868,"{Step.DataFetchActivity263.OutTable}");
            bind_dir868 = new BindDirection(_flow.DataFetchActivity263,binding_getter896,binding_setter868,BindTargetType.ToInProperty);
            this.DataCursorActivity268.InDirections.Add(bind_dir868);
            this.DataCursorActivity268_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity268_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity268_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity268_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity268_Policy.StartCondition.Value = "";
            this.DataCursorActivity268_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity268_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity268_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity268_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity268_Policy.EndCondition.Value = "";
            this.DataCursorActivity268_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity268_Policy.StepSize = 1;
            this.DataCursorActivity268_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity268.Policy = this.DataCursorActivity268_Policy;
            this.DataCursorActivity268.ReportStepData = false;
            _flow.Loop98.BeforeExecuteStepEvent += this.DataCursorActivity268.ResetCursor;
            _flow.Sequence262.Comment = @"";
            _flow.Sequence262.IconPath = @"";
            _flow.Sequence262.Name = @"序列262";
            _flow.Sequence262.Activities.Add (_flow.DbFetchData99);
            _flow.Sequence262.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence262.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence262.Activities.Add (_flow.ReplaceStringActivity254);
            _flow.Sequence262.Activities.Add (_flow.DbFetchData255);
            _flow.Sequence262.Activities.Add (_flow.CallQTPTest256);
            _flow.Sequence262.Activities.Add (_flow.DbFetchData257);
            _flow.Sequence262.Activities.Add (_flow.ReplaceStringActivity258);
            _flow.Sequence262.Activities.Add (_flow.HTTPActivity100);
            _flow.Sequence262.Activities.Add (_flow.StringToJsonActivity101);
            _flow.Sequence262.Activities.Add (_flow.ReplaceStringActivity259);
            _flow.Sequence262.Activities.Add (_flow.DbFetchData102);
            _flow.Sequence262.Activities.Add (_flow.DbFetchData103);
            _flow.Sequence262.Activities.Add (_flow.DbFetchData104);
            _flow.Sequence262.Activities.Add (_flow.DbFetchData105);
            _flow.Sequence262.Activities.Add (_flow.IfElse106);
            _flow.DbFetchData99.QueryString = @"select xsid,xxcode,myJid,token from tb_getclassinfo_verification where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData99.Timeout = (int)30;
            _flow.DbFetchData99.Comment = @"";
            _flow.DbFetchData99.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData99.Name = @"查询tb_getclassinfo_verification表中数据";
            VTDPropertyInfoBase pi1765 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter897 = new VTDObjectGetter(pi1765);
            VTDPropertyInfoBase pi1766 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter869 = new VTDObjectSetter(pi1766);
            binding_setter869 = new StringFormaterDecorator(binding_setter869,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir869 = new BindDirection(_flow.Loop98,binding_getter897,binding_setter869,BindTargetType.ToInProperty);
            _flow.DbFetchData99.InDirections.Add(bind_dir869);
            VTDPropertyInfoBase pi1767 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter898 = new VTDObjectGetter(pi1767);
            VTDPropertyInfoBase pi1768 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter870 = new VTDObjectSetter(pi1768);
            bind_dir870 = new BindDirection(_flow.DbOpenConnection39,binding_getter898,binding_setter870,BindTargetType.ToInProperty);
            _flow.DbFetchData99.InDirections.Add(bind_dir870);
            XmlDocument DbFetchData99_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData99_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData99_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><xxcode /><myJid /><token /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData99.ExpectedOutputProperties = DbFetchData99_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi1769 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter899 = new VTDXPathGetter(pi1769,XmlTypeCode.String);
            binding_getter899 = new XPathGetterDecorator(binding_getter899,"{Array0}",1);
            VTDPropertyInfoBase pi1770 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter871 = new VTDObjectSetter(pi1770);
            binding_setter871 = new StringFormaterDecorator(binding_setter871,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xsid}");
            bind_dir871 = new BindDirection(_flow.DbFetchData99,binding_getter899,binding_setter871,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir871);
            VTDPropertyInfoBase pi1771 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter900 = new VTDXPathGetter(pi1771,XmlTypeCode.String);
            binding_getter900 = new XPathGetterDecorator(binding_getter900,"{Array0}",1);
            VTDPropertyInfoBase pi1772 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter872 = new VTDObjectSetter(pi1772);
            binding_setter872 = new StringFormaterDecorator(binding_setter872,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir872 = new BindDirection(_flow.DbFetchData250,binding_getter900,binding_setter872,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir872);
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xxcode}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"2177000014";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData251.ResultTable.Row[1].schoolCode}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将schoolCode更新至最新值";
            VTDPropertyInfoBase pi1773 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xxcode'][1]");
            VTDBaseGetter binding_getter901 = new VTDXPathGetter(pi1773,XmlTypeCode.String);
            binding_getter901 = new XPathGetterDecorator(binding_getter901,"{Array0}",1);
            VTDPropertyInfoBase pi1774 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter873 = new VTDObjectSetter(pi1774);
            binding_setter873 = new StringFormaterDecorator(binding_setter873,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xxcode}");
            bind_dir873 = new BindDirection(_flow.DbFetchData99,binding_getter901,binding_setter873,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir873);
            VTDPropertyInfoBase pi1775 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='schoolCode'][1]");
            VTDBaseGetter binding_getter902 = new VTDXPathGetter(pi1775,XmlTypeCode.String);
            binding_getter902 = new XPathGetterDecorator(binding_getter902,"{Array0}",1);
            VTDPropertyInfoBase pi1776 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter874 = new VTDObjectSetter(pi1776);
            binding_setter874 = new StringFormaterDecorator(binding_setter874,"{Step.OutputProperties.DbFetchData251.ResultTable.Row[1].schoolCode}");
            bind_dir874 = new BindDirection(_flow.DbFetchData251,binding_getter902,binding_setter874,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir874);
            _flow.ReplaceStringActivity254.SourceString = @"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].myJid}";
            _flow.ReplaceStringActivity254.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity254.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity254.SearchReplaceString[0].Key = @"77401169";
            _flow.ReplaceStringActivity254.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].LoginTeacherUsername}";
            _flow.ReplaceStringActivity254.CaseSensitive = true;
            _flow.ReplaceStringActivity254.Comment = @"";
            _flow.ReplaceStringActivity254.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity254.Name = @"将LoginTeacherUsername更新至最新值";
            VTDPropertyInfoBase pi1777 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter903 = new VTDXPathGetter(pi1777,XmlTypeCode.String);
            binding_getter903 = new XPathGetterDecorator(binding_getter903,"{Array0}",1);
            VTDPropertyInfoBase pi1778 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter875 = new VTDObjectSetter(pi1778);
            binding_setter875 = new StringFormaterDecorator(binding_setter875,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].myJid}");
            bind_dir875 = new BindDirection(_flow.DbFetchData99,binding_getter903,binding_setter875,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity254.InDirections.Add(bind_dir875);
            VTDPropertyInfoBase pi1779 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='LoginTeacherUsername'][1]");
            VTDBaseGetter binding_getter904 = new VTDXPathGetter(pi1779,XmlTypeCode.String);
            binding_getter904 = new XPathGetterDecorator(binding_getter904,"{Array0}",1);
            VTDPropertyInfoBase pi1780 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter876 = new VTDObjectSetter(pi1780);
            binding_setter876 = new StringFormaterDecorator(binding_setter876,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].LoginTeacherUsername}");
            bind_dir876 = new BindDirection(_flow.DbFetchData252,binding_getter904,binding_setter876,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity254.InDirections.Add(bind_dir876);
            _flow.DbFetchData255.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.ReplaceStringActivity254.Result}DeVawMFWs6' where TestCase = 1";
            _flow.DbFetchData255.Timeout = (int)30;
            _flow.DbFetchData255.Comment = @"";
            _flow.DbFetchData255.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData255.Name = @"将加密信息赋值到EncryptionStr字段中";
            VTDPropertyInfoBase pi1781 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter905 = new VTDObjectGetter(pi1781);
            VTDPropertyInfoBase pi1782 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter877 = new VTDObjectSetter(pi1782);
            binding_setter877 = new StringFormaterDecorator(binding_setter877,"{Step.OutputProperties.ReplaceStringActivity254.Result}");
            bind_dir877 = new BindDirection(_flow.ReplaceStringActivity254,binding_getter905,binding_setter877,BindTargetType.ToInProperty);
            _flow.DbFetchData255.InDirections.Add(bind_dir877);
            VTDPropertyInfoBase pi1783 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter906 = new VTDObjectGetter(pi1783);
            VTDPropertyInfoBase pi1784 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter878 = new VTDObjectSetter(pi1784);
            bind_dir878 = new BindDirection(_flow.DbOpenConnection39,binding_getter906,binding_setter878,BindTargetType.ToInProperty);
            _flow.DbFetchData255.InDirections.Add(bind_dir878);
            XmlDocument DbFetchData255_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData255_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData255_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData255.ExpectedOutputProperties = DbFetchData255_ExpectedOutputProperties_Document;
            _flow.CallQTPTest256.Comment = @"";
            _flow.CallQTPTest256.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest256.Name = @"Encryption.SHA1";
            _flow.CallQTPTest256.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ScriptPath}");
            _flow.CallQTPTest256.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ActionName}");
            _flow.CallQTPTest256.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.Description}");
            _flow.CallQTPTest256.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.IsActionSelected}");
            _flow.CallQTPTest256.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ResultLocation}");
            _flow.CallQTPTest256.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.QCScriptPath}");
            _flow.DbFetchData257.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData257.Timeout = (int)30;
            _flow.DbFetchData257.Comment = @"";
            _flow.DbFetchData257.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData257.Name = @"获取加密后的字符串";
            VTDPropertyInfoBase pi1785 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter907 = new VTDObjectGetter(pi1785);
            VTDPropertyInfoBase pi1786 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter879 = new VTDObjectSetter(pi1786);
            bind_dir879 = new BindDirection(_flow.DbOpenConnection39,binding_getter907,binding_setter879,BindTargetType.ToInProperty);
            _flow.DbFetchData257.InDirections.Add(bind_dir879);
            XmlDocument DbFetchData257_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData257_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData257_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData257.ExpectedOutputProperties = DbFetchData257_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity258.SourceString = @"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity258.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity258.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity258.SearchReplaceString[0].Key = @"c8255e8536d1e44751f74febe483384537fc6206";
            _flow.ReplaceStringActivity258.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData257.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity258.CaseSensitive = true;
            _flow.ReplaceStringActivity258.Comment = @"";
            _flow.ReplaceStringActivity258.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity258.Name = @"将token更新至最新";
            VTDPropertyInfoBase pi1787 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter908 = new VTDXPathGetter(pi1787,XmlTypeCode.String);
            binding_getter908 = new XPathGetterDecorator(binding_getter908,"{Array0}",1);
            VTDPropertyInfoBase pi1788 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter880 = new VTDObjectSetter(pi1788);
            binding_setter880 = new StringFormaterDecorator(binding_setter880,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].token}");
            bind_dir880 = new BindDirection(_flow.DbFetchData99,binding_getter908,binding_setter880,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir880);
            VTDPropertyInfoBase pi1789 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter909 = new VTDXPathGetter(pi1789,XmlTypeCode.String);
            binding_getter909 = new XPathGetterDecorator(binding_getter909,"{Array0}",1);
            VTDPropertyInfoBase pi1790 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter881 = new VTDObjectSetter(pi1790);
            binding_setter881 = new StringFormaterDecorator(binding_setter881,"{Step.OutputProperties.DbFetchData257.ResultTable.Row[1].EncryptionResult}");
            bind_dir881 = new BindDirection(_flow.DbFetchData257,binding_getter909,binding_setter881,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir881);
            _flow.HTTPActivity100.TextBody = @"myJid={Step.OutputProperties.ReplaceStringActivity254.Result}&xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&token={Step.OutputProperties.ReplaceStringActivity258.Result}&xxcode={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity100.TextXmlBody = @"";
            _flow.HTTPActivity100.FileBody = @"";
            _flow.HTTPActivity100.PostBody = @"";
            _flow.HTTPActivity100.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getClassInfo}";
            _flow.HTTPActivity100.HttpMethod = @"POST";
            _flow.HTTPActivity100.HttpVersion = @"1.1";
            _flow.HTTPActivity100.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity100.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity100.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity100.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity100.Comment = @"";
            _flow.HTTPActivity100.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity100.RequestBodyType = @"Text";
            _flow.HTTPActivity100.ResponseType = @"Text";
            _flow.HTTPActivity100.Name = @"调用/jxt/class.php";
            _flow.HTTPActivity100.Proxy.Server = @"";
            _flow.HTTPActivity100.Proxy.Username = @"";
            _flow.HTTPActivity100.Proxy.Password = @"";
            _flow.HTTPActivity100.Authentication.Username = @"";
            _flow.HTTPActivity100.Authentication.Password = @"";
            _flow.HTTPActivity100.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity100.Timeout = (int)100000;
            _flow.HTTPActivity100.ClientCertificate.Password = @"";
            _flow.HTTPActivity100.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity100.UseClientCertificate = false;
            _flow.HTTPActivity100.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity100.AllowRedirections = true;
            _flow.HTTPActivity100.ReuseCookies = false;
            _flow.HTTPActivity100.ExpectServerError = false;
            XmlDocument HTTPActivity100_XMLBody_Document = new XmlDocument();
            HTTPActivity100_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity100_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity100.XMLBody = HTTPActivity100_XMLBody_Document;
            XmlDocument HTTPActivity100_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity100_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity100_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity100.RequestMultipartInfoXml = HTTPActivity100_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity100.Multipart=false;
            VTDPropertyInfoBase pi1791 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter910 = new VTDObjectGetter(pi1791);
            VTDPropertyInfoBase pi1792 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter882 = new VTDObjectSetter(pi1792);
            binding_setter882 = new StringFormaterDecorator(binding_setter882,"{DataSource.tb_global_table.IQHost}");
            bind_dir882 = new BindDirection(this.DataCursorActivity268,binding_getter910,binding_setter882,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir882);
            VTDPropertyInfoBase pi1793 = new VTDPropertyInfoBase("getClassInfo");
            VTDBaseGetter binding_getter911 = new VTDObjectGetter(pi1793);
            VTDPropertyInfoBase pi1794 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter883 = new VTDObjectSetter(pi1794);
            binding_setter883 = new StringFormaterDecorator(binding_setter883,"{DataSource.tb_global_table.getClassInfo}");
            bind_dir883 = new BindDirection(this.DataCursorActivity268,binding_getter911,binding_setter883,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir883);
            VTDPropertyInfoBase pi1795 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter912 = new VTDObjectGetter(pi1795);
            VTDPropertyInfoBase pi1796 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter884 = new VTDObjectSetter(pi1796);
            binding_setter884 = new StringFormaterDecorator(binding_setter884,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir884 = new BindDirection(this.DataCursorActivity268,binding_getter912,binding_setter884,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir884);
            VTDPropertyInfoBase pi1797 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter913 = new VTDObjectGetter(pi1797);
            VTDPropertyInfoBase pi1798 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter885 = new VTDObjectSetter(pi1798);
            binding_setter885 = new StringFormaterDecorator(binding_setter885,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir885 = new BindDirection(this.DataCursorActivity268,binding_getter913,binding_setter885,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir885);
            VTDPropertyInfoBase pi1799 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter914 = new VTDObjectGetter(pi1799);
            VTDPropertyInfoBase pi1800 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter886 = new VTDObjectSetter(pi1800);
            binding_setter886 = new StringFormaterDecorator(binding_setter886,"{Step.OutputProperties.ReplaceStringActivity254.Result}");
            bind_dir886 = new BindDirection(_flow.ReplaceStringActivity254,binding_getter914,binding_setter886,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir886);
            VTDPropertyInfoBase pi1801 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter915 = new VTDObjectGetter(pi1801);
            VTDPropertyInfoBase pi1802 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter887 = new VTDObjectSetter(pi1802);
            binding_setter887 = new StringFormaterDecorator(binding_setter887,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir887 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter915,binding_setter887,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir887);
            VTDPropertyInfoBase pi1803 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter916 = new VTDObjectGetter(pi1803);
            VTDPropertyInfoBase pi1804 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter888 = new VTDObjectSetter(pi1804);
            binding_setter888 = new StringFormaterDecorator(binding_setter888,"{Step.OutputProperties.ReplaceStringActivity258.Result}");
            bind_dir888 = new BindDirection(_flow.ReplaceStringActivity258,binding_getter916,binding_setter888,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir888);
            VTDPropertyInfoBase pi1805 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter917 = new VTDObjectGetter(pi1805);
            VTDPropertyInfoBase pi1806 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter889 = new VTDObjectSetter(pi1806);
            binding_setter889 = new StringFormaterDecorator(binding_setter889,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir889 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter917,binding_setter889,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir889);
            XmlDocument HTTPActivity100_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity100_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity100_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity100.ExpectedResponseXmlBody = HTTPActivity100_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity100_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity100_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity100_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity100.ExpectedResponseJsonBody = HTTPActivity100_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity100_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity100_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity100_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity100.ExpectedOutputProperties = HTTPActivity100_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity101.InputString = @"{Step.OutputProperties.HTTPActivity100.ResponseBody}";
            _flow.StringToJsonActivity101.Comment = @"";
            _flow.StringToJsonActivity101.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity101.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1807 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter918 = new VTDObjectGetter(pi1807);
            VTDPropertyInfoBase pi1808 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter890 = new VTDObjectSetter(pi1808);
            binding_setter890 = new StringFormaterDecorator(binding_setter890,"{Step.OutputProperties.HTTPActivity100.ResponseBody}");
            bind_dir890 = new BindDirection(_flow.HTTPActivity100,binding_getter918,binding_setter890,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity101.InDirections.Add(bind_dir890);
            _flow.ReplaceStringActivity259.SourceString = @"{Step.OutputProperties.HTTPActivity100.ResponseBody}";
            _flow.ReplaceStringActivity259.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity259.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity259.SearchReplaceString[0].Key = @"'";
            _flow.ReplaceStringActivity259.SearchReplaceString[0].Value = @"\'";
            _flow.ReplaceStringActivity259.CaseSensitive = true;
            _flow.ReplaceStringActivity259.Comment = @"";
            _flow.ReplaceStringActivity259.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity259.Name = @"Response替换'";
            VTDPropertyInfoBase pi1809 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter919 = new VTDObjectGetter(pi1809);
            VTDPropertyInfoBase pi1810 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter891 = new VTDObjectSetter(pi1810);
            binding_setter891 = new StringFormaterDecorator(binding_setter891,"{Step.OutputProperties.HTTPActivity100.ResponseBody}");
            bind_dir891 = new BindDirection(_flow.HTTPActivity100,binding_getter919,binding_setter891,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity259.InDirections.Add(bind_dir891);
            _flow.DbFetchData102.QueryString = @"update tb_getclassinfo_verification set InterfaceResponse = '{Step.OutputProperties.ReplaceStringActivity259.Result}' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData102.Timeout = (int)30;
            _flow.DbFetchData102.Comment = @"";
            _flow.DbFetchData102.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData102.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi1811 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter920 = new VTDObjectGetter(pi1811);
            VTDPropertyInfoBase pi1812 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter892 = new VTDObjectSetter(pi1812);
            binding_setter892 = new StringFormaterDecorator(binding_setter892,"{Step.OutputProperties.ReplaceStringActivity259.Result}");
            bind_dir892 = new BindDirection(_flow.ReplaceStringActivity259,binding_getter920,binding_setter892,BindTargetType.ToInProperty);
            _flow.DbFetchData102.InDirections.Add(bind_dir892);
            VTDPropertyInfoBase pi1813 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter921 = new VTDObjectGetter(pi1813);
            VTDPropertyInfoBase pi1814 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter893 = new VTDObjectSetter(pi1814);
            binding_setter893 = new StringFormaterDecorator(binding_setter893,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir893 = new BindDirection(_flow.Loop98,binding_getter921,binding_setter893,BindTargetType.ToInProperty);
            _flow.DbFetchData102.InDirections.Add(bind_dir893);
            VTDPropertyInfoBase pi1815 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter922 = new VTDObjectGetter(pi1815);
            VTDPropertyInfoBase pi1816 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter894 = new VTDObjectSetter(pi1816);
            bind_dir894 = new BindDirection(_flow.DbOpenConnection39,binding_getter922,binding_setter894,BindTargetType.ToInProperty);
            _flow.DbFetchData102.InDirections.Add(bind_dir894);
            XmlDocument DbFetchData102_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData102_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData102_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData102.ExpectedOutputProperties = DbFetchData102_ExpectedOutputProperties_Document;
            _flow.DbFetchData103.QueryString = @"update tb_getclassinfo_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity101.errorCode}' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData103.Timeout = (int)30;
            _flow.DbFetchData103.Comment = @"";
            _flow.DbFetchData103.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData103.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1817 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter923 = new VTDJsonGetter(pi1817);
            VTDPropertyInfoBase pi1818 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter895 = new VTDObjectSetter(pi1818);
            binding_setter895 = new StringFormaterDecorator(binding_setter895,"{Step.JsonContent.StringToJsonActivity101.errorCode}");
            bind_dir895 = new BindDirection(_flow.StringToJsonActivity101,binding_getter923,binding_setter895,BindTargetType.ToInProperty);
            _flow.DbFetchData103.InDirections.Add(bind_dir895);
            VTDPropertyInfoBase pi1819 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter924 = new VTDObjectGetter(pi1819);
            VTDPropertyInfoBase pi1820 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter896 = new VTDObjectSetter(pi1820);
            binding_setter896 = new StringFormaterDecorator(binding_setter896,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir896 = new BindDirection(_flow.Loop98,binding_getter924,binding_setter896,BindTargetType.ToInProperty);
            _flow.DbFetchData103.InDirections.Add(bind_dir896);
            VTDPropertyInfoBase pi1821 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter925 = new VTDObjectGetter(pi1821);
            VTDPropertyInfoBase pi1822 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter897 = new VTDObjectSetter(pi1822);
            bind_dir897 = new BindDirection(_flow.DbOpenConnection39,binding_getter925,binding_setter897,BindTargetType.ToInProperty);
            _flow.DbFetchData103.InDirections.Add(bind_dir897);
            XmlDocument DbFetchData103_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData103_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData103_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData103.ExpectedOutputProperties = DbFetchData103_ExpectedOutputProperties_Document;
            _flow.DbFetchData104.QueryString = @"select OutputValue from tb_getclassinfo_verification where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData104.Timeout = (int)30;
            _flow.DbFetchData104.Comment = @"";
            _flow.DbFetchData104.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData104.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1823 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter926 = new VTDObjectGetter(pi1823);
            VTDPropertyInfoBase pi1824 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter898 = new VTDObjectSetter(pi1824);
            binding_setter898 = new StringFormaterDecorator(binding_setter898,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir898 = new BindDirection(_flow.Loop98,binding_getter926,binding_setter898,BindTargetType.ToInProperty);
            _flow.DbFetchData104.InDirections.Add(bind_dir898);
            VTDPropertyInfoBase pi1825 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter927 = new VTDObjectGetter(pi1825);
            VTDPropertyInfoBase pi1826 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter899 = new VTDObjectSetter(pi1826);
            bind_dir899 = new BindDirection(_flow.DbOpenConnection39,binding_getter927,binding_setter899,BindTargetType.ToInProperty);
            _flow.DbFetchData104.InDirections.Add(bind_dir899);
            XmlDocument DbFetchData104_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData104_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData104_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData104.ExpectedOutputProperties = DbFetchData104_ExpectedOutputProperties_Document;
            _flow.DbFetchData105.QueryString = @"select ExpectationValue from tb_getclassinfo_verification where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData105.Timeout = (int)30;
            _flow.DbFetchData105.Comment = @"";
            _flow.DbFetchData105.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData105.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1827 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter928 = new VTDObjectGetter(pi1827);
            VTDPropertyInfoBase pi1828 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter900 = new VTDObjectSetter(pi1828);
            binding_setter900 = new StringFormaterDecorator(binding_setter900,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir900 = new BindDirection(_flow.Loop98,binding_getter928,binding_setter900,BindTargetType.ToInProperty);
            _flow.DbFetchData105.InDirections.Add(bind_dir900);
            VTDPropertyInfoBase pi1829 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter929 = new VTDObjectGetter(pi1829);
            VTDPropertyInfoBase pi1830 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter901 = new VTDObjectSetter(pi1830);
            bind_dir901 = new BindDirection(_flow.DbOpenConnection39,binding_getter929,binding_setter901,BindTargetType.ToInProperty);
            _flow.DbFetchData105.InDirections.Add(bind_dir901);
            XmlDocument DbFetchData105_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData105_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData105_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData105.ExpectedOutputProperties = DbFetchData105_ExpectedOutputProperties_Document;
            _flow.IfElse106.ConditionAsString = @"{Step.OutputProperties.DbFetchData104.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData105.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse106.Comment = @"";
            _flow.IfElse106.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse106.Name = @"填写Result";
            _flow.IfElse106.Activities.Add (_flow.IfElseBranch107);
            _flow.IfElse106.Activities.Add (_flow.IfElseBranch108);
            _flow.IfElseBranch107.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1831 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter930 = new VTDXPathGetter(pi1831,XmlTypeCode.String);
            binding_getter930 = new XPathGetterDecorator(binding_getter930,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData104.GetParam(binding_getter930),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1832 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter931 = new VTDXPathGetter(pi1832,XmlTypeCode.String);
            binding_getter931 = new XPathGetterDecorator(binding_getter931,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData105.GetParam(binding_getter931),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch107.Comment = @"";
            _flow.IfElseBranch107.IconPath = @"";
            _flow.IfElseBranch107.Name = @"是";
            _flow.IfElseBranch107.Activities.Add (_flow.DbFetchData109);
            _flow.IfElseBranch108.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch108.Comment = @"";
            _flow.IfElseBranch108.IconPath = @"";
            _flow.IfElseBranch108.Name = @"否";
            _flow.IfElseBranch108.Activities.Add (_flow.DbFetchData110);
            _flow.DbFetchData109.QueryString = @"update tb_getclassinfo_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData109.Timeout = (int)30;
            _flow.DbFetchData109.Comment = @"";
            _flow.DbFetchData109.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData109.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1833 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter932 = new VTDObjectGetter(pi1833);
            VTDPropertyInfoBase pi1834 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter902 = new VTDObjectSetter(pi1834);
            binding_setter902 = new StringFormaterDecorator(binding_setter902,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir902 = new BindDirection(_flow.Loop98,binding_getter932,binding_setter902,BindTargetType.ToInProperty);
            _flow.DbFetchData109.InDirections.Add(bind_dir902);
            VTDPropertyInfoBase pi1835 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter933 = new VTDObjectGetter(pi1835);
            VTDPropertyInfoBase pi1836 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter903 = new VTDObjectSetter(pi1836);
            bind_dir903 = new BindDirection(_flow.DbOpenConnection39,binding_getter933,binding_setter903,BindTargetType.ToInProperty);
            _flow.DbFetchData109.InDirections.Add(bind_dir903);
            XmlDocument DbFetchData109_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData109_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData109_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData109.ExpectedOutputProperties = DbFetchData109_ExpectedOutputProperties_Document;
            _flow.DbFetchData110.QueryString = @"update tb_getclassinfo_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData110.Timeout = (int)30;
            _flow.DbFetchData110.Comment = @"";
            _flow.DbFetchData110.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData110.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1837 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter934 = new VTDObjectGetter(pi1837);
            VTDPropertyInfoBase pi1838 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter904 = new VTDObjectSetter(pi1838);
            binding_setter904 = new StringFormaterDecorator(binding_setter904,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir904 = new BindDirection(_flow.Loop98,binding_getter934,binding_setter904,BindTargetType.ToInProperty);
            _flow.DbFetchData110.InDirections.Add(bind_dir904);
            VTDPropertyInfoBase pi1839 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter935 = new VTDObjectGetter(pi1839);
            VTDPropertyInfoBase pi1840 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter905 = new VTDObjectSetter(pi1840);
            bind_dir905 = new BindDirection(_flow.DbOpenConnection39,binding_getter935,binding_setter905,BindTargetType.ToInProperty);
            _flow.DbFetchData110.InDirections.Add(bind_dir905);
            XmlDocument DbFetchData110_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData110_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData110_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData110.ExpectedOutputProperties = DbFetchData110_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    