/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getclassinfo_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir277 = null;
        public BindDirection bind_dir278 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity257 = null;
        public BindDirection bind_dir279 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity257_Policy = null;
        public BindDirection bind_dir280 = null;
        public BindDirection bind_dir281 = null;
        public BindDirection bind_dir282 = null;
        public BindDirection bind_dir283 = null;
        public BindDirection bind_dir284 = null;
        public BindDirection bind_dir285 = null;
        public BindDirection bind_dir286 = null;
        public BindDirection bind_dir287 = null;
        public BindDirection bind_dir288 = null;
        public BindDirection bind_dir289 = null;
        public BindDirection bind_dir290 = null;
        public BindDirection bind_dir291 = null;
        public BindDirection bind_dir292 = null;
        public BindDirection bind_dir293 = null;
        public BindDirection bind_dir294 = null;
        public BindDirection bind_dir295 = null;
        public BindDirection bind_dir296 = null;
        public BindDirection bind_dir297 = null;
        public BindDirection bind_dir298 = null;
        public BindDirection bind_dir299 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity258 = null;
        public BindDirection bind_dir300 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity258_Policy = null;
        public BindDirection bind_dir301 = null;
        public BindDirection bind_dir302 = null;
        public BindDirection bind_dir303 = null;
        public BindDirection bind_dir304 = null;
        public BindDirection bind_dir305 = null;
        public BindDirection bind_dir306 = null;
        public BindDirection bind_dir307 = null;
        public BindDirection bind_dir308 = null;
        public BindDirection bind_dir309 = null;
        public BindDirection bind_dir310 = null;
        public BindDirection bind_dir311 = null;
        public BindDirection bind_dir312 = null;
        public BindDirection bind_dir313 = null;
        public BindDirection bind_dir314 = null;
        public BindDirection bind_dir315 = null;
        public BindDirection bind_dir316 = null;
        public BindDirection bind_dir317 = null;
        public BindDirection bind_dir318 = null;
        public BindDirection bind_dir319 = null;
        public BindDirection bind_dir320 = null;
        public BindDirection bind_dir321 = null;
        public BindDirection bind_dir322 = null;
        public BindDirection bind_dir323 = null;
        public BindDirection bind_dir324 = null;
        public BindDirection bind_dir325 = null;
        public BindDirection bind_dir326 = null;
        public BindDirection bind_dir327 = null;
        public BindDirection bind_dir328 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity253 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity253");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity255 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity255");
            _flow.DataExporterCloseActivity256 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity256");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity254 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity254");
            this.DataCursorActivity257 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity257");
            this.DataCursorActivity257_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence251 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence251");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData97 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData97");
            _flow.Loop98 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop98Input>(_context,"Loop98",LoopType.For);
            _flow.DbFetchData111 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData111");
            _flow.CallQTPTest112 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest112");
            _flow.DbFetchData113 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData113");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.HTTPActivity114 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity114");
            _flow.StringToJsonActivity177 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity177");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.DbFetchData116 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData116");
            this.DataCursorActivity258 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity258");
            this.DataCursorActivity258_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence252 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence252");
            _flow.DbFetchData99 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData99");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.HTTPActivity100 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity100");
            _flow.StringToJsonActivity101 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity101");
            _flow.DbFetchData102 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData102");
            _flow.DbFetchData103 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData103");
            _flow.DbFetchData104 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData104");
            _flow.DbFetchData105 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData105");
            _flow.IfElse106 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse106Input>(_context,"IfElse106");
            _flow.IfElseBranch107 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch107");
            _flow.IfElseBranch108 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch108");
            _flow.DbFetchData109 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData109");
            _flow.DbFetchData110 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData110");
            _flow.DataFetchActivity253.Comment = @"";
            _flow.DataFetchActivity253.IconPath = @"";
            _flow.DataFetchActivity253.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity253.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity253_QueryParameters_Document = new XmlDocument();
            DataFetchActivity253_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity253Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value></Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity253_QueryParameters_Document.LoadXml(xmlDataFetchActivity253Params);
            _flow.DataFetchActivity253.QueryParameters = DataFetchActivity253_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity253);
            this.Activities.Add (_flow.DataFetchActivity253);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity257);
            _flow.Loop2.Activities.Add (_flow.Sequence251);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity255.Comment = @"";
            _flow.DataExporterActivity255.IconPath = @"";
            VTDPropertyInfoBase pi563 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter287 = new VTDObjectGetter(pi563);
            VTDPropertyInfoBase pi564 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter277 = new VTDObjectSetter(pi564);
            binding_setter277 = new StringFormaterDecorator(binding_setter277,"{Step.DataFetchActivity253.OutTable}");
            bind_dir277 = new BindDirection(_flow.DataFetchActivity253,binding_getter287,binding_setter277,BindTargetType.ToInProperty);
            _flow.DataExporterActivity255.InDirections.Add(bind_dir277);
            this.Activities.Add (_flow.DataExporterActivity255);
            _flow.DataExporterCloseActivity256.Comment = @"";
            _flow.DataExporterCloseActivity256.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity256);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity254.Comment = @"";
            _flow.DataDisconnectActivity254.IconPath = @"";
            VTDPropertyInfoBase pi565 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter288 = new VTDObjectGetter(pi565);
            VTDPropertyInfoBase pi566 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter278 = new VTDObjectSetter(pi566);
            binding_setter278 = new StringFormaterDecorator(binding_setter278,"{Step.DataFetchActivity253.OutTable}");
            bind_dir278 = new BindDirection(_flow.DataFetchActivity253,binding_getter288,binding_setter278,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity254.InDirections.Add(bind_dir278);
            this.Activities.Add (_flow.DataDisconnectActivity254);
            this.DataCursorActivity257.Comment = @"";
            this.DataCursorActivity257.IconPath = @"";
            VTDPropertyInfoBase pi567 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter289 = new VTDObjectGetter(pi567);
            VTDPropertyInfoBase pi568 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter279 = new VTDObjectSetter(pi568);
            binding_setter279 = new StringFormaterDecorator(binding_setter279,"{Step.DataFetchActivity253.OutTable}");
            bind_dir279 = new BindDirection(_flow.DataFetchActivity253,binding_getter289,binding_setter279,BindTargetType.ToInProperty);
            this.DataCursorActivity257.InDirections.Add(bind_dir279);
            this.DataCursorActivity257_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity257_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity257_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity257_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity257_Policy.StartCondition.Value = "";
            this.DataCursorActivity257_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity257_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity257_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity257_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity257_Policy.EndCondition.Value = "";
            this.DataCursorActivity257_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity257_Policy.StepSize = 1;
            this.DataCursorActivity257_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity257.Policy = this.DataCursorActivity257_Policy;
            this.DataCursorActivity257.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity257.ResetCursor;
            _flow.Sequence251.Comment = @"";
            _flow.Sequence251.IconPath = @"";
            _flow.Sequence251.Name = @"序列251";
            _flow.Sequence251.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData97);
            _flow.Sequence251.Activities.Add (_flow.Loop98);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData111);
            _flow.Sequence251.Activities.Add (_flow.CallQTPTest112);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData113);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence251.Activities.Add (_flow.HTTPActivity114);
            _flow.Sequence251.Activities.Add (_flow.StringToJsonActivity177);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData116);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData97.QueryString = @"select count(*) as 'Row' from tb_getclassinfo_verification";
            _flow.DbFetchData97.Timeout = (int)30;
            _flow.DbFetchData97.Comment = @"";
            _flow.DbFetchData97.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData97.Name = @"获取到tb_getclassinfo_verification表有效行数";
            VTDPropertyInfoBase pi569 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter290 = new VTDObjectGetter(pi569);
            VTDPropertyInfoBase pi570 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter280 = new VTDObjectSetter(pi570);
            bind_dir280 = new BindDirection(_flow.DbOpenConnection39,binding_getter290,binding_setter280,BindTargetType.ToInProperty);
            _flow.DbFetchData97.InDirections.Add(bind_dir280);
            XmlDocument DbFetchData97_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData97_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData97_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData97.ExpectedOutputProperties = DbFetchData97_ExpectedOutputProperties_Document;
            _flow.Loop98.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop98.NumberOfIterations = (int)1;
            _flow.Loop98.Comment = @"";
            _flow.Loop98.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop98.Name = @"循环执行tb_getclassinfo_verification中的测试用例";
            VTDPropertyInfoBase pi571 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter291 = new VTDXPathGetter(pi571,XmlTypeCode.Long);
            binding_getter291 = new XPathGetterDecorator(binding_getter291,"{Array0}",1);
            VTDPropertyInfoBase pi572 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter281 = new VTDObjectSetter(pi572);
            bind_dir281 = new BindDirection(_flow.DbFetchData97,binding_getter291,binding_setter281,BindTargetType.ToInProperty);
            _flow.Loop98.InDirections.Add(bind_dir281);
            _flow.Loop98.Activities.Add (this.DataCursorActivity258);
            _flow.Loop98.Activities.Add (_flow.Sequence252);
            _flow.DbFetchData111.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6' where TestCase = 1";
            _flow.DbFetchData111.Timeout = (int)30;
            _flow.DbFetchData111.Comment = @"";
            _flow.DbFetchData111.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData111.Name = @"对/jxt/class.php接口token实行加密";
            VTDPropertyInfoBase pi573 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter292 = new VTDObjectGetter(pi573);
            VTDPropertyInfoBase pi574 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter282 = new VTDObjectSetter(pi574);
            binding_setter282 = new StringFormaterDecorator(binding_setter282,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir282 = new BindDirection(this.DataCursorActivity257,binding_getter292,binding_setter282,BindTargetType.ToInProperty);
            _flow.DbFetchData111.InDirections.Add(bind_dir282);
            VTDPropertyInfoBase pi575 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter293 = new VTDObjectGetter(pi575);
            VTDPropertyInfoBase pi576 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter283 = new VTDObjectSetter(pi576);
            bind_dir283 = new BindDirection(_flow.DbOpenConnection39,binding_getter293,binding_setter283,BindTargetType.ToInProperty);
            _flow.DbFetchData111.InDirections.Add(bind_dir283);
            XmlDocument DbFetchData111_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData111_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData111_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData111.ExpectedOutputProperties = DbFetchData111_ExpectedOutputProperties_Document;
            _flow.CallQTPTest112.Comment = @"";
            _flow.CallQTPTest112.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest112.Name = @"Encryption.SHA1";
            _flow.CallQTPTest112.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ScriptPath}");
            _flow.CallQTPTest112.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ActionName}");
            _flow.CallQTPTest112.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.Description}");
            _flow.CallQTPTest112.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.IsActionSelected}");
            _flow.CallQTPTest112.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ResultLocation}");
            _flow.CallQTPTest112.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.QCScriptPath}");
            _flow.DbFetchData113.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData113.Timeout = (int)30;
            _flow.DbFetchData113.Comment = @"";
            _flow.DbFetchData113.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData113.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi577 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter294 = new VTDObjectGetter(pi577);
            VTDPropertyInfoBase pi578 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter284 = new VTDObjectSetter(pi578);
            bind_dir284 = new BindDirection(_flow.DbOpenConnection39,binding_getter294,binding_setter284,BindTargetType.ToInProperty);
            _flow.DbFetchData113.InDirections.Add(bind_dir284);
            XmlDocument DbFetchData113_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData113_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData113_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData113.ExpectedOutputProperties = DbFetchData113_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi579 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter295 = new VTDObjectGetter(pi579);
            VTDPropertyInfoBase pi580 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter285 = new VTDObjectSetter(pi580);
            bind_dir285 = new BindDirection(_flow.DbOpenConnection39,binding_getter295,binding_setter285,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir285);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select schoolCode from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中schoolCode值";
            VTDPropertyInfoBase pi581 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter296 = new VTDObjectGetter(pi581);
            VTDPropertyInfoBase pi582 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter286 = new VTDObjectSetter(pi582);
            bind_dir286 = new BindDirection(_flow.DbOpenConnection39,binding_getter296,binding_setter286,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir286);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><schoolCode /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.HTTPActivity114.TextBody = @"myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&token={Step.OutputProperties.DbFetchData113.ResultTable.Row[1].EncryptionResult}&xxcode={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].schoolCode}";
            _flow.HTTPActivity114.TextXmlBody = @"";
            _flow.HTTPActivity114.FileBody = @"";
            _flow.HTTPActivity114.PostBody = @"";
            _flow.HTTPActivity114.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getClassInfo}";
            _flow.HTTPActivity114.HttpMethod = @"POST";
            _flow.HTTPActivity114.HttpVersion = @"1.1";
            _flow.HTTPActivity114.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity114.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity114.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity114.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity114.Comment = @"";
            _flow.HTTPActivity114.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity114.RequestBodyType = @"Text";
            _flow.HTTPActivity114.ResponseType = @"Text";
            _flow.HTTPActivity114.Name = @"调用/jxt/class.php";
            _flow.HTTPActivity114.Proxy.Server = @"";
            _flow.HTTPActivity114.Proxy.Username = @"";
            _flow.HTTPActivity114.Proxy.Password = @"";
            _flow.HTTPActivity114.Authentication.Username = @"";
            _flow.HTTPActivity114.Authentication.Password = @"";
            _flow.HTTPActivity114.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity114.Timeout = (int)100000;
            _flow.HTTPActivity114.ClientCertificate.Password = @"";
            _flow.HTTPActivity114.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity114.UseClientCertificate = false;
            _flow.HTTPActivity114.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity114.AllowRedirections = true;
            _flow.HTTPActivity114.ReuseCookies = false;
            _flow.HTTPActivity114.ExpectServerError = false;
            XmlDocument HTTPActivity114_XMLBody_Document = new XmlDocument();
            HTTPActivity114_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity114_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity114.XMLBody = HTTPActivity114_XMLBody_Document;
            XmlDocument HTTPActivity114_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity114_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity114_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity114.RequestMultipartInfoXml = HTTPActivity114_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity114.Multipart=false;
            VTDPropertyInfoBase pi583 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter297 = new VTDObjectGetter(pi583);
            VTDPropertyInfoBase pi584 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter287 = new VTDObjectSetter(pi584);
            binding_setter287 = new StringFormaterDecorator(binding_setter287,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir287 = new BindDirection(this.DataCursorActivity257,binding_getter297,binding_setter287,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir287);
            VTDPropertyInfoBase pi585 = new VTDPropertyInfoBase("getClassInfo");
            VTDBaseGetter binding_getter298 = new VTDObjectGetter(pi585);
            VTDPropertyInfoBase pi586 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter288 = new VTDObjectSetter(pi586);
            binding_setter288 = new StringFormaterDecorator(binding_setter288,"{DataSource.tb_global_table.getClassInfo}");
            bind_dir288 = new BindDirection(this.DataCursorActivity257,binding_getter298,binding_setter288,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir288);
            VTDPropertyInfoBase pi587 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter299 = new VTDObjectGetter(pi587);
            VTDPropertyInfoBase pi588 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter289 = new VTDObjectSetter(pi588);
            binding_setter289 = new StringFormaterDecorator(binding_setter289,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir289 = new BindDirection(this.DataCursorActivity257,binding_getter299,binding_setter289,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir289);
            VTDPropertyInfoBase pi589 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter300 = new VTDObjectGetter(pi589);
            VTDPropertyInfoBase pi590 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter290 = new VTDObjectSetter(pi590);
            binding_setter290 = new StringFormaterDecorator(binding_setter290,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir290 = new BindDirection(this.DataCursorActivity257,binding_getter300,binding_setter290,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir290);
            VTDPropertyInfoBase pi591 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter301 = new VTDObjectGetter(pi591);
            VTDPropertyInfoBase pi592 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter291 = new VTDObjectSetter(pi592);
            binding_setter291 = new StringFormaterDecorator(binding_setter291,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir291 = new BindDirection(this.DataCursorActivity257,binding_getter301,binding_setter291,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir291);
            VTDPropertyInfoBase pi593 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter302 = new VTDXPathGetter(pi593,XmlTypeCode.String);
            binding_getter302 = new XPathGetterDecorator(binding_getter302,"{Array0}",1);
            VTDPropertyInfoBase pi594 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter292 = new VTDObjectSetter(pi594);
            binding_setter292 = new StringFormaterDecorator(binding_setter292,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir292 = new BindDirection(_flow.DbFetchData246,binding_getter302,binding_setter292,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir292);
            VTDPropertyInfoBase pi595 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter303 = new VTDXPathGetter(pi595,XmlTypeCode.String);
            binding_getter303 = new XPathGetterDecorator(binding_getter303,"{Array0}",1);
            VTDPropertyInfoBase pi596 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter293 = new VTDObjectSetter(pi596);
            binding_setter293 = new StringFormaterDecorator(binding_setter293,"{Step.OutputProperties.DbFetchData113.ResultTable.Row[1].EncryptionResult}");
            bind_dir293 = new BindDirection(_flow.DbFetchData113,binding_getter303,binding_setter293,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir293);
            VTDPropertyInfoBase pi597 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='schoolCode'][1]");
            VTDBaseGetter binding_getter304 = new VTDXPathGetter(pi597,XmlTypeCode.String);
            binding_getter304 = new XPathGetterDecorator(binding_getter304,"{Array0}",1);
            VTDPropertyInfoBase pi598 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter294 = new VTDObjectSetter(pi598);
            binding_setter294 = new StringFormaterDecorator(binding_setter294,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].schoolCode}");
            bind_dir294 = new BindDirection(_flow.DbFetchData247,binding_getter304,binding_setter294,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir294);
            XmlDocument HTTPActivity114_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity114_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity114_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity114.ExpectedResponseXmlBody = HTTPActivity114_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity114_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity114_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity114_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity114.ExpectedResponseJsonBody = HTTPActivity114_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity114_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity114_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity114_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity114.ExpectedOutputProperties = HTTPActivity114_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity177.InputString = @"{Step.OutputProperties.HTTPActivity114.ResponseBody}";
            _flow.StringToJsonActivity177.Comment = @"";
            _flow.StringToJsonActivity177.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity177.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi599 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter305 = new VTDObjectGetter(pi599);
            VTDPropertyInfoBase pi600 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter295 = new VTDObjectSetter(pi600);
            binding_setter295 = new StringFormaterDecorator(binding_setter295,"{Step.OutputProperties.HTTPActivity114.ResponseBody}");
            bind_dir295 = new BindDirection(_flow.HTTPActivity114,binding_getter305,binding_setter295,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity177.InDirections.Add(bind_dir295);
            _flow.DbFetchData248.QueryString = @"update tb_global_table set classJid = '{Step.JsonContent.StringToJsonActivity177.data.Object[1].classJid}' where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询tb_global_table表中classJid值";
            VTDPropertyInfoBase pi601 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='data'][1]/*[local-name(.)='Object'][{Array0}]/*[local-name(.)='classJid'][1]");
            VTDBaseGetter binding_getter306 = new VTDJsonGetter(pi601);
            binding_getter306 = new XPathGetterDecorator(binding_getter306,"{Array0}",1);
            VTDPropertyInfoBase pi602 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter296 = new VTDObjectSetter(pi602);
            binding_setter296 = new StringFormaterDecorator(binding_setter296,"{Step.JsonContent.StringToJsonActivity177.data.Object[1].classJid}");
            bind_dir296 = new BindDirection(_flow.StringToJsonActivity177,binding_getter306,binding_setter296,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir296);
            VTDPropertyInfoBase pi603 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter307 = new VTDObjectGetter(pi603);
            VTDPropertyInfoBase pi604 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter297 = new VTDObjectSetter(pi604);
            bind_dir297 = new BindDirection(_flow.DbOpenConnection39,binding_getter307,binding_setter297,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir297);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.DbFetchData116.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity114.ResponseBody}' where InterfaceName = '/jxt/class.php'";
            _flow.DbFetchData116.Timeout = (int)30;
            _flow.DbFetchData116.Comment = @"";
            _flow.DbFetchData116.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData116.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi605 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter308 = new VTDObjectGetter(pi605);
            VTDPropertyInfoBase pi606 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter298 = new VTDObjectSetter(pi606);
            binding_setter298 = new StringFormaterDecorator(binding_setter298,"{Step.OutputProperties.HTTPActivity114.ResponseBody}");
            bind_dir298 = new BindDirection(_flow.HTTPActivity114,binding_getter308,binding_setter298,BindTargetType.ToInProperty);
            _flow.DbFetchData116.InDirections.Add(bind_dir298);
            VTDPropertyInfoBase pi607 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter309 = new VTDObjectGetter(pi607);
            VTDPropertyInfoBase pi608 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter299 = new VTDObjectSetter(pi608);
            bind_dir299 = new BindDirection(_flow.DbOpenConnection39,binding_getter309,binding_setter299,BindTargetType.ToInProperty);
            _flow.DbFetchData116.InDirections.Add(bind_dir299);
            XmlDocument DbFetchData116_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData116_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData116_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData116.ExpectedOutputProperties = DbFetchData116_ExpectedOutputProperties_Document;
            this.DataCursorActivity258.Comment = @"";
            this.DataCursorActivity258.IconPath = @"";
            VTDPropertyInfoBase pi609 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter310 = new VTDObjectGetter(pi609);
            VTDPropertyInfoBase pi610 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter300 = new VTDObjectSetter(pi610);
            binding_setter300 = new StringFormaterDecorator(binding_setter300,"{Step.DataFetchActivity253.OutTable}");
            bind_dir300 = new BindDirection(_flow.DataFetchActivity253,binding_getter310,binding_setter300,BindTargetType.ToInProperty);
            this.DataCursorActivity258.InDirections.Add(bind_dir300);
            this.DataCursorActivity258_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity258_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity258_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity258_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity258_Policy.StartCondition.Value = "";
            this.DataCursorActivity258_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity258_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity258_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity258_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity258_Policy.EndCondition.Value = "";
            this.DataCursorActivity258_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity258_Policy.StepSize = 1;
            this.DataCursorActivity258_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity258.Policy = this.DataCursorActivity258_Policy;
            this.DataCursorActivity258.ReportStepData = false;
            _flow.Loop98.BeforeExecuteStepEvent += this.DataCursorActivity258.ResetCursor;
            _flow.Sequence252.Comment = @"";
            _flow.Sequence252.IconPath = @"";
            _flow.Sequence252.Name = @"序列252";
            _flow.Sequence252.Activities.Add (_flow.DbFetchData99);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence252.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence252.Activities.Add (_flow.HTTPActivity100);
            _flow.Sequence252.Activities.Add (_flow.StringToJsonActivity101);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData102);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData103);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData104);
            _flow.Sequence252.Activities.Add (_flow.DbFetchData105);
            _flow.Sequence252.Activities.Add (_flow.IfElse106);
            _flow.DbFetchData99.QueryString = @"select xsid,xxcode,myJid,token from tb_getclassinfo_verification where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData99.Timeout = (int)30;
            _flow.DbFetchData99.Comment = @"";
            _flow.DbFetchData99.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData99.Name = @"查询tb_getclassinfo_verification表中数据";
            VTDPropertyInfoBase pi611 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter311 = new VTDObjectGetter(pi611);
            VTDPropertyInfoBase pi612 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter301 = new VTDObjectSetter(pi612);
            binding_setter301 = new StringFormaterDecorator(binding_setter301,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir301 = new BindDirection(_flow.Loop98,binding_getter311,binding_setter301,BindTargetType.ToInProperty);
            _flow.DbFetchData99.InDirections.Add(bind_dir301);
            VTDPropertyInfoBase pi613 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter312 = new VTDObjectGetter(pi613);
            VTDPropertyInfoBase pi614 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter302 = new VTDObjectSetter(pi614);
            bind_dir302 = new BindDirection(_flow.DbOpenConnection39,binding_getter312,binding_setter302,BindTargetType.ToInProperty);
            _flow.DbFetchData99.InDirections.Add(bind_dir302);
            XmlDocument DbFetchData99_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData99_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData99_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><xxcode /><myJid /><token /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData99.ExpectedOutputProperties = DbFetchData99_ExpectedOutputProperties_Document;
            _flow.DbFetchData250.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi615 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter313 = new VTDObjectGetter(pi615);
            VTDPropertyInfoBase pi616 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter303 = new VTDObjectSetter(pi616);
            bind_dir303 = new BindDirection(_flow.DbOpenConnection39,binding_getter313,binding_setter303,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir303);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi617 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter314 = new VTDXPathGetter(pi617,XmlTypeCode.String);
            binding_getter314 = new XPathGetterDecorator(binding_getter314,"{Array0}",1);
            VTDPropertyInfoBase pi618 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter304 = new VTDObjectSetter(pi618);
            binding_setter304 = new StringFormaterDecorator(binding_setter304,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xsid}");
            bind_dir304 = new BindDirection(_flow.DbFetchData99,binding_getter314,binding_setter304,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir304);
            VTDPropertyInfoBase pi619 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter315 = new VTDXPathGetter(pi619,XmlTypeCode.String);
            binding_getter315 = new XPathGetterDecorator(binding_getter315,"{Array0}",1);
            VTDPropertyInfoBase pi620 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter305 = new VTDObjectSetter(pi620);
            binding_setter305 = new StringFormaterDecorator(binding_setter305,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir305 = new BindDirection(_flow.DbFetchData250,binding_getter315,binding_setter305,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir305);
            _flow.HTTPActivity100.TextBody = @"myJid={Step.OutputProperties.DbFetchData99.ResultTable.Row[1].myJid}&xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&token={Step.OutputProperties.DbFetchData99.ResultTable.Row[1].token}&xxcode={Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xxcode}";
            _flow.HTTPActivity100.TextXmlBody = @"";
            _flow.HTTPActivity100.FileBody = @"";
            _flow.HTTPActivity100.PostBody = @"";
            _flow.HTTPActivity100.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getClassInfo}";
            _flow.HTTPActivity100.HttpMethod = @"POST";
            _flow.HTTPActivity100.HttpVersion = @"1.1";
            _flow.HTTPActivity100.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity100.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity100.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity100.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity100.Comment = @"";
            _flow.HTTPActivity100.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity100.RequestBodyType = @"Text";
            _flow.HTTPActivity100.ResponseType = @"Text";
            _flow.HTTPActivity100.Name = @"调用/jxt/class.php";
            _flow.HTTPActivity100.Proxy.Server = @"";
            _flow.HTTPActivity100.Proxy.Username = @"";
            _flow.HTTPActivity100.Proxy.Password = @"";
            _flow.HTTPActivity100.Authentication.Username = @"";
            _flow.HTTPActivity100.Authentication.Password = @"";
            _flow.HTTPActivity100.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity100.Timeout = (int)100000;
            _flow.HTTPActivity100.ClientCertificate.Password = @"";
            _flow.HTTPActivity100.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity100.UseClientCertificate = false;
            _flow.HTTPActivity100.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity100.AllowRedirections = true;
            _flow.HTTPActivity100.ReuseCookies = false;
            _flow.HTTPActivity100.ExpectServerError = false;
            XmlDocument HTTPActivity100_XMLBody_Document = new XmlDocument();
            HTTPActivity100_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity100_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity100.XMLBody = HTTPActivity100_XMLBody_Document;
            XmlDocument HTTPActivity100_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity100_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity100_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity100.RequestMultipartInfoXml = HTTPActivity100_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity100.Multipart=false;
            VTDPropertyInfoBase pi621 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter316 = new VTDObjectGetter(pi621);
            VTDPropertyInfoBase pi622 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter306 = new VTDObjectSetter(pi622);
            binding_setter306 = new StringFormaterDecorator(binding_setter306,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir306 = new BindDirection(this.DataCursorActivity258,binding_getter316,binding_setter306,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir306);
            VTDPropertyInfoBase pi623 = new VTDPropertyInfoBase("getClassInfo");
            VTDBaseGetter binding_getter317 = new VTDObjectGetter(pi623);
            VTDPropertyInfoBase pi624 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter307 = new VTDObjectSetter(pi624);
            binding_setter307 = new StringFormaterDecorator(binding_setter307,"{DataSource.tb_global_table.getClassInfo}");
            bind_dir307 = new BindDirection(this.DataCursorActivity258,binding_getter317,binding_setter307,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir307);
            VTDPropertyInfoBase pi625 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter318 = new VTDObjectGetter(pi625);
            VTDPropertyInfoBase pi626 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter308 = new VTDObjectSetter(pi626);
            binding_setter308 = new StringFormaterDecorator(binding_setter308,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir308 = new BindDirection(this.DataCursorActivity258,binding_getter318,binding_setter308,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir308);
            VTDPropertyInfoBase pi627 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter319 = new VTDObjectGetter(pi627);
            VTDPropertyInfoBase pi628 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter309 = new VTDObjectSetter(pi628);
            binding_setter309 = new StringFormaterDecorator(binding_setter309,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir309 = new BindDirection(this.DataCursorActivity258,binding_getter319,binding_setter309,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir309);
            VTDPropertyInfoBase pi629 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter320 = new VTDXPathGetter(pi629,XmlTypeCode.String);
            binding_getter320 = new XPathGetterDecorator(binding_getter320,"{Array0}",1);
            VTDPropertyInfoBase pi630 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter310 = new VTDObjectSetter(pi630);
            binding_setter310 = new StringFormaterDecorator(binding_setter310,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].myJid}");
            bind_dir310 = new BindDirection(_flow.DbFetchData99,binding_getter320,binding_setter310,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir310);
            VTDPropertyInfoBase pi631 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter321 = new VTDObjectGetter(pi631);
            VTDPropertyInfoBase pi632 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter311 = new VTDObjectSetter(pi632);
            binding_setter311 = new StringFormaterDecorator(binding_setter311,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir311 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter321,binding_setter311,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir311);
            VTDPropertyInfoBase pi633 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter322 = new VTDXPathGetter(pi633,XmlTypeCode.String);
            binding_getter322 = new XPathGetterDecorator(binding_getter322,"{Array0}",1);
            VTDPropertyInfoBase pi634 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter312 = new VTDObjectSetter(pi634);
            binding_setter312 = new StringFormaterDecorator(binding_setter312,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].token}");
            bind_dir312 = new BindDirection(_flow.DbFetchData99,binding_getter322,binding_setter312,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir312);
            VTDPropertyInfoBase pi635 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xxcode'][1]");
            VTDBaseGetter binding_getter323 = new VTDXPathGetter(pi635,XmlTypeCode.String);
            binding_getter323 = new XPathGetterDecorator(binding_getter323,"{Array0}",1);
            VTDPropertyInfoBase pi636 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter313 = new VTDObjectSetter(pi636);
            binding_setter313 = new StringFormaterDecorator(binding_setter313,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xxcode}");
            bind_dir313 = new BindDirection(_flow.DbFetchData99,binding_getter323,binding_setter313,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir313);
            XmlDocument HTTPActivity100_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity100_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity100_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity100.ExpectedResponseXmlBody = HTTPActivity100_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity100_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity100_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity100_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity100.ExpectedResponseJsonBody = HTTPActivity100_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity100_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity100_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity100_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity100.ExpectedOutputProperties = HTTPActivity100_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity101.InputString = @"{Step.OutputProperties.HTTPActivity100.ResponseBody}";
            _flow.StringToJsonActivity101.Comment = @"";
            _flow.StringToJsonActivity101.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity101.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi637 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter324 = new VTDObjectGetter(pi637);
            VTDPropertyInfoBase pi638 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter314 = new VTDObjectSetter(pi638);
            binding_setter314 = new StringFormaterDecorator(binding_setter314,"{Step.OutputProperties.HTTPActivity100.ResponseBody}");
            bind_dir314 = new BindDirection(_flow.HTTPActivity100,binding_getter324,binding_setter314,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity101.InDirections.Add(bind_dir314);
            _flow.DbFetchData102.QueryString = @"update tb_getclassinfo_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity100.ResponseBody}' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData102.Timeout = (int)30;
            _flow.DbFetchData102.Comment = @"";
            _flow.DbFetchData102.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData102.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi639 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter325 = new VTDObjectGetter(pi639);
            VTDPropertyInfoBase pi640 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter315 = new VTDObjectSetter(pi640);
            binding_setter315 = new StringFormaterDecorator(binding_setter315,"{Step.OutputProperties.HTTPActivity100.ResponseBody}");
            bind_dir315 = new BindDirection(_flow.HTTPActivity100,binding_getter325,binding_setter315,BindTargetType.ToInProperty);
            _flow.DbFetchData102.InDirections.Add(bind_dir315);
            VTDPropertyInfoBase pi641 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter326 = new VTDObjectGetter(pi641);
            VTDPropertyInfoBase pi642 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter316 = new VTDObjectSetter(pi642);
            binding_setter316 = new StringFormaterDecorator(binding_setter316,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir316 = new BindDirection(_flow.Loop98,binding_getter326,binding_setter316,BindTargetType.ToInProperty);
            _flow.DbFetchData102.InDirections.Add(bind_dir316);
            VTDPropertyInfoBase pi643 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter327 = new VTDObjectGetter(pi643);
            VTDPropertyInfoBase pi644 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter317 = new VTDObjectSetter(pi644);
            bind_dir317 = new BindDirection(_flow.DbOpenConnection39,binding_getter327,binding_setter317,BindTargetType.ToInProperty);
            _flow.DbFetchData102.InDirections.Add(bind_dir317);
            XmlDocument DbFetchData102_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData102_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData102_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData102.ExpectedOutputProperties = DbFetchData102_ExpectedOutputProperties_Document;
            _flow.DbFetchData103.QueryString = @"update tb_getclassinfo_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity101.errorCode}' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData103.Timeout = (int)30;
            _flow.DbFetchData103.Comment = @"";
            _flow.DbFetchData103.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData103.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi645 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter328 = new VTDJsonGetter(pi645);
            VTDPropertyInfoBase pi646 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter318 = new VTDObjectSetter(pi646);
            binding_setter318 = new StringFormaterDecorator(binding_setter318,"{Step.JsonContent.StringToJsonActivity101.errorCode}");
            bind_dir318 = new BindDirection(_flow.StringToJsonActivity101,binding_getter328,binding_setter318,BindTargetType.ToInProperty);
            _flow.DbFetchData103.InDirections.Add(bind_dir318);
            VTDPropertyInfoBase pi647 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter329 = new VTDObjectGetter(pi647);
            VTDPropertyInfoBase pi648 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter319 = new VTDObjectSetter(pi648);
            binding_setter319 = new StringFormaterDecorator(binding_setter319,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir319 = new BindDirection(_flow.Loop98,binding_getter329,binding_setter319,BindTargetType.ToInProperty);
            _flow.DbFetchData103.InDirections.Add(bind_dir319);
            VTDPropertyInfoBase pi649 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter330 = new VTDObjectGetter(pi649);
            VTDPropertyInfoBase pi650 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter320 = new VTDObjectSetter(pi650);
            bind_dir320 = new BindDirection(_flow.DbOpenConnection39,binding_getter330,binding_setter320,BindTargetType.ToInProperty);
            _flow.DbFetchData103.InDirections.Add(bind_dir320);
            XmlDocument DbFetchData103_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData103_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData103_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData103.ExpectedOutputProperties = DbFetchData103_ExpectedOutputProperties_Document;
            _flow.DbFetchData104.QueryString = @"select OutputValue from tb_getclassinfo_verification where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData104.Timeout = (int)30;
            _flow.DbFetchData104.Comment = @"";
            _flow.DbFetchData104.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData104.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi651 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter331 = new VTDObjectGetter(pi651);
            VTDPropertyInfoBase pi652 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter321 = new VTDObjectSetter(pi652);
            binding_setter321 = new StringFormaterDecorator(binding_setter321,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir321 = new BindDirection(_flow.Loop98,binding_getter331,binding_setter321,BindTargetType.ToInProperty);
            _flow.DbFetchData104.InDirections.Add(bind_dir321);
            VTDPropertyInfoBase pi653 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter332 = new VTDObjectGetter(pi653);
            VTDPropertyInfoBase pi654 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter322 = new VTDObjectSetter(pi654);
            bind_dir322 = new BindDirection(_flow.DbOpenConnection39,binding_getter332,binding_setter322,BindTargetType.ToInProperty);
            _flow.DbFetchData104.InDirections.Add(bind_dir322);
            XmlDocument DbFetchData104_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData104_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData104_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData104.ExpectedOutputProperties = DbFetchData104_ExpectedOutputProperties_Document;
            _flow.DbFetchData105.QueryString = @"select ExpectationValue from tb_getclassinfo_verification where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData105.Timeout = (int)30;
            _flow.DbFetchData105.Comment = @"";
            _flow.DbFetchData105.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData105.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi655 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter333 = new VTDObjectGetter(pi655);
            VTDPropertyInfoBase pi656 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter323 = new VTDObjectSetter(pi656);
            binding_setter323 = new StringFormaterDecorator(binding_setter323,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir323 = new BindDirection(_flow.Loop98,binding_getter333,binding_setter323,BindTargetType.ToInProperty);
            _flow.DbFetchData105.InDirections.Add(bind_dir323);
            VTDPropertyInfoBase pi657 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter334 = new VTDObjectGetter(pi657);
            VTDPropertyInfoBase pi658 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter324 = new VTDObjectSetter(pi658);
            bind_dir324 = new BindDirection(_flow.DbOpenConnection39,binding_getter334,binding_setter324,BindTargetType.ToInProperty);
            _flow.DbFetchData105.InDirections.Add(bind_dir324);
            XmlDocument DbFetchData105_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData105_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData105_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData105.ExpectedOutputProperties = DbFetchData105_ExpectedOutputProperties_Document;
            _flow.IfElse106.ConditionAsString = @"{Step.OutputProperties.DbFetchData104.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData105.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse106.Comment = @"";
            _flow.IfElse106.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse106.Name = @"填写Result";
            _flow.IfElse106.Activities.Add (_flow.IfElseBranch107);
            _flow.IfElse106.Activities.Add (_flow.IfElseBranch108);
            _flow.IfElseBranch107.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi659 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter335 = new VTDXPathGetter(pi659,XmlTypeCode.String);
            binding_getter335 = new XPathGetterDecorator(binding_getter335,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData104.GetParam(binding_getter335),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi660 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter336 = new VTDXPathGetter(pi660,XmlTypeCode.String);
            binding_getter336 = new XPathGetterDecorator(binding_getter336,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData105.GetParam(binding_getter336),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch107.Comment = @"";
            _flow.IfElseBranch107.IconPath = @"";
            _flow.IfElseBranch107.Name = @"是";
            _flow.IfElseBranch107.Activities.Add (_flow.DbFetchData109);
            _flow.IfElseBranch108.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch108.Comment = @"";
            _flow.IfElseBranch108.IconPath = @"";
            _flow.IfElseBranch108.Name = @"否";
            _flow.IfElseBranch108.Activities.Add (_flow.DbFetchData110);
            _flow.DbFetchData109.QueryString = @"update tb_getclassinfo_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData109.Timeout = (int)30;
            _flow.DbFetchData109.Comment = @"";
            _flow.DbFetchData109.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData109.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi661 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter337 = new VTDObjectGetter(pi661);
            VTDPropertyInfoBase pi662 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter325 = new VTDObjectSetter(pi662);
            binding_setter325 = new StringFormaterDecorator(binding_setter325,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir325 = new BindDirection(_flow.Loop98,binding_getter337,binding_setter325,BindTargetType.ToInProperty);
            _flow.DbFetchData109.InDirections.Add(bind_dir325);
            VTDPropertyInfoBase pi663 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter338 = new VTDObjectGetter(pi663);
            VTDPropertyInfoBase pi664 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter326 = new VTDObjectSetter(pi664);
            bind_dir326 = new BindDirection(_flow.DbOpenConnection39,binding_getter338,binding_setter326,BindTargetType.ToInProperty);
            _flow.DbFetchData109.InDirections.Add(bind_dir326);
            XmlDocument DbFetchData109_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData109_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData109_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData109.ExpectedOutputProperties = DbFetchData109_ExpectedOutputProperties_Document;
            _flow.DbFetchData110.QueryString = @"update tb_getclassinfo_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData110.Timeout = (int)30;
            _flow.DbFetchData110.Comment = @"";
            _flow.DbFetchData110.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData110.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi665 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter339 = new VTDObjectGetter(pi665);
            VTDPropertyInfoBase pi666 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter327 = new VTDObjectSetter(pi666);
            binding_setter327 = new StringFormaterDecorator(binding_setter327,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir327 = new BindDirection(_flow.Loop98,binding_getter339,binding_setter327,BindTargetType.ToInProperty);
            _flow.DbFetchData110.InDirections.Add(bind_dir327);
            VTDPropertyInfoBase pi667 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter340 = new VTDObjectGetter(pi667);
            VTDPropertyInfoBase pi668 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter328 = new VTDObjectSetter(pi668);
            bind_dir328 = new BindDirection(_flow.DbOpenConnection39,binding_getter340,binding_setter328,BindTargetType.ToInProperty);
            _flow.DbFetchData110.InDirections.Add(bind_dir328);
            XmlDocument DbFetchData110_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData110_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData110_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData110.ExpectedOutputProperties = DbFetchData110_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    