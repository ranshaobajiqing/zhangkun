/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getclassinfo_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1450 = null;
        public BindDirection bind_dir1451 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity266 = null;
        public BindDirection bind_dir1452 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity266_Policy = null;
        public BindDirection bind_dir1453 = null;
        public BindDirection bind_dir1454 = null;
        public BindDirection bind_dir1455 = null;
        public BindDirection bind_dir1456 = null;
        public BindDirection bind_dir1457 = null;
        public BindDirection bind_dir1458 = null;
        public BindDirection bind_dir1459 = null;
        public BindDirection bind_dir1460 = null;
        public BindDirection bind_dir1461 = null;
        public BindDirection bind_dir1462 = null;
        public BindDirection bind_dir1463 = null;
        public BindDirection bind_dir1464 = null;
        public BindDirection bind_dir1465 = null;
        public BindDirection bind_dir1466 = null;
        public BindDirection bind_dir1467 = null;
        public BindDirection bind_dir1468 = null;
        public BindDirection bind_dir1469 = null;
        public BindDirection bind_dir1470 = null;
        public BindDirection bind_dir1471 = null;
        public BindDirection bind_dir1472 = null;
        public BindDirection bind_dir1473 = null;
        public BindDirection bind_dir1474 = null;
        public BindDirection bind_dir1475 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity267 = null;
        public BindDirection bind_dir1476 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity267_Policy = null;
        public BindDirection bind_dir1477 = null;
        public BindDirection bind_dir1478 = null;
        public BindDirection bind_dir1479 = null;
        public BindDirection bind_dir1480 = null;
        public BindDirection bind_dir1481 = null;
        public BindDirection bind_dir1482 = null;
        public BindDirection bind_dir1483 = null;
        public BindDirection bind_dir1484 = null;
        public BindDirection bind_dir1485 = null;
        public BindDirection bind_dir1486 = null;
        public BindDirection bind_dir1487 = null;
        public BindDirection bind_dir1488 = null;
        public BindDirection bind_dir1489 = null;
        public BindDirection bind_dir1490 = null;
        public BindDirection bind_dir1491 = null;
        public BindDirection bind_dir1492 = null;
        public BindDirection bind_dir1493 = null;
        public BindDirection bind_dir1494 = null;
        public BindDirection bind_dir1495 = null;
        public BindDirection bind_dir1496 = null;
        public BindDirection bind_dir1497 = null;
        public BindDirection bind_dir1498 = null;
        public BindDirection bind_dir1499 = null;
        public BindDirection bind_dir1500 = null;
        public BindDirection bind_dir1501 = null;
        public BindDirection bind_dir1502 = null;
        public BindDirection bind_dir1503 = null;
        public BindDirection bind_dir1504 = null;
        public BindDirection bind_dir1505 = null;
        public BindDirection bind_dir1506 = null;
        public BindDirection bind_dir1507 = null;
        public BindDirection bind_dir1508 = null;
        public BindDirection bind_dir1509 = null;
        public BindDirection bind_dir1510 = null;
        public BindDirection bind_dir1511 = null;
        public BindDirection bind_dir1512 = null;
        public BindDirection bind_dir1513 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity262 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity262");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity264 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity264");
            _flow.DataExporterCloseActivity265 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity265");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity263 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity263");
            this.DataCursorActivity266 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity266");
            this.DataCursorActivity266_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence260 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence260");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData97 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData97");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.DbFetchData251 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.Loop98 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop98Input>(_context,"Loop98",LoopType.For);
            _flow.DbFetchData111 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData111");
            _flow.CallQTPTest112 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest112");
            _flow.DbFetchData113 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData113");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.HTTPActivity114 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity114");
            _flow.StringToJsonActivity177 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity177");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.DbFetchData116 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData116");
            this.DataCursorActivity267 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity267");
            this.DataCursorActivity267_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence261 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence261");
            _flow.DbFetchData99 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData99");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.ReplaceStringActivity254 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity254");
            _flow.DbFetchData255 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData255");
            _flow.CallQTPTest256 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest256");
            _flow.DbFetchData257 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData257");
            _flow.ReplaceStringActivity258 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity258");
            _flow.HTTPActivity100 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity100");
            _flow.StringToJsonActivity101 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity101");
            _flow.ReplaceStringActivity259 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity259");
            _flow.DbFetchData102 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData102");
            _flow.DbFetchData103 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData103");
            _flow.DbFetchData104 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData104");
            _flow.DbFetchData105 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData105");
            _flow.IfElse106 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse106Input>(_context,"IfElse106");
            _flow.IfElseBranch107 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch107");
            _flow.IfElseBranch108 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch108");
            _flow.DbFetchData109 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData109");
            _flow.DbFetchData110 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData110");
            _flow.DataFetchActivity262.Comment = @"";
            _flow.DataFetchActivity262.IconPath = @"";
            _flow.DataFetchActivity262.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity262.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity262_QueryParameters_Document = new XmlDocument();
            DataFetchActivity262_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity262Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value></Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity262_QueryParameters_Document.LoadXml(xmlDataFetchActivity262Params);
            _flow.DataFetchActivity262.QueryParameters = DataFetchActivity262_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity262);
            this.Activities.Add (_flow.DataFetchActivity262);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity266);
            _flow.Loop2.Activities.Add (_flow.Sequence260);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity264.Comment = @"";
            _flow.DataExporterActivity264.IconPath = @"";
            VTDPropertyInfoBase pi2945 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1496 = new VTDObjectGetter(pi2945);
            VTDPropertyInfoBase pi2946 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1450 = new VTDObjectSetter(pi2946);
            binding_setter1450 = new StringFormaterDecorator(binding_setter1450,"{Step.DataFetchActivity262.OutTable}");
            bind_dir1450 = new BindDirection(_flow.DataFetchActivity262,binding_getter1496,binding_setter1450,BindTargetType.ToInProperty);
            _flow.DataExporterActivity264.InDirections.Add(bind_dir1450);
            this.Activities.Add (_flow.DataExporterActivity264);
            _flow.DataExporterCloseActivity265.Comment = @"";
            _flow.DataExporterCloseActivity265.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity265);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity263.Comment = @"";
            _flow.DataDisconnectActivity263.IconPath = @"";
            VTDPropertyInfoBase pi2947 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1497 = new VTDObjectGetter(pi2947);
            VTDPropertyInfoBase pi2948 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1451 = new VTDObjectSetter(pi2948);
            binding_setter1451 = new StringFormaterDecorator(binding_setter1451,"{Step.DataFetchActivity262.OutTable}");
            bind_dir1451 = new BindDirection(_flow.DataFetchActivity262,binding_getter1497,binding_setter1451,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity263.InDirections.Add(bind_dir1451);
            this.Activities.Add (_flow.DataDisconnectActivity263);
            this.DataCursorActivity266.Comment = @"";
            this.DataCursorActivity266.IconPath = @"";
            VTDPropertyInfoBase pi2949 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1498 = new VTDObjectGetter(pi2949);
            VTDPropertyInfoBase pi2950 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1452 = new VTDObjectSetter(pi2950);
            binding_setter1452 = new StringFormaterDecorator(binding_setter1452,"{Step.DataFetchActivity262.OutTable}");
            bind_dir1452 = new BindDirection(_flow.DataFetchActivity262,binding_getter1498,binding_setter1452,BindTargetType.ToInProperty);
            this.DataCursorActivity266.InDirections.Add(bind_dir1452);
            this.DataCursorActivity266_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity266_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.StartCondition.Value = "";
            this.DataCursorActivity266_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity266_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.EndCondition.Value = "";
            this.DataCursorActivity266_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity266_Policy.StepSize = 1;
            this.DataCursorActivity266_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity266.Policy = this.DataCursorActivity266_Policy;
            this.DataCursorActivity266.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity266.ResetCursor;
            _flow.Sequence260.Comment = @"";
            _flow.Sequence260.IconPath = @"";
            _flow.Sequence260.Name = @"序列260";
            _flow.Sequence260.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData97);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData251);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence260.Activities.Add (_flow.Loop98);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData111);
            _flow.Sequence260.Activities.Add (_flow.CallQTPTest112);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData113);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence260.Activities.Add (_flow.HTTPActivity114);
            _flow.Sequence260.Activities.Add (_flow.StringToJsonActivity177);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence260.Activities.Add (_flow.DbFetchData116);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData97.QueryString = @"select count(*) as 'Row' from tb_getclassinfo_verification";
            _flow.DbFetchData97.Timeout = (int)30;
            _flow.DbFetchData97.Comment = @"";
            _flow.DbFetchData97.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData97.Name = @"获取到tb_getclassinfo_verification表有效行数";
            VTDPropertyInfoBase pi2951 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1499 = new VTDObjectGetter(pi2951);
            VTDPropertyInfoBase pi2952 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1453 = new VTDObjectSetter(pi2952);
            bind_dir1453 = new BindDirection(_flow.DbOpenConnection39,binding_getter1499,binding_setter1453,BindTargetType.ToInProperty);
            _flow.DbFetchData97.InDirections.Add(bind_dir1453);
            XmlDocument DbFetchData97_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData97_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData97_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData97.ExpectedOutputProperties = DbFetchData97_ExpectedOutputProperties_Document;
            _flow.DbFetchData250.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi2953 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1500 = new VTDObjectGetter(pi2953);
            VTDPropertyInfoBase pi2954 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1454 = new VTDObjectSetter(pi2954);
            bind_dir1454 = new BindDirection(_flow.DbOpenConnection39,binding_getter1500,binding_setter1454,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir1454);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.DbFetchData251.QueryString = @"select schoolCode from tb_global_table where TestCase = 1";
            _flow.DbFetchData251.Timeout = (int)30;
            _flow.DbFetchData251.Comment = @"";
            _flow.DbFetchData251.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData251.Name = @"查询tb_global_table表中schoolCode值";
            VTDPropertyInfoBase pi2955 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1501 = new VTDObjectGetter(pi2955);
            VTDPropertyInfoBase pi2956 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1455 = new VTDObjectSetter(pi2956);
            bind_dir1455 = new BindDirection(_flow.DbOpenConnection39,binding_getter1501,binding_setter1455,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1455);
            XmlDocument DbFetchData251_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData251_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData251_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><schoolCode /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData251.ExpectedOutputProperties = DbFetchData251_ExpectedOutputProperties_Document;
            _flow.DbFetchData252.QueryString = @"select LoginTeacherUsername from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询tb_global_table表中LoginTeacherUsername值";
            VTDPropertyInfoBase pi2957 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1502 = new VTDObjectGetter(pi2957);
            VTDPropertyInfoBase pi2958 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1456 = new VTDObjectSetter(pi2958);
            bind_dir1456 = new BindDirection(_flow.DbOpenConnection39,binding_getter1502,binding_setter1456,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir1456);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><LoginTeacherUsername /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.Loop98.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop98.NumberOfIterations = (int)1;
            _flow.Loop98.Comment = @"";
            _flow.Loop98.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop98.Name = @"循环执行tb_getclassinfo_verification中的测试用例";
            VTDPropertyInfoBase pi2959 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter1503 = new VTDXPathGetter(pi2959,XmlTypeCode.Long);
            binding_getter1503 = new XPathGetterDecorator(binding_getter1503,"{Array0}",1);
            VTDPropertyInfoBase pi2960 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter1457 = new VTDObjectSetter(pi2960);
            bind_dir1457 = new BindDirection(_flow.DbFetchData97,binding_getter1503,binding_setter1457,BindTargetType.ToInProperty);
            _flow.Loop98.InDirections.Add(bind_dir1457);
            _flow.Loop98.Activities.Add (this.DataCursorActivity267);
            _flow.Loop98.Activities.Add (_flow.Sequence261);
            _flow.DbFetchData111.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6' where TestCase = 1";
            _flow.DbFetchData111.Timeout = (int)30;
            _flow.DbFetchData111.Comment = @"";
            _flow.DbFetchData111.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData111.Name = @"对/jxt/class.php接口token实行加密";
            VTDPropertyInfoBase pi2961 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1504 = new VTDObjectGetter(pi2961);
            VTDPropertyInfoBase pi2962 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1458 = new VTDObjectSetter(pi2962);
            binding_setter1458 = new StringFormaterDecorator(binding_setter1458,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1458 = new BindDirection(this.DataCursorActivity266,binding_getter1504,binding_setter1458,BindTargetType.ToInProperty);
            _flow.DbFetchData111.InDirections.Add(bind_dir1458);
            VTDPropertyInfoBase pi2963 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1505 = new VTDObjectGetter(pi2963);
            VTDPropertyInfoBase pi2964 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1459 = new VTDObjectSetter(pi2964);
            bind_dir1459 = new BindDirection(_flow.DbOpenConnection39,binding_getter1505,binding_setter1459,BindTargetType.ToInProperty);
            _flow.DbFetchData111.InDirections.Add(bind_dir1459);
            XmlDocument DbFetchData111_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData111_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData111_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData111.ExpectedOutputProperties = DbFetchData111_ExpectedOutputProperties_Document;
            _flow.CallQTPTest112.Comment = @"";
            _flow.CallQTPTest112.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest112.Name = @"Encryption.SHA1";
            _flow.CallQTPTest112.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ScriptPath}");
            _flow.CallQTPTest112.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ActionName}");
            _flow.CallQTPTest112.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.Description}");
            _flow.CallQTPTest112.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.IsActionSelected}");
            _flow.CallQTPTest112.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.ResultLocation}");
            _flow.CallQTPTest112.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest112.QCScriptPath}");
            _flow.DbFetchData113.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData113.Timeout = (int)30;
            _flow.DbFetchData113.Comment = @"";
            _flow.DbFetchData113.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData113.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi2965 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1506 = new VTDObjectGetter(pi2965);
            VTDPropertyInfoBase pi2966 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1460 = new VTDObjectSetter(pi2966);
            bind_dir1460 = new BindDirection(_flow.DbOpenConnection39,binding_getter1506,binding_setter1460,BindTargetType.ToInProperty);
            _flow.DbFetchData113.InDirections.Add(bind_dir1460);
            XmlDocument DbFetchData113_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData113_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData113_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData113.ExpectedOutputProperties = DbFetchData113_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi2967 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1507 = new VTDObjectGetter(pi2967);
            VTDPropertyInfoBase pi2968 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1461 = new VTDObjectSetter(pi2968);
            bind_dir1461 = new BindDirection(_flow.DbOpenConnection39,binding_getter1507,binding_setter1461,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir1461);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.DbFetchData247.QueryString = @"select schoolCode from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中schoolCode值";
            VTDPropertyInfoBase pi2969 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1508 = new VTDObjectGetter(pi2969);
            VTDPropertyInfoBase pi2970 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1462 = new VTDObjectSetter(pi2970);
            bind_dir1462 = new BindDirection(_flow.DbOpenConnection39,binding_getter1508,binding_setter1462,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir1462);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><schoolCode /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.HTTPActivity114.TextBody = @"myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&token={Step.OutputProperties.DbFetchData113.ResultTable.Row[1].EncryptionResult}&xxcode={Step.OutputProperties.DbFetchData247.ResultTable.Row[1].schoolCode}";
            _flow.HTTPActivity114.TextXmlBody = @"";
            _flow.HTTPActivity114.FileBody = @"";
            _flow.HTTPActivity114.PostBody = @"";
            _flow.HTTPActivity114.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getClassInfo}";
            _flow.HTTPActivity114.HttpMethod = @"POST";
            _flow.HTTPActivity114.HttpVersion = @"1.1";
            _flow.HTTPActivity114.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity114.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity114.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity114.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity114.Comment = @"";
            _flow.HTTPActivity114.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity114.RequestBodyType = @"Text";
            _flow.HTTPActivity114.ResponseType = @"Text";
            _flow.HTTPActivity114.Name = @"调用/jxt/class.php";
            _flow.HTTPActivity114.Proxy.Server = @"";
            _flow.HTTPActivity114.Proxy.Username = @"";
            _flow.HTTPActivity114.Proxy.Password = @"";
            _flow.HTTPActivity114.Authentication.Username = @"";
            _flow.HTTPActivity114.Authentication.Password = @"";
            _flow.HTTPActivity114.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity114.Timeout = (int)100000;
            _flow.HTTPActivity114.ClientCertificate.Password = @"";
            _flow.HTTPActivity114.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity114.UseClientCertificate = false;
            _flow.HTTPActivity114.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity114.AllowRedirections = true;
            _flow.HTTPActivity114.ReuseCookies = false;
            _flow.HTTPActivity114.ExpectServerError = false;
            XmlDocument HTTPActivity114_XMLBody_Document = new XmlDocument();
            HTTPActivity114_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity114_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity114.XMLBody = HTTPActivity114_XMLBody_Document;
            XmlDocument HTTPActivity114_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity114_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity114_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity114.RequestMultipartInfoXml = HTTPActivity114_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity114.Multipart=false;
            VTDPropertyInfoBase pi2971 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter1509 = new VTDObjectGetter(pi2971);
            VTDPropertyInfoBase pi2972 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1463 = new VTDObjectSetter(pi2972);
            binding_setter1463 = new StringFormaterDecorator(binding_setter1463,"{DataSource.tb_global_table.IQHost}");
            bind_dir1463 = new BindDirection(this.DataCursorActivity266,binding_getter1509,binding_setter1463,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir1463);
            VTDPropertyInfoBase pi2973 = new VTDPropertyInfoBase("getClassInfo");
            VTDBaseGetter binding_getter1510 = new VTDObjectGetter(pi2973);
            VTDPropertyInfoBase pi2974 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1464 = new VTDObjectSetter(pi2974);
            binding_setter1464 = new StringFormaterDecorator(binding_setter1464,"{DataSource.tb_global_table.getClassInfo}");
            bind_dir1464 = new BindDirection(this.DataCursorActivity266,binding_getter1510,binding_setter1464,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir1464);
            VTDPropertyInfoBase pi2975 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1511 = new VTDObjectGetter(pi2975);
            VTDPropertyInfoBase pi2976 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1465 = new VTDObjectSetter(pi2976);
            binding_setter1465 = new StringFormaterDecorator(binding_setter1465,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1465 = new BindDirection(this.DataCursorActivity266,binding_getter1511,binding_setter1465,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir1465);
            VTDPropertyInfoBase pi2977 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1512 = new VTDObjectGetter(pi2977);
            VTDPropertyInfoBase pi2978 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1466 = new VTDObjectSetter(pi2978);
            binding_setter1466 = new StringFormaterDecorator(binding_setter1466,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1466 = new BindDirection(this.DataCursorActivity266,binding_getter1512,binding_setter1466,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir1466);
            VTDPropertyInfoBase pi2979 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1513 = new VTDObjectGetter(pi2979);
            VTDPropertyInfoBase pi2980 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1467 = new VTDObjectSetter(pi2980);
            binding_setter1467 = new StringFormaterDecorator(binding_setter1467,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1467 = new BindDirection(this.DataCursorActivity266,binding_getter1513,binding_setter1467,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir1467);
            VTDPropertyInfoBase pi2981 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1514 = new VTDXPathGetter(pi2981,XmlTypeCode.String);
            binding_getter1514 = new XPathGetterDecorator(binding_getter1514,"{Array0}",1);
            VTDPropertyInfoBase pi2982 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1468 = new VTDObjectSetter(pi2982);
            binding_setter1468 = new StringFormaterDecorator(binding_setter1468,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir1468 = new BindDirection(_flow.DbFetchData246,binding_getter1514,binding_setter1468,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir1468);
            VTDPropertyInfoBase pi2983 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1515 = new VTDXPathGetter(pi2983,XmlTypeCode.String);
            binding_getter1515 = new XPathGetterDecorator(binding_getter1515,"{Array0}",1);
            VTDPropertyInfoBase pi2984 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1469 = new VTDObjectSetter(pi2984);
            binding_setter1469 = new StringFormaterDecorator(binding_setter1469,"{Step.OutputProperties.DbFetchData113.ResultTable.Row[1].EncryptionResult}");
            bind_dir1469 = new BindDirection(_flow.DbFetchData113,binding_getter1515,binding_setter1469,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir1469);
            VTDPropertyInfoBase pi2985 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='schoolCode'][1]");
            VTDBaseGetter binding_getter1516 = new VTDXPathGetter(pi2985,XmlTypeCode.String);
            binding_getter1516 = new XPathGetterDecorator(binding_getter1516,"{Array0}",1);
            VTDPropertyInfoBase pi2986 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1470 = new VTDObjectSetter(pi2986);
            binding_setter1470 = new StringFormaterDecorator(binding_setter1470,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].schoolCode}");
            bind_dir1470 = new BindDirection(_flow.DbFetchData247,binding_getter1516,binding_setter1470,BindTargetType.ToInProperty);
            _flow.HTTPActivity114.InDirections.Add(bind_dir1470);
            XmlDocument HTTPActivity114_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity114_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity114_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity114.ExpectedResponseXmlBody = HTTPActivity114_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity114_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity114_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity114_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity114.ExpectedResponseJsonBody = HTTPActivity114_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity114_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity114_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity114_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity114.ExpectedOutputProperties = HTTPActivity114_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity177.InputString = @"{Step.OutputProperties.HTTPActivity114.ResponseBody}";
            _flow.StringToJsonActivity177.Comment = @"";
            _flow.StringToJsonActivity177.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity177.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi2987 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1517 = new VTDObjectGetter(pi2987);
            VTDPropertyInfoBase pi2988 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1471 = new VTDObjectSetter(pi2988);
            binding_setter1471 = new StringFormaterDecorator(binding_setter1471,"{Step.OutputProperties.HTTPActivity114.ResponseBody}");
            bind_dir1471 = new BindDirection(_flow.HTTPActivity114,binding_getter1517,binding_setter1471,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity177.InDirections.Add(bind_dir1471);
            _flow.DbFetchData248.QueryString = @"update tb_global_table set classJid = '{Step.JsonContent.StringToJsonActivity177.data.Object[1].classJid}' where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询tb_global_table表中classJid值";
            VTDPropertyInfoBase pi2989 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='data'][1]/*[local-name(.)='Object'][{Array0}]/*[local-name(.)='classJid'][1]");
            VTDBaseGetter binding_getter1518 = new VTDJsonGetter(pi2989);
            binding_getter1518 = new XPathGetterDecorator(binding_getter1518,"{Array0}",1);
            VTDPropertyInfoBase pi2990 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1472 = new VTDObjectSetter(pi2990);
            binding_setter1472 = new StringFormaterDecorator(binding_setter1472,"{Step.JsonContent.StringToJsonActivity177.data.Object[1].classJid}");
            bind_dir1472 = new BindDirection(_flow.StringToJsonActivity177,binding_getter1518,binding_setter1472,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir1472);
            VTDPropertyInfoBase pi2991 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1519 = new VTDObjectGetter(pi2991);
            VTDPropertyInfoBase pi2992 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1473 = new VTDObjectSetter(pi2992);
            bind_dir1473 = new BindDirection(_flow.DbOpenConnection39,binding_getter1519,binding_setter1473,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir1473);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.DbFetchData116.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity114.ResponseBody}' where InterfaceName = '/jxt/class.php'";
            _flow.DbFetchData116.Timeout = (int)30;
            _flow.DbFetchData116.Comment = @"";
            _flow.DbFetchData116.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData116.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi2993 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1520 = new VTDObjectGetter(pi2993);
            VTDPropertyInfoBase pi2994 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1474 = new VTDObjectSetter(pi2994);
            binding_setter1474 = new StringFormaterDecorator(binding_setter1474,"{Step.OutputProperties.HTTPActivity114.ResponseBody}");
            bind_dir1474 = new BindDirection(_flow.HTTPActivity114,binding_getter1520,binding_setter1474,BindTargetType.ToInProperty);
            _flow.DbFetchData116.InDirections.Add(bind_dir1474);
            VTDPropertyInfoBase pi2995 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1521 = new VTDObjectGetter(pi2995);
            VTDPropertyInfoBase pi2996 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1475 = new VTDObjectSetter(pi2996);
            bind_dir1475 = new BindDirection(_flow.DbOpenConnection39,binding_getter1521,binding_setter1475,BindTargetType.ToInProperty);
            _flow.DbFetchData116.InDirections.Add(bind_dir1475);
            XmlDocument DbFetchData116_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData116_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData116_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData116.ExpectedOutputProperties = DbFetchData116_ExpectedOutputProperties_Document;
            this.DataCursorActivity267.Comment = @"";
            this.DataCursorActivity267.IconPath = @"";
            VTDPropertyInfoBase pi2997 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1522 = new VTDObjectGetter(pi2997);
            VTDPropertyInfoBase pi2998 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1476 = new VTDObjectSetter(pi2998);
            binding_setter1476 = new StringFormaterDecorator(binding_setter1476,"{Step.DataFetchActivity262.OutTable}");
            bind_dir1476 = new BindDirection(_flow.DataFetchActivity262,binding_getter1522,binding_setter1476,BindTargetType.ToInProperty);
            this.DataCursorActivity267.InDirections.Add(bind_dir1476);
            this.DataCursorActivity267_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity267_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity267_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity267_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity267_Policy.StartCondition.Value = "";
            this.DataCursorActivity267_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity267_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity267_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity267_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity267_Policy.EndCondition.Value = "";
            this.DataCursorActivity267_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity267_Policy.StepSize = 1;
            this.DataCursorActivity267_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity267.Policy = this.DataCursorActivity267_Policy;
            this.DataCursorActivity267.ReportStepData = false;
            _flow.Loop98.BeforeExecuteStepEvent += this.DataCursorActivity267.ResetCursor;
            _flow.Sequence261.Comment = @"";
            _flow.Sequence261.IconPath = @"";
            _flow.Sequence261.Name = @"序列261";
            _flow.Sequence261.Activities.Add (_flow.DbFetchData99);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity254);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData255);
            _flow.Sequence261.Activities.Add (_flow.CallQTPTest256);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData257);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity258);
            _flow.Sequence261.Activities.Add (_flow.HTTPActivity100);
            _flow.Sequence261.Activities.Add (_flow.StringToJsonActivity101);
            _flow.Sequence261.Activities.Add (_flow.ReplaceStringActivity259);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData102);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData103);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData104);
            _flow.Sequence261.Activities.Add (_flow.DbFetchData105);
            _flow.Sequence261.Activities.Add (_flow.IfElse106);
            _flow.DbFetchData99.QueryString = @"select xsid,xxcode,myJid,token from tb_getclassinfo_verification where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData99.Timeout = (int)30;
            _flow.DbFetchData99.Comment = @"";
            _flow.DbFetchData99.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData99.Name = @"查询tb_getclassinfo_verification表中数据";
            VTDPropertyInfoBase pi2999 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1523 = new VTDObjectGetter(pi2999);
            VTDPropertyInfoBase pi3000 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1477 = new VTDObjectSetter(pi3000);
            binding_setter1477 = new StringFormaterDecorator(binding_setter1477,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir1477 = new BindDirection(_flow.Loop98,binding_getter1523,binding_setter1477,BindTargetType.ToInProperty);
            _flow.DbFetchData99.InDirections.Add(bind_dir1477);
            VTDPropertyInfoBase pi3001 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1524 = new VTDObjectGetter(pi3001);
            VTDPropertyInfoBase pi3002 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1478 = new VTDObjectSetter(pi3002);
            bind_dir1478 = new BindDirection(_flow.DbOpenConnection39,binding_getter1524,binding_setter1478,BindTargetType.ToInProperty);
            _flow.DbFetchData99.InDirections.Add(bind_dir1478);
            XmlDocument DbFetchData99_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData99_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData99_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><xxcode /><myJid /><token /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData99.ExpectedOutputProperties = DbFetchData99_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi3003 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter1525 = new VTDXPathGetter(pi3003,XmlTypeCode.String);
            binding_getter1525 = new XPathGetterDecorator(binding_getter1525,"{Array0}",1);
            VTDPropertyInfoBase pi3004 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1479 = new VTDObjectSetter(pi3004);
            binding_setter1479 = new StringFormaterDecorator(binding_setter1479,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xsid}");
            bind_dir1479 = new BindDirection(_flow.DbFetchData99,binding_getter1525,binding_setter1479,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir1479);
            VTDPropertyInfoBase pi3005 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1526 = new VTDXPathGetter(pi3005,XmlTypeCode.String);
            binding_getter1526 = new XPathGetterDecorator(binding_getter1526,"{Array0}",1);
            VTDPropertyInfoBase pi3006 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1480 = new VTDObjectSetter(pi3006);
            binding_setter1480 = new StringFormaterDecorator(binding_setter1480,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir1480 = new BindDirection(_flow.DbFetchData250,binding_getter1526,binding_setter1480,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir1480);
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xxcode}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"2177000014";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData251.ResultTable.Row[1].schoolCode}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将schoolCode更新至最新值";
            VTDPropertyInfoBase pi3007 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xxcode'][1]");
            VTDBaseGetter binding_getter1527 = new VTDXPathGetter(pi3007,XmlTypeCode.String);
            binding_getter1527 = new XPathGetterDecorator(binding_getter1527,"{Array0}",1);
            VTDPropertyInfoBase pi3008 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1481 = new VTDObjectSetter(pi3008);
            binding_setter1481 = new StringFormaterDecorator(binding_setter1481,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].xxcode}");
            bind_dir1481 = new BindDirection(_flow.DbFetchData99,binding_getter1527,binding_setter1481,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir1481);
            VTDPropertyInfoBase pi3009 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='schoolCode'][1]");
            VTDBaseGetter binding_getter1528 = new VTDXPathGetter(pi3009,XmlTypeCode.String);
            binding_getter1528 = new XPathGetterDecorator(binding_getter1528,"{Array0}",1);
            VTDPropertyInfoBase pi3010 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1482 = new VTDObjectSetter(pi3010);
            binding_setter1482 = new StringFormaterDecorator(binding_setter1482,"{Step.OutputProperties.DbFetchData251.ResultTable.Row[1].schoolCode}");
            bind_dir1482 = new BindDirection(_flow.DbFetchData251,binding_getter1528,binding_setter1482,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir1482);
            _flow.ReplaceStringActivity254.SourceString = @"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].myJid}";
            _flow.ReplaceStringActivity254.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity254.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity254.SearchReplaceString[0].Key = @"77401169";
            _flow.ReplaceStringActivity254.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].LoginTeacherUsername}";
            _flow.ReplaceStringActivity254.CaseSensitive = true;
            _flow.ReplaceStringActivity254.Comment = @"";
            _flow.ReplaceStringActivity254.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity254.Name = @"将LoginTeacherUsername更新至最新值";
            VTDPropertyInfoBase pi3011 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter1529 = new VTDXPathGetter(pi3011,XmlTypeCode.String);
            binding_getter1529 = new XPathGetterDecorator(binding_getter1529,"{Array0}",1);
            VTDPropertyInfoBase pi3012 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1483 = new VTDObjectSetter(pi3012);
            binding_setter1483 = new StringFormaterDecorator(binding_setter1483,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].myJid}");
            bind_dir1483 = new BindDirection(_flow.DbFetchData99,binding_getter1529,binding_setter1483,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity254.InDirections.Add(bind_dir1483);
            VTDPropertyInfoBase pi3013 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='LoginTeacherUsername'][1]");
            VTDBaseGetter binding_getter1530 = new VTDXPathGetter(pi3013,XmlTypeCode.String);
            binding_getter1530 = new XPathGetterDecorator(binding_getter1530,"{Array0}",1);
            VTDPropertyInfoBase pi3014 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1484 = new VTDObjectSetter(pi3014);
            binding_setter1484 = new StringFormaterDecorator(binding_setter1484,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].LoginTeacherUsername}");
            bind_dir1484 = new BindDirection(_flow.DbFetchData252,binding_getter1530,binding_setter1484,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity254.InDirections.Add(bind_dir1484);
            _flow.DbFetchData255.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.ReplaceStringActivity254.Result}DeVawMFWs6' where TestCase = 1";
            _flow.DbFetchData255.Timeout = (int)30;
            _flow.DbFetchData255.Comment = @"";
            _flow.DbFetchData255.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData255.Name = @"将加密信息赋值到EncryptionStr字段中";
            VTDPropertyInfoBase pi3015 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1531 = new VTDObjectGetter(pi3015);
            VTDPropertyInfoBase pi3016 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1485 = new VTDObjectSetter(pi3016);
            binding_setter1485 = new StringFormaterDecorator(binding_setter1485,"{Step.OutputProperties.ReplaceStringActivity254.Result}");
            bind_dir1485 = new BindDirection(_flow.ReplaceStringActivity254,binding_getter1531,binding_setter1485,BindTargetType.ToInProperty);
            _flow.DbFetchData255.InDirections.Add(bind_dir1485);
            VTDPropertyInfoBase pi3017 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1532 = new VTDObjectGetter(pi3017);
            VTDPropertyInfoBase pi3018 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1486 = new VTDObjectSetter(pi3018);
            bind_dir1486 = new BindDirection(_flow.DbOpenConnection39,binding_getter1532,binding_setter1486,BindTargetType.ToInProperty);
            _flow.DbFetchData255.InDirections.Add(bind_dir1486);
            XmlDocument DbFetchData255_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData255_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData255_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData255.ExpectedOutputProperties = DbFetchData255_ExpectedOutputProperties_Document;
            _flow.CallQTPTest256.Comment = @"";
            _flow.CallQTPTest256.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest256.Name = @"Encryption.SHA1";
            _flow.CallQTPTest256.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ScriptPath}");
            _flow.CallQTPTest256.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ActionName}");
            _flow.CallQTPTest256.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.Description}");
            _flow.CallQTPTest256.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.IsActionSelected}");
            _flow.CallQTPTest256.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.ResultLocation}");
            _flow.CallQTPTest256.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest256.QCScriptPath}");
            _flow.DbFetchData257.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData257.Timeout = (int)30;
            _flow.DbFetchData257.Comment = @"";
            _flow.DbFetchData257.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData257.Name = @"获取加密后的字符串";
            VTDPropertyInfoBase pi3019 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1533 = new VTDObjectGetter(pi3019);
            VTDPropertyInfoBase pi3020 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1487 = new VTDObjectSetter(pi3020);
            bind_dir1487 = new BindDirection(_flow.DbOpenConnection39,binding_getter1533,binding_setter1487,BindTargetType.ToInProperty);
            _flow.DbFetchData257.InDirections.Add(bind_dir1487);
            XmlDocument DbFetchData257_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData257_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData257_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData257.ExpectedOutputProperties = DbFetchData257_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity258.SourceString = @"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity258.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity258.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity258.SearchReplaceString[0].Key = @"c8255e8536d1e44751f74febe483384537fc6206";
            _flow.ReplaceStringActivity258.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData257.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity258.CaseSensitive = true;
            _flow.ReplaceStringActivity258.Comment = @"";
            _flow.ReplaceStringActivity258.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity258.Name = @"将token更新至最新";
            VTDPropertyInfoBase pi3021 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter1534 = new VTDXPathGetter(pi3021,XmlTypeCode.String);
            binding_getter1534 = new XPathGetterDecorator(binding_getter1534,"{Array0}",1);
            VTDPropertyInfoBase pi3022 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1488 = new VTDObjectSetter(pi3022);
            binding_setter1488 = new StringFormaterDecorator(binding_setter1488,"{Step.OutputProperties.DbFetchData99.ResultTable.Row[1].token}");
            bind_dir1488 = new BindDirection(_flow.DbFetchData99,binding_getter1534,binding_setter1488,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir1488);
            VTDPropertyInfoBase pi3023 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1535 = new VTDXPathGetter(pi3023,XmlTypeCode.String);
            binding_getter1535 = new XPathGetterDecorator(binding_getter1535,"{Array0}",1);
            VTDPropertyInfoBase pi3024 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1489 = new VTDObjectSetter(pi3024);
            binding_setter1489 = new StringFormaterDecorator(binding_setter1489,"{Step.OutputProperties.DbFetchData257.ResultTable.Row[1].EncryptionResult}");
            bind_dir1489 = new BindDirection(_flow.DbFetchData257,binding_getter1535,binding_setter1489,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity258.InDirections.Add(bind_dir1489);
            _flow.HTTPActivity100.TextBody = @"myJid={Step.OutputProperties.ReplaceStringActivity254.Result}&xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&token={Step.OutputProperties.ReplaceStringActivity258.Result}&xxcode={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity100.TextXmlBody = @"";
            _flow.HTTPActivity100.FileBody = @"";
            _flow.HTTPActivity100.PostBody = @"";
            _flow.HTTPActivity100.Url = @"{DataSource.tb_global_table.IQHost}{DataSource.tb_global_table.getClassInfo}";
            _flow.HTTPActivity100.HttpMethod = @"POST";
            _flow.HTTPActivity100.HttpVersion = @"1.1";
            _flow.HTTPActivity100.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity100.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity100.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity100.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity100.Comment = @"";
            _flow.HTTPActivity100.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity100.RequestBodyType = @"Text";
            _flow.HTTPActivity100.ResponseType = @"Text";
            _flow.HTTPActivity100.Name = @"调用/jxt/class.php";
            _flow.HTTPActivity100.Proxy.Server = @"";
            _flow.HTTPActivity100.Proxy.Username = @"";
            _flow.HTTPActivity100.Proxy.Password = @"";
            _flow.HTTPActivity100.Authentication.Username = @"";
            _flow.HTTPActivity100.Authentication.Password = @"";
            _flow.HTTPActivity100.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity100.Timeout = (int)100000;
            _flow.HTTPActivity100.ClientCertificate.Password = @"";
            _flow.HTTPActivity100.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity100.UseClientCertificate = false;
            _flow.HTTPActivity100.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity100.AllowRedirections = true;
            _flow.HTTPActivity100.ReuseCookies = false;
            _flow.HTTPActivity100.ExpectServerError = false;
            XmlDocument HTTPActivity100_XMLBody_Document = new XmlDocument();
            HTTPActivity100_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity100_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity100.XMLBody = HTTPActivity100_XMLBody_Document;
            XmlDocument HTTPActivity100_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity100_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity100_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity100.RequestMultipartInfoXml = HTTPActivity100_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity100.Multipart=false;
            VTDPropertyInfoBase pi3025 = new VTDPropertyInfoBase("IQHost");
            VTDBaseGetter binding_getter1536 = new VTDObjectGetter(pi3025);
            VTDPropertyInfoBase pi3026 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1490 = new VTDObjectSetter(pi3026);
            binding_setter1490 = new StringFormaterDecorator(binding_setter1490,"{DataSource.tb_global_table.IQHost}");
            bind_dir1490 = new BindDirection(this.DataCursorActivity267,binding_getter1536,binding_setter1490,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir1490);
            VTDPropertyInfoBase pi3027 = new VTDPropertyInfoBase("getClassInfo");
            VTDBaseGetter binding_getter1537 = new VTDObjectGetter(pi3027);
            VTDPropertyInfoBase pi3028 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1491 = new VTDObjectSetter(pi3028);
            binding_setter1491 = new StringFormaterDecorator(binding_setter1491,"{DataSource.tb_global_table.getClassInfo}");
            bind_dir1491 = new BindDirection(this.DataCursorActivity267,binding_getter1537,binding_setter1491,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir1491);
            VTDPropertyInfoBase pi3029 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1538 = new VTDObjectGetter(pi3029);
            VTDPropertyInfoBase pi3030 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1492 = new VTDObjectSetter(pi3030);
            binding_setter1492 = new StringFormaterDecorator(binding_setter1492,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1492 = new BindDirection(this.DataCursorActivity267,binding_getter1538,binding_setter1492,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir1492);
            VTDPropertyInfoBase pi3031 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1539 = new VTDObjectGetter(pi3031);
            VTDPropertyInfoBase pi3032 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1493 = new VTDObjectSetter(pi3032);
            binding_setter1493 = new StringFormaterDecorator(binding_setter1493,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1493 = new BindDirection(this.DataCursorActivity267,binding_getter1539,binding_setter1493,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir1493);
            VTDPropertyInfoBase pi3033 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1540 = new VTDObjectGetter(pi3033);
            VTDPropertyInfoBase pi3034 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1494 = new VTDObjectSetter(pi3034);
            binding_setter1494 = new StringFormaterDecorator(binding_setter1494,"{Step.OutputProperties.ReplaceStringActivity254.Result}");
            bind_dir1494 = new BindDirection(_flow.ReplaceStringActivity254,binding_getter1540,binding_setter1494,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir1494);
            VTDPropertyInfoBase pi3035 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1541 = new VTDObjectGetter(pi3035);
            VTDPropertyInfoBase pi3036 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1495 = new VTDObjectSetter(pi3036);
            binding_setter1495 = new StringFormaterDecorator(binding_setter1495,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir1495 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter1541,binding_setter1495,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir1495);
            VTDPropertyInfoBase pi3037 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1542 = new VTDObjectGetter(pi3037);
            VTDPropertyInfoBase pi3038 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1496 = new VTDObjectSetter(pi3038);
            binding_setter1496 = new StringFormaterDecorator(binding_setter1496,"{Step.OutputProperties.ReplaceStringActivity258.Result}");
            bind_dir1496 = new BindDirection(_flow.ReplaceStringActivity258,binding_getter1542,binding_setter1496,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir1496);
            VTDPropertyInfoBase pi3039 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1543 = new VTDObjectGetter(pi3039);
            VTDPropertyInfoBase pi3040 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1497 = new VTDObjectSetter(pi3040);
            binding_setter1497 = new StringFormaterDecorator(binding_setter1497,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir1497 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter1543,binding_setter1497,BindTargetType.ToInProperty);
            _flow.HTTPActivity100.InDirections.Add(bind_dir1497);
            XmlDocument HTTPActivity100_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity100_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity100_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity100.ExpectedResponseXmlBody = HTTPActivity100_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity100_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity100_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity100_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity100.ExpectedResponseJsonBody = HTTPActivity100_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity100_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity100_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity100_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity100.ExpectedOutputProperties = HTTPActivity100_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity101.InputString = @"{Step.OutputProperties.HTTPActivity100.ResponseBody}";
            _flow.StringToJsonActivity101.Comment = @"";
            _flow.StringToJsonActivity101.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity101.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi3041 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1544 = new VTDObjectGetter(pi3041);
            VTDPropertyInfoBase pi3042 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1498 = new VTDObjectSetter(pi3042);
            binding_setter1498 = new StringFormaterDecorator(binding_setter1498,"{Step.OutputProperties.HTTPActivity100.ResponseBody}");
            bind_dir1498 = new BindDirection(_flow.HTTPActivity100,binding_getter1544,binding_setter1498,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity101.InDirections.Add(bind_dir1498);
            _flow.ReplaceStringActivity259.SourceString = @"{Step.OutputProperties.HTTPActivity100.ResponseBody}";
            _flow.ReplaceStringActivity259.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity259.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity259.SearchReplaceString[0].Key = @"'";
            _flow.ReplaceStringActivity259.SearchReplaceString[0].Value = @"\'";
            _flow.ReplaceStringActivity259.CaseSensitive = true;
            _flow.ReplaceStringActivity259.Comment = @"";
            _flow.ReplaceStringActivity259.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity259.Name = @"Response替换'";
            VTDPropertyInfoBase pi3043 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1545 = new VTDObjectGetter(pi3043);
            VTDPropertyInfoBase pi3044 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1499 = new VTDObjectSetter(pi3044);
            binding_setter1499 = new StringFormaterDecorator(binding_setter1499,"{Step.OutputProperties.HTTPActivity100.ResponseBody}");
            bind_dir1499 = new BindDirection(_flow.HTTPActivity100,binding_getter1545,binding_setter1499,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity259.InDirections.Add(bind_dir1499);
            _flow.DbFetchData102.QueryString = @"update tb_getclassinfo_verification set InterfaceResponse = '{Step.OutputProperties.ReplaceStringActivity259.Result}' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData102.Timeout = (int)30;
            _flow.DbFetchData102.Comment = @"";
            _flow.DbFetchData102.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData102.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi3045 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1546 = new VTDObjectGetter(pi3045);
            VTDPropertyInfoBase pi3046 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1500 = new VTDObjectSetter(pi3046);
            binding_setter1500 = new StringFormaterDecorator(binding_setter1500,"{Step.OutputProperties.ReplaceStringActivity259.Result}");
            bind_dir1500 = new BindDirection(_flow.ReplaceStringActivity259,binding_getter1546,binding_setter1500,BindTargetType.ToInProperty);
            _flow.DbFetchData102.InDirections.Add(bind_dir1500);
            VTDPropertyInfoBase pi3047 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1547 = new VTDObjectGetter(pi3047);
            VTDPropertyInfoBase pi3048 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1501 = new VTDObjectSetter(pi3048);
            binding_setter1501 = new StringFormaterDecorator(binding_setter1501,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir1501 = new BindDirection(_flow.Loop98,binding_getter1547,binding_setter1501,BindTargetType.ToInProperty);
            _flow.DbFetchData102.InDirections.Add(bind_dir1501);
            VTDPropertyInfoBase pi3049 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1548 = new VTDObjectGetter(pi3049);
            VTDPropertyInfoBase pi3050 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1502 = new VTDObjectSetter(pi3050);
            bind_dir1502 = new BindDirection(_flow.DbOpenConnection39,binding_getter1548,binding_setter1502,BindTargetType.ToInProperty);
            _flow.DbFetchData102.InDirections.Add(bind_dir1502);
            XmlDocument DbFetchData102_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData102_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData102_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData102.ExpectedOutputProperties = DbFetchData102_ExpectedOutputProperties_Document;
            _flow.DbFetchData103.QueryString = @"update tb_getclassinfo_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity101.errorCode}' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData103.Timeout = (int)30;
            _flow.DbFetchData103.Comment = @"";
            _flow.DbFetchData103.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData103.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi3051 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1549 = new VTDJsonGetter(pi3051);
            VTDPropertyInfoBase pi3052 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1503 = new VTDObjectSetter(pi3052);
            binding_setter1503 = new StringFormaterDecorator(binding_setter1503,"{Step.JsonContent.StringToJsonActivity101.errorCode}");
            bind_dir1503 = new BindDirection(_flow.StringToJsonActivity101,binding_getter1549,binding_setter1503,BindTargetType.ToInProperty);
            _flow.DbFetchData103.InDirections.Add(bind_dir1503);
            VTDPropertyInfoBase pi3053 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1550 = new VTDObjectGetter(pi3053);
            VTDPropertyInfoBase pi3054 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1504 = new VTDObjectSetter(pi3054);
            binding_setter1504 = new StringFormaterDecorator(binding_setter1504,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir1504 = new BindDirection(_flow.Loop98,binding_getter1550,binding_setter1504,BindTargetType.ToInProperty);
            _flow.DbFetchData103.InDirections.Add(bind_dir1504);
            VTDPropertyInfoBase pi3055 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1551 = new VTDObjectGetter(pi3055);
            VTDPropertyInfoBase pi3056 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1505 = new VTDObjectSetter(pi3056);
            bind_dir1505 = new BindDirection(_flow.DbOpenConnection39,binding_getter1551,binding_setter1505,BindTargetType.ToInProperty);
            _flow.DbFetchData103.InDirections.Add(bind_dir1505);
            XmlDocument DbFetchData103_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData103_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData103_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData103.ExpectedOutputProperties = DbFetchData103_ExpectedOutputProperties_Document;
            _flow.DbFetchData104.QueryString = @"select OutputValue from tb_getclassinfo_verification where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData104.Timeout = (int)30;
            _flow.DbFetchData104.Comment = @"";
            _flow.DbFetchData104.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData104.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi3057 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1552 = new VTDObjectGetter(pi3057);
            VTDPropertyInfoBase pi3058 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1506 = new VTDObjectSetter(pi3058);
            binding_setter1506 = new StringFormaterDecorator(binding_setter1506,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir1506 = new BindDirection(_flow.Loop98,binding_getter1552,binding_setter1506,BindTargetType.ToInProperty);
            _flow.DbFetchData104.InDirections.Add(bind_dir1506);
            VTDPropertyInfoBase pi3059 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1553 = new VTDObjectGetter(pi3059);
            VTDPropertyInfoBase pi3060 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1507 = new VTDObjectSetter(pi3060);
            bind_dir1507 = new BindDirection(_flow.DbOpenConnection39,binding_getter1553,binding_setter1507,BindTargetType.ToInProperty);
            _flow.DbFetchData104.InDirections.Add(bind_dir1507);
            XmlDocument DbFetchData104_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData104_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData104_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData104.ExpectedOutputProperties = DbFetchData104_ExpectedOutputProperties_Document;
            _flow.DbFetchData105.QueryString = @"select ExpectationValue from tb_getclassinfo_verification where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData105.Timeout = (int)30;
            _flow.DbFetchData105.Comment = @"";
            _flow.DbFetchData105.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData105.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi3061 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1554 = new VTDObjectGetter(pi3061);
            VTDPropertyInfoBase pi3062 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1508 = new VTDObjectSetter(pi3062);
            binding_setter1508 = new StringFormaterDecorator(binding_setter1508,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir1508 = new BindDirection(_flow.Loop98,binding_getter1554,binding_setter1508,BindTargetType.ToInProperty);
            _flow.DbFetchData105.InDirections.Add(bind_dir1508);
            VTDPropertyInfoBase pi3063 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1555 = new VTDObjectGetter(pi3063);
            VTDPropertyInfoBase pi3064 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1509 = new VTDObjectSetter(pi3064);
            bind_dir1509 = new BindDirection(_flow.DbOpenConnection39,binding_getter1555,binding_setter1509,BindTargetType.ToInProperty);
            _flow.DbFetchData105.InDirections.Add(bind_dir1509);
            XmlDocument DbFetchData105_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData105_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData105_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData105.ExpectedOutputProperties = DbFetchData105_ExpectedOutputProperties_Document;
            _flow.IfElse106.ConditionAsString = @"{Step.OutputProperties.DbFetchData104.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData105.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse106.Comment = @"";
            _flow.IfElse106.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse106.Name = @"填写Result";
            _flow.IfElse106.Activities.Add (_flow.IfElseBranch107);
            _flow.IfElse106.Activities.Add (_flow.IfElseBranch108);
            _flow.IfElseBranch107.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi3065 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1556 = new VTDXPathGetter(pi3065,XmlTypeCode.String);
            binding_getter1556 = new XPathGetterDecorator(binding_getter1556,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData104.GetParam(binding_getter1556),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi3066 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1557 = new VTDXPathGetter(pi3066,XmlTypeCode.String);
            binding_getter1557 = new XPathGetterDecorator(binding_getter1557,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData105.GetParam(binding_getter1557),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch107.Comment = @"";
            _flow.IfElseBranch107.IconPath = @"";
            _flow.IfElseBranch107.Name = @"是";
            _flow.IfElseBranch107.Activities.Add (_flow.DbFetchData109);
            _flow.IfElseBranch108.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch108.Comment = @"";
            _flow.IfElseBranch108.IconPath = @"";
            _flow.IfElseBranch108.Name = @"否";
            _flow.IfElseBranch108.Activities.Add (_flow.DbFetchData110);
            _flow.DbFetchData109.QueryString = @"update tb_getclassinfo_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData109.Timeout = (int)30;
            _flow.DbFetchData109.Comment = @"";
            _flow.DbFetchData109.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData109.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi3067 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1558 = new VTDObjectGetter(pi3067);
            VTDPropertyInfoBase pi3068 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1510 = new VTDObjectSetter(pi3068);
            binding_setter1510 = new StringFormaterDecorator(binding_setter1510,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir1510 = new BindDirection(_flow.Loop98,binding_getter1558,binding_setter1510,BindTargetType.ToInProperty);
            _flow.DbFetchData109.InDirections.Add(bind_dir1510);
            VTDPropertyInfoBase pi3069 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1559 = new VTDObjectGetter(pi3069);
            VTDPropertyInfoBase pi3070 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1511 = new VTDObjectSetter(pi3070);
            bind_dir1511 = new BindDirection(_flow.DbOpenConnection39,binding_getter1559,binding_setter1511,BindTargetType.ToInProperty);
            _flow.DbFetchData109.InDirections.Add(bind_dir1511);
            XmlDocument DbFetchData109_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData109_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData109_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData109.ExpectedOutputProperties = DbFetchData109_ExpectedOutputProperties_Document;
            _flow.DbFetchData110.QueryString = @"update tb_getclassinfo_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop98.CurrentIterationNumber}";
            _flow.DbFetchData110.Timeout = (int)30;
            _flow.DbFetchData110.Comment = @"";
            _flow.DbFetchData110.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData110.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi3071 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1560 = new VTDObjectGetter(pi3071);
            VTDPropertyInfoBase pi3072 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1512 = new VTDObjectSetter(pi3072);
            binding_setter1512 = new StringFormaterDecorator(binding_setter1512,"{Step.OutputProperties.Loop98.CurrentIterationNumber}");
            bind_dir1512 = new BindDirection(_flow.Loop98,binding_getter1560,binding_setter1512,BindTargetType.ToInProperty);
            _flow.DbFetchData110.InDirections.Add(bind_dir1512);
            VTDPropertyInfoBase pi3073 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1561 = new VTDObjectGetter(pi3073);
            VTDPropertyInfoBase pi3074 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1513 = new VTDObjectSetter(pi3074);
            bind_dir1513 = new BindDirection(_flow.DbOpenConnection39,binding_getter1561,binding_setter1513,BindTargetType.ToInProperty);
            _flow.DbFetchData110.InDirections.Add(bind_dir1513);
            XmlDocument DbFetchData110_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData110_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData110_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData110.ExpectedOutputProperties = DbFetchData110_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    