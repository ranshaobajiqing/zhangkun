/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getRoomMember_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir438 = null;
        public BindDirection bind_dir439 = null;
        public BindDirection bind_dir440 = null;
        public BindDirection bind_dir441 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity265 = null;
        public BindDirection bind_dir442 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity265_Policy = null;
        public BindDirection bind_dir443 = null;
        public BindDirection bind_dir444 = null;
        public BindDirection bind_dir445 = null;
        public BindDirection bind_dir446 = null;
        public BindDirection bind_dir447 = null;
        public BindDirection bind_dir448 = null;
        public BindDirection bind_dir449 = null;
        public BindDirection bind_dir450 = null;
        public BindDirection bind_dir451 = null;
        public BindDirection bind_dir452 = null;
        public BindDirection bind_dir453 = null;
        public BindDirection bind_dir454 = null;
        public BindDirection bind_dir455 = null;
        public BindDirection bind_dir456 = null;
        public BindDirection bind_dir457 = null;
        public BindDirection bind_dir458 = null;
        public BindDirection bind_dir459 = null;
        public BindDirection bind_dir460 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity266 = null;
        public BindDirection bind_dir461 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity266_Policy = null;
        public BindDirection bind_dir462 = null;
        public BindDirection bind_dir463 = null;
        public BindDirection bind_dir464 = null;
        public BindDirection bind_dir465 = null;
        public BindDirection bind_dir466 = null;
        public BindDirection bind_dir467 = null;
        public BindDirection bind_dir468 = null;
        public BindDirection bind_dir469 = null;
        public BindDirection bind_dir470 = null;
        public BindDirection bind_dir471 = null;
        public BindDirection bind_dir472 = null;
        public BindDirection bind_dir473 = null;
        public BindDirection bind_dir474 = null;
        public BindDirection bind_dir475 = null;
        public BindDirection bind_dir476 = null;
        public BindDirection bind_dir477 = null;
        public BindDirection bind_dir478 = null;
        public BindDirection bind_dir479 = null;
        public BindDirection bind_dir480 = null;
        public BindDirection bind_dir481 = null;
        public BindDirection bind_dir482 = null;
        public BindDirection bind_dir483 = null;
        public BindDirection bind_dir484 = null;
        public BindDirection bind_dir485 = null;
        public BindDirection bind_dir486 = null;
        public BindDirection bind_dir487 = null;
        public BindDirection bind_dir488 = null;
        public BindDirection bind_dir489 = null;
        public BindDirection bind_dir490 = null;
        public BindDirection bind_dir491 = null;
        public BindDirection bind_dir492 = null;
        public BindDirection bind_dir493 = null;
        public BindDirection bind_dir494 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity261 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity261");
            _flow.DataFetchActivity258 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity258");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity260 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity260");
            _flow.DataExporterActivity263 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity263");
            _flow.DataExporterCloseActivity264 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity264");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity259 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity259");
            _flow.DataDisconnectActivity262 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity262");
            this.DataCursorActivity265 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity265");
            this.DataCursorActivity265_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence256 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence256");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData254 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData254");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity266 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity266");
            this.DataCursorActivity266_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence257 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence257");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity261.Comment = @"";
            _flow.DataFetchActivity261.IconPath = @"";
            _flow.DataFetchActivity261.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity261.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity261_QueryParameters_Document = new XmlDocument();
            DataFetchActivity261_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity261Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity261_QueryParameters_Document.LoadXml(xmlDataFetchActivity261Params);
            _flow.DataFetchActivity261.QueryParameters = DataFetchActivity261_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity261);
            this.Activities.Add (_flow.DataFetchActivity261);
            _flow.DataFetchActivity258.Comment = @"";
            _flow.DataFetchActivity258.IconPath = @"";
            _flow.DataFetchActivity258.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity258.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity258_QueryParameters_Document = new XmlDocument();
            DataFetchActivity258_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity258Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity258_QueryParameters_Document.LoadXml(xmlDataFetchActivity258Params);
            _flow.DataFetchActivity258.QueryParameters = DataFetchActivity258_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity258);
            this.Activities.Add (_flow.DataFetchActivity258);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity265);
            _flow.Loop2.Activities.Add (_flow.Sequence256);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity260.Comment = @"";
            _flow.DataExporterActivity260.IconPath = @"";
            VTDPropertyInfoBase pi891 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter454 = new VTDObjectGetter(pi891);
            VTDPropertyInfoBase pi892 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter438 = new VTDObjectSetter(pi892);
            binding_setter438 = new StringFormaterDecorator(binding_setter438,"{Step.DataFetchActivity258.OutTable}");
            bind_dir438 = new BindDirection(_flow.DataFetchActivity258,binding_getter454,binding_setter438,BindTargetType.ToInProperty);
            _flow.DataExporterActivity260.InDirections.Add(bind_dir438);
            this.Activities.Add (_flow.DataExporterActivity260);
            _flow.DataExporterActivity263.Comment = @"";
            _flow.DataExporterActivity263.IconPath = @"";
            VTDPropertyInfoBase pi893 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter455 = new VTDObjectGetter(pi893);
            VTDPropertyInfoBase pi894 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter439 = new VTDObjectSetter(pi894);
            binding_setter439 = new StringFormaterDecorator(binding_setter439,"{Step.DataFetchActivity261.OutTable}");
            bind_dir439 = new BindDirection(_flow.DataFetchActivity261,binding_getter455,binding_setter439,BindTargetType.ToInProperty);
            _flow.DataExporterActivity263.InDirections.Add(bind_dir439);
            this.Activities.Add (_flow.DataExporterActivity263);
            _flow.DataExporterCloseActivity264.Comment = @"";
            _flow.DataExporterCloseActivity264.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity264);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity259.Comment = @"";
            _flow.DataDisconnectActivity259.IconPath = @"";
            VTDPropertyInfoBase pi895 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter456 = new VTDObjectGetter(pi895);
            VTDPropertyInfoBase pi896 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter440 = new VTDObjectSetter(pi896);
            binding_setter440 = new StringFormaterDecorator(binding_setter440,"{Step.DataFetchActivity258.OutTable}");
            bind_dir440 = new BindDirection(_flow.DataFetchActivity258,binding_getter456,binding_setter440,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity259.InDirections.Add(bind_dir440);
            this.Activities.Add (_flow.DataDisconnectActivity259);
            _flow.DataDisconnectActivity262.Comment = @"";
            _flow.DataDisconnectActivity262.IconPath = @"";
            VTDPropertyInfoBase pi897 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter457 = new VTDObjectGetter(pi897);
            VTDPropertyInfoBase pi898 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter441 = new VTDObjectSetter(pi898);
            binding_setter441 = new StringFormaterDecorator(binding_setter441,"{Step.DataFetchActivity261.OutTable}");
            bind_dir441 = new BindDirection(_flow.DataFetchActivity261,binding_getter457,binding_setter441,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity262.InDirections.Add(bind_dir441);
            this.Activities.Add (_flow.DataDisconnectActivity262);
            this.DataCursorActivity265.Comment = @"";
            this.DataCursorActivity265.IconPath = @"";
            VTDPropertyInfoBase pi899 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter458 = new VTDObjectGetter(pi899);
            VTDPropertyInfoBase pi900 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter442 = new VTDObjectSetter(pi900);
            binding_setter442 = new StringFormaterDecorator(binding_setter442,"{Step.DataFetchActivity258.OutTable}");
            bind_dir442 = new BindDirection(_flow.DataFetchActivity258,binding_getter458,binding_setter442,BindTargetType.ToInProperty);
            this.DataCursorActivity265.InDirections.Add(bind_dir442);
            this.DataCursorActivity265_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity265_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.StartCondition.Value = "";
            this.DataCursorActivity265_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity265_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.EndCondition.Value = "";
            this.DataCursorActivity265_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity265_Policy.StepSize = 1;
            this.DataCursorActivity265_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity265.Policy = this.DataCursorActivity265_Policy;
            this.DataCursorActivity265.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity265.ResetCursor;
            _flow.Sequence256.Comment = @"";
            _flow.Sequence256.IconPath = @"";
            _flow.Sequence256.Name = @"序列256";
            _flow.Sequence256.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData254);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence256.Activities.Add (_flow.Loop56);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence256.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence256.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getRoomMember_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取tb_getRoomMember_verification表有效行数";
            VTDPropertyInfoBase pi901 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter459 = new VTDObjectGetter(pi901);
            VTDPropertyInfoBase pi902 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter443 = new VTDObjectSetter(pi902);
            bind_dir443 = new BindDirection(_flow.DbOpenConnection39,binding_getter459,binding_setter443,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir443);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData254.QueryString = @"select groupJid from tb_global_table where TestCase = 1";
            _flow.DbFetchData254.Timeout = (int)30;
            _flow.DbFetchData254.Comment = @"";
            _flow.DbFetchData254.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData254.Name = @"获取全局表中groupJid";
            VTDPropertyInfoBase pi903 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter460 = new VTDObjectGetter(pi903);
            VTDPropertyInfoBase pi904 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter444 = new VTDObjectSetter(pi904);
            bind_dir444 = new BindDirection(_flow.DbOpenConnection39,binding_getter460,binding_setter444,BindTargetType.ToInProperty);
            _flow.DbFetchData254.InDirections.Add(bind_dir444);
            XmlDocument DbFetchData254_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData254_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData254_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><groupJid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData254.ExpectedOutputProperties = DbFetchData254_ExpectedOutputProperties_Document;
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中xsid";
            VTDPropertyInfoBase pi905 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter461 = new VTDObjectGetter(pi905);
            VTDPropertyInfoBase pi906 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter445 = new VTDObjectSetter(pi906);
            bind_dir445 = new BindDirection(_flow.DbOpenConnection39,binding_getter461,binding_setter445,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir445);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop56.NumberOfIterations = (int)0;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getCard_verification中的测试用例";
            VTDPropertyInfoBase pi907 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter462 = new VTDXPathGetter(pi907,XmlTypeCode.Long);
            binding_getter462 = new XPathGetterDecorator(binding_getter462,"{Array0}",1);
            VTDPropertyInfoBase pi908 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter446 = new VTDObjectSetter(pi908);
            bind_dir446 = new BindDirection(_flow.DbFetchData58,binding_getter462,binding_setter446,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir446);
            _flow.Loop56.Activities.Add (this.DataCursorActivity266);
            _flow.Loop56.Activities.Add (_flow.Sequence257);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com{Step.OutputProperties.DbFetchData254.ResultTable.Row[1].groupJid}' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/iq/getRoomMember.php接口token实行加密";
            VTDPropertyInfoBase pi909 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter463 = new VTDObjectGetter(pi909);
            VTDPropertyInfoBase pi910 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter447 = new VTDObjectSetter(pi910);
            binding_setter447 = new StringFormaterDecorator(binding_setter447,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir447 = new BindDirection(this.DataCursorActivity265,binding_getter463,binding_setter447,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir447);
            VTDPropertyInfoBase pi911 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter464 = new VTDXPathGetter(pi911,XmlTypeCode.String);
            binding_getter464 = new XPathGetterDecorator(binding_getter464,"{Array0}",1);
            VTDPropertyInfoBase pi912 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter448 = new VTDObjectSetter(pi912);
            binding_setter448 = new StringFormaterDecorator(binding_setter448,"{Step.OutputProperties.DbFetchData254.ResultTable.Row[1].groupJid}");
            bind_dir448 = new BindDirection(_flow.DbFetchData254,binding_getter464,binding_setter448,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir448);
            VTDPropertyInfoBase pi913 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter465 = new VTDObjectGetter(pi913);
            VTDPropertyInfoBase pi914 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter449 = new VTDObjectSetter(pi914);
            bind_dir449 = new BindDirection(_flow.DbOpenConnection39,binding_getter465,binding_setter449,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir449);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi915 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter466 = new VTDObjectGetter(pi915);
            VTDPropertyInfoBase pi916 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter450 = new VTDObjectSetter(pi916);
            bind_dir450 = new BindDirection(_flow.DbOpenConnection39,binding_getter466,binding_setter450,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir450);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}&myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&roomJid={Step.OutputProperties.DbFetchData254.ResultTable.Row[1].groupJid}&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getRoomMember}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/iq/getRoomMember.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi917 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter467 = new VTDObjectGetter(pi917);
            VTDPropertyInfoBase pi918 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter451 = new VTDObjectSetter(pi918);
            binding_setter451 = new StringFormaterDecorator(binding_setter451,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir451 = new BindDirection(this.DataCursorActivity265,binding_getter467,binding_setter451,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir451);
            VTDPropertyInfoBase pi919 = new VTDPropertyInfoBase("getRoomMember");
            VTDBaseGetter binding_getter468 = new VTDObjectGetter(pi919);
            VTDPropertyInfoBase pi920 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter452 = new VTDObjectSetter(pi920);
            binding_setter452 = new StringFormaterDecorator(binding_setter452,"{DataSource.tb_global_table.getRoomMember}");
            bind_dir452 = new BindDirection(this.DataCursorActivity265,binding_getter468,binding_setter452,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir452);
            VTDPropertyInfoBase pi921 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter469 = new VTDObjectGetter(pi921);
            VTDPropertyInfoBase pi922 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter453 = new VTDObjectSetter(pi922);
            binding_setter453 = new StringFormaterDecorator(binding_setter453,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir453 = new BindDirection(this.DataCursorActivity265,binding_getter469,binding_setter453,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir453);
            VTDPropertyInfoBase pi923 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter470 = new VTDObjectGetter(pi923);
            VTDPropertyInfoBase pi924 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter454 = new VTDObjectSetter(pi924);
            binding_setter454 = new StringFormaterDecorator(binding_setter454,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir454 = new BindDirection(this.DataCursorActivity265,binding_getter470,binding_setter454,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir454);
            VTDPropertyInfoBase pi925 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter471 = new VTDXPathGetter(pi925,XmlTypeCode.String);
            binding_getter471 = new XPathGetterDecorator(binding_getter471,"{Array0}",1);
            VTDPropertyInfoBase pi926 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter455 = new VTDObjectSetter(pi926);
            binding_setter455 = new StringFormaterDecorator(binding_setter455,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir455 = new BindDirection(_flow.DbFetchData248,binding_getter471,binding_setter455,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir455);
            VTDPropertyInfoBase pi927 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter472 = new VTDObjectGetter(pi927);
            VTDPropertyInfoBase pi928 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter456 = new VTDObjectSetter(pi928);
            binding_setter456 = new StringFormaterDecorator(binding_setter456,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir456 = new BindDirection(this.DataCursorActivity265,binding_getter472,binding_setter456,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir456);
            VTDPropertyInfoBase pi929 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter473 = new VTDXPathGetter(pi929,XmlTypeCode.String);
            binding_getter473 = new XPathGetterDecorator(binding_getter473,"{Array0}",1);
            VTDPropertyInfoBase pi930 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter457 = new VTDObjectSetter(pi930);
            binding_setter457 = new StringFormaterDecorator(binding_setter457,"{Step.OutputProperties.DbFetchData254.ResultTable.Row[1].groupJid}");
            bind_dir457 = new BindDirection(_flow.DbFetchData254,binding_getter473,binding_setter457,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir457);
            VTDPropertyInfoBase pi931 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter474 = new VTDXPathGetter(pi931,XmlTypeCode.String);
            binding_getter474 = new XPathGetterDecorator(binding_getter474,"{Array0}",1);
            VTDPropertyInfoBase pi932 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter458 = new VTDObjectSetter(pi932);
            binding_setter458 = new StringFormaterDecorator(binding_setter458,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir458 = new BindDirection(_flow.DbFetchData76,binding_getter474,binding_setter458,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir458);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/getRoomMember.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi933 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter475 = new VTDObjectGetter(pi933);
            VTDPropertyInfoBase pi934 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter459 = new VTDObjectSetter(pi934);
            binding_setter459 = new StringFormaterDecorator(binding_setter459,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir459 = new BindDirection(_flow.HTTPActivity73,binding_getter475,binding_setter459,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir459);
            VTDPropertyInfoBase pi935 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter476 = new VTDObjectGetter(pi935);
            VTDPropertyInfoBase pi936 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter460 = new VTDObjectSetter(pi936);
            bind_dir460 = new BindDirection(_flow.DbOpenConnection39,binding_getter476,binding_setter460,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir460);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity266.Comment = @"";
            this.DataCursorActivity266.IconPath = @"";
            VTDPropertyInfoBase pi937 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter477 = new VTDObjectGetter(pi937);
            VTDPropertyInfoBase pi938 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter461 = new VTDObjectSetter(pi938);
            binding_setter461 = new StringFormaterDecorator(binding_setter461,"{Step.DataFetchActivity258.OutTable}");
            bind_dir461 = new BindDirection(_flow.DataFetchActivity258,binding_getter477,binding_setter461,BindTargetType.ToInProperty);
            this.DataCursorActivity266.InDirections.Add(bind_dir461);
            this.DataCursorActivity266_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity266_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.StartCondition.Value = "";
            this.DataCursorActivity266_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity266_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity266_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity266_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity266_Policy.EndCondition.Value = "";
            this.DataCursorActivity266_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity266_Policy.StepSize = 1;
            this.DataCursorActivity266_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity266.Policy = this.DataCursorActivity266_Policy;
            this.DataCursorActivity266.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity266.ResetCursor;
            _flow.Sequence257.Comment = @"";
            _flow.Sequence257.IconPath = @"";
            _flow.Sequence257.Name = @"序列257";
            _flow.Sequence257.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence257.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence257.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence257.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence257.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence257.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence257.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence257.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,myJid,roomJid,token from tb_getRoomMember_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getRoomMember_verification表中字段信息";
            VTDPropertyInfoBase pi939 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter478 = new VTDObjectGetter(pi939);
            VTDPropertyInfoBase pi940 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter462 = new VTDObjectSetter(pi940);
            binding_setter462 = new StringFormaterDecorator(binding_setter462,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir462 = new BindDirection(_flow.Loop56,binding_getter478,binding_setter462,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir462);
            VTDPropertyInfoBase pi941 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter479 = new VTDObjectGetter(pi941);
            VTDPropertyInfoBase pi942 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter463 = new VTDObjectSetter(pi942);
            bind_dir463 = new BindDirection(_flow.DbOpenConnection39,binding_getter479,binding_setter463,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir463);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><myJid /><roomJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将本地表的xsid更新";
            VTDPropertyInfoBase pi943 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter480 = new VTDXPathGetter(pi943,XmlTypeCode.String);
            binding_getter480 = new XPathGetterDecorator(binding_getter480,"{Array0}",1);
            VTDPropertyInfoBase pi944 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter464 = new VTDObjectSetter(pi944);
            binding_setter464 = new StringFormaterDecorator(binding_setter464,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir464 = new BindDirection(_flow.DbFetchData57,binding_getter480,binding_setter464,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir464);
            VTDPropertyInfoBase pi945 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter481 = new VTDXPathGetter(pi945,XmlTypeCode.String);
            binding_getter481 = new XPathGetterDecorator(binding_getter481,"{Array0}",1);
            VTDPropertyInfoBase pi946 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter465 = new VTDObjectSetter(pi946);
            binding_setter465 = new StringFormaterDecorator(binding_setter465,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir465 = new BindDirection(_flow.DbFetchData248,binding_getter481,binding_setter465,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir465);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi947 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter482 = new VTDXPathGetter(pi947,XmlTypeCode.String);
            binding_getter482 = new XPathGetterDecorator(binding_getter482,"{Array0}",1);
            VTDPropertyInfoBase pi948 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter466 = new VTDObjectSetter(pi948);
            binding_setter466 = new StringFormaterDecorator(binding_setter466,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir466 = new BindDirection(_flow.DbFetchData57,binding_getter482,binding_setter466,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir466);
            VTDPropertyInfoBase pi949 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='roomJid'][1]");
            VTDBaseGetter binding_getter483 = new VTDXPathGetter(pi949,XmlTypeCode.String);
            binding_getter483 = new XPathGetterDecorator(binding_getter483,"{Array0}",1);
            VTDPropertyInfoBase pi950 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter467 = new VTDObjectSetter(pi950);
            binding_setter467 = new StringFormaterDecorator(binding_setter467,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}");
            bind_dir467 = new BindDirection(_flow.DbFetchData57,binding_getter483,binding_setter467,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir467);
            VTDPropertyInfoBase pi951 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter484 = new VTDObjectGetter(pi951);
            VTDPropertyInfoBase pi952 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter468 = new VTDObjectSetter(pi952);
            bind_dir468 = new BindDirection(_flow.DbOpenConnection39,binding_getter484,binding_setter468,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir468);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\..\TTIME接口测试\procedure\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi953 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter485 = new VTDObjectGetter(pi953);
            VTDPropertyInfoBase pi954 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter469 = new VTDObjectSetter(pi954);
            bind_dir469 = new BindDirection(_flow.DbOpenConnection39,binding_getter485,binding_setter469,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir469);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"72738f03c2eb66d693992576857807ee7718b2fc";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi955 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter486 = new VTDXPathGetter(pi955,XmlTypeCode.String);
            binding_getter486 = new XPathGetterDecorator(binding_getter486,"{Array0}",1);
            VTDPropertyInfoBase pi956 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter470 = new VTDObjectSetter(pi956);
            binding_setter470 = new StringFormaterDecorator(binding_setter470,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir470 = new BindDirection(_flow.DbFetchData57,binding_getter486,binding_setter470,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir470);
            VTDPropertyInfoBase pi957 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter487 = new VTDXPathGetter(pi957,XmlTypeCode.String);
            binding_getter487 = new XPathGetterDecorator(binding_getter487,"{Array0}",1);
            VTDPropertyInfoBase pi958 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter471 = new VTDObjectSetter(pi958);
            binding_setter471 = new StringFormaterDecorator(binding_setter471,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir471 = new BindDirection(_flow.DbFetchData252,binding_getter487,binding_setter471,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir471);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&myJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}&roomJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getRoomMember}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/getRoomMember.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi959 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter488 = new VTDObjectGetter(pi959);
            VTDPropertyInfoBase pi960 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter472 = new VTDObjectSetter(pi960);
            binding_setter472 = new StringFormaterDecorator(binding_setter472,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir472 = new BindDirection(this.DataCursorActivity266,binding_getter488,binding_setter472,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir472);
            VTDPropertyInfoBase pi961 = new VTDPropertyInfoBase("getRoomMember");
            VTDBaseGetter binding_getter489 = new VTDObjectGetter(pi961);
            VTDPropertyInfoBase pi962 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter473 = new VTDObjectSetter(pi962);
            binding_setter473 = new StringFormaterDecorator(binding_setter473,"{DataSource.tb_global_table.getRoomMember}");
            bind_dir473 = new BindDirection(this.DataCursorActivity266,binding_getter489,binding_setter473,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir473);
            VTDPropertyInfoBase pi963 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter490 = new VTDObjectGetter(pi963);
            VTDPropertyInfoBase pi964 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter474 = new VTDObjectSetter(pi964);
            binding_setter474 = new StringFormaterDecorator(binding_setter474,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir474 = new BindDirection(this.DataCursorActivity266,binding_getter490,binding_setter474,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir474);
            VTDPropertyInfoBase pi965 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter491 = new VTDObjectGetter(pi965);
            VTDPropertyInfoBase pi966 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter475 = new VTDObjectSetter(pi966);
            binding_setter475 = new StringFormaterDecorator(binding_setter475,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir475 = new BindDirection(this.DataCursorActivity266,binding_getter491,binding_setter475,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir475);
            VTDPropertyInfoBase pi967 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter492 = new VTDObjectGetter(pi967);
            VTDPropertyInfoBase pi968 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter476 = new VTDObjectSetter(pi968);
            binding_setter476 = new StringFormaterDecorator(binding_setter476,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir476 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter492,binding_setter476,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir476);
            VTDPropertyInfoBase pi969 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter493 = new VTDXPathGetter(pi969,XmlTypeCode.String);
            binding_getter493 = new XPathGetterDecorator(binding_getter493,"{Array0}",1);
            VTDPropertyInfoBase pi970 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter477 = new VTDObjectSetter(pi970);
            binding_setter477 = new StringFormaterDecorator(binding_setter477,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir477 = new BindDirection(_flow.DbFetchData57,binding_getter493,binding_setter477,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir477);
            VTDPropertyInfoBase pi971 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='roomJid'][1]");
            VTDBaseGetter binding_getter494 = new VTDXPathGetter(pi971,XmlTypeCode.String);
            binding_getter494 = new XPathGetterDecorator(binding_getter494,"{Array0}",1);
            VTDPropertyInfoBase pi972 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter478 = new VTDObjectSetter(pi972);
            binding_setter478 = new StringFormaterDecorator(binding_setter478,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].roomJid}");
            bind_dir478 = new BindDirection(_flow.DbFetchData57,binding_getter494,binding_setter478,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir478);
            VTDPropertyInfoBase pi973 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter495 = new VTDObjectGetter(pi973);
            VTDPropertyInfoBase pi974 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter479 = new VTDObjectSetter(pi974);
            binding_setter479 = new StringFormaterDecorator(binding_setter479,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir479 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter495,binding_setter479,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir479);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi975 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter496 = new VTDObjectGetter(pi975);
            VTDPropertyInfoBase pi976 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter480 = new VTDObjectSetter(pi976);
            binding_setter480 = new StringFormaterDecorator(binding_setter480,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir480 = new BindDirection(_flow.HTTPActivity59,binding_getter496,binding_setter480,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir480);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getRoomMember_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi977 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter497 = new VTDObjectGetter(pi977);
            VTDPropertyInfoBase pi978 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter481 = new VTDObjectSetter(pi978);
            binding_setter481 = new StringFormaterDecorator(binding_setter481,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir481 = new BindDirection(_flow.HTTPActivity59,binding_getter497,binding_setter481,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir481);
            VTDPropertyInfoBase pi979 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter498 = new VTDObjectGetter(pi979);
            VTDPropertyInfoBase pi980 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter482 = new VTDObjectSetter(pi980);
            binding_setter482 = new StringFormaterDecorator(binding_setter482,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir482 = new BindDirection(_flow.Loop56,binding_getter498,binding_setter482,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir482);
            VTDPropertyInfoBase pi981 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter499 = new VTDObjectGetter(pi981);
            VTDPropertyInfoBase pi982 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter483 = new VTDObjectSetter(pi982);
            bind_dir483 = new BindDirection(_flow.DbOpenConnection39,binding_getter499,binding_setter483,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir483);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getRoomMember_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi983 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter500 = new VTDJsonGetter(pi983);
            VTDPropertyInfoBase pi984 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter484 = new VTDObjectSetter(pi984);
            binding_setter484 = new StringFormaterDecorator(binding_setter484,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir484 = new BindDirection(_flow.StringToJsonActivity60,binding_getter500,binding_setter484,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir484);
            VTDPropertyInfoBase pi985 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter501 = new VTDObjectGetter(pi985);
            VTDPropertyInfoBase pi986 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter485 = new VTDObjectSetter(pi986);
            binding_setter485 = new StringFormaterDecorator(binding_setter485,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir485 = new BindDirection(_flow.Loop56,binding_getter501,binding_setter485,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir485);
            VTDPropertyInfoBase pi987 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter502 = new VTDObjectGetter(pi987);
            VTDPropertyInfoBase pi988 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter486 = new VTDObjectSetter(pi988);
            bind_dir486 = new BindDirection(_flow.DbOpenConnection39,binding_getter502,binding_setter486,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir486);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getRoomMember_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi989 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter503 = new VTDObjectGetter(pi989);
            VTDPropertyInfoBase pi990 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter487 = new VTDObjectSetter(pi990);
            binding_setter487 = new StringFormaterDecorator(binding_setter487,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir487 = new BindDirection(_flow.Loop56,binding_getter503,binding_setter487,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir487);
            VTDPropertyInfoBase pi991 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter504 = new VTDObjectGetter(pi991);
            VTDPropertyInfoBase pi992 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter488 = new VTDObjectSetter(pi992);
            bind_dir488 = new BindDirection(_flow.DbOpenConnection39,binding_getter504,binding_setter488,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir488);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getRoomMember_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi993 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter505 = new VTDObjectGetter(pi993);
            VTDPropertyInfoBase pi994 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter489 = new VTDObjectSetter(pi994);
            binding_setter489 = new StringFormaterDecorator(binding_setter489,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir489 = new BindDirection(_flow.Loop56,binding_getter505,binding_setter489,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir489);
            VTDPropertyInfoBase pi995 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter506 = new VTDObjectGetter(pi995);
            VTDPropertyInfoBase pi996 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter490 = new VTDObjectSetter(pi996);
            bind_dir490 = new BindDirection(_flow.DbOpenConnection39,binding_getter506,binding_setter490,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir490);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi997 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter507 = new VTDXPathGetter(pi997,XmlTypeCode.String);
            binding_getter507 = new XPathGetterDecorator(binding_getter507,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter507),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi998 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter508 = new VTDXPathGetter(pi998,XmlTypeCode.String);
            binding_getter508 = new XPathGetterDecorator(binding_getter508,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter508),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getRoomMember_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi999 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter509 = new VTDObjectGetter(pi999);
            VTDPropertyInfoBase pi1000 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter491 = new VTDObjectSetter(pi1000);
            binding_setter491 = new StringFormaterDecorator(binding_setter491,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir491 = new BindDirection(_flow.Loop56,binding_getter509,binding_setter491,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir491);
            VTDPropertyInfoBase pi1001 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter510 = new VTDObjectGetter(pi1001);
            VTDPropertyInfoBase pi1002 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter492 = new VTDObjectSetter(pi1002);
            bind_dir492 = new BindDirection(_flow.DbOpenConnection39,binding_getter510,binding_setter492,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir492);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getRoomMember_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1003 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter511 = new VTDObjectGetter(pi1003);
            VTDPropertyInfoBase pi1004 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter493 = new VTDObjectSetter(pi1004);
            binding_setter493 = new StringFormaterDecorator(binding_setter493,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir493 = new BindDirection(_flow.Loop56,binding_getter511,binding_setter493,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir493);
            VTDPropertyInfoBase pi1005 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter512 = new VTDObjectGetter(pi1005);
            VTDPropertyInfoBase pi1006 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter494 = new VTDObjectSetter(pi1006);
            bind_dir494 = new BindDirection(_flow.DbOpenConnection39,binding_getter512,binding_setter494,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir494);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    