/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_modifyimage_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1850 = null;
        public BindDirection bind_dir1851 = null;
        public BindDirection bind_dir1852 = null;
        public BindDirection bind_dir1853 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity263 = null;
        public BindDirection bind_dir1854 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity263_Policy = null;
        public BindDirection bind_dir1855 = null;
        public BindDirection bind_dir1856 = null;
        public BindDirection bind_dir1857 = null;
        public BindDirection bind_dir1858 = null;
        public BindDirection bind_dir1859 = null;
        public BindDirection bind_dir1860 = null;
        public BindDirection bind_dir1861 = null;
        public BindDirection bind_dir1862 = null;
        public BindDirection bind_dir1863 = null;
        public BindDirection bind_dir1864 = null;
        public BindDirection bind_dir1865 = null;
        public BindDirection bind_dir1866 = null;
        public BindDirection bind_dir1867 = null;
        public BindDirection bind_dir1868 = null;
        public BindDirection bind_dir1869 = null;
        public BindDirection bind_dir1870 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir1871 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir1872 = null;
        public BindDirection bind_dir1873 = null;
        public BindDirection bind_dir1874 = null;
        public BindDirection bind_dir1875 = null;
        public BindDirection bind_dir1876 = null;
        public BindDirection bind_dir1877 = null;
        public BindDirection bind_dir1878 = null;
        public BindDirection bind_dir1879 = null;
        public BindDirection bind_dir1880 = null;
        public BindDirection bind_dir1881 = null;
        public BindDirection bind_dir1882 = null;
        public BindDirection bind_dir1883 = null;
        public BindDirection bind_dir1884 = null;
        public BindDirection bind_dir1885 = null;
        public BindDirection bind_dir1886 = null;
        public BindDirection bind_dir1887 = null;
        public BindDirection bind_dir1888 = null;
        public BindDirection bind_dir1889 = null;
        public BindDirection bind_dir1890 = null;
        public BindDirection bind_dir1891 = null;
        public BindDirection bind_dir1892 = null;
        public BindDirection bind_dir1893 = null;
        public BindDirection bind_dir1894 = null;
        public BindDirection bind_dir1895 = null;
        public BindDirection bind_dir1896 = null;
        public BindDirection bind_dir1897 = null;
        public BindDirection bind_dir1898 = null;
        public BindDirection bind_dir1899 = null;
        public BindDirection bind_dir1900 = null;
        public BindDirection bind_dir1901 = null;
        public BindDirection bind_dir1902 = null;
        public BindDirection bind_dir1903 = null;
        public BindDirection bind_dir1904 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity259 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity259");
            _flow.DataFetchActivity256 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity256");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity258 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity258");
            _flow.DataExporterActivity261 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity261");
            _flow.DataExporterCloseActivity262 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity262");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity257 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity257");
            _flow.DataDisconnectActivity260 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity260");
            this.DataCursorActivity263 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity263");
            this.DataCursorActivity263_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence254 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence254");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData200 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData200");
            _flow.Loop201 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop201Input>(_context,"Loop201",LoopType.For);
            _flow.DbFetchData214 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData214");
            _flow.CallQTPTest215 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest215");
            _flow.DbFetchData216 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData216");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.HTTPActivity217 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity217");
            _flow.StringToJsonActivity218 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity218");
            _flow.DbFetchData219 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData219");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbFetchData202 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData202");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity203 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity203");
            _flow.StringToJsonActivity204 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity204");
            _flow.IfElse247 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse247Input>(_context,"IfElse247");
            _flow.DbFetchData206 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData206");
            _flow.DbFetchData207 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData207");
            _flow.DbFetchData208 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData208");
            _flow.IfElse209 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse209Input>(_context,"IfElse209");
            _flow.IfElseBranch248 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch248");
            _flow.IfElseBranch249 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch249");
            _flow.IfElseBranch210 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch210");
            _flow.IfElseBranch212 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch212");
            _flow.ReplaceStringActivity250 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity250");
            _flow.DbFetchData251 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData251");
            _flow.DbFetchData205 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData205");
            _flow.DbFetchData211 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData211");
            _flow.DbFetchData213 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData213");
            _flow.DataFetchActivity259.Comment = @"";
            _flow.DataFetchActivity259.IconPath = @"";
            _flow.DataFetchActivity259.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity259.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity259_QueryParameters_Document = new XmlDocument();
            DataFetchActivity259_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity259Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity259_QueryParameters_Document.LoadXml(xmlDataFetchActivity259Params);
            _flow.DataFetchActivity259.QueryParameters = DataFetchActivity259_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity259);
            this.Activities.Add (_flow.DataFetchActivity259);
            _flow.DataFetchActivity256.Comment = @"";
            _flow.DataFetchActivity256.IconPath = @"";
            _flow.DataFetchActivity256.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity256.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity256_QueryParameters_Document = new XmlDocument();
            DataFetchActivity256_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity256Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity256_QueryParameters_Document.LoadXml(xmlDataFetchActivity256Params);
            _flow.DataFetchActivity256.QueryParameters = DataFetchActivity256_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity256);
            this.Activities.Add (_flow.DataFetchActivity256);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity263);
            _flow.Loop2.Activities.Add (_flow.Sequence254);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity258.Comment = @"";
            _flow.DataExporterActivity258.IconPath = @"";
            VTDPropertyInfoBase pi3757 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1908 = new VTDObjectGetter(pi3757);
            VTDPropertyInfoBase pi3758 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1850 = new VTDObjectSetter(pi3758);
            binding_setter1850 = new StringFormaterDecorator(binding_setter1850,"{Step.DataFetchActivity256.OutTable}");
            bind_dir1850 = new BindDirection(_flow.DataFetchActivity256,binding_getter1908,binding_setter1850,BindTargetType.ToInProperty);
            _flow.DataExporterActivity258.InDirections.Add(bind_dir1850);
            this.Activities.Add (_flow.DataExporterActivity258);
            _flow.DataExporterActivity261.Comment = @"";
            _flow.DataExporterActivity261.IconPath = @"";
            VTDPropertyInfoBase pi3759 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1909 = new VTDObjectGetter(pi3759);
            VTDPropertyInfoBase pi3760 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1851 = new VTDObjectSetter(pi3760);
            binding_setter1851 = new StringFormaterDecorator(binding_setter1851,"{Step.DataFetchActivity259.OutTable}");
            bind_dir1851 = new BindDirection(_flow.DataFetchActivity259,binding_getter1909,binding_setter1851,BindTargetType.ToInProperty);
            _flow.DataExporterActivity261.InDirections.Add(bind_dir1851);
            this.Activities.Add (_flow.DataExporterActivity261);
            _flow.DataExporterCloseActivity262.Comment = @"";
            _flow.DataExporterCloseActivity262.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity262);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity257.Comment = @"";
            _flow.DataDisconnectActivity257.IconPath = @"";
            VTDPropertyInfoBase pi3761 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1910 = new VTDObjectGetter(pi3761);
            VTDPropertyInfoBase pi3762 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1852 = new VTDObjectSetter(pi3762);
            binding_setter1852 = new StringFormaterDecorator(binding_setter1852,"{Step.DataFetchActivity256.OutTable}");
            bind_dir1852 = new BindDirection(_flow.DataFetchActivity256,binding_getter1910,binding_setter1852,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity257.InDirections.Add(bind_dir1852);
            this.Activities.Add (_flow.DataDisconnectActivity257);
            _flow.DataDisconnectActivity260.Comment = @"";
            _flow.DataDisconnectActivity260.IconPath = @"";
            VTDPropertyInfoBase pi3763 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1911 = new VTDObjectGetter(pi3763);
            VTDPropertyInfoBase pi3764 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1853 = new VTDObjectSetter(pi3764);
            binding_setter1853 = new StringFormaterDecorator(binding_setter1853,"{Step.DataFetchActivity259.OutTable}");
            bind_dir1853 = new BindDirection(_flow.DataFetchActivity259,binding_getter1911,binding_setter1853,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity260.InDirections.Add(bind_dir1853);
            this.Activities.Add (_flow.DataDisconnectActivity260);
            this.DataCursorActivity263.Comment = @"";
            this.DataCursorActivity263.IconPath = @"";
            VTDPropertyInfoBase pi3765 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1912 = new VTDObjectGetter(pi3765);
            VTDPropertyInfoBase pi3766 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1854 = new VTDObjectSetter(pi3766);
            binding_setter1854 = new StringFormaterDecorator(binding_setter1854,"{Step.DataFetchActivity256.OutTable}");
            bind_dir1854 = new BindDirection(_flow.DataFetchActivity256,binding_getter1912,binding_setter1854,BindTargetType.ToInProperty);
            this.DataCursorActivity263.InDirections.Add(bind_dir1854);
            this.DataCursorActivity263_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity263_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.StartCondition.Value = "";
            this.DataCursorActivity263_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity263_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.EndCondition.Value = "";
            this.DataCursorActivity263_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity263_Policy.StepSize = 1;
            this.DataCursorActivity263_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity263.Policy = this.DataCursorActivity263_Policy;
            this.DataCursorActivity263.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity263.ResetCursor;
            _flow.Sequence254.Comment = @"";
            _flow.Sequence254.IconPath = @"";
            _flow.Sequence254.Name = @"序列254";
            _flow.Sequence254.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData200);
            _flow.Sequence254.Activities.Add (_flow.Loop201);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData214);
            _flow.Sequence254.Activities.Add (_flow.CallQTPTest215);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData216);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence254.Activities.Add (_flow.HTTPActivity217);
            _flow.Sequence254.Activities.Add (_flow.StringToJsonActivity218);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData219);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData200.QueryString = @"select count(*) as 'Row' from tb_modifyImage_verification";
            _flow.DbFetchData200.Timeout = (int)30;
            _flow.DbFetchData200.Comment = @"";
            _flow.DbFetchData200.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData200.Name = @"获取到tb_modifyImage_verification表有效行数";
            VTDPropertyInfoBase pi3767 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1913 = new VTDObjectGetter(pi3767);
            VTDPropertyInfoBase pi3768 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1855 = new VTDObjectSetter(pi3768);
            bind_dir1855 = new BindDirection(_flow.DbOpenConnection39,binding_getter1913,binding_setter1855,BindTargetType.ToInProperty);
            _flow.DbFetchData200.InDirections.Add(bind_dir1855);
            XmlDocument DbFetchData200_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData200_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData200_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData200.ExpectedOutputProperties = DbFetchData200_ExpectedOutputProperties_Document;
            _flow.Loop201.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop201.NumberOfIterations = (int)0;
            _flow.Loop201.Comment = @"";
            _flow.Loop201.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop201.Name = @"循环执行tb_modifyImage_verification中的测试用例";
            VTDPropertyInfoBase pi3769 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter1914 = new VTDXPathGetter(pi3769,XmlTypeCode.Long);
            binding_getter1914 = new XPathGetterDecorator(binding_getter1914,"{Array0}",1);
            VTDPropertyInfoBase pi3770 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter1856 = new VTDObjectSetter(pi3770);
            bind_dir1856 = new BindDirection(_flow.DbFetchData200,binding_getter1914,binding_setter1856,BindTargetType.ToInProperty);
            _flow.Loop201.InDirections.Add(bind_dir1856);
            _flow.Loop201.Activities.Add (this.DataCursorActivity264);
            _flow.Loop201.Activities.Add (_flow.Sequence255);
            _flow.DbFetchData214.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6' where TestCase = 1";
            _flow.DbFetchData214.Timeout = (int)30;
            _flow.DbFetchData214.Comment = @"";
            _flow.DbFetchData214.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData214.Name = @"对/xmp/image.php接口token实行加密";
            VTDPropertyInfoBase pi3771 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1915 = new VTDObjectGetter(pi3771);
            VTDPropertyInfoBase pi3772 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1857 = new VTDObjectSetter(pi3772);
            binding_setter1857 = new StringFormaterDecorator(binding_setter1857,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1857 = new BindDirection(this.DataCursorActivity263,binding_getter1915,binding_setter1857,BindTargetType.ToInProperty);
            _flow.DbFetchData214.InDirections.Add(bind_dir1857);
            VTDPropertyInfoBase pi3773 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1916 = new VTDObjectGetter(pi3773);
            VTDPropertyInfoBase pi3774 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1858 = new VTDObjectSetter(pi3774);
            bind_dir1858 = new BindDirection(_flow.DbOpenConnection39,binding_getter1916,binding_setter1858,BindTargetType.ToInProperty);
            _flow.DbFetchData214.InDirections.Add(bind_dir1858);
            XmlDocument DbFetchData214_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData214_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData214_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData214.ExpectedOutputProperties = DbFetchData214_ExpectedOutputProperties_Document;
            _flow.CallQTPTest215.Comment = @"";
            _flow.CallQTPTest215.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest215.Name = @"Encryption.SHA1";
            _flow.CallQTPTest215.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.ScriptPath}");
            _flow.CallQTPTest215.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.ActionName}");
            _flow.CallQTPTest215.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.Description}");
            _flow.CallQTPTest215.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.IsActionSelected}");
            _flow.CallQTPTest215.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.ResultLocation}");
            _flow.CallQTPTest215.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest215.QCScriptPath}");
            _flow.DbFetchData216.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData216.Timeout = (int)30;
            _flow.DbFetchData216.Comment = @"";
            _flow.DbFetchData216.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData216.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi3775 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1917 = new VTDObjectGetter(pi3775);
            VTDPropertyInfoBase pi3776 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1859 = new VTDObjectSetter(pi3776);
            bind_dir1859 = new BindDirection(_flow.DbOpenConnection39,binding_getter1917,binding_setter1859,BindTargetType.ToInProperty);
            _flow.DbFetchData216.InDirections.Add(bind_dir1859);
            XmlDocument DbFetchData216_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData216_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData216_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData216.ExpectedOutputProperties = DbFetchData216_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3777 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1918 = new VTDObjectGetter(pi3777);
            VTDPropertyInfoBase pi3778 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1860 = new VTDObjectSetter(pi3778);
            bind_dir1860 = new BindDirection(_flow.DbOpenConnection39,binding_getter1918,binding_setter1860,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir1860);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.HTTPActivity217.TextBody = @"xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&Jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData216.ResultTable.Row[1].EncryptionResult}&urlPath=http://download.ac-bj-oss.365ime.com/storage/2015-05-18/c7f724ccb1f2d112825c66489f5b18996d977c2d&thumbnailPath=http://download.ac-bj-oss.365ime.com/storage/2015-05-18/e1c7a9721ce5d28de4a26fce2a5aafd9f223d507";
            _flow.HTTPActivity217.TextXmlBody = @"";
            _flow.HTTPActivity217.FileBody = @"";
            _flow.HTTPActivity217.PostBody = @"";
            _flow.HTTPActivity217.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.modifyImage}";
            _flow.HTTPActivity217.HttpMethod = @"POST";
            _flow.HTTPActivity217.HttpVersion = @"1.1";
            _flow.HTTPActivity217.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity217.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity217.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity217.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity217.Comment = @"";
            _flow.HTTPActivity217.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity217.RequestBodyType = @"Text";
            _flow.HTTPActivity217.ResponseType = @"Text";
            _flow.HTTPActivity217.Name = @"调用/xmp/image.php";
            _flow.HTTPActivity217.Proxy.Server = @"";
            _flow.HTTPActivity217.Proxy.Username = @"";
            _flow.HTTPActivity217.Proxy.Password = @"";
            _flow.HTTPActivity217.Authentication.Username = @"";
            _flow.HTTPActivity217.Authentication.Password = @"";
            _flow.HTTPActivity217.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity217.Timeout = (int)100000;
            _flow.HTTPActivity217.ClientCertificate.Password = @"";
            _flow.HTTPActivity217.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity217.UseClientCertificate = false;
            _flow.HTTPActivity217.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity217.AllowRedirections = true;
            _flow.HTTPActivity217.ReuseCookies = false;
            _flow.HTTPActivity217.ExpectServerError = false;
            XmlDocument HTTPActivity217_XMLBody_Document = new XmlDocument();
            HTTPActivity217_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity217_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity217.XMLBody = HTTPActivity217_XMLBody_Document;
            XmlDocument HTTPActivity217_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity217_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity217_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity217.RequestMultipartInfoXml = HTTPActivity217_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity217.Multipart=false;
            VTDPropertyInfoBase pi3779 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1919 = new VTDObjectGetter(pi3779);
            VTDPropertyInfoBase pi3780 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1861 = new VTDObjectSetter(pi3780);
            binding_setter1861 = new StringFormaterDecorator(binding_setter1861,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1861 = new BindDirection(this.DataCursorActivity263,binding_getter1919,binding_setter1861,BindTargetType.ToInProperty);
            _flow.HTTPActivity217.InDirections.Add(bind_dir1861);
            VTDPropertyInfoBase pi3781 = new VTDPropertyInfoBase("modifyImage");
            VTDBaseGetter binding_getter1920 = new VTDObjectGetter(pi3781);
            VTDPropertyInfoBase pi3782 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1862 = new VTDObjectSetter(pi3782);
            binding_setter1862 = new StringFormaterDecorator(binding_setter1862,"{DataSource.tb_global_table.modifyImage}");
            bind_dir1862 = new BindDirection(this.DataCursorActivity263,binding_getter1920,binding_setter1862,BindTargetType.ToInProperty);
            _flow.HTTPActivity217.InDirections.Add(bind_dir1862);
            VTDPropertyInfoBase pi3783 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1921 = new VTDObjectGetter(pi3783);
            VTDPropertyInfoBase pi3784 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1863 = new VTDObjectSetter(pi3784);
            binding_setter1863 = new StringFormaterDecorator(binding_setter1863,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1863 = new BindDirection(this.DataCursorActivity263,binding_getter1921,binding_setter1863,BindTargetType.ToInProperty);
            _flow.HTTPActivity217.InDirections.Add(bind_dir1863);
            VTDPropertyInfoBase pi3785 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1922 = new VTDObjectGetter(pi3785);
            VTDPropertyInfoBase pi3786 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1864 = new VTDObjectSetter(pi3786);
            binding_setter1864 = new StringFormaterDecorator(binding_setter1864,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1864 = new BindDirection(this.DataCursorActivity263,binding_getter1922,binding_setter1864,BindTargetType.ToInProperty);
            _flow.HTTPActivity217.InDirections.Add(bind_dir1864);
            VTDPropertyInfoBase pi3787 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1923 = new VTDXPathGetter(pi3787,XmlTypeCode.String);
            binding_getter1923 = new XPathGetterDecorator(binding_getter1923,"{Array0}",1);
            VTDPropertyInfoBase pi3788 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1865 = new VTDObjectSetter(pi3788);
            binding_setter1865 = new StringFormaterDecorator(binding_setter1865,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir1865 = new BindDirection(_flow.DbFetchData246,binding_getter1923,binding_setter1865,BindTargetType.ToInProperty);
            _flow.HTTPActivity217.InDirections.Add(bind_dir1865);
            VTDPropertyInfoBase pi3789 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1924 = new VTDObjectGetter(pi3789);
            VTDPropertyInfoBase pi3790 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1866 = new VTDObjectSetter(pi3790);
            binding_setter1866 = new StringFormaterDecorator(binding_setter1866,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1866 = new BindDirection(this.DataCursorActivity263,binding_getter1924,binding_setter1866,BindTargetType.ToInProperty);
            _flow.HTTPActivity217.InDirections.Add(bind_dir1866);
            VTDPropertyInfoBase pi3791 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1925 = new VTDXPathGetter(pi3791,XmlTypeCode.String);
            binding_getter1925 = new XPathGetterDecorator(binding_getter1925,"{Array0}",1);
            VTDPropertyInfoBase pi3792 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1867 = new VTDObjectSetter(pi3792);
            binding_setter1867 = new StringFormaterDecorator(binding_setter1867,"{Step.OutputProperties.DbFetchData216.ResultTable.Row[1].EncryptionResult}");
            bind_dir1867 = new BindDirection(_flow.DbFetchData216,binding_getter1925,binding_setter1867,BindTargetType.ToInProperty);
            _flow.HTTPActivity217.InDirections.Add(bind_dir1867);
            XmlDocument HTTPActivity217_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity217_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity217_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity217.ExpectedResponseXmlBody = HTTPActivity217_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity217_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity217_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity217_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity217.ExpectedResponseJsonBody = HTTPActivity217_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity217_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity217_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity217_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity217.ExpectedOutputProperties = HTTPActivity217_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity218.InputString = @"{Step.OutputProperties.HTTPActivity217.ResponseBody}";
            _flow.StringToJsonActivity218.Comment = @"";
            _flow.StringToJsonActivity218.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity218.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi3793 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1926 = new VTDObjectGetter(pi3793);
            VTDPropertyInfoBase pi3794 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1868 = new VTDObjectSetter(pi3794);
            binding_setter1868 = new StringFormaterDecorator(binding_setter1868,"{Step.OutputProperties.HTTPActivity217.ResponseBody}");
            bind_dir1868 = new BindDirection(_flow.HTTPActivity217,binding_getter1926,binding_setter1868,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity218.InDirections.Add(bind_dir1868);
            _flow.DbFetchData219.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity217.ResponseBody}' where InterfaceName = '/xmp/image.php'";
            _flow.DbFetchData219.Timeout = (int)30;
            _flow.DbFetchData219.Comment = @"";
            _flow.DbFetchData219.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData219.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi3795 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1927 = new VTDObjectGetter(pi3795);
            VTDPropertyInfoBase pi3796 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1869 = new VTDObjectSetter(pi3796);
            binding_setter1869 = new StringFormaterDecorator(binding_setter1869,"{Step.OutputProperties.HTTPActivity217.ResponseBody}");
            bind_dir1869 = new BindDirection(_flow.HTTPActivity217,binding_getter1927,binding_setter1869,BindTargetType.ToInProperty);
            _flow.DbFetchData219.InDirections.Add(bind_dir1869);
            VTDPropertyInfoBase pi3797 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1928 = new VTDObjectGetter(pi3797);
            VTDPropertyInfoBase pi3798 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1870 = new VTDObjectSetter(pi3798);
            bind_dir1870 = new BindDirection(_flow.DbOpenConnection39,binding_getter1928,binding_setter1870,BindTargetType.ToInProperty);
            _flow.DbFetchData219.InDirections.Add(bind_dir1870);
            XmlDocument DbFetchData219_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData219_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData219_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData219.ExpectedOutputProperties = DbFetchData219_ExpectedOutputProperties_Document;
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi3799 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1929 = new VTDObjectGetter(pi3799);
            VTDPropertyInfoBase pi3800 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1871 = new VTDObjectSetter(pi3800);
            binding_setter1871 = new StringFormaterDecorator(binding_setter1871,"{Step.DataFetchActivity256.OutTable}");
            bind_dir1871 = new BindDirection(_flow.DataFetchActivity256,binding_getter1929,binding_setter1871,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir1871);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = false;
            _flow.Loop201.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbFetchData202);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity203);
            _flow.Sequence255.Activities.Add (_flow.StringToJsonActivity204);
            _flow.Sequence255.Activities.Add (_flow.IfElse247);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData206);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData207);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData208);
            _flow.Sequence255.Activities.Add (_flow.IfElse209);
            _flow.DbFetchData202.QueryString = @"select xsid,urlPath,Jid,thumbnailPath,token from tb_modifyImage_verification where TestCase = {Step.OutputProperties.Loop201.CurrentIterationNumber}";
            _flow.DbFetchData202.Timeout = (int)30;
            _flow.DbFetchData202.Comment = @"";
            _flow.DbFetchData202.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData202.Name = @"查询tb_modifyImage_verification表中数据";
            VTDPropertyInfoBase pi3801 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1930 = new VTDObjectGetter(pi3801);
            VTDPropertyInfoBase pi3802 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1872 = new VTDObjectSetter(pi3802);
            binding_setter1872 = new StringFormaterDecorator(binding_setter1872,"{Step.OutputProperties.Loop201.CurrentIterationNumber}");
            bind_dir1872 = new BindDirection(_flow.Loop201,binding_getter1930,binding_setter1872,BindTargetType.ToInProperty);
            _flow.DbFetchData202.InDirections.Add(bind_dir1872);
            VTDPropertyInfoBase pi3803 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1931 = new VTDObjectGetter(pi3803);
            VTDPropertyInfoBase pi3804 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1873 = new VTDObjectSetter(pi3804);
            bind_dir1873 = new BindDirection(_flow.DbOpenConnection39,binding_getter1931,binding_setter1873,BindTargetType.ToInProperty);
            _flow.DbFetchData202.InDirections.Add(bind_dir1873);
            XmlDocument DbFetchData202_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData202_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData202_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><urlPath /><Jid /><thumbnailPath /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData202.ExpectedOutputProperties = DbFetchData202_ExpectedOutputProperties_Document;
            _flow.DbFetchData252.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3805 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1932 = new VTDObjectGetter(pi3805);
            VTDPropertyInfoBase pi3806 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1874 = new VTDObjectSetter(pi3806);
            bind_dir1874 = new BindDirection(_flow.DbOpenConnection39,binding_getter1932,binding_setter1874,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir1874);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi3807 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1933 = new VTDXPathGetter(pi3807,XmlTypeCode.String);
            binding_getter1933 = new XPathGetterDecorator(binding_getter1933,"{Array0}",1);
            VTDPropertyInfoBase pi3808 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1875 = new VTDObjectSetter(pi3808);
            binding_setter1875 = new StringFormaterDecorator(binding_setter1875,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].ResponseXsid}");
            bind_dir1875 = new BindDirection(_flow.DbFetchData252,binding_getter1933,binding_setter1875,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir1875);
            VTDPropertyInfoBase pi3809 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1934 = new VTDXPathGetter(pi3809,XmlTypeCode.String);
            binding_getter1934 = new XPathGetterDecorator(binding_getter1934,"{Array0}",1);
            VTDPropertyInfoBase pi3810 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1876 = new VTDObjectSetter(pi3810);
            binding_setter1876 = new StringFormaterDecorator(binding_setter1876,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].ResponseXsid}");
            bind_dir1876 = new BindDirection(_flow.DbFetchData252,binding_getter1934,binding_setter1876,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir1876);
            _flow.HTTPActivity203.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity253.Result}&urlPath={Step.OutputProperties.DbFetchData202.ResultTable.Row[1].urlPath}&thumbnailPath={Step.OutputProperties.DbFetchData202.ResultTable.Row[1].thumbnailPath}&token={Step.OutputProperties.DbFetchData202.ResultTable.Row[1].token}&Jid={Step.OutputProperties.DbFetchData202.ResultTable.Row[1].Jid}";
            _flow.HTTPActivity203.TextXmlBody = @"";
            _flow.HTTPActivity203.FileBody = @"";
            _flow.HTTPActivity203.PostBody = @"";
            _flow.HTTPActivity203.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.modifyImage}";
            _flow.HTTPActivity203.HttpMethod = @"POST";
            _flow.HTTPActivity203.HttpVersion = @"1.1";
            _flow.HTTPActivity203.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity203.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity203.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity203.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity203.Comment = @"";
            _flow.HTTPActivity203.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity203.RequestBodyType = @"Text";
            _flow.HTTPActivity203.ResponseType = @"Text";
            _flow.HTTPActivity203.Name = @"调用/xmp/image.php";
            _flow.HTTPActivity203.Proxy.Server = @"";
            _flow.HTTPActivity203.Proxy.Username = @"";
            _flow.HTTPActivity203.Proxy.Password = @"";
            _flow.HTTPActivity203.Authentication.Username = @"";
            _flow.HTTPActivity203.Authentication.Password = @"";
            _flow.HTTPActivity203.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity203.Timeout = (int)100000;
            _flow.HTTPActivity203.ClientCertificate.Password = @"";
            _flow.HTTPActivity203.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity203.UseClientCertificate = false;
            _flow.HTTPActivity203.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity203.AllowRedirections = true;
            _flow.HTTPActivity203.ReuseCookies = false;
            _flow.HTTPActivity203.ExpectServerError = false;
            XmlDocument HTTPActivity203_XMLBody_Document = new XmlDocument();
            HTTPActivity203_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity203_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity203.XMLBody = HTTPActivity203_XMLBody_Document;
            XmlDocument HTTPActivity203_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity203_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity203_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity203.RequestMultipartInfoXml = HTTPActivity203_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity203.Multipart=false;
            VTDPropertyInfoBase pi3811 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1935 = new VTDObjectGetter(pi3811);
            VTDPropertyInfoBase pi3812 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1877 = new VTDObjectSetter(pi3812);
            binding_setter1877 = new StringFormaterDecorator(binding_setter1877,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1877 = new BindDirection(this.DataCursorActivity264,binding_getter1935,binding_setter1877,BindTargetType.ToInProperty);
            _flow.HTTPActivity203.InDirections.Add(bind_dir1877);
            VTDPropertyInfoBase pi3813 = new VTDPropertyInfoBase("modifyImage");
            VTDBaseGetter binding_getter1936 = new VTDObjectGetter(pi3813);
            VTDPropertyInfoBase pi3814 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1878 = new VTDObjectSetter(pi3814);
            binding_setter1878 = new StringFormaterDecorator(binding_setter1878,"{DataSource.tb_global_table.modifyImage}");
            bind_dir1878 = new BindDirection(this.DataCursorActivity264,binding_getter1936,binding_setter1878,BindTargetType.ToInProperty);
            _flow.HTTPActivity203.InDirections.Add(bind_dir1878);
            VTDPropertyInfoBase pi3815 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1937 = new VTDObjectGetter(pi3815);
            VTDPropertyInfoBase pi3816 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1879 = new VTDObjectSetter(pi3816);
            binding_setter1879 = new StringFormaterDecorator(binding_setter1879,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1879 = new BindDirection(this.DataCursorActivity264,binding_getter1937,binding_setter1879,BindTargetType.ToInProperty);
            _flow.HTTPActivity203.InDirections.Add(bind_dir1879);
            VTDPropertyInfoBase pi3817 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1938 = new VTDObjectGetter(pi3817);
            VTDPropertyInfoBase pi3818 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1880 = new VTDObjectSetter(pi3818);
            binding_setter1880 = new StringFormaterDecorator(binding_setter1880,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1880 = new BindDirection(this.DataCursorActivity264,binding_getter1938,binding_setter1880,BindTargetType.ToInProperty);
            _flow.HTTPActivity203.InDirections.Add(bind_dir1880);
            VTDPropertyInfoBase pi3819 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1939 = new VTDObjectGetter(pi3819);
            VTDPropertyInfoBase pi3820 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1881 = new VTDObjectSetter(pi3820);
            binding_setter1881 = new StringFormaterDecorator(binding_setter1881,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir1881 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter1939,binding_setter1881,BindTargetType.ToInProperty);
            _flow.HTTPActivity203.InDirections.Add(bind_dir1881);
            VTDPropertyInfoBase pi3821 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='urlPath'][1]");
            VTDBaseGetter binding_getter1940 = new VTDXPathGetter(pi3821,XmlTypeCode.String);
            binding_getter1940 = new XPathGetterDecorator(binding_getter1940,"{Array0}",1);
            VTDPropertyInfoBase pi3822 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1882 = new VTDObjectSetter(pi3822);
            binding_setter1882 = new StringFormaterDecorator(binding_setter1882,"{Step.OutputProperties.DbFetchData202.ResultTable.Row[1].urlPath}");
            bind_dir1882 = new BindDirection(_flow.DbFetchData202,binding_getter1940,binding_setter1882,BindTargetType.ToInProperty);
            _flow.HTTPActivity203.InDirections.Add(bind_dir1882);
            VTDPropertyInfoBase pi3823 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='thumbnailPath'][1]");
            VTDBaseGetter binding_getter1941 = new VTDXPathGetter(pi3823,XmlTypeCode.String);
            binding_getter1941 = new XPathGetterDecorator(binding_getter1941,"{Array0}",1);
            VTDPropertyInfoBase pi3824 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1883 = new VTDObjectSetter(pi3824);
            binding_setter1883 = new StringFormaterDecorator(binding_setter1883,"{Step.OutputProperties.DbFetchData202.ResultTable.Row[1].thumbnailPath}");
            bind_dir1883 = new BindDirection(_flow.DbFetchData202,binding_getter1941,binding_setter1883,BindTargetType.ToInProperty);
            _flow.HTTPActivity203.InDirections.Add(bind_dir1883);
            VTDPropertyInfoBase pi3825 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter1942 = new VTDXPathGetter(pi3825,XmlTypeCode.String);
            binding_getter1942 = new XPathGetterDecorator(binding_getter1942,"{Array0}",1);
            VTDPropertyInfoBase pi3826 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1884 = new VTDObjectSetter(pi3826);
            binding_setter1884 = new StringFormaterDecorator(binding_setter1884,"{Step.OutputProperties.DbFetchData202.ResultTable.Row[1].token}");
            bind_dir1884 = new BindDirection(_flow.DbFetchData202,binding_getter1942,binding_setter1884,BindTargetType.ToInProperty);
            _flow.HTTPActivity203.InDirections.Add(bind_dir1884);
            VTDPropertyInfoBase pi3827 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter1943 = new VTDXPathGetter(pi3827,XmlTypeCode.String);
            binding_getter1943 = new XPathGetterDecorator(binding_getter1943,"{Array0}",1);
            VTDPropertyInfoBase pi3828 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1885 = new VTDObjectSetter(pi3828);
            binding_setter1885 = new StringFormaterDecorator(binding_setter1885,"{Step.OutputProperties.DbFetchData202.ResultTable.Row[1].Jid}");
            bind_dir1885 = new BindDirection(_flow.DbFetchData202,binding_getter1943,binding_setter1885,BindTargetType.ToInProperty);
            _flow.HTTPActivity203.InDirections.Add(bind_dir1885);
            XmlDocument HTTPActivity203_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity203_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity203_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity203.ExpectedResponseXmlBody = HTTPActivity203_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity203_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity203_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity203_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity203.ExpectedResponseJsonBody = HTTPActivity203_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity203_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity203_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity203_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity203.ExpectedOutputProperties = HTTPActivity203_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity204.InputString = @"{Step.OutputProperties.HTTPActivity203.ResponseBody}";
            _flow.StringToJsonActivity204.Comment = @"";
            _flow.StringToJsonActivity204.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity204.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi3829 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1944 = new VTDObjectGetter(pi3829);
            VTDPropertyInfoBase pi3830 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1886 = new VTDObjectSetter(pi3830);
            binding_setter1886 = new StringFormaterDecorator(binding_setter1886,"{Step.OutputProperties.HTTPActivity203.ResponseBody}");
            bind_dir1886 = new BindDirection(_flow.HTTPActivity203,binding_getter1944,binding_setter1886,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity204.InDirections.Add(bind_dir1886);
            _flow.IfElse247.ConditionAsString = @"{Step.OutputProperties.HTTPActivity203.ResponseBody} Contains '";
            _flow.IfElse247.Comment = @"";
            _flow.IfElse247.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse247.Name = @"替换response中'";
            _flow.IfElse247.Activities.Add (_flow.IfElseBranch248);
            _flow.IfElse247.Activities.Add (_flow.IfElseBranch249);
            _flow.DbFetchData206.QueryString = @"update tb_modifyImage_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity204.errorCode}' where TestCase = {Step.OutputProperties.Loop201.CurrentIterationNumber}";
            _flow.DbFetchData206.Timeout = (int)30;
            _flow.DbFetchData206.Comment = @"";
            _flow.DbFetchData206.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData206.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi3831 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1945 = new VTDJsonGetter(pi3831);
            VTDPropertyInfoBase pi3832 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1887 = new VTDObjectSetter(pi3832);
            binding_setter1887 = new StringFormaterDecorator(binding_setter1887,"{Step.JsonContent.StringToJsonActivity204.errorCode}");
            bind_dir1887 = new BindDirection(_flow.StringToJsonActivity204,binding_getter1945,binding_setter1887,BindTargetType.ToInProperty);
            _flow.DbFetchData206.InDirections.Add(bind_dir1887);
            VTDPropertyInfoBase pi3833 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1946 = new VTDObjectGetter(pi3833);
            VTDPropertyInfoBase pi3834 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1888 = new VTDObjectSetter(pi3834);
            binding_setter1888 = new StringFormaterDecorator(binding_setter1888,"{Step.OutputProperties.Loop201.CurrentIterationNumber}");
            bind_dir1888 = new BindDirection(_flow.Loop201,binding_getter1946,binding_setter1888,BindTargetType.ToInProperty);
            _flow.DbFetchData206.InDirections.Add(bind_dir1888);
            VTDPropertyInfoBase pi3835 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1947 = new VTDObjectGetter(pi3835);
            VTDPropertyInfoBase pi3836 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1889 = new VTDObjectSetter(pi3836);
            bind_dir1889 = new BindDirection(_flow.DbOpenConnection39,binding_getter1947,binding_setter1889,BindTargetType.ToInProperty);
            _flow.DbFetchData206.InDirections.Add(bind_dir1889);
            XmlDocument DbFetchData206_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData206_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData206_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData206.ExpectedOutputProperties = DbFetchData206_ExpectedOutputProperties_Document;
            _flow.DbFetchData207.QueryString = @"select OutputValue from tb_modifyImage_verification where TestCase = {Step.OutputProperties.Loop201.CurrentIterationNumber}";
            _flow.DbFetchData207.Timeout = (int)30;
            _flow.DbFetchData207.Comment = @"";
            _flow.DbFetchData207.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData207.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi3837 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1948 = new VTDObjectGetter(pi3837);
            VTDPropertyInfoBase pi3838 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1890 = new VTDObjectSetter(pi3838);
            binding_setter1890 = new StringFormaterDecorator(binding_setter1890,"{Step.OutputProperties.Loop201.CurrentIterationNumber}");
            bind_dir1890 = new BindDirection(_flow.Loop201,binding_getter1948,binding_setter1890,BindTargetType.ToInProperty);
            _flow.DbFetchData207.InDirections.Add(bind_dir1890);
            VTDPropertyInfoBase pi3839 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1949 = new VTDObjectGetter(pi3839);
            VTDPropertyInfoBase pi3840 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1891 = new VTDObjectSetter(pi3840);
            bind_dir1891 = new BindDirection(_flow.DbOpenConnection39,binding_getter1949,binding_setter1891,BindTargetType.ToInProperty);
            _flow.DbFetchData207.InDirections.Add(bind_dir1891);
            XmlDocument DbFetchData207_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData207_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData207_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData207.ExpectedOutputProperties = DbFetchData207_ExpectedOutputProperties_Document;
            _flow.DbFetchData208.QueryString = @"select ExpectationValue from tb_modifyImage_verification where TestCase = {Step.OutputProperties.Loop201.CurrentIterationNumber}";
            _flow.DbFetchData208.Timeout = (int)30;
            _flow.DbFetchData208.Comment = @"";
            _flow.DbFetchData208.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData208.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi3841 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1950 = new VTDObjectGetter(pi3841);
            VTDPropertyInfoBase pi3842 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1892 = new VTDObjectSetter(pi3842);
            binding_setter1892 = new StringFormaterDecorator(binding_setter1892,"{Step.OutputProperties.Loop201.CurrentIterationNumber}");
            bind_dir1892 = new BindDirection(_flow.Loop201,binding_getter1950,binding_setter1892,BindTargetType.ToInProperty);
            _flow.DbFetchData208.InDirections.Add(bind_dir1892);
            VTDPropertyInfoBase pi3843 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1951 = new VTDObjectGetter(pi3843);
            VTDPropertyInfoBase pi3844 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1893 = new VTDObjectSetter(pi3844);
            bind_dir1893 = new BindDirection(_flow.DbOpenConnection39,binding_getter1951,binding_setter1893,BindTargetType.ToInProperty);
            _flow.DbFetchData208.InDirections.Add(bind_dir1893);
            XmlDocument DbFetchData208_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData208_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData208_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData208.ExpectedOutputProperties = DbFetchData208_ExpectedOutputProperties_Document;
            _flow.IfElse209.ConditionAsString = @"{Step.OutputProperties.DbFetchData207.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData208.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse209.Comment = @"";
            _flow.IfElse209.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse209.Name = @"填写Result";
            _flow.IfElse209.Activities.Add (_flow.IfElseBranch210);
            _flow.IfElse209.Activities.Add (_flow.IfElseBranch212);
            _flow.IfElseBranch248.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi3845 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1952 = new VTDObjectGetter(pi3845);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.HTTPActivity203.GetParam(binding_getter1952),typeof(System.String));
            		var result0 = expr00;
            		System.String result1 = (System.String)("'");
            		return result0.Contains(result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch248.Comment = @"";
            _flow.IfElseBranch248.IconPath = @"";
            _flow.IfElseBranch248.Name = @"是";
            _flow.IfElseBranch248.Activities.Add (_flow.ReplaceStringActivity250);
            _flow.IfElseBranch248.Activities.Add (_flow.DbFetchData251);
            _flow.IfElseBranch249.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch249.Comment = @"";
            _flow.IfElseBranch249.IconPath = @"";
            _flow.IfElseBranch249.Name = @"否";
            _flow.IfElseBranch249.Activities.Add (_flow.DbFetchData205);
            _flow.IfElseBranch210.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi3846 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1953 = new VTDXPathGetter(pi3846,XmlTypeCode.String);
            binding_getter1953 = new XPathGetterDecorator(binding_getter1953,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData207.GetParam(binding_getter1953),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi3847 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1954 = new VTDXPathGetter(pi3847,XmlTypeCode.String);
            binding_getter1954 = new XPathGetterDecorator(binding_getter1954,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData208.GetParam(binding_getter1954),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch210.Comment = @"";
            _flow.IfElseBranch210.IconPath = @"";
            _flow.IfElseBranch210.Name = @"是";
            _flow.IfElseBranch210.Activities.Add (_flow.DbFetchData211);
            _flow.IfElseBranch212.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch212.Comment = @"";
            _flow.IfElseBranch212.IconPath = @"";
            _flow.IfElseBranch212.Name = @"否";
            _flow.IfElseBranch212.Activities.Add (_flow.DbFetchData213);
            _flow.ReplaceStringActivity250.SourceString = @"{Step.OutputProperties.HTTPActivity203.ResponseBody}";
            _flow.ReplaceStringActivity250.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity250.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity250.SearchReplaceString[0].Key = @"'";
            _flow.ReplaceStringActivity250.SearchReplaceString[0].Value = @"''";
            _flow.ReplaceStringActivity250.CaseSensitive = true;
            _flow.ReplaceStringActivity250.Comment = @"";
            _flow.ReplaceStringActivity250.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity250.Name = @"替换response的'符号";
            VTDPropertyInfoBase pi3848 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1955 = new VTDObjectGetter(pi3848);
            VTDPropertyInfoBase pi3849 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1894 = new VTDObjectSetter(pi3849);
            binding_setter1894 = new StringFormaterDecorator(binding_setter1894,"{Step.OutputProperties.HTTPActivity203.ResponseBody}");
            bind_dir1894 = new BindDirection(_flow.HTTPActivity203,binding_getter1955,binding_setter1894,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity250.InDirections.Add(bind_dir1894);
            _flow.DbFetchData251.QueryString = @"UPDATE tb_modifyImage_verification set InterfaceResponse = '{Step.OutputProperties.ReplaceStringActivity250.Result}' where TestCase = {Step.OutputProperties.Loop201.CurrentIterationNumber}";
            _flow.DbFetchData251.Timeout = (int)30;
            _flow.DbFetchData251.Comment = @"";
            _flow.DbFetchData251.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData251.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi3850 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1956 = new VTDObjectGetter(pi3850);
            VTDPropertyInfoBase pi3851 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1895 = new VTDObjectSetter(pi3851);
            binding_setter1895 = new StringFormaterDecorator(binding_setter1895,"{Step.OutputProperties.ReplaceStringActivity250.Result}");
            bind_dir1895 = new BindDirection(_flow.ReplaceStringActivity250,binding_getter1956,binding_setter1895,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1895);
            VTDPropertyInfoBase pi3852 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1957 = new VTDObjectGetter(pi3852);
            VTDPropertyInfoBase pi3853 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1896 = new VTDObjectSetter(pi3853);
            binding_setter1896 = new StringFormaterDecorator(binding_setter1896,"{Step.OutputProperties.Loop201.CurrentIterationNumber}");
            bind_dir1896 = new BindDirection(_flow.Loop201,binding_getter1957,binding_setter1896,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1896);
            VTDPropertyInfoBase pi3854 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1958 = new VTDObjectGetter(pi3854);
            VTDPropertyInfoBase pi3855 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1897 = new VTDObjectSetter(pi3855);
            bind_dir1897 = new BindDirection(_flow.DbOpenConnection39,binding_getter1958,binding_setter1897,BindTargetType.ToInProperty);
            _flow.DbFetchData251.InDirections.Add(bind_dir1897);
            XmlDocument DbFetchData251_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData251_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData251_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData251.ExpectedOutputProperties = DbFetchData251_ExpectedOutputProperties_Document;
            _flow.DbFetchData205.QueryString = @"UPDATE tb_modifyImage_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity203.ResponseBody}' where TestCase = {Step.OutputProperties.Loop201.CurrentIterationNumber}";
            _flow.DbFetchData205.Timeout = (int)30;
            _flow.DbFetchData205.Comment = @"";
            _flow.DbFetchData205.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData205.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi3856 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1959 = new VTDObjectGetter(pi3856);
            VTDPropertyInfoBase pi3857 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1898 = new VTDObjectSetter(pi3857);
            binding_setter1898 = new StringFormaterDecorator(binding_setter1898,"{Step.OutputProperties.HTTPActivity203.ResponseBody}");
            bind_dir1898 = new BindDirection(_flow.HTTPActivity203,binding_getter1959,binding_setter1898,BindTargetType.ToInProperty);
            _flow.DbFetchData205.InDirections.Add(bind_dir1898);
            VTDPropertyInfoBase pi3858 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1960 = new VTDObjectGetter(pi3858);
            VTDPropertyInfoBase pi3859 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1899 = new VTDObjectSetter(pi3859);
            binding_setter1899 = new StringFormaterDecorator(binding_setter1899,"{Step.OutputProperties.Loop201.CurrentIterationNumber}");
            bind_dir1899 = new BindDirection(_flow.Loop201,binding_getter1960,binding_setter1899,BindTargetType.ToInProperty);
            _flow.DbFetchData205.InDirections.Add(bind_dir1899);
            VTDPropertyInfoBase pi3860 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1961 = new VTDObjectGetter(pi3860);
            VTDPropertyInfoBase pi3861 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1900 = new VTDObjectSetter(pi3861);
            bind_dir1900 = new BindDirection(_flow.DbOpenConnection39,binding_getter1961,binding_setter1900,BindTargetType.ToInProperty);
            _flow.DbFetchData205.InDirections.Add(bind_dir1900);
            XmlDocument DbFetchData205_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData205_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData205_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData205.ExpectedOutputProperties = DbFetchData205_ExpectedOutputProperties_Document;
            _flow.DbFetchData211.QueryString = @"update tb_modifyImage_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop201.CurrentIterationNumber}";
            _flow.DbFetchData211.Timeout = (int)30;
            _flow.DbFetchData211.Comment = @"";
            _flow.DbFetchData211.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData211.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi3862 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1962 = new VTDObjectGetter(pi3862);
            VTDPropertyInfoBase pi3863 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1901 = new VTDObjectSetter(pi3863);
            binding_setter1901 = new StringFormaterDecorator(binding_setter1901,"{Step.OutputProperties.Loop201.CurrentIterationNumber}");
            bind_dir1901 = new BindDirection(_flow.Loop201,binding_getter1962,binding_setter1901,BindTargetType.ToInProperty);
            _flow.DbFetchData211.InDirections.Add(bind_dir1901);
            VTDPropertyInfoBase pi3864 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1963 = new VTDObjectGetter(pi3864);
            VTDPropertyInfoBase pi3865 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1902 = new VTDObjectSetter(pi3865);
            bind_dir1902 = new BindDirection(_flow.DbOpenConnection39,binding_getter1963,binding_setter1902,BindTargetType.ToInProperty);
            _flow.DbFetchData211.InDirections.Add(bind_dir1902);
            XmlDocument DbFetchData211_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData211_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData211_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData211.ExpectedOutputProperties = DbFetchData211_ExpectedOutputProperties_Document;
            _flow.DbFetchData213.QueryString = @"update tb_modifyImage_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop201.CurrentIterationNumber}";
            _flow.DbFetchData213.Timeout = (int)30;
            _flow.DbFetchData213.Comment = @"";
            _flow.DbFetchData213.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData213.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi3866 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1964 = new VTDObjectGetter(pi3866);
            VTDPropertyInfoBase pi3867 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1903 = new VTDObjectSetter(pi3867);
            binding_setter1903 = new StringFormaterDecorator(binding_setter1903,"{Step.OutputProperties.Loop201.CurrentIterationNumber}");
            bind_dir1903 = new BindDirection(_flow.Loop201,binding_getter1964,binding_setter1903,BindTargetType.ToInProperty);
            _flow.DbFetchData213.InDirections.Add(bind_dir1903);
            VTDPropertyInfoBase pi3868 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1965 = new VTDObjectGetter(pi3868);
            VTDPropertyInfoBase pi3869 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1904 = new VTDObjectSetter(pi3869);
            bind_dir1904 = new BindDirection(_flow.DbOpenConnection39,binding_getter1965,binding_setter1904,BindTargetType.ToInProperty);
            _flow.DbFetchData213.InDirections.Add(bind_dir1904);
            XmlDocument DbFetchData213_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData213_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData213_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData213.ExpectedOutputProperties = DbFetchData213_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    