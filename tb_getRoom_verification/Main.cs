/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getRoom_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir495 = null;
        public BindDirection bind_dir496 = null;
        public BindDirection bind_dir497 = null;
        public BindDirection bind_dir498 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity263 = null;
        public BindDirection bind_dir499 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity263_Policy = null;
        public BindDirection bind_dir500 = null;
        public BindDirection bind_dir501 = null;
        public BindDirection bind_dir502 = null;
        public BindDirection bind_dir503 = null;
        public BindDirection bind_dir504 = null;
        public BindDirection bind_dir505 = null;
        public BindDirection bind_dir506 = null;
        public BindDirection bind_dir507 = null;
        public BindDirection bind_dir508 = null;
        public BindDirection bind_dir509 = null;
        public BindDirection bind_dir510 = null;
        public BindDirection bind_dir511 = null;
        public BindDirection bind_dir512 = null;
        public BindDirection bind_dir513 = null;
        public BindDirection bind_dir514 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir515 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir516 = null;
        public BindDirection bind_dir517 = null;
        public BindDirection bind_dir518 = null;
        public BindDirection bind_dir519 = null;
        public BindDirection bind_dir520 = null;
        public BindDirection bind_dir521 = null;
        public BindDirection bind_dir522 = null;
        public BindDirection bind_dir523 = null;
        public BindDirection bind_dir524 = null;
        public BindDirection bind_dir525 = null;
        public BindDirection bind_dir526 = null;
        public BindDirection bind_dir527 = null;
        public BindDirection bind_dir528 = null;
        public BindDirection bind_dir529 = null;
        public BindDirection bind_dir530 = null;
        public BindDirection bind_dir531 = null;
        public BindDirection bind_dir532 = null;
        public BindDirection bind_dir533 = null;
        public BindDirection bind_dir534 = null;
        public BindDirection bind_dir535 = null;
        public BindDirection bind_dir536 = null;
        public BindDirection bind_dir537 = null;
        public BindDirection bind_dir538 = null;
        public BindDirection bind_dir539 = null;
        public BindDirection bind_dir540 = null;
        public BindDirection bind_dir541 = null;
        public BindDirection bind_dir542 = null;
        public BindDirection bind_dir543 = null;
        public BindDirection bind_dir544 = null;
        public BindDirection bind_dir545 = null;
        public BindDirection bind_dir546 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity259 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity259");
            _flow.DataFetchActivity256 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity256");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity258 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity258");
            _flow.DataExporterActivity261 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity261");
            _flow.DataExporterCloseActivity262 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity262");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity257 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity257");
            _flow.DataDisconnectActivity260 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity260");
            this.DataCursorActivity263 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity263");
            this.DataCursorActivity263_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence254 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence254");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity259.Comment = @"";
            _flow.DataFetchActivity259.IconPath = @"";
            _flow.DataFetchActivity259.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity259.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity259_QueryParameters_Document = new XmlDocument();
            DataFetchActivity259_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity259Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity259_QueryParameters_Document.LoadXml(xmlDataFetchActivity259Params);
            _flow.DataFetchActivity259.QueryParameters = DataFetchActivity259_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity259);
            this.Activities.Add (_flow.DataFetchActivity259);
            _flow.DataFetchActivity256.Comment = @"";
            _flow.DataFetchActivity256.IconPath = @"";
            _flow.DataFetchActivity256.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity256.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity256_QueryParameters_Document = new XmlDocument();
            DataFetchActivity256_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity256Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity256_QueryParameters_Document.LoadXml(xmlDataFetchActivity256Params);
            _flow.DataFetchActivity256.QueryParameters = DataFetchActivity256_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity256);
            this.Activities.Add (_flow.DataFetchActivity256);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity263);
            _flow.Loop2.Activities.Add (_flow.Sequence254);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity258.Comment = @"";
            _flow.DataExporterActivity258.IconPath = @"";
            VTDPropertyInfoBase pi1007 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter513 = new VTDObjectGetter(pi1007);
            VTDPropertyInfoBase pi1008 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter495 = new VTDObjectSetter(pi1008);
            binding_setter495 = new StringFormaterDecorator(binding_setter495,"{Step.DataFetchActivity256.OutTable}");
            bind_dir495 = new BindDirection(_flow.DataFetchActivity256,binding_getter513,binding_setter495,BindTargetType.ToInProperty);
            _flow.DataExporterActivity258.InDirections.Add(bind_dir495);
            this.Activities.Add (_flow.DataExporterActivity258);
            _flow.DataExporterActivity261.Comment = @"";
            _flow.DataExporterActivity261.IconPath = @"";
            VTDPropertyInfoBase pi1009 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter514 = new VTDObjectGetter(pi1009);
            VTDPropertyInfoBase pi1010 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter496 = new VTDObjectSetter(pi1010);
            binding_setter496 = new StringFormaterDecorator(binding_setter496,"{Step.DataFetchActivity259.OutTable}");
            bind_dir496 = new BindDirection(_flow.DataFetchActivity259,binding_getter514,binding_setter496,BindTargetType.ToInProperty);
            _flow.DataExporterActivity261.InDirections.Add(bind_dir496);
            this.Activities.Add (_flow.DataExporterActivity261);
            _flow.DataExporterCloseActivity262.Comment = @"";
            _flow.DataExporterCloseActivity262.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity262);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity257.Comment = @"";
            _flow.DataDisconnectActivity257.IconPath = @"";
            VTDPropertyInfoBase pi1011 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter515 = new VTDObjectGetter(pi1011);
            VTDPropertyInfoBase pi1012 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter497 = new VTDObjectSetter(pi1012);
            binding_setter497 = new StringFormaterDecorator(binding_setter497,"{Step.DataFetchActivity256.OutTable}");
            bind_dir497 = new BindDirection(_flow.DataFetchActivity256,binding_getter515,binding_setter497,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity257.InDirections.Add(bind_dir497);
            this.Activities.Add (_flow.DataDisconnectActivity257);
            _flow.DataDisconnectActivity260.Comment = @"";
            _flow.DataDisconnectActivity260.IconPath = @"";
            VTDPropertyInfoBase pi1013 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter516 = new VTDObjectGetter(pi1013);
            VTDPropertyInfoBase pi1014 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter498 = new VTDObjectSetter(pi1014);
            binding_setter498 = new StringFormaterDecorator(binding_setter498,"{Step.DataFetchActivity259.OutTable}");
            bind_dir498 = new BindDirection(_flow.DataFetchActivity259,binding_getter516,binding_setter498,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity260.InDirections.Add(bind_dir498);
            this.Activities.Add (_flow.DataDisconnectActivity260);
            this.DataCursorActivity263.Comment = @"";
            this.DataCursorActivity263.IconPath = @"";
            VTDPropertyInfoBase pi1015 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter517 = new VTDObjectGetter(pi1015);
            VTDPropertyInfoBase pi1016 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter499 = new VTDObjectSetter(pi1016);
            binding_setter499 = new StringFormaterDecorator(binding_setter499,"{Step.DataFetchActivity256.OutTable}");
            bind_dir499 = new BindDirection(_flow.DataFetchActivity256,binding_getter517,binding_setter499,BindTargetType.ToInProperty);
            this.DataCursorActivity263.InDirections.Add(bind_dir499);
            this.DataCursorActivity263_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity263_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.StartCondition.Value = "";
            this.DataCursorActivity263_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity263_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.EndCondition.Value = "";
            this.DataCursorActivity263_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity263_Policy.StepSize = 1;
            this.DataCursorActivity263_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity263.Policy = this.DataCursorActivity263_Policy;
            this.DataCursorActivity263.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity263.ResetCursor;
            _flow.Sequence254.Comment = @"";
            _flow.Sequence254.IconPath = @"";
            _flow.Sequence254.Name = @"序列254";
            _flow.Sequence254.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence254.Activities.Add (_flow.Loop56);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence254.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence254.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getRoom_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_getRoom_verification表有效行数";
            VTDPropertyInfoBase pi1017 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter518 = new VTDObjectGetter(pi1017);
            VTDPropertyInfoBase pi1018 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter500 = new VTDObjectSetter(pi1018);
            bind_dir500 = new BindDirection(_flow.DbOpenConnection39,binding_getter518,binding_setter500,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir500);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中xsid";
            VTDPropertyInfoBase pi1019 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter519 = new VTDObjectGetter(pi1019);
            VTDPropertyInfoBase pi1020 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter501 = new VTDObjectSetter(pi1020);
            bind_dir501 = new BindDirection(_flow.DbOpenConnection39,binding_getter519,binding_setter501,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir501);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop56.NumberOfIterations = (int)0;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getRoom_verification中的测试用例";
            VTDPropertyInfoBase pi1021 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter520 = new VTDXPathGetter(pi1021,XmlTypeCode.Long);
            binding_getter520 = new XPathGetterDecorator(binding_getter520,"{Array0}",1);
            VTDPropertyInfoBase pi1022 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter502 = new VTDObjectSetter(pi1022);
            bind_dir502 = new BindDirection(_flow.DbFetchData58,binding_getter520,binding_setter502,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir502);
            _flow.Loop56.Activities.Add (this.DataCursorActivity264);
            _flow.Loop56.Activities.Add (_flow.Sequence255);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/iq/getRoom.php接口token实行加密";
            VTDPropertyInfoBase pi1023 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter521 = new VTDObjectGetter(pi1023);
            VTDPropertyInfoBase pi1024 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter503 = new VTDObjectSetter(pi1024);
            binding_setter503 = new StringFormaterDecorator(binding_setter503,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir503 = new BindDirection(this.DataCursorActivity263,binding_getter521,binding_setter503,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir503);
            VTDPropertyInfoBase pi1025 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter522 = new VTDObjectGetter(pi1025);
            VTDPropertyInfoBase pi1026 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter504 = new VTDObjectSetter(pi1026);
            bind_dir504 = new BindDirection(_flow.DbOpenConnection39,binding_getter522,binding_setter504,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir504);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1027 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter523 = new VTDObjectGetter(pi1027);
            VTDPropertyInfoBase pi1028 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter505 = new VTDObjectSetter(pi1028);
            bind_dir505 = new BindDirection(_flow.DbOpenConnection39,binding_getter523,binding_setter505,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir505);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}&myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getRoom}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/iq/getRoom.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi1029 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter524 = new VTDObjectGetter(pi1029);
            VTDPropertyInfoBase pi1030 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter506 = new VTDObjectSetter(pi1030);
            binding_setter506 = new StringFormaterDecorator(binding_setter506,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir506 = new BindDirection(this.DataCursorActivity263,binding_getter524,binding_setter506,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir506);
            VTDPropertyInfoBase pi1031 = new VTDPropertyInfoBase("getRoom");
            VTDBaseGetter binding_getter525 = new VTDObjectGetter(pi1031);
            VTDPropertyInfoBase pi1032 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter507 = new VTDObjectSetter(pi1032);
            binding_setter507 = new StringFormaterDecorator(binding_setter507,"{DataSource.tb_global_table.getRoom}");
            bind_dir507 = new BindDirection(this.DataCursorActivity263,binding_getter525,binding_setter507,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir507);
            VTDPropertyInfoBase pi1033 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter526 = new VTDObjectGetter(pi1033);
            VTDPropertyInfoBase pi1034 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter508 = new VTDObjectSetter(pi1034);
            binding_setter508 = new StringFormaterDecorator(binding_setter508,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir508 = new BindDirection(this.DataCursorActivity263,binding_getter526,binding_setter508,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir508);
            VTDPropertyInfoBase pi1035 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter527 = new VTDObjectGetter(pi1035);
            VTDPropertyInfoBase pi1036 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter509 = new VTDObjectSetter(pi1036);
            binding_setter509 = new StringFormaterDecorator(binding_setter509,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir509 = new BindDirection(this.DataCursorActivity263,binding_getter527,binding_setter509,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir509);
            VTDPropertyInfoBase pi1037 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter528 = new VTDXPathGetter(pi1037,XmlTypeCode.String);
            binding_getter528 = new XPathGetterDecorator(binding_getter528,"{Array0}",1);
            VTDPropertyInfoBase pi1038 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter510 = new VTDObjectSetter(pi1038);
            binding_setter510 = new StringFormaterDecorator(binding_setter510,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir510 = new BindDirection(_flow.DbFetchData248,binding_getter528,binding_setter510,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir510);
            VTDPropertyInfoBase pi1039 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter529 = new VTDObjectGetter(pi1039);
            VTDPropertyInfoBase pi1040 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter511 = new VTDObjectSetter(pi1040);
            binding_setter511 = new StringFormaterDecorator(binding_setter511,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir511 = new BindDirection(this.DataCursorActivity263,binding_getter529,binding_setter511,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir511);
            VTDPropertyInfoBase pi1041 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter530 = new VTDXPathGetter(pi1041,XmlTypeCode.String);
            binding_getter530 = new XPathGetterDecorator(binding_getter530,"{Array0}",1);
            VTDPropertyInfoBase pi1042 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter512 = new VTDObjectSetter(pi1042);
            binding_setter512 = new StringFormaterDecorator(binding_setter512,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir512 = new BindDirection(_flow.DbFetchData76,binding_getter530,binding_setter512,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir512);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/getRoom.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1043 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter531 = new VTDObjectGetter(pi1043);
            VTDPropertyInfoBase pi1044 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter513 = new VTDObjectSetter(pi1044);
            binding_setter513 = new StringFormaterDecorator(binding_setter513,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir513 = new BindDirection(_flow.HTTPActivity73,binding_getter531,binding_setter513,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir513);
            VTDPropertyInfoBase pi1045 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter532 = new VTDObjectGetter(pi1045);
            VTDPropertyInfoBase pi1046 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter514 = new VTDObjectSetter(pi1046);
            bind_dir514 = new BindDirection(_flow.DbOpenConnection39,binding_getter532,binding_setter514,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir514);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1047 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter533 = new VTDObjectGetter(pi1047);
            VTDPropertyInfoBase pi1048 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter515 = new VTDObjectSetter(pi1048);
            binding_setter515 = new StringFormaterDecorator(binding_setter515,"{Step.DataFetchActivity256.OutTable}");
            bind_dir515 = new BindDirection(_flow.DataFetchActivity256,binding_getter533,binding_setter515,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir515);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence255.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence255.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,myJid,token from tb_getRoom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getRoom_verification表中字段信息";
            VTDPropertyInfoBase pi1049 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter534 = new VTDObjectGetter(pi1049);
            VTDPropertyInfoBase pi1050 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter516 = new VTDObjectSetter(pi1050);
            binding_setter516 = new StringFormaterDecorator(binding_setter516,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir516 = new BindDirection(_flow.Loop56,binding_getter534,binding_setter516,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir516);
            VTDPropertyInfoBase pi1051 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter535 = new VTDObjectGetter(pi1051);
            VTDPropertyInfoBase pi1052 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter517 = new VTDObjectSetter(pi1052);
            bind_dir517 = new BindDirection(_flow.DbOpenConnection39,binding_getter535,binding_setter517,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir517);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><myJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将本地表的xsid更新";
            VTDPropertyInfoBase pi1053 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter536 = new VTDXPathGetter(pi1053,XmlTypeCode.String);
            binding_getter536 = new XPathGetterDecorator(binding_getter536,"{Array0}",1);
            VTDPropertyInfoBase pi1054 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter518 = new VTDObjectSetter(pi1054);
            binding_setter518 = new StringFormaterDecorator(binding_setter518,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir518 = new BindDirection(_flow.DbFetchData57,binding_getter536,binding_setter518,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir518);
            VTDPropertyInfoBase pi1055 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter537 = new VTDXPathGetter(pi1055,XmlTypeCode.String);
            binding_getter537 = new XPathGetterDecorator(binding_getter537,"{Array0}",1);
            VTDPropertyInfoBase pi1056 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter519 = new VTDObjectSetter(pi1056);
            binding_setter519 = new StringFormaterDecorator(binding_setter519,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir519 = new BindDirection(_flow.DbFetchData248,binding_getter537,binding_setter519,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir519);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi1057 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter538 = new VTDXPathGetter(pi1057,XmlTypeCode.String);
            binding_getter538 = new XPathGetterDecorator(binding_getter538,"{Array0}",1);
            VTDPropertyInfoBase pi1058 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter520 = new VTDObjectSetter(pi1058);
            binding_setter520 = new StringFormaterDecorator(binding_setter520,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir520 = new BindDirection(_flow.DbFetchData57,binding_getter538,binding_setter520,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir520);
            VTDPropertyInfoBase pi1059 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter539 = new VTDObjectGetter(pi1059);
            VTDPropertyInfoBase pi1060 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter521 = new VTDObjectSetter(pi1060);
            bind_dir521 = new BindDirection(_flow.DbOpenConnection39,binding_getter539,binding_setter521,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir521);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi1061 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter540 = new VTDObjectGetter(pi1061);
            VTDPropertyInfoBase pi1062 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter522 = new VTDObjectSetter(pi1062);
            bind_dir522 = new BindDirection(_flow.DbOpenConnection39,binding_getter540,binding_setter522,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir522);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"305bbc2b43542b3d0203daffe9073c3cba5b47d9";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi1063 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter541 = new VTDXPathGetter(pi1063,XmlTypeCode.String);
            binding_getter541 = new XPathGetterDecorator(binding_getter541,"{Array0}",1);
            VTDPropertyInfoBase pi1064 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter523 = new VTDObjectSetter(pi1064);
            binding_setter523 = new StringFormaterDecorator(binding_setter523,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir523 = new BindDirection(_flow.DbFetchData57,binding_getter541,binding_setter523,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir523);
            VTDPropertyInfoBase pi1065 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter542 = new VTDXPathGetter(pi1065,XmlTypeCode.String);
            binding_getter542 = new XPathGetterDecorator(binding_getter542,"{Array0}",1);
            VTDPropertyInfoBase pi1066 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter524 = new VTDObjectSetter(pi1066);
            binding_setter524 = new StringFormaterDecorator(binding_setter524,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir524 = new BindDirection(_flow.DbFetchData252,binding_getter542,binding_setter524,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir524);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&myJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getRoom}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/getRoom.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi1067 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter543 = new VTDObjectGetter(pi1067);
            VTDPropertyInfoBase pi1068 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter525 = new VTDObjectSetter(pi1068);
            binding_setter525 = new StringFormaterDecorator(binding_setter525,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir525 = new BindDirection(this.DataCursorActivity264,binding_getter543,binding_setter525,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir525);
            VTDPropertyInfoBase pi1069 = new VTDPropertyInfoBase("getRoom");
            VTDBaseGetter binding_getter544 = new VTDObjectGetter(pi1069);
            VTDPropertyInfoBase pi1070 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter526 = new VTDObjectSetter(pi1070);
            binding_setter526 = new StringFormaterDecorator(binding_setter526,"{DataSource.tb_global_table.getRoom}");
            bind_dir526 = new BindDirection(this.DataCursorActivity264,binding_getter544,binding_setter526,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir526);
            VTDPropertyInfoBase pi1071 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter545 = new VTDObjectGetter(pi1071);
            VTDPropertyInfoBase pi1072 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter527 = new VTDObjectSetter(pi1072);
            binding_setter527 = new StringFormaterDecorator(binding_setter527,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir527 = new BindDirection(this.DataCursorActivity264,binding_getter545,binding_setter527,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir527);
            VTDPropertyInfoBase pi1073 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter546 = new VTDObjectGetter(pi1073);
            VTDPropertyInfoBase pi1074 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter528 = new VTDObjectSetter(pi1074);
            binding_setter528 = new StringFormaterDecorator(binding_setter528,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir528 = new BindDirection(this.DataCursorActivity264,binding_getter546,binding_setter528,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir528);
            VTDPropertyInfoBase pi1075 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter547 = new VTDObjectGetter(pi1075);
            VTDPropertyInfoBase pi1076 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter529 = new VTDObjectSetter(pi1076);
            binding_setter529 = new StringFormaterDecorator(binding_setter529,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir529 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter547,binding_setter529,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir529);
            VTDPropertyInfoBase pi1077 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter548 = new VTDXPathGetter(pi1077,XmlTypeCode.String);
            binding_getter548 = new XPathGetterDecorator(binding_getter548,"{Array0}",1);
            VTDPropertyInfoBase pi1078 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter530 = new VTDObjectSetter(pi1078);
            binding_setter530 = new StringFormaterDecorator(binding_setter530,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].myJid}");
            bind_dir530 = new BindDirection(_flow.DbFetchData57,binding_getter548,binding_setter530,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir530);
            VTDPropertyInfoBase pi1079 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter549 = new VTDObjectGetter(pi1079);
            VTDPropertyInfoBase pi1080 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter531 = new VTDObjectSetter(pi1080);
            binding_setter531 = new StringFormaterDecorator(binding_setter531,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir531 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter549,binding_setter531,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir531);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1081 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter550 = new VTDObjectGetter(pi1081);
            VTDPropertyInfoBase pi1082 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter532 = new VTDObjectSetter(pi1082);
            binding_setter532 = new StringFormaterDecorator(binding_setter532,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir532 = new BindDirection(_flow.HTTPActivity59,binding_getter550,binding_setter532,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir532);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getRoom_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi1083 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter551 = new VTDObjectGetter(pi1083);
            VTDPropertyInfoBase pi1084 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter533 = new VTDObjectSetter(pi1084);
            binding_setter533 = new StringFormaterDecorator(binding_setter533,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir533 = new BindDirection(_flow.HTTPActivity59,binding_getter551,binding_setter533,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir533);
            VTDPropertyInfoBase pi1085 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter552 = new VTDObjectGetter(pi1085);
            VTDPropertyInfoBase pi1086 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter534 = new VTDObjectSetter(pi1086);
            binding_setter534 = new StringFormaterDecorator(binding_setter534,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir534 = new BindDirection(_flow.Loop56,binding_getter552,binding_setter534,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir534);
            VTDPropertyInfoBase pi1087 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter553 = new VTDObjectGetter(pi1087);
            VTDPropertyInfoBase pi1088 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter535 = new VTDObjectSetter(pi1088);
            bind_dir535 = new BindDirection(_flow.DbOpenConnection39,binding_getter553,binding_setter535,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir535);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getRoom_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1089 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter554 = new VTDJsonGetter(pi1089);
            VTDPropertyInfoBase pi1090 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter536 = new VTDObjectSetter(pi1090);
            binding_setter536 = new StringFormaterDecorator(binding_setter536,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir536 = new BindDirection(_flow.StringToJsonActivity60,binding_getter554,binding_setter536,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir536);
            VTDPropertyInfoBase pi1091 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter555 = new VTDObjectGetter(pi1091);
            VTDPropertyInfoBase pi1092 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter537 = new VTDObjectSetter(pi1092);
            binding_setter537 = new StringFormaterDecorator(binding_setter537,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir537 = new BindDirection(_flow.Loop56,binding_getter555,binding_setter537,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir537);
            VTDPropertyInfoBase pi1093 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter556 = new VTDObjectGetter(pi1093);
            VTDPropertyInfoBase pi1094 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter538 = new VTDObjectSetter(pi1094);
            bind_dir538 = new BindDirection(_flow.DbOpenConnection39,binding_getter556,binding_setter538,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir538);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getRoom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1095 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter557 = new VTDObjectGetter(pi1095);
            VTDPropertyInfoBase pi1096 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter539 = new VTDObjectSetter(pi1096);
            binding_setter539 = new StringFormaterDecorator(binding_setter539,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir539 = new BindDirection(_flow.Loop56,binding_getter557,binding_setter539,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir539);
            VTDPropertyInfoBase pi1097 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter558 = new VTDObjectGetter(pi1097);
            VTDPropertyInfoBase pi1098 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter540 = new VTDObjectSetter(pi1098);
            bind_dir540 = new BindDirection(_flow.DbOpenConnection39,binding_getter558,binding_setter540,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir540);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getRoom_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1099 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter559 = new VTDObjectGetter(pi1099);
            VTDPropertyInfoBase pi1100 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter541 = new VTDObjectSetter(pi1100);
            binding_setter541 = new StringFormaterDecorator(binding_setter541,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir541 = new BindDirection(_flow.Loop56,binding_getter559,binding_setter541,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir541);
            VTDPropertyInfoBase pi1101 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter560 = new VTDObjectGetter(pi1101);
            VTDPropertyInfoBase pi1102 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter542 = new VTDObjectSetter(pi1102);
            bind_dir542 = new BindDirection(_flow.DbOpenConnection39,binding_getter560,binding_setter542,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir542);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1103 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter561 = new VTDXPathGetter(pi1103,XmlTypeCode.String);
            binding_getter561 = new XPathGetterDecorator(binding_getter561,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter561),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1104 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter562 = new VTDXPathGetter(pi1104,XmlTypeCode.String);
            binding_getter562 = new XPathGetterDecorator(binding_getter562,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter562),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getRoom_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1105 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter563 = new VTDObjectGetter(pi1105);
            VTDPropertyInfoBase pi1106 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter543 = new VTDObjectSetter(pi1106);
            binding_setter543 = new StringFormaterDecorator(binding_setter543,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir543 = new BindDirection(_flow.Loop56,binding_getter563,binding_setter543,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir543);
            VTDPropertyInfoBase pi1107 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter564 = new VTDObjectGetter(pi1107);
            VTDPropertyInfoBase pi1108 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter544 = new VTDObjectSetter(pi1108);
            bind_dir544 = new BindDirection(_flow.DbOpenConnection39,binding_getter564,binding_setter544,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir544);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getRoom_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1109 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter565 = new VTDObjectGetter(pi1109);
            VTDPropertyInfoBase pi1110 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter545 = new VTDObjectSetter(pi1110);
            binding_setter545 = new StringFormaterDecorator(binding_setter545,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir545 = new BindDirection(_flow.Loop56,binding_getter565,binding_setter545,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir545);
            VTDPropertyInfoBase pi1111 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter566 = new VTDObjectGetter(pi1111);
            VTDPropertyInfoBase pi1112 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter546 = new VTDObjectSetter(pi1112);
            bind_dir546 = new BindDirection(_flow.DbOpenConnection39,binding_getter566,binding_setter546,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir546);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    