/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_creategroup_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1731 = null;
        public BindDirection bind_dir1732 = null;
        public BindDirection bind_dir1733 = null;
        public BindDirection bind_dir1734 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir1735 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir1736 = null;
        public BindDirection bind_dir1737 = null;
        public BindDirection bind_dir1738 = null;
        public BindDirection bind_dir1739 = null;
        public BindDirection bind_dir1740 = null;
        public BindDirection bind_dir1741 = null;
        public BindDirection bind_dir1742 = null;
        public BindDirection bind_dir1743 = null;
        public BindDirection bind_dir1744 = null;
        public BindDirection bind_dir1745 = null;
        public BindDirection bind_dir1746 = null;
        public BindDirection bind_dir1747 = null;
        public BindDirection bind_dir1748 = null;
        public BindDirection bind_dir1749 = null;
        public BindDirection bind_dir1750 = null;
        public BindDirection bind_dir1751 = null;
        public BindDirection bind_dir1752 = null;
        public BindDirection bind_dir1753 = null;
        public BindDirection bind_dir1754 = null;
        public BindDirection bind_dir1755 = null;
        public BindDirection bind_dir1756 = null;
        public BindDirection bind_dir1757 = null;
        public BindDirection bind_dir1758 = null;
        public BindDirection bind_dir1759 = null;
        public BindDirection bind_dir1760 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity265 = null;
        public BindDirection bind_dir1761 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity265_Policy = null;
        public BindDirection bind_dir1762 = null;
        public BindDirection bind_dir1763 = null;
        public BindDirection bind_dir1764 = null;
        public BindDirection bind_dir1765 = null;
        public BindDirection bind_dir1766 = null;
        public BindDirection bind_dir1767 = null;
        public BindDirection bind_dir1768 = null;
        public BindDirection bind_dir1769 = null;
        public BindDirection bind_dir1770 = null;
        public BindDirection bind_dir1771 = null;
        public BindDirection bind_dir1772 = null;
        public BindDirection bind_dir1773 = null;
        public BindDirection bind_dir1774 = null;
        public BindDirection bind_dir1775 = null;
        public BindDirection bind_dir1776 = null;
        public BindDirection bind_dir1777 = null;
        public BindDirection bind_dir1778 = null;
        public BindDirection bind_dir1779 = null;
        public BindDirection bind_dir1780 = null;
        public BindDirection bind_dir1781 = null;
        public BindDirection bind_dir1782 = null;
        public BindDirection bind_dir1783 = null;
        public BindDirection bind_dir1784 = null;
        public BindDirection bind_dir1785 = null;
        public BindDirection bind_dir1786 = null;
        public BindDirection bind_dir1787 = null;
        public BindDirection bind_dir1788 = null;
        public BindDirection bind_dir1789 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity260 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity260");
            _flow.DataFetchActivity257 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity257");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity259 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity259");
            _flow.DataExporterActivity262 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity262");
            _flow.DataExporterCloseActivity263 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity263");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity258 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity258");
            _flow.DataDisconnectActivity261 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity261");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.CallQTPTest253 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest253");
            _flow.DbFetchData254 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData254");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.StringToJsonActivity248 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity248");
            _flow.DbFetchData249 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData249");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity265 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity265");
            this.DataCursorActivity265_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence256 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence256");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity251 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity251");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity260.Comment = @"";
            _flow.DataFetchActivity260.IconPath = @"";
            _flow.DataFetchActivity260.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity260.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity260_QueryParameters_Document = new XmlDocument();
            DataFetchActivity260_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity260Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity260_QueryParameters_Document.LoadXml(xmlDataFetchActivity260Params);
            _flow.DataFetchActivity260.QueryParameters = DataFetchActivity260_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity260);
            this.Activities.Add (_flow.DataFetchActivity260);
            _flow.DataFetchActivity257.Comment = @"";
            _flow.DataFetchActivity257.IconPath = @"";
            _flow.DataFetchActivity257.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity257.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity257_QueryParameters_Document = new XmlDocument();
            DataFetchActivity257_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity257Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd=www.365ime.com!;</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity257_QueryParameters_Document.LoadXml(xmlDataFetchActivity257Params);
            _flow.DataFetchActivity257.QueryParameters = DataFetchActivity257_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity257);
            this.Activities.Add (_flow.DataFetchActivity257);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity264);
            _flow.Loop2.Activities.Add (_flow.Sequence255);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity259.Comment = @"";
            _flow.DataExporterActivity259.IconPath = @"";
            VTDPropertyInfoBase pi3515 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1785 = new VTDObjectGetter(pi3515);
            VTDPropertyInfoBase pi3516 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1731 = new VTDObjectSetter(pi3516);
            binding_setter1731 = new StringFormaterDecorator(binding_setter1731,"{Step.DataFetchActivity257.OutTable}");
            bind_dir1731 = new BindDirection(_flow.DataFetchActivity257,binding_getter1785,binding_setter1731,BindTargetType.ToInProperty);
            _flow.DataExporterActivity259.InDirections.Add(bind_dir1731);
            this.Activities.Add (_flow.DataExporterActivity259);
            _flow.DataExporterActivity262.Comment = @"";
            _flow.DataExporterActivity262.IconPath = @"";
            VTDPropertyInfoBase pi3517 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1786 = new VTDObjectGetter(pi3517);
            VTDPropertyInfoBase pi3518 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1732 = new VTDObjectSetter(pi3518);
            binding_setter1732 = new StringFormaterDecorator(binding_setter1732,"{Step.DataFetchActivity260.OutTable}");
            bind_dir1732 = new BindDirection(_flow.DataFetchActivity260,binding_getter1786,binding_setter1732,BindTargetType.ToInProperty);
            _flow.DataExporterActivity262.InDirections.Add(bind_dir1732);
            this.Activities.Add (_flow.DataExporterActivity262);
            _flow.DataExporterCloseActivity263.Comment = @"";
            _flow.DataExporterCloseActivity263.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity263);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity258.Comment = @"";
            _flow.DataDisconnectActivity258.IconPath = @"";
            VTDPropertyInfoBase pi3519 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1787 = new VTDObjectGetter(pi3519);
            VTDPropertyInfoBase pi3520 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1733 = new VTDObjectSetter(pi3520);
            binding_setter1733 = new StringFormaterDecorator(binding_setter1733,"{Step.DataFetchActivity257.OutTable}");
            bind_dir1733 = new BindDirection(_flow.DataFetchActivity257,binding_getter1787,binding_setter1733,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity258.InDirections.Add(bind_dir1733);
            this.Activities.Add (_flow.DataDisconnectActivity258);
            _flow.DataDisconnectActivity261.Comment = @"";
            _flow.DataDisconnectActivity261.IconPath = @"";
            VTDPropertyInfoBase pi3521 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1788 = new VTDObjectGetter(pi3521);
            VTDPropertyInfoBase pi3522 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1734 = new VTDObjectSetter(pi3522);
            binding_setter1734 = new StringFormaterDecorator(binding_setter1734,"{Step.DataFetchActivity260.OutTable}");
            bind_dir1734 = new BindDirection(_flow.DataFetchActivity260,binding_getter1788,binding_setter1734,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity261.InDirections.Add(bind_dir1734);
            this.Activities.Add (_flow.DataDisconnectActivity261);
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi3523 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1789 = new VTDObjectGetter(pi3523);
            VTDPropertyInfoBase pi3524 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1735 = new VTDObjectSetter(pi3524);
            binding_setter1735 = new StringFormaterDecorator(binding_setter1735,"{Step.DataFetchActivity257.OutTable}");
            bind_dir1735 = new BindDirection(_flow.DataFetchActivity257,binding_getter1789,binding_setter1735,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir1735);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest253);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData254);
            _flow.Sequence255.Activities.Add (_flow.Loop56);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence255.Activities.Add (_flow.StringToJsonActivity248);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData249);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"{DataSource.tb_global_table.MysqlOdbc}";
            _flow.DbOpenConnection39.Password = @"";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            VTDPropertyInfoBase pi3525 = new VTDPropertyInfoBase("MysqlOdbc");
            VTDBaseGetter binding_getter1790 = new VTDObjectGetter(pi3525);
            VTDPropertyInfoBase pi3526 = new VTDPropertyInfoBase("ConnectionString");
            VTDBaseSetter binding_setter1736 = new VTDObjectSetter(pi3526);
            binding_setter1736 = new StringFormaterDecorator(binding_setter1736,"{DataSource.tb_global_table.MysqlOdbc}");
            bind_dir1736 = new BindDirection(this.DataCursorActivity264,binding_getter1790,binding_setter1736,BindTargetType.ToInProperty);
            _flow.DbOpenConnection39.InDirections.Add(bind_dir1736);
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_creategroup_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_sendMessage_verification表有效行数";
            VTDPropertyInfoBase pi3527 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1791 = new VTDObjectGetter(pi3527);
            VTDPropertyInfoBase pi3528 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1737 = new VTDObjectSetter(pi3528);
            bind_dir1737 = new BindDirection(_flow.DbOpenConnection39,binding_getter1791,binding_setter1737,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir1737);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData250.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3529 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1792 = new VTDObjectGetter(pi3529);
            VTDPropertyInfoBase pi3530 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1738 = new VTDObjectSetter(pi3530);
            bind_dir1738 = new BindDirection(_flow.DbOpenConnection39,binding_getter1792,binding_setter1738,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir1738);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.DbFetchData252.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}DcVvwMFWs5{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"对/xmp/createGroup.php接口token实行加密";
            VTDPropertyInfoBase pi3531 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1793 = new VTDXPathGetter(pi3531,XmlTypeCode.String);
            binding_getter1793 = new XPathGetterDecorator(binding_getter1793,"{Array0}",1);
            VTDPropertyInfoBase pi3532 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1739 = new VTDObjectSetter(pi3532);
            binding_setter1739 = new StringFormaterDecorator(binding_setter1739,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir1739 = new BindDirection(_flow.DbFetchData250,binding_getter1793,binding_setter1739,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir1739);
            VTDPropertyInfoBase pi3533 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1794 = new VTDObjectGetter(pi3533);
            VTDPropertyInfoBase pi3534 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1740 = new VTDObjectSetter(pi3534);
            bind_dir1740 = new BindDirection(_flow.DbOpenConnection39,binding_getter1794,binding_setter1740,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir1740);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.CallQTPTest253.Comment = @"";
            _flow.CallQTPTest253.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest253.Name = @"Encryption.SHA1";
            _flow.CallQTPTest253.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ScriptPath}");
            _flow.CallQTPTest253.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ActionName}");
            _flow.CallQTPTest253.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.Description}");
            _flow.CallQTPTest253.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.IsActionSelected}");
            _flow.CallQTPTest253.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.ResultLocation}");
            _flow.CallQTPTest253.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest253.QCScriptPath}");
            _flow.DbFetchData254.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData254.Timeout = (int)30;
            _flow.DbFetchData254.Comment = @"";
            _flow.DbFetchData254.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData254.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi3535 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1795 = new VTDObjectGetter(pi3535);
            VTDPropertyInfoBase pi3536 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1741 = new VTDObjectSetter(pi3536);
            bind_dir1741 = new BindDirection(_flow.DbOpenConnection39,binding_getter1795,binding_setter1741,BindTargetType.ToInProperty);
            _flow.DbFetchData254.InDirections.Add(bind_dir1741);
            XmlDocument DbFetchData254_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData254_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData254_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData254.ExpectedOutputProperties = DbFetchData254_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop56.NumberOfIterations = (int)1;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_creategroup_verification中的测试用例";
            VTDPropertyInfoBase pi3537 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter1796 = new VTDXPathGetter(pi3537,XmlTypeCode.Long);
            binding_getter1796 = new XPathGetterDecorator(binding_getter1796,"{Array0}",1);
            VTDPropertyInfoBase pi3538 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter1742 = new VTDObjectSetter(pi3538);
            bind_dir1742 = new BindDirection(_flow.DbFetchData58,binding_getter1796,binding_setter1742,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir1742);
            _flow.Loop56.Activities.Add (this.DataCursorActivity265);
            _flow.Loop56.Activities.Add (_flow.Sequence256);
            _flow.DbFetchData247.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi3539 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1797 = new VTDObjectGetter(pi3539);
            VTDPropertyInfoBase pi3540 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1743 = new VTDObjectSetter(pi3540);
            bind_dir1743 = new BindDirection(_flow.DbOpenConnection39,binding_getter1797,binding_setter1743,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir1743);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}DcVvwMFWs5{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/xmp/createGroup.php接口token实行加密";
            VTDPropertyInfoBase pi3541 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1798 = new VTDXPathGetter(pi3541,XmlTypeCode.String);
            binding_getter1798 = new XPathGetterDecorator(binding_getter1798,"{Array0}",1);
            VTDPropertyInfoBase pi3542 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1744 = new VTDObjectSetter(pi3542);
            binding_setter1744 = new StringFormaterDecorator(binding_setter1744,"{Step.OutputProperties.DbFetchData247.ResultTable.Row[1].ResponseXsid}");
            bind_dir1744 = new BindDirection(_flow.DbFetchData247,binding_getter1798,binding_setter1744,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1744);
            VTDPropertyInfoBase pi3543 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1799 = new VTDObjectGetter(pi3543);
            VTDPropertyInfoBase pi3544 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1745 = new VTDObjectSetter(pi3544);
            binding_setter1745 = new StringFormaterDecorator(binding_setter1745,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1745 = new BindDirection(this.DataCursorActivity264,binding_getter1799,binding_setter1745,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1745);
            VTDPropertyInfoBase pi3545 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1800 = new VTDObjectGetter(pi3545);
            VTDPropertyInfoBase pi3546 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1746 = new VTDObjectSetter(pi3546);
            bind_dir1746 = new BindDirection(_flow.DbOpenConnection39,binding_getter1800,binding_setter1746,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir1746);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi3547 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1801 = new VTDObjectGetter(pi3547);
            VTDPropertyInfoBase pi3548 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1747 = new VTDObjectSetter(pi3548);
            bind_dir1747 = new BindDirection(_flow.DbOpenConnection39,binding_getter1801,binding_setter1747,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir1747);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中xsid的值";
            VTDPropertyInfoBase pi3549 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1802 = new VTDObjectGetter(pi3549);
            VTDPropertyInfoBase pi3550 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1748 = new VTDObjectSetter(pi3550);
            bind_dir1748 = new BindDirection(_flow.DbOpenConnection39,binding_getter1802,binding_setter1748,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir1748);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&Jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&groupName=测试群&groupDesc=hello，大家好！欢迎加入测试群&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.createGroup}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/xmp/createGroup.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi3551 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1803 = new VTDObjectGetter(pi3551);
            VTDPropertyInfoBase pi3552 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1749 = new VTDObjectSetter(pi3552);
            binding_setter1749 = new StringFormaterDecorator(binding_setter1749,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1749 = new BindDirection(this.DataCursorActivity264,binding_getter1803,binding_setter1749,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1749);
            VTDPropertyInfoBase pi3553 = new VTDPropertyInfoBase("createGroup");
            VTDBaseGetter binding_getter1804 = new VTDObjectGetter(pi3553);
            VTDPropertyInfoBase pi3554 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1750 = new VTDObjectSetter(pi3554);
            binding_setter1750 = new StringFormaterDecorator(binding_setter1750,"{DataSource.tb_global_table.createGroup}");
            bind_dir1750 = new BindDirection(this.DataCursorActivity264,binding_getter1804,binding_setter1750,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1750);
            VTDPropertyInfoBase pi3555 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1805 = new VTDObjectGetter(pi3555);
            VTDPropertyInfoBase pi3556 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1751 = new VTDObjectSetter(pi3556);
            binding_setter1751 = new StringFormaterDecorator(binding_setter1751,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1751 = new BindDirection(this.DataCursorActivity264,binding_getter1805,binding_setter1751,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1751);
            VTDPropertyInfoBase pi3557 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1806 = new VTDObjectGetter(pi3557);
            VTDPropertyInfoBase pi3558 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1752 = new VTDObjectSetter(pi3558);
            binding_setter1752 = new StringFormaterDecorator(binding_setter1752,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1752 = new BindDirection(this.DataCursorActivity264,binding_getter1806,binding_setter1752,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1752);
            VTDPropertyInfoBase pi3559 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1807 = new VTDXPathGetter(pi3559,XmlTypeCode.String);
            binding_getter1807 = new XPathGetterDecorator(binding_getter1807,"{Array0}",1);
            VTDPropertyInfoBase pi3560 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1753 = new VTDObjectSetter(pi3560);
            binding_setter1753 = new StringFormaterDecorator(binding_setter1753,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir1753 = new BindDirection(_flow.DbFetchData246,binding_getter1807,binding_setter1753,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1753);
            VTDPropertyInfoBase pi3561 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1808 = new VTDObjectGetter(pi3561);
            VTDPropertyInfoBase pi3562 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1754 = new VTDObjectSetter(pi3562);
            binding_setter1754 = new StringFormaterDecorator(binding_setter1754,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1754 = new BindDirection(this.DataCursorActivity264,binding_getter1808,binding_setter1754,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1754);
            VTDPropertyInfoBase pi3563 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1809 = new VTDXPathGetter(pi3563,XmlTypeCode.String);
            binding_getter1809 = new XPathGetterDecorator(binding_getter1809,"{Array0}",1);
            VTDPropertyInfoBase pi3564 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1755 = new VTDObjectSetter(pi3564);
            binding_setter1755 = new StringFormaterDecorator(binding_setter1755,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir1755 = new BindDirection(_flow.DbFetchData76,binding_getter1809,binding_setter1755,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir1755);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity248.InputString = @"{Step.OutputProperties.HTTPActivity73.ResponseBody}";
            _flow.StringToJsonActivity248.Comment = @"";
            _flow.StringToJsonActivity248.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity248.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi3565 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1810 = new VTDObjectGetter(pi3565);
            VTDPropertyInfoBase pi3566 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1756 = new VTDObjectSetter(pi3566);
            binding_setter1756 = new StringFormaterDecorator(binding_setter1756,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir1756 = new BindDirection(_flow.HTTPActivity73,binding_getter1810,binding_setter1756,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity248.InDirections.Add(bind_dir1756);
            _flow.DbFetchData249.QueryString = @"update tb_global_table set groupJid = '{Step.JsonContent.StringToJsonActivity248.groupJid}' where TestCase = 1";
            _flow.DbFetchData249.Timeout = (int)30;
            _flow.DbFetchData249.Comment = @"";
            _flow.DbFetchData249.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData249.Name = @"将groupJid更新至全局表";
            VTDPropertyInfoBase pi3567 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='groupJid'][1]");
            VTDBaseGetter binding_getter1811 = new VTDJsonGetter(pi3567);
            VTDPropertyInfoBase pi3568 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1757 = new VTDObjectSetter(pi3568);
            binding_setter1757 = new StringFormaterDecorator(binding_setter1757,"{Step.JsonContent.StringToJsonActivity248.groupJid}");
            bind_dir1757 = new BindDirection(_flow.StringToJsonActivity248,binding_getter1811,binding_setter1757,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir1757);
            VTDPropertyInfoBase pi3569 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1812 = new VTDObjectGetter(pi3569);
            VTDPropertyInfoBase pi3570 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1758 = new VTDObjectSetter(pi3570);
            bind_dir1758 = new BindDirection(_flow.DbOpenConnection39,binding_getter1812,binding_setter1758,BindTargetType.ToInProperty);
            _flow.DbFetchData249.InDirections.Add(bind_dir1758);
            XmlDocument DbFetchData249_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData249_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData249_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData249.ExpectedOutputProperties = DbFetchData249_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/xmp/createGroup.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi3571 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1813 = new VTDObjectGetter(pi3571);
            VTDPropertyInfoBase pi3572 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1759 = new VTDObjectSetter(pi3572);
            binding_setter1759 = new StringFormaterDecorator(binding_setter1759,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir1759 = new BindDirection(_flow.HTTPActivity73,binding_getter1813,binding_setter1759,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1759);
            VTDPropertyInfoBase pi3573 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1814 = new VTDObjectGetter(pi3573);
            VTDPropertyInfoBase pi3574 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1760 = new VTDObjectSetter(pi3574);
            bind_dir1760 = new BindDirection(_flow.DbOpenConnection39,binding_getter1814,binding_setter1760,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir1760);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity265.Comment = @"";
            this.DataCursorActivity265.IconPath = @"";
            VTDPropertyInfoBase pi3575 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1815 = new VTDObjectGetter(pi3575);
            VTDPropertyInfoBase pi3576 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter1761 = new VTDObjectSetter(pi3576);
            binding_setter1761 = new StringFormaterDecorator(binding_setter1761,"{Step.DataFetchActivity257.OutTable}");
            bind_dir1761 = new BindDirection(_flow.DataFetchActivity257,binding_getter1815,binding_setter1761,BindTargetType.ToInProperty);
            this.DataCursorActivity265.InDirections.Add(bind_dir1761);
            this.DataCursorActivity265_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity265_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.StartCondition.Value = "";
            this.DataCursorActivity265_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity265_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.EndCondition.Value = "";
            this.DataCursorActivity265_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity265_Policy.StepSize = 1;
            this.DataCursorActivity265_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity265.Policy = this.DataCursorActivity265_Policy;
            this.DataCursorActivity265.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity265.ResetCursor;
            _flow.Sequence256.Comment = @"";
            _flow.Sequence256.IconPath = @"";
            _flow.Sequence256.Name = @"序列256";
            _flow.Sequence256.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence256.Activities.Add (_flow.ReplaceStringActivity251);
            _flow.Sequence256.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence256.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence256.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,groupName,groupDesc,token from tb_creategroup_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查tb_creategroup_verification表中字段信息";
            VTDPropertyInfoBase pi3577 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1816 = new VTDObjectGetter(pi3577);
            VTDPropertyInfoBase pi3578 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1762 = new VTDObjectSetter(pi3578);
            binding_setter1762 = new StringFormaterDecorator(binding_setter1762,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1762 = new BindDirection(_flow.Loop56,binding_getter1816,binding_setter1762,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1762);
            VTDPropertyInfoBase pi3579 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1817 = new VTDObjectGetter(pi3579);
            VTDPropertyInfoBase pi3580 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1763 = new VTDObjectSetter(pi3580);
            bind_dir1763 = new BindDirection(_flow.DbOpenConnection39,binding_getter1817,binding_setter1763,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir1763);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><groupName /><groupDesc /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity251.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity251.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity251.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity251.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity251.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity251.CaseSensitive = true;
            _flow.ReplaceStringActivity251.Comment = @"";
            _flow.ReplaceStringActivity251.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity251.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi3581 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter1818 = new VTDXPathGetter(pi3581,XmlTypeCode.String);
            binding_getter1818 = new XPathGetterDecorator(binding_getter1818,"{Array0}",1);
            VTDPropertyInfoBase pi3582 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter1764 = new VTDObjectSetter(pi3582);
            binding_setter1764 = new StringFormaterDecorator(binding_setter1764,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir1764 = new BindDirection(_flow.DbFetchData57,binding_getter1818,binding_setter1764,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity251.InDirections.Add(bind_dir1764);
            VTDPropertyInfoBase pi3583 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter1819 = new VTDXPathGetter(pi3583,XmlTypeCode.String);
            binding_getter1819 = new XPathGetterDecorator(binding_getter1819,"{Array0}",1);
            VTDPropertyInfoBase pi3584 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter1765 = new VTDObjectSetter(pi3584);
            binding_setter1765 = new StringFormaterDecorator(binding_setter1765,"{Step.OutputProperties.DbFetchData250.ResultTable.Row[1].ResponseXsid}");
            bind_dir1765 = new BindDirection(_flow.DbFetchData250,binding_getter1819,binding_setter1765,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity251.InDirections.Add(bind_dir1765);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity251.Result}&Jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&groupName={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].groupName}&groupDesc={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].groupDesc}&token={Step.OutputProperties.DbFetchData254.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.createGroup}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/xmp/createGroup.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi3585 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter1820 = new VTDObjectGetter(pi3585);
            VTDPropertyInfoBase pi3586 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1766 = new VTDObjectSetter(pi3586);
            binding_setter1766 = new StringFormaterDecorator(binding_setter1766,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir1766 = new BindDirection(this.DataCursorActivity265,binding_getter1820,binding_setter1766,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1766);
            VTDPropertyInfoBase pi3587 = new VTDPropertyInfoBase("createGroup");
            VTDBaseGetter binding_getter1821 = new VTDObjectGetter(pi3587);
            VTDPropertyInfoBase pi3588 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter1767 = new VTDObjectSetter(pi3588);
            binding_setter1767 = new StringFormaterDecorator(binding_setter1767,"{DataSource.tb_global_table.createGroup}");
            bind_dir1767 = new BindDirection(this.DataCursorActivity265,binding_getter1821,binding_setter1767,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1767);
            VTDPropertyInfoBase pi3589 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter1822 = new VTDObjectGetter(pi3589);
            VTDPropertyInfoBase pi3590 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter1768 = new VTDObjectSetter(pi3590);
            binding_setter1768 = new StringFormaterDecorator(binding_setter1768,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir1768 = new BindDirection(this.DataCursorActivity265,binding_getter1822,binding_setter1768,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1768);
            VTDPropertyInfoBase pi3591 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter1823 = new VTDObjectGetter(pi3591);
            VTDPropertyInfoBase pi3592 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter1769 = new VTDObjectSetter(pi3592);
            binding_setter1769 = new StringFormaterDecorator(binding_setter1769,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir1769 = new BindDirection(this.DataCursorActivity265,binding_getter1823,binding_setter1769,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1769);
            VTDPropertyInfoBase pi3593 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter1824 = new VTDObjectGetter(pi3593);
            VTDPropertyInfoBase pi3594 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1770 = new VTDObjectSetter(pi3594);
            binding_setter1770 = new StringFormaterDecorator(binding_setter1770,"{Step.OutputProperties.ReplaceStringActivity251.Result}");
            bind_dir1770 = new BindDirection(_flow.ReplaceStringActivity251,binding_getter1824,binding_setter1770,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1770);
            VTDPropertyInfoBase pi3595 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter1825 = new VTDObjectGetter(pi3595);
            VTDPropertyInfoBase pi3596 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1771 = new VTDObjectSetter(pi3596);
            binding_setter1771 = new StringFormaterDecorator(binding_setter1771,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir1771 = new BindDirection(this.DataCursorActivity265,binding_getter1825,binding_setter1771,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1771);
            VTDPropertyInfoBase pi3597 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupName'][1]");
            VTDBaseGetter binding_getter1826 = new VTDXPathGetter(pi3597,XmlTypeCode.String);
            binding_getter1826 = new XPathGetterDecorator(binding_getter1826,"{Array0}",1);
            VTDPropertyInfoBase pi3598 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1772 = new VTDObjectSetter(pi3598);
            binding_setter1772 = new StringFormaterDecorator(binding_setter1772,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].groupName}");
            bind_dir1772 = new BindDirection(_flow.DbFetchData57,binding_getter1826,binding_setter1772,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1772);
            VTDPropertyInfoBase pi3599 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='groupDesc'][1]");
            VTDBaseGetter binding_getter1827 = new VTDXPathGetter(pi3599,XmlTypeCode.String);
            binding_getter1827 = new XPathGetterDecorator(binding_getter1827,"{Array0}",1);
            VTDPropertyInfoBase pi3600 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1773 = new VTDObjectSetter(pi3600);
            binding_setter1773 = new StringFormaterDecorator(binding_setter1773,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].groupDesc}");
            bind_dir1773 = new BindDirection(_flow.DbFetchData57,binding_getter1827,binding_setter1773,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1773);
            VTDPropertyInfoBase pi3601 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter1828 = new VTDXPathGetter(pi3601,XmlTypeCode.String);
            binding_getter1828 = new XPathGetterDecorator(binding_getter1828,"{Array0}",1);
            VTDPropertyInfoBase pi3602 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter1774 = new VTDObjectSetter(pi3602);
            binding_setter1774 = new StringFormaterDecorator(binding_setter1774,"{Step.OutputProperties.DbFetchData254.ResultTable.Row[1].EncryptionResult}");
            bind_dir1774 = new BindDirection(_flow.DbFetchData254,binding_getter1828,binding_setter1774,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir1774);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi3603 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1829 = new VTDObjectGetter(pi3603);
            VTDPropertyInfoBase pi3604 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter1775 = new VTDObjectSetter(pi3604);
            binding_setter1775 = new StringFormaterDecorator(binding_setter1775,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1775 = new BindDirection(_flow.HTTPActivity59,binding_getter1829,binding_setter1775,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir1775);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_creategroup_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi3605 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter1830 = new VTDObjectGetter(pi3605);
            VTDPropertyInfoBase pi3606 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1776 = new VTDObjectSetter(pi3606);
            binding_setter1776 = new StringFormaterDecorator(binding_setter1776,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir1776 = new BindDirection(_flow.HTTPActivity59,binding_getter1830,binding_setter1776,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1776);
            VTDPropertyInfoBase pi3607 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1831 = new VTDObjectGetter(pi3607);
            VTDPropertyInfoBase pi3608 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1777 = new VTDObjectSetter(pi3608);
            binding_setter1777 = new StringFormaterDecorator(binding_setter1777,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1777 = new BindDirection(_flow.Loop56,binding_getter1831,binding_setter1777,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1777);
            VTDPropertyInfoBase pi3609 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1832 = new VTDObjectGetter(pi3609);
            VTDPropertyInfoBase pi3610 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1778 = new VTDObjectSetter(pi3610);
            bind_dir1778 = new BindDirection(_flow.DbOpenConnection39,binding_getter1832,binding_setter1778,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir1778);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_creategroup_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi3611 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter1833 = new VTDJsonGetter(pi3611);
            VTDPropertyInfoBase pi3612 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1779 = new VTDObjectSetter(pi3612);
            binding_setter1779 = new StringFormaterDecorator(binding_setter1779,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir1779 = new BindDirection(_flow.StringToJsonActivity60,binding_getter1833,binding_setter1779,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1779);
            VTDPropertyInfoBase pi3613 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1834 = new VTDObjectGetter(pi3613);
            VTDPropertyInfoBase pi3614 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1780 = new VTDObjectSetter(pi3614);
            binding_setter1780 = new StringFormaterDecorator(binding_setter1780,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1780 = new BindDirection(_flow.Loop56,binding_getter1834,binding_setter1780,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1780);
            VTDPropertyInfoBase pi3615 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1835 = new VTDObjectGetter(pi3615);
            VTDPropertyInfoBase pi3616 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1781 = new VTDObjectSetter(pi3616);
            bind_dir1781 = new BindDirection(_flow.DbOpenConnection39,binding_getter1835,binding_setter1781,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir1781);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_creategroup_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi3617 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1836 = new VTDObjectGetter(pi3617);
            VTDPropertyInfoBase pi3618 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1782 = new VTDObjectSetter(pi3618);
            binding_setter1782 = new StringFormaterDecorator(binding_setter1782,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1782 = new BindDirection(_flow.Loop56,binding_getter1836,binding_setter1782,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1782);
            VTDPropertyInfoBase pi3619 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1837 = new VTDObjectGetter(pi3619);
            VTDPropertyInfoBase pi3620 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1783 = new VTDObjectSetter(pi3620);
            bind_dir1783 = new BindDirection(_flow.DbOpenConnection39,binding_getter1837,binding_setter1783,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir1783);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_creategroup_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi3621 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1838 = new VTDObjectGetter(pi3621);
            VTDPropertyInfoBase pi3622 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1784 = new VTDObjectSetter(pi3622);
            binding_setter1784 = new StringFormaterDecorator(binding_setter1784,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1784 = new BindDirection(_flow.Loop56,binding_getter1838,binding_setter1784,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1784);
            VTDPropertyInfoBase pi3623 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1839 = new VTDObjectGetter(pi3623);
            VTDPropertyInfoBase pi3624 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1785 = new VTDObjectSetter(pi3624);
            bind_dir1785 = new BindDirection(_flow.DbOpenConnection39,binding_getter1839,binding_setter1785,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir1785);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi3625 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter1840 = new VTDXPathGetter(pi3625,XmlTypeCode.String);
            binding_getter1840 = new XPathGetterDecorator(binding_getter1840,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter1840),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi3626 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter1841 = new VTDXPathGetter(pi3626,XmlTypeCode.String);
            binding_getter1841 = new XPathGetterDecorator(binding_getter1841,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter1841),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_creategroup_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi3627 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1842 = new VTDObjectGetter(pi3627);
            VTDPropertyInfoBase pi3628 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1786 = new VTDObjectSetter(pi3628);
            binding_setter1786 = new StringFormaterDecorator(binding_setter1786,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1786 = new BindDirection(_flow.Loop56,binding_getter1842,binding_setter1786,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1786);
            VTDPropertyInfoBase pi3629 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1843 = new VTDObjectGetter(pi3629);
            VTDPropertyInfoBase pi3630 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1787 = new VTDObjectSetter(pi3630);
            bind_dir1787 = new BindDirection(_flow.DbOpenConnection39,binding_getter1843,binding_setter1787,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir1787);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_creategroup_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi3631 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter1844 = new VTDObjectGetter(pi3631);
            VTDPropertyInfoBase pi3632 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter1788 = new VTDObjectSetter(pi3632);
            binding_setter1788 = new StringFormaterDecorator(binding_setter1788,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir1788 = new BindDirection(_flow.Loop56,binding_getter1844,binding_setter1788,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1788);
            VTDPropertyInfoBase pi3633 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter1845 = new VTDObjectGetter(pi3633);
            VTDPropertyInfoBase pi3634 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter1789 = new VTDObjectSetter(pi3634);
            bind_dir1789 = new BindDirection(_flow.DbOpenConnection39,binding_getter1845,binding_setter1789,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir1789);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    