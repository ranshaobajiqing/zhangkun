/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getRoster_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir598 = null;
        public BindDirection bind_dir599 = null;
        public BindDirection bind_dir600 = null;
        public BindDirection bind_dir601 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir602 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir603 = null;
        public BindDirection bind_dir604 = null;
        public BindDirection bind_dir605 = null;
        public BindDirection bind_dir606 = null;
        public BindDirection bind_dir607 = null;
        public BindDirection bind_dir608 = null;
        public BindDirection bind_dir609 = null;
        public BindDirection bind_dir610 = null;
        public BindDirection bind_dir611 = null;
        public BindDirection bind_dir612 = null;
        public BindDirection bind_dir613 = null;
        public BindDirection bind_dir614 = null;
        public BindDirection bind_dir615 = null;
        public BindDirection bind_dir616 = null;
        public BindDirection bind_dir617 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity265 = null;
        public BindDirection bind_dir618 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity265_Policy = null;
        public BindDirection bind_dir619 = null;
        public BindDirection bind_dir620 = null;
        public BindDirection bind_dir621 = null;
        public BindDirection bind_dir622 = null;
        public BindDirection bind_dir623 = null;
        public BindDirection bind_dir624 = null;
        public BindDirection bind_dir625 = null;
        public BindDirection bind_dir626 = null;
        public BindDirection bind_dir627 = null;
        public BindDirection bind_dir628 = null;
        public BindDirection bind_dir629 = null;
        public BindDirection bind_dir630 = null;
        public BindDirection bind_dir631 = null;
        public BindDirection bind_dir632 = null;
        public BindDirection bind_dir633 = null;
        public BindDirection bind_dir634 = null;
        public BindDirection bind_dir635 = null;
        public BindDirection bind_dir636 = null;
        public BindDirection bind_dir637 = null;
        public BindDirection bind_dir638 = null;
        public BindDirection bind_dir639 = null;
        public BindDirection bind_dir640 = null;
        public BindDirection bind_dir641 = null;
        public BindDirection bind_dir642 = null;
        public BindDirection bind_dir643 = null;
        public BindDirection bind_dir644 = null;
        public BindDirection bind_dir645 = null;
        public BindDirection bind_dir646 = null;
        public BindDirection bind_dir647 = null;
        public BindDirection bind_dir648 = null;
        public BindDirection bind_dir649 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity260 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity260");
            _flow.DataFetchActivity257 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity257");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity259 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity259");
            _flow.DataExporterActivity262 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity262");
            _flow.DataExporterCloseActivity263 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity263");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity258 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity258");
            _flow.DataDisconnectActivity261 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity261");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity265 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity265");
            this.DataCursorActivity265_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence256 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence256");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity260.Comment = @"";
            _flow.DataFetchActivity260.IconPath = @"";
            _flow.DataFetchActivity260.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity260.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity260_QueryParameters_Document = new XmlDocument();
            DataFetchActivity260_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity260Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity260_QueryParameters_Document.LoadXml(xmlDataFetchActivity260Params);
            _flow.DataFetchActivity260.QueryParameters = DataFetchActivity260_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity260);
            this.Activities.Add (_flow.DataFetchActivity260);
            _flow.DataFetchActivity257.Comment = @"";
            _flow.DataFetchActivity257.IconPath = @"";
            _flow.DataFetchActivity257.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity257.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity257_QueryParameters_Document = new XmlDocument();
            DataFetchActivity257_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity257Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity257_QueryParameters_Document.LoadXml(xmlDataFetchActivity257Params);
            _flow.DataFetchActivity257.QueryParameters = DataFetchActivity257_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity257);
            this.Activities.Add (_flow.DataFetchActivity257);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity264);
            _flow.Loop2.Activities.Add (_flow.Sequence255);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity259.Comment = @"";
            _flow.DataExporterActivity259.IconPath = @"";
            VTDPropertyInfoBase pi1217 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter620 = new VTDObjectGetter(pi1217);
            VTDPropertyInfoBase pi1218 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter598 = new VTDObjectSetter(pi1218);
            binding_setter598 = new StringFormaterDecorator(binding_setter598,"{Step.DataFetchActivity257.OutTable}");
            bind_dir598 = new BindDirection(_flow.DataFetchActivity257,binding_getter620,binding_setter598,BindTargetType.ToInProperty);
            _flow.DataExporterActivity259.InDirections.Add(bind_dir598);
            this.Activities.Add (_flow.DataExporterActivity259);
            _flow.DataExporterActivity262.Comment = @"";
            _flow.DataExporterActivity262.IconPath = @"";
            VTDPropertyInfoBase pi1219 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter621 = new VTDObjectGetter(pi1219);
            VTDPropertyInfoBase pi1220 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter599 = new VTDObjectSetter(pi1220);
            binding_setter599 = new StringFormaterDecorator(binding_setter599,"{Step.DataFetchActivity260.OutTable}");
            bind_dir599 = new BindDirection(_flow.DataFetchActivity260,binding_getter621,binding_setter599,BindTargetType.ToInProperty);
            _flow.DataExporterActivity262.InDirections.Add(bind_dir599);
            this.Activities.Add (_flow.DataExporterActivity262);
            _flow.DataExporterCloseActivity263.Comment = @"";
            _flow.DataExporterCloseActivity263.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity263);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity258.Comment = @"";
            _flow.DataDisconnectActivity258.IconPath = @"";
            VTDPropertyInfoBase pi1221 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter622 = new VTDObjectGetter(pi1221);
            VTDPropertyInfoBase pi1222 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter600 = new VTDObjectSetter(pi1222);
            binding_setter600 = new StringFormaterDecorator(binding_setter600,"{Step.DataFetchActivity257.OutTable}");
            bind_dir600 = new BindDirection(_flow.DataFetchActivity257,binding_getter622,binding_setter600,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity258.InDirections.Add(bind_dir600);
            this.Activities.Add (_flow.DataDisconnectActivity258);
            _flow.DataDisconnectActivity261.Comment = @"";
            _flow.DataDisconnectActivity261.IconPath = @"";
            VTDPropertyInfoBase pi1223 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter623 = new VTDObjectGetter(pi1223);
            VTDPropertyInfoBase pi1224 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter601 = new VTDObjectSetter(pi1224);
            binding_setter601 = new StringFormaterDecorator(binding_setter601,"{Step.DataFetchActivity260.OutTable}");
            bind_dir601 = new BindDirection(_flow.DataFetchActivity260,binding_getter623,binding_setter601,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity261.InDirections.Add(bind_dir601);
            this.Activities.Add (_flow.DataDisconnectActivity261);
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1225 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter624 = new VTDObjectGetter(pi1225);
            VTDPropertyInfoBase pi1226 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter602 = new VTDObjectSetter(pi1226);
            binding_setter602 = new StringFormaterDecorator(binding_setter602,"{Step.DataFetchActivity257.OutTable}");
            bind_dir602 = new BindDirection(_flow.DataFetchActivity257,binding_getter624,binding_setter602,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir602);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence255.Activities.Add (_flow.Loop56);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getRoster_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_getRoom_verification表有效行数";
            VTDPropertyInfoBase pi1227 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter625 = new VTDObjectGetter(pi1227);
            VTDPropertyInfoBase pi1228 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter603 = new VTDObjectSetter(pi1228);
            bind_dir603 = new BindDirection(_flow.DbOpenConnection39,binding_getter625,binding_setter603,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir603);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中xsid";
            VTDPropertyInfoBase pi1229 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter626 = new VTDObjectGetter(pi1229);
            VTDPropertyInfoBase pi1230 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter604 = new VTDObjectSetter(pi1230);
            bind_dir604 = new BindDirection(_flow.DbOpenConnection39,binding_getter626,binding_setter604,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir604);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop56.NumberOfIterations = (int)0;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getRoster_verification中的测试用例";
            VTDPropertyInfoBase pi1231 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter627 = new VTDXPathGetter(pi1231,XmlTypeCode.Long);
            binding_getter627 = new XPathGetterDecorator(binding_getter627,"{Array0}",1);
            VTDPropertyInfoBase pi1232 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter605 = new VTDObjectSetter(pi1232);
            bind_dir605 = new BindDirection(_flow.DbFetchData58,binding_getter627,binding_setter605,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir605);
            _flow.Loop56.Activities.Add (this.DataCursorActivity265);
            _flow.Loop56.Activities.Add (_flow.Sequence256);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.com' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/iq/getRoster.php接口token实行加密";
            VTDPropertyInfoBase pi1233 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter628 = new VTDObjectGetter(pi1233);
            VTDPropertyInfoBase pi1234 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter606 = new VTDObjectSetter(pi1234);
            binding_setter606 = new StringFormaterDecorator(binding_setter606,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir606 = new BindDirection(this.DataCursorActivity264,binding_getter628,binding_setter606,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir606);
            VTDPropertyInfoBase pi1235 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter629 = new VTDObjectGetter(pi1235);
            VTDPropertyInfoBase pi1236 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter607 = new VTDObjectSetter(pi1236);
            bind_dir607 = new BindDirection(_flow.DbOpenConnection39,binding_getter629,binding_setter607,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir607);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1237 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter630 = new VTDObjectGetter(pi1237);
            VTDPropertyInfoBase pi1238 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter608 = new VTDObjectSetter(pi1238);
            bind_dir608 = new BindDirection(_flow.DbOpenConnection39,binding_getter630,binding_setter608,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir608);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}&Jid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getRoster}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调用/iq/getRoster.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi1239 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter631 = new VTDObjectGetter(pi1239);
            VTDPropertyInfoBase pi1240 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter609 = new VTDObjectSetter(pi1240);
            binding_setter609 = new StringFormaterDecorator(binding_setter609,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir609 = new BindDirection(this.DataCursorActivity264,binding_getter631,binding_setter609,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir609);
            VTDPropertyInfoBase pi1241 = new VTDPropertyInfoBase("getRoster");
            VTDBaseGetter binding_getter632 = new VTDObjectGetter(pi1241);
            VTDPropertyInfoBase pi1242 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter610 = new VTDObjectSetter(pi1242);
            binding_setter610 = new StringFormaterDecorator(binding_setter610,"{DataSource.tb_global_table.getRoster}");
            bind_dir610 = new BindDirection(this.DataCursorActivity264,binding_getter632,binding_setter610,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir610);
            VTDPropertyInfoBase pi1243 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter633 = new VTDObjectGetter(pi1243);
            VTDPropertyInfoBase pi1244 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter611 = new VTDObjectSetter(pi1244);
            binding_setter611 = new StringFormaterDecorator(binding_setter611,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir611 = new BindDirection(this.DataCursorActivity264,binding_getter633,binding_setter611,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir611);
            VTDPropertyInfoBase pi1245 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter634 = new VTDObjectGetter(pi1245);
            VTDPropertyInfoBase pi1246 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter612 = new VTDObjectSetter(pi1246);
            binding_setter612 = new StringFormaterDecorator(binding_setter612,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir612 = new BindDirection(this.DataCursorActivity264,binding_getter634,binding_setter612,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir612);
            VTDPropertyInfoBase pi1247 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter635 = new VTDXPathGetter(pi1247,XmlTypeCode.String);
            binding_getter635 = new XPathGetterDecorator(binding_getter635,"{Array0}",1);
            VTDPropertyInfoBase pi1248 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter613 = new VTDObjectSetter(pi1248);
            binding_setter613 = new StringFormaterDecorator(binding_setter613,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir613 = new BindDirection(_flow.DbFetchData248,binding_getter635,binding_setter613,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir613);
            VTDPropertyInfoBase pi1249 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter636 = new VTDObjectGetter(pi1249);
            VTDPropertyInfoBase pi1250 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter614 = new VTDObjectSetter(pi1250);
            binding_setter614 = new StringFormaterDecorator(binding_setter614,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir614 = new BindDirection(this.DataCursorActivity264,binding_getter636,binding_setter614,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir614);
            VTDPropertyInfoBase pi1251 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter637 = new VTDXPathGetter(pi1251,XmlTypeCode.String);
            binding_getter637 = new XPathGetterDecorator(binding_getter637,"{Array0}",1);
            VTDPropertyInfoBase pi1252 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter615 = new VTDObjectSetter(pi1252);
            binding_setter615 = new StringFormaterDecorator(binding_setter615,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir615 = new BindDirection(_flow.DbFetchData76,binding_getter637,binding_setter615,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir615);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/getRoster.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1253 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter638 = new VTDObjectGetter(pi1253);
            VTDPropertyInfoBase pi1254 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter616 = new VTDObjectSetter(pi1254);
            binding_setter616 = new StringFormaterDecorator(binding_setter616,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir616 = new BindDirection(_flow.HTTPActivity73,binding_getter638,binding_setter616,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir616);
            VTDPropertyInfoBase pi1255 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter639 = new VTDObjectGetter(pi1255);
            VTDPropertyInfoBase pi1256 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter617 = new VTDObjectSetter(pi1256);
            bind_dir617 = new BindDirection(_flow.DbOpenConnection39,binding_getter639,binding_setter617,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir617);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity265.Comment = @"";
            this.DataCursorActivity265.IconPath = @"";
            VTDPropertyInfoBase pi1257 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter640 = new VTDObjectGetter(pi1257);
            VTDPropertyInfoBase pi1258 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter618 = new VTDObjectSetter(pi1258);
            binding_setter618 = new StringFormaterDecorator(binding_setter618,"{Step.DataFetchActivity257.OutTable}");
            bind_dir618 = new BindDirection(_flow.DataFetchActivity257,binding_getter640,binding_setter618,BindTargetType.ToInProperty);
            this.DataCursorActivity265.InDirections.Add(bind_dir618);
            this.DataCursorActivity265_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity265_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.StartCondition.Value = "";
            this.DataCursorActivity265_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity265_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity265_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity265_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity265_Policy.EndCondition.Value = "";
            this.DataCursorActivity265_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity265_Policy.StepSize = 1;
            this.DataCursorActivity265_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity265.Policy = this.DataCursorActivity265_Policy;
            this.DataCursorActivity265.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity265.ResetCursor;
            _flow.Sequence256.Comment = @"";
            _flow.Sequence256.IconPath = @"";
            _flow.Sequence256.Name = @"序列256";
            _flow.Sequence256.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence256.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence256.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence256.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence256.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence256.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence256.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence256.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,Jid,token from tb_getRoster_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getRoster_verification表中字段信息";
            VTDPropertyInfoBase pi1259 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter641 = new VTDObjectGetter(pi1259);
            VTDPropertyInfoBase pi1260 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter619 = new VTDObjectSetter(pi1260);
            binding_setter619 = new StringFormaterDecorator(binding_setter619,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir619 = new BindDirection(_flow.Loop56,binding_getter641,binding_setter619,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir619);
            VTDPropertyInfoBase pi1261 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter642 = new VTDObjectGetter(pi1261);
            VTDPropertyInfoBase pi1262 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter620 = new VTDObjectSetter(pi1262);
            bind_dir620 = new BindDirection(_flow.DbOpenConnection39,binding_getter642,binding_setter620,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir620);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><Jid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将本地表的xsid更新";
            VTDPropertyInfoBase pi1263 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter643 = new VTDXPathGetter(pi1263,XmlTypeCode.String);
            binding_getter643 = new XPathGetterDecorator(binding_getter643,"{Array0}",1);
            VTDPropertyInfoBase pi1264 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter621 = new VTDObjectSetter(pi1264);
            binding_setter621 = new StringFormaterDecorator(binding_setter621,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir621 = new BindDirection(_flow.DbFetchData57,binding_getter643,binding_setter621,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir621);
            VTDPropertyInfoBase pi1265 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter644 = new VTDXPathGetter(pi1265,XmlTypeCode.String);
            binding_getter644 = new XPathGetterDecorator(binding_getter644,"{Array0}",1);
            VTDPropertyInfoBase pi1266 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter622 = new VTDObjectSetter(pi1266);
            binding_setter622 = new StringFormaterDecorator(binding_setter622,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir622 = new BindDirection(_flow.DbFetchData248,binding_getter644,binding_setter622,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir622);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi1267 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter645 = new VTDXPathGetter(pi1267,XmlTypeCode.String);
            binding_getter645 = new XPathGetterDecorator(binding_getter645,"{Array0}",1);
            VTDPropertyInfoBase pi1268 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter623 = new VTDObjectSetter(pi1268);
            binding_setter623 = new StringFormaterDecorator(binding_setter623,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir623 = new BindDirection(_flow.DbFetchData57,binding_getter645,binding_setter623,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir623);
            VTDPropertyInfoBase pi1269 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter646 = new VTDObjectGetter(pi1269);
            VTDPropertyInfoBase pi1270 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter624 = new VTDObjectSetter(pi1270);
            bind_dir624 = new BindDirection(_flow.DbOpenConnection39,binding_getter646,binding_setter624,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir624);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi1271 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter647 = new VTDObjectGetter(pi1271);
            VTDPropertyInfoBase pi1272 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter625 = new VTDObjectSetter(pi1272);
            bind_dir625 = new BindDirection(_flow.DbOpenConnection39,binding_getter647,binding_setter625,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir625);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"305bbc2b43542b3d0203daffe9073c3cba5b47d9";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi1273 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter648 = new VTDXPathGetter(pi1273,XmlTypeCode.String);
            binding_getter648 = new XPathGetterDecorator(binding_getter648,"{Array0}",1);
            VTDPropertyInfoBase pi1274 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter626 = new VTDObjectSetter(pi1274);
            binding_setter626 = new StringFormaterDecorator(binding_setter626,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir626 = new BindDirection(_flow.DbFetchData57,binding_getter648,binding_setter626,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir626);
            VTDPropertyInfoBase pi1275 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter649 = new VTDXPathGetter(pi1275,XmlTypeCode.String);
            binding_getter649 = new XPathGetterDecorator(binding_getter649,"{Array0}",1);
            VTDPropertyInfoBase pi1276 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter627 = new VTDObjectSetter(pi1276);
            binding_setter627 = new StringFormaterDecorator(binding_setter627,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir627 = new BindDirection(_flow.DbFetchData252,binding_getter649,binding_setter627,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir627);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&Jid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getRoster}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/getRoster.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi1277 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter650 = new VTDObjectGetter(pi1277);
            VTDPropertyInfoBase pi1278 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter628 = new VTDObjectSetter(pi1278);
            binding_setter628 = new StringFormaterDecorator(binding_setter628,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir628 = new BindDirection(this.DataCursorActivity265,binding_getter650,binding_setter628,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir628);
            VTDPropertyInfoBase pi1279 = new VTDPropertyInfoBase("getRoster");
            VTDBaseGetter binding_getter651 = new VTDObjectGetter(pi1279);
            VTDPropertyInfoBase pi1280 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter629 = new VTDObjectSetter(pi1280);
            binding_setter629 = new StringFormaterDecorator(binding_setter629,"{DataSource.tb_global_table.getRoster}");
            bind_dir629 = new BindDirection(this.DataCursorActivity265,binding_getter651,binding_setter629,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir629);
            VTDPropertyInfoBase pi1281 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter652 = new VTDObjectGetter(pi1281);
            VTDPropertyInfoBase pi1282 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter630 = new VTDObjectSetter(pi1282);
            binding_setter630 = new StringFormaterDecorator(binding_setter630,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir630 = new BindDirection(this.DataCursorActivity265,binding_getter652,binding_setter630,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir630);
            VTDPropertyInfoBase pi1283 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter653 = new VTDObjectGetter(pi1283);
            VTDPropertyInfoBase pi1284 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter631 = new VTDObjectSetter(pi1284);
            binding_setter631 = new StringFormaterDecorator(binding_setter631,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir631 = new BindDirection(this.DataCursorActivity265,binding_getter653,binding_setter631,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir631);
            VTDPropertyInfoBase pi1285 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter654 = new VTDObjectGetter(pi1285);
            VTDPropertyInfoBase pi1286 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter632 = new VTDObjectSetter(pi1286);
            binding_setter632 = new StringFormaterDecorator(binding_setter632,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir632 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter654,binding_setter632,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir632);
            VTDPropertyInfoBase pi1287 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Jid'][1]");
            VTDBaseGetter binding_getter655 = new VTDXPathGetter(pi1287,XmlTypeCode.String);
            binding_getter655 = new XPathGetterDecorator(binding_getter655,"{Array0}",1);
            VTDPropertyInfoBase pi1288 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter633 = new VTDObjectSetter(pi1288);
            binding_setter633 = new StringFormaterDecorator(binding_setter633,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].Jid}");
            bind_dir633 = new BindDirection(_flow.DbFetchData57,binding_getter655,binding_setter633,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir633);
            VTDPropertyInfoBase pi1289 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter656 = new VTDObjectGetter(pi1289);
            VTDPropertyInfoBase pi1290 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter634 = new VTDObjectSetter(pi1290);
            binding_setter634 = new StringFormaterDecorator(binding_setter634,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir634 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter656,binding_setter634,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir634);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1291 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter657 = new VTDObjectGetter(pi1291);
            VTDPropertyInfoBase pi1292 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter635 = new VTDObjectSetter(pi1292);
            binding_setter635 = new StringFormaterDecorator(binding_setter635,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir635 = new BindDirection(_flow.HTTPActivity59,binding_getter657,binding_setter635,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir635);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getRoster_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi1293 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter658 = new VTDObjectGetter(pi1293);
            VTDPropertyInfoBase pi1294 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter636 = new VTDObjectSetter(pi1294);
            binding_setter636 = new StringFormaterDecorator(binding_setter636,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir636 = new BindDirection(_flow.HTTPActivity59,binding_getter658,binding_setter636,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir636);
            VTDPropertyInfoBase pi1295 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter659 = new VTDObjectGetter(pi1295);
            VTDPropertyInfoBase pi1296 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter637 = new VTDObjectSetter(pi1296);
            binding_setter637 = new StringFormaterDecorator(binding_setter637,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir637 = new BindDirection(_flow.Loop56,binding_getter659,binding_setter637,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir637);
            VTDPropertyInfoBase pi1297 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter660 = new VTDObjectGetter(pi1297);
            VTDPropertyInfoBase pi1298 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter638 = new VTDObjectSetter(pi1298);
            bind_dir638 = new BindDirection(_flow.DbOpenConnection39,binding_getter660,binding_setter638,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir638);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getRoster_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1299 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter661 = new VTDJsonGetter(pi1299);
            VTDPropertyInfoBase pi1300 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter639 = new VTDObjectSetter(pi1300);
            binding_setter639 = new StringFormaterDecorator(binding_setter639,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir639 = new BindDirection(_flow.StringToJsonActivity60,binding_getter661,binding_setter639,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir639);
            VTDPropertyInfoBase pi1301 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter662 = new VTDObjectGetter(pi1301);
            VTDPropertyInfoBase pi1302 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter640 = new VTDObjectSetter(pi1302);
            binding_setter640 = new StringFormaterDecorator(binding_setter640,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir640 = new BindDirection(_flow.Loop56,binding_getter662,binding_setter640,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir640);
            VTDPropertyInfoBase pi1303 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter663 = new VTDObjectGetter(pi1303);
            VTDPropertyInfoBase pi1304 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter641 = new VTDObjectSetter(pi1304);
            bind_dir641 = new BindDirection(_flow.DbOpenConnection39,binding_getter663,binding_setter641,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir641);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getRoster_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1305 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter664 = new VTDObjectGetter(pi1305);
            VTDPropertyInfoBase pi1306 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter642 = new VTDObjectSetter(pi1306);
            binding_setter642 = new StringFormaterDecorator(binding_setter642,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir642 = new BindDirection(_flow.Loop56,binding_getter664,binding_setter642,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir642);
            VTDPropertyInfoBase pi1307 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter665 = new VTDObjectGetter(pi1307);
            VTDPropertyInfoBase pi1308 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter643 = new VTDObjectSetter(pi1308);
            bind_dir643 = new BindDirection(_flow.DbOpenConnection39,binding_getter665,binding_setter643,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir643);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getRoster_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1309 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter666 = new VTDObjectGetter(pi1309);
            VTDPropertyInfoBase pi1310 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter644 = new VTDObjectSetter(pi1310);
            binding_setter644 = new StringFormaterDecorator(binding_setter644,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir644 = new BindDirection(_flow.Loop56,binding_getter666,binding_setter644,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir644);
            VTDPropertyInfoBase pi1311 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter667 = new VTDObjectGetter(pi1311);
            VTDPropertyInfoBase pi1312 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter645 = new VTDObjectSetter(pi1312);
            bind_dir645 = new BindDirection(_flow.DbOpenConnection39,binding_getter667,binding_setter645,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir645);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1313 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter668 = new VTDXPathGetter(pi1313,XmlTypeCode.String);
            binding_getter668 = new XPathGetterDecorator(binding_getter668,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter668),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1314 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter669 = new VTDXPathGetter(pi1314,XmlTypeCode.String);
            binding_getter669 = new XPathGetterDecorator(binding_getter669,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter669),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getRoster_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1315 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter670 = new VTDObjectGetter(pi1315);
            VTDPropertyInfoBase pi1316 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter646 = new VTDObjectSetter(pi1316);
            binding_setter646 = new StringFormaterDecorator(binding_setter646,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir646 = new BindDirection(_flow.Loop56,binding_getter670,binding_setter646,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir646);
            VTDPropertyInfoBase pi1317 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter671 = new VTDObjectGetter(pi1317);
            VTDPropertyInfoBase pi1318 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter647 = new VTDObjectSetter(pi1318);
            bind_dir647 = new BindDirection(_flow.DbOpenConnection39,binding_getter671,binding_setter647,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir647);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getRoster_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1319 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter672 = new VTDObjectGetter(pi1319);
            VTDPropertyInfoBase pi1320 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter648 = new VTDObjectSetter(pi1320);
            binding_setter648 = new StringFormaterDecorator(binding_setter648,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir648 = new BindDirection(_flow.Loop56,binding_getter672,binding_setter648,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir648);
            VTDPropertyInfoBase pi1321 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter673 = new VTDObjectGetter(pi1321);
            VTDPropertyInfoBase pi1322 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter649 = new VTDObjectSetter(pi1322);
            bind_dir649 = new BindDirection(_flow.DbOpenConnection39,binding_getter673,binding_setter649,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir649);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    