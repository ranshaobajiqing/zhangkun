/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getUCard _verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir754 = null;
        public BindDirection bind_dir755 = null;
        public BindDirection bind_dir756 = null;
        public BindDirection bind_dir757 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity263 = null;
        public BindDirection bind_dir758 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity263_Policy = null;
        public BindDirection bind_dir759 = null;
        public BindDirection bind_dir760 = null;
        public BindDirection bind_dir761 = null;
        public BindDirection bind_dir762 = null;
        public BindDirection bind_dir763 = null;
        public BindDirection bind_dir764 = null;
        public BindDirection bind_dir765 = null;
        public BindDirection bind_dir766 = null;
        public BindDirection bind_dir767 = null;
        public BindDirection bind_dir768 = null;
        public BindDirection bind_dir769 = null;
        public BindDirection bind_dir770 = null;
        public BindDirection bind_dir771 = null;
        public BindDirection bind_dir772 = null;
        public BindDirection bind_dir773 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity264 = null;
        public BindDirection bind_dir774 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity264_Policy = null;
        public BindDirection bind_dir775 = null;
        public BindDirection bind_dir776 = null;
        public BindDirection bind_dir777 = null;
        public BindDirection bind_dir778 = null;
        public BindDirection bind_dir779 = null;
        public BindDirection bind_dir780 = null;
        public BindDirection bind_dir781 = null;
        public BindDirection bind_dir782 = null;
        public BindDirection bind_dir783 = null;
        public BindDirection bind_dir784 = null;
        public BindDirection bind_dir785 = null;
        public BindDirection bind_dir786 = null;
        public BindDirection bind_dir787 = null;
        public BindDirection bind_dir788 = null;
        public BindDirection bind_dir789 = null;
        public BindDirection bind_dir790 = null;
        public BindDirection bind_dir791 = null;
        public BindDirection bind_dir792 = null;
        public BindDirection bind_dir793 = null;
        public BindDirection bind_dir794 = null;
        public BindDirection bind_dir795 = null;
        public BindDirection bind_dir796 = null;
        public BindDirection bind_dir797 = null;
        public BindDirection bind_dir798 = null;
        public BindDirection bind_dir799 = null;
        public BindDirection bind_dir800 = null;
        public BindDirection bind_dir801 = null;
        public BindDirection bind_dir802 = null;
        public BindDirection bind_dir803 = null;
        public BindDirection bind_dir804 = null;
        public BindDirection bind_dir805 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity259 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity259");
            _flow.DataFetchActivity256 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity256");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity258 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity258");
            _flow.DataExporterActivity261 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity261");
            _flow.DataExporterCloseActivity262 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity262");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity257 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity257");
            _flow.DataDisconnectActivity260 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity260");
            this.DataCursorActivity263 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity263");
            this.DataCursorActivity263_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence254 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence254");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData58 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData58");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.Loop56 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop56Input>(_context,"Loop56",LoopType.For);
            _flow.DbFetchData74 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData74");
            _flow.CallQTPTest75 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest75");
            _flow.DbFetchData76 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData76");
            _flow.HTTPActivity73 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity73");
            _flow.DbFetchData77 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData77");
            this.DataCursorActivity264 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity264");
            this.DataCursorActivity264_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence255 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence255");
            _flow.DbFetchData57 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData57");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.DbFetchData250 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData250");
            _flow.CallQTPTest251 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest251");
            _flow.DbFetchData252 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData252");
            _flow.ReplaceStringActivity253 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity253");
            _flow.HTTPActivity59 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity59");
            _flow.StringToJsonActivity60 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity60");
            _flow.DbFetchData61 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData61");
            _flow.DbFetchData62 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData62");
            _flow.DbFetchData117 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData117");
            _flow.DbFetchData63 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData63");
            _flow.IfElse64 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse64Input>(_context,"IfElse64");
            _flow.IfElseBranch65 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch65");
            _flow.IfElseBranch66 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch66");
            _flow.DbFetchData67 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData67");
            _flow.DbFetchData68 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData68");
            _flow.DataFetchActivity259.Comment = @"";
            _flow.DataFetchActivity259.IconPath = @"";
            _flow.DataFetchActivity259.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity259.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity259_QueryParameters_Document = new XmlDocument();
            DataFetchActivity259_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity259Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity259_QueryParameters_Document.LoadXml(xmlDataFetchActivity259Params);
            _flow.DataFetchActivity259.QueryParameters = DataFetchActivity259_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity259);
            this.Activities.Add (_flow.DataFetchActivity259);
            _flow.DataFetchActivity256.Comment = @"";
            _flow.DataFetchActivity256.IconPath = @"";
            _flow.DataFetchActivity256.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity256.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity256_QueryParameters_Document = new XmlDocument();
            DataFetchActivity256_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity256Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity256_QueryParameters_Document.LoadXml(xmlDataFetchActivity256Params);
            _flow.DataFetchActivity256.QueryParameters = DataFetchActivity256_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity256);
            this.Activities.Add (_flow.DataFetchActivity256);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity263);
            _flow.Loop2.Activities.Add (_flow.Sequence254);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity258.Comment = @"";
            _flow.DataExporterActivity258.IconPath = @"";
            VTDPropertyInfoBase pi1535 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter782 = new VTDObjectGetter(pi1535);
            VTDPropertyInfoBase pi1536 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter754 = new VTDObjectSetter(pi1536);
            binding_setter754 = new StringFormaterDecorator(binding_setter754,"{Step.DataFetchActivity256.OutTable}");
            bind_dir754 = new BindDirection(_flow.DataFetchActivity256,binding_getter782,binding_setter754,BindTargetType.ToInProperty);
            _flow.DataExporterActivity258.InDirections.Add(bind_dir754);
            this.Activities.Add (_flow.DataExporterActivity258);
            _flow.DataExporterActivity261.Comment = @"";
            _flow.DataExporterActivity261.IconPath = @"";
            VTDPropertyInfoBase pi1537 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter783 = new VTDObjectGetter(pi1537);
            VTDPropertyInfoBase pi1538 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter755 = new VTDObjectSetter(pi1538);
            binding_setter755 = new StringFormaterDecorator(binding_setter755,"{Step.DataFetchActivity259.OutTable}");
            bind_dir755 = new BindDirection(_flow.DataFetchActivity259,binding_getter783,binding_setter755,BindTargetType.ToInProperty);
            _flow.DataExporterActivity261.InDirections.Add(bind_dir755);
            this.Activities.Add (_flow.DataExporterActivity261);
            _flow.DataExporterCloseActivity262.Comment = @"";
            _flow.DataExporterCloseActivity262.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity262);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity257.Comment = @"";
            _flow.DataDisconnectActivity257.IconPath = @"";
            VTDPropertyInfoBase pi1539 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter784 = new VTDObjectGetter(pi1539);
            VTDPropertyInfoBase pi1540 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter756 = new VTDObjectSetter(pi1540);
            binding_setter756 = new StringFormaterDecorator(binding_setter756,"{Step.DataFetchActivity256.OutTable}");
            bind_dir756 = new BindDirection(_flow.DataFetchActivity256,binding_getter784,binding_setter756,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity257.InDirections.Add(bind_dir756);
            this.Activities.Add (_flow.DataDisconnectActivity257);
            _flow.DataDisconnectActivity260.Comment = @"";
            _flow.DataDisconnectActivity260.IconPath = @"";
            VTDPropertyInfoBase pi1541 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter785 = new VTDObjectGetter(pi1541);
            VTDPropertyInfoBase pi1542 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter757 = new VTDObjectSetter(pi1542);
            binding_setter757 = new StringFormaterDecorator(binding_setter757,"{Step.DataFetchActivity259.OutTable}");
            bind_dir757 = new BindDirection(_flow.DataFetchActivity259,binding_getter785,binding_setter757,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity260.InDirections.Add(bind_dir757);
            this.Activities.Add (_flow.DataDisconnectActivity260);
            this.DataCursorActivity263.Comment = @"";
            this.DataCursorActivity263.IconPath = @"";
            VTDPropertyInfoBase pi1543 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter786 = new VTDObjectGetter(pi1543);
            VTDPropertyInfoBase pi1544 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter758 = new VTDObjectSetter(pi1544);
            binding_setter758 = new StringFormaterDecorator(binding_setter758,"{Step.DataFetchActivity256.OutTable}");
            bind_dir758 = new BindDirection(_flow.DataFetchActivity256,binding_getter786,binding_setter758,BindTargetType.ToInProperty);
            this.DataCursorActivity263.InDirections.Add(bind_dir758);
            this.DataCursorActivity263_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity263_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.StartCondition.Value = "";
            this.DataCursorActivity263_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity263_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity263_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity263_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity263_Policy.EndCondition.Value = "";
            this.DataCursorActivity263_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity263_Policy.StepSize = 1;
            this.DataCursorActivity263_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity263.Policy = this.DataCursorActivity263_Policy;
            this.DataCursorActivity263.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity263.ResetCursor;
            _flow.Sequence254.Comment = @"";
            _flow.Sequence254.IconPath = @"";
            _flow.Sequence254.Name = @"序列254";
            _flow.Sequence254.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData58);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence254.Activities.Add (_flow.Loop56);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData74);
            _flow.Sequence254.Activities.Add (_flow.CallQTPTest75);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData76);
            _flow.Sequence254.Activities.Add (_flow.HTTPActivity73);
            _flow.Sequence254.Activities.Add (_flow.DbFetchData77);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=localhost;Uid=root;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"UqIq+/M1hvnEiRgp6HH+dg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData58.QueryString = @"select count(*) as 'Row' from tb_getUcard_verification";
            _flow.DbFetchData58.Timeout = (int)30;
            _flow.DbFetchData58.Comment = @"";
            _flow.DbFetchData58.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData58.Name = @"获取到tb_getCard_verification表有效行数";
            VTDPropertyInfoBase pi1545 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter787 = new VTDObjectGetter(pi1545);
            VTDPropertyInfoBase pi1546 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter759 = new VTDObjectSetter(pi1546);
            bind_dir759 = new BindDirection(_flow.DbOpenConnection39,binding_getter787,binding_setter759,BindTargetType.ToInProperty);
            _flow.DbFetchData58.InDirections.Add(bind_dir759);
            XmlDocument DbFetchData58_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData58_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData58_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row>37</Row></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData58.ExpectedOutputProperties = DbFetchData58_ExpectedOutputProperties_Document;
            set_DbFetchData58_checkpoints(_flow.DbFetchData58);
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询全局表中xsid";
            VTDPropertyInfoBase pi1547 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter788 = new VTDObjectGetter(pi1547);
            VTDPropertyInfoBase pi1548 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter760 = new VTDObjectSetter(pi1548);
            bind_dir760 = new BindDirection(_flow.DbOpenConnection39,binding_getter788,binding_setter760,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir760);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.Loop56.ConditionAsString = @"运行 0 个迭代";
            _flow.Loop56.NumberOfIterations = (int)0;
            _flow.Loop56.Comment = @"";
            _flow.Loop56.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop56.Name = @"循环执行tb_getUcard_verification中的测试用例";
            VTDPropertyInfoBase pi1549 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter789 = new VTDXPathGetter(pi1549,XmlTypeCode.Long);
            binding_getter789 = new XPathGetterDecorator(binding_getter789,"{Array0}",1);
            VTDPropertyInfoBase pi1550 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter761 = new VTDObjectSetter(pi1550);
            bind_dir761 = new BindDirection(_flow.DbFetchData58,binding_getter789,binding_setter761,BindTargetType.ToInProperty);
            _flow.Loop56.InDirections.Add(bind_dir761);
            _flow.Loop56.Activities.Add (this.DataCursorActivity264);
            _flow.Loop56.Activities.Add (_flow.Sequence255);
            _flow.DbFetchData74.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comzvTmwWDXP3' where TestCase = 1";
            _flow.DbFetchData74.Timeout = (int)30;
            _flow.DbFetchData74.Comment = @"";
            _flow.DbFetchData74.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData74.Name = @"对/iq/getUCard.php接口token实行加密";
            VTDPropertyInfoBase pi1551 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter790 = new VTDObjectGetter(pi1551);
            VTDPropertyInfoBase pi1552 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter762 = new VTDObjectSetter(pi1552);
            binding_setter762 = new StringFormaterDecorator(binding_setter762,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir762 = new BindDirection(this.DataCursorActivity263,binding_getter790,binding_setter762,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir762);
            VTDPropertyInfoBase pi1553 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter791 = new VTDObjectGetter(pi1553);
            VTDPropertyInfoBase pi1554 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter763 = new VTDObjectSetter(pi1554);
            bind_dir763 = new BindDirection(_flow.DbOpenConnection39,binding_getter791,binding_setter763,BindTargetType.ToInProperty);
            _flow.DbFetchData74.InDirections.Add(bind_dir763);
            XmlDocument DbFetchData74_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData74_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData74_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData74.ExpectedOutputProperties = DbFetchData74_ExpectedOutputProperties_Document;
            _flow.CallQTPTest75.Comment = @"";
            _flow.CallQTPTest75.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest75.Name = @"Encryption.SHA1";
            _flow.CallQTPTest75.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ScriptPath}");
            _flow.CallQTPTest75.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ActionName}");
            _flow.CallQTPTest75.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.Description}");
            _flow.CallQTPTest75.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.IsActionSelected}");
            _flow.CallQTPTest75.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.ResultLocation}");
            _flow.CallQTPTest75.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest75.QCScriptPath}");
            _flow.DbFetchData76.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData76.Timeout = (int)30;
            _flow.DbFetchData76.Comment = @"";
            _flow.DbFetchData76.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData76.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi1555 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter792 = new VTDObjectGetter(pi1555);
            VTDPropertyInfoBase pi1556 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter764 = new VTDObjectSetter(pi1556);
            bind_dir764 = new BindDirection(_flow.DbOpenConnection39,binding_getter792,binding_setter764,BindTargetType.ToInProperty);
            _flow.DbFetchData76.InDirections.Add(bind_dir764);
            XmlDocument DbFetchData76_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData76_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData76_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData76.ExpectedOutputProperties = DbFetchData76_ExpectedOutputProperties_Document;
            _flow.HTTPActivity73.TextBody = @"xsid={Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}&toJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}";
            _flow.HTTPActivity73.TextXmlBody = @"";
            _flow.HTTPActivity73.FileBody = @"";
            _flow.HTTPActivity73.PostBody = @"";
            _flow.HTTPActivity73.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getUCard}";
            _flow.HTTPActivity73.HttpMethod = @"POST";
            _flow.HTTPActivity73.HttpVersion = @"1.1";
            _flow.HTTPActivity73.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity73.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity73.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity73.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity73.Comment = @"";
            _flow.HTTPActivity73.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity73.RequestBodyType = @"Text";
            _flow.HTTPActivity73.ResponseType = @"Text";
            _flow.HTTPActivity73.Name = @"调/iq/getUCard.php";
            _flow.HTTPActivity73.Proxy.Server = @"";
            _flow.HTTPActivity73.Proxy.Username = @"";
            _flow.HTTPActivity73.Proxy.Password = @"";
            _flow.HTTPActivity73.Authentication.Username = @"";
            _flow.HTTPActivity73.Authentication.Password = @"";
            _flow.HTTPActivity73.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity73.Timeout = (int)100000;
            _flow.HTTPActivity73.ClientCertificate.Password = @"";
            _flow.HTTPActivity73.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity73.UseClientCertificate = false;
            _flow.HTTPActivity73.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity73.AllowRedirections = true;
            _flow.HTTPActivity73.ReuseCookies = false;
            _flow.HTTPActivity73.ExpectServerError = false;
            XmlDocument HTTPActivity73_XMLBody_Document = new XmlDocument();
            HTTPActivity73_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity73_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.XMLBody = HTTPActivity73_XMLBody_Document;
            XmlDocument HTTPActivity73_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity73_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity73_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity73.RequestMultipartInfoXml = HTTPActivity73_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity73.Multipart=false;
            VTDPropertyInfoBase pi1557 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter793 = new VTDObjectGetter(pi1557);
            VTDPropertyInfoBase pi1558 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter765 = new VTDObjectSetter(pi1558);
            binding_setter765 = new StringFormaterDecorator(binding_setter765,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir765 = new BindDirection(this.DataCursorActivity263,binding_getter793,binding_setter765,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir765);
            VTDPropertyInfoBase pi1559 = new VTDPropertyInfoBase("getUCard");
            VTDBaseGetter binding_getter794 = new VTDObjectGetter(pi1559);
            VTDPropertyInfoBase pi1560 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter766 = new VTDObjectSetter(pi1560);
            binding_setter766 = new StringFormaterDecorator(binding_setter766,"{DataSource.tb_global_table.getUCard}");
            bind_dir766 = new BindDirection(this.DataCursorActivity263,binding_getter794,binding_setter766,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir766);
            VTDPropertyInfoBase pi1561 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter795 = new VTDObjectGetter(pi1561);
            VTDPropertyInfoBase pi1562 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter767 = new VTDObjectSetter(pi1562);
            binding_setter767 = new StringFormaterDecorator(binding_setter767,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir767 = new BindDirection(this.DataCursorActivity263,binding_getter795,binding_setter767,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir767);
            VTDPropertyInfoBase pi1563 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter796 = new VTDObjectGetter(pi1563);
            VTDPropertyInfoBase pi1564 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter768 = new VTDObjectSetter(pi1564);
            binding_setter768 = new StringFormaterDecorator(binding_setter768,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir768 = new BindDirection(this.DataCursorActivity263,binding_getter796,binding_setter768,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir768);
            VTDPropertyInfoBase pi1565 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter797 = new VTDXPathGetter(pi1565,XmlTypeCode.String);
            binding_getter797 = new XPathGetterDecorator(binding_getter797,"{Array0}",1);
            VTDPropertyInfoBase pi1566 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter769 = new VTDObjectSetter(pi1566);
            binding_setter769 = new StringFormaterDecorator(binding_setter769,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir769 = new BindDirection(_flow.DbFetchData248,binding_getter797,binding_setter769,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir769);
            VTDPropertyInfoBase pi1567 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter798 = new VTDObjectGetter(pi1567);
            VTDPropertyInfoBase pi1568 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter770 = new VTDObjectSetter(pi1568);
            binding_setter770 = new StringFormaterDecorator(binding_setter770,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir770 = new BindDirection(this.DataCursorActivity263,binding_getter798,binding_setter770,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir770);
            VTDPropertyInfoBase pi1569 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter799 = new VTDXPathGetter(pi1569,XmlTypeCode.String);
            binding_getter799 = new XPathGetterDecorator(binding_getter799,"{Array0}",1);
            VTDPropertyInfoBase pi1570 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter771 = new VTDObjectSetter(pi1570);
            binding_setter771 = new StringFormaterDecorator(binding_setter771,"{Step.OutputProperties.DbFetchData76.ResultTable.Row[1].EncryptionResult}");
            bind_dir771 = new BindDirection(_flow.DbFetchData76,binding_getter799,binding_setter771,BindTargetType.ToInProperty);
            _flow.HTTPActivity73.InDirections.Add(bind_dir771);
            XmlDocument HTTPActivity73_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseXmlBody = HTTPActivity73_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity73_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity73_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity73.ExpectedResponseJsonBody = HTTPActivity73_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity73_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity73_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity73_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity73.ExpectedOutputProperties = HTTPActivity73_ExpectedOutputProperties_Document;
            _flow.DbFetchData77.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity73.ResponseBody}' where InterfaceName = '/iq/getUCard.php'";
            _flow.DbFetchData77.Timeout = (int)30;
            _flow.DbFetchData77.Comment = @"";
            _flow.DbFetchData77.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData77.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi1571 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter800 = new VTDObjectGetter(pi1571);
            VTDPropertyInfoBase pi1572 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter772 = new VTDObjectSetter(pi1572);
            binding_setter772 = new StringFormaterDecorator(binding_setter772,"{Step.OutputProperties.HTTPActivity73.ResponseBody}");
            bind_dir772 = new BindDirection(_flow.HTTPActivity73,binding_getter800,binding_setter772,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir772);
            VTDPropertyInfoBase pi1573 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter801 = new VTDObjectGetter(pi1573);
            VTDPropertyInfoBase pi1574 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter773 = new VTDObjectSetter(pi1574);
            bind_dir773 = new BindDirection(_flow.DbOpenConnection39,binding_getter801,binding_setter773,BindTargetType.ToInProperty);
            _flow.DbFetchData77.InDirections.Add(bind_dir773);
            XmlDocument DbFetchData77_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData77_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData77_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData77.ExpectedOutputProperties = DbFetchData77_ExpectedOutputProperties_Document;
            this.DataCursorActivity264.Comment = @"";
            this.DataCursorActivity264.IconPath = @"";
            VTDPropertyInfoBase pi1575 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter802 = new VTDObjectGetter(pi1575);
            VTDPropertyInfoBase pi1576 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter774 = new VTDObjectSetter(pi1576);
            binding_setter774 = new StringFormaterDecorator(binding_setter774,"{Step.DataFetchActivity256.OutTable}");
            bind_dir774 = new BindDirection(_flow.DataFetchActivity256,binding_getter802,binding_setter774,BindTargetType.ToInProperty);
            this.DataCursorActivity264.InDirections.Add(bind_dir774);
            this.DataCursorActivity264_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity264_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.StartCondition.Value = "";
            this.DataCursorActivity264_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity264_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity264_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity264_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity264_Policy.EndCondition.Value = "";
            this.DataCursorActivity264_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity264_Policy.StepSize = 1;
            this.DataCursorActivity264_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity264.Policy = this.DataCursorActivity264_Policy;
            this.DataCursorActivity264.ReportStepData = false;
            _flow.Loop56.BeforeExecuteStepEvent += this.DataCursorActivity264.ResetCursor;
            _flow.Sequence255.Comment = @"";
            _flow.Sequence255.IconPath = @"";
            _flow.Sequence255.Name = @"序列255";
            _flow.Sequence255.Activities.Add (_flow.DbFetchData57);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData250);
            _flow.Sequence255.Activities.Add (_flow.CallQTPTest251);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData252);
            _flow.Sequence255.Activities.Add (_flow.ReplaceStringActivity253);
            _flow.Sequence255.Activities.Add (_flow.HTTPActivity59);
            _flow.Sequence255.Activities.Add (_flow.StringToJsonActivity60);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData61);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData62);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData117);
            _flow.Sequence255.Activities.Add (_flow.DbFetchData63);
            _flow.Sequence255.Activities.Add (_flow.IfElse64);
            _flow.DbFetchData57.QueryString = @"select xsid,toJid,token from tb_getUcard_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData57.Timeout = (int)30;
            _flow.DbFetchData57.Comment = @"";
            _flow.DbFetchData57.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData57.Name = @"查询tb_getUcard_verification表中字段信息";
            VTDPropertyInfoBase pi1577 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter803 = new VTDObjectGetter(pi1577);
            VTDPropertyInfoBase pi1578 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter775 = new VTDObjectSetter(pi1578);
            binding_setter775 = new StringFormaterDecorator(binding_setter775,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir775 = new BindDirection(_flow.Loop56,binding_getter803,binding_setter775,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir775);
            VTDPropertyInfoBase pi1579 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter804 = new VTDObjectGetter(pi1579);
            VTDPropertyInfoBase pi1580 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter776 = new VTDObjectSetter(pi1580);
            bind_dir776 = new BindDirection(_flow.DbOpenConnection39,binding_getter804,binding_setter776,BindTargetType.ToInProperty);
            _flow.DbFetchData57.InDirections.Add(bind_dir776);
            XmlDocument DbFetchData57_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData57_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData57_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><toJid /><token>61f048fc016c13ea5cdfa6416c6e6ef9532716b8</token></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData57.ExpectedOutputProperties = DbFetchData57_ExpectedOutputProperties_Document;
            set_DbFetchData57_checkpoints(_flow.DbFetchData57);
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将本地表的xsid更新";
            VTDPropertyInfoBase pi1581 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter805 = new VTDXPathGetter(pi1581,XmlTypeCode.String);
            binding_getter805 = new XPathGetterDecorator(binding_getter805,"{Array0}",1);
            VTDPropertyInfoBase pi1582 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter777 = new VTDObjectSetter(pi1582);
            binding_setter777 = new StringFormaterDecorator(binding_setter777,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].xsid}");
            bind_dir777 = new BindDirection(_flow.DbFetchData57,binding_getter805,binding_setter777,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir777);
            VTDPropertyInfoBase pi1583 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter806 = new VTDXPathGetter(pi1583,XmlTypeCode.String);
            binding_getter806 = new XPathGetterDecorator(binding_getter806,"{Array0}",1);
            VTDPropertyInfoBase pi1584 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter778 = new VTDObjectSetter(pi1584);
            binding_setter778 = new StringFormaterDecorator(binding_setter778,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir778 = new BindDirection(_flow.DbFetchData248,binding_getter806,binding_setter778,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir778);
            _flow.DbFetchData250.QueryString = @"update tb_global_table set EncryptionStr = '{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}zvTmwWDXP3' where TestCase = 1";
            _flow.DbFetchData250.Timeout = (int)30;
            _flow.DbFetchData250.Comment = @"";
            _flow.DbFetchData250.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData250.Name = @"将需要加密的数据赋值到全局表EncryptionStr字段中";
            VTDPropertyInfoBase pi1585 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='toJid'][1]");
            VTDBaseGetter binding_getter807 = new VTDXPathGetter(pi1585,XmlTypeCode.String);
            binding_getter807 = new XPathGetterDecorator(binding_getter807,"{Array0}",1);
            VTDPropertyInfoBase pi1586 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter779 = new VTDObjectSetter(pi1586);
            binding_setter779 = new StringFormaterDecorator(binding_setter779,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}");
            bind_dir779 = new BindDirection(_flow.DbFetchData57,binding_getter807,binding_setter779,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir779);
            VTDPropertyInfoBase pi1587 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter808 = new VTDObjectGetter(pi1587);
            VTDPropertyInfoBase pi1588 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter780 = new VTDObjectSetter(pi1588);
            bind_dir780 = new BindDirection(_flow.DbOpenConnection39,binding_getter808,binding_setter780,BindTargetType.ToInProperty);
            _flow.DbFetchData250.InDirections.Add(bind_dir780);
            XmlDocument DbFetchData250_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData250_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData250_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData250.ExpectedOutputProperties = DbFetchData250_ExpectedOutputProperties_Document;
            _flow.CallQTPTest251.Comment = @"";
            _flow.CallQTPTest251.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest251.Name = @"Encryption.SHA1";
            _flow.CallQTPTest251.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ScriptPath}");
            _flow.CallQTPTest251.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ActionName}");
            _flow.CallQTPTest251.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.Description}");
            _flow.CallQTPTest251.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.IsActionSelected}");
            _flow.CallQTPTest251.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.ResultLocation}");
            _flow.CallQTPTest251.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest251.QCScriptPath}");
            _flow.DbFetchData252.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData252.Timeout = (int)30;
            _flow.DbFetchData252.Comment = @"";
            _flow.DbFetchData252.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData252.Name = @"查询出加密后的token信息";
            VTDPropertyInfoBase pi1589 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter809 = new VTDObjectGetter(pi1589);
            VTDPropertyInfoBase pi1590 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter781 = new VTDObjectSetter(pi1590);
            bind_dir781 = new BindDirection(_flow.DbOpenConnection39,binding_getter809,binding_setter781,BindTargetType.ToInProperty);
            _flow.DbFetchData252.InDirections.Add(bind_dir781);
            XmlDocument DbFetchData252_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData252_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData252_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData252.ExpectedOutputProperties = DbFetchData252_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity253.SourceString = @"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}";
            _flow.ReplaceStringActivity253.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity253.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Key = @"305bbc2b43542b3d0203daffe9073c3cba5b47d9";
            _flow.ReplaceStringActivity253.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}";
            _flow.ReplaceStringActivity253.CaseSensitive = true;
            _flow.ReplaceStringActivity253.Comment = @"";
            _flow.ReplaceStringActivity253.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity253.Name = @"将token更新至最新值";
            VTDPropertyInfoBase pi1591 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter810 = new VTDXPathGetter(pi1591,XmlTypeCode.String);
            binding_getter810 = new XPathGetterDecorator(binding_getter810,"{Array0}",1);
            VTDPropertyInfoBase pi1592 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter782 = new VTDObjectSetter(pi1592);
            binding_setter782 = new StringFormaterDecorator(binding_setter782,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].token}");
            bind_dir782 = new BindDirection(_flow.DbFetchData57,binding_getter810,binding_setter782,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir782);
            VTDPropertyInfoBase pi1593 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter811 = new VTDXPathGetter(pi1593,XmlTypeCode.String);
            binding_getter811 = new XPathGetterDecorator(binding_getter811,"{Array0}",1);
            VTDPropertyInfoBase pi1594 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter783 = new VTDObjectSetter(pi1594);
            binding_setter783 = new StringFormaterDecorator(binding_setter783,"{Step.OutputProperties.DbFetchData252.ResultTable.Row[1].EncryptionResult}");
            bind_dir783 = new BindDirection(_flow.DbFetchData252,binding_getter811,binding_setter783,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity253.InDirections.Add(bind_dir783);
            _flow.HTTPActivity59.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&toJid={Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}&token={Step.OutputProperties.ReplaceStringActivity253.Result}";
            _flow.HTTPActivity59.TextXmlBody = @"";
            _flow.HTTPActivity59.FileBody = @"";
            _flow.HTTPActivity59.PostBody = @"";
            _flow.HTTPActivity59.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getUCard}";
            _flow.HTTPActivity59.HttpMethod = @"POST";
            _flow.HTTPActivity59.HttpVersion = @"1.1";
            _flow.HTTPActivity59.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity59.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity59.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity59.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity59.Comment = @"";
            _flow.HTTPActivity59.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity59.RequestBodyType = @"Text";
            _flow.HTTPActivity59.ResponseType = @"Text";
            _flow.HTTPActivity59.Name = @"调用/iq/getUCard.php";
            _flow.HTTPActivity59.Proxy.Server = @"";
            _flow.HTTPActivity59.Proxy.Username = @"";
            _flow.HTTPActivity59.Proxy.Password = @"";
            _flow.HTTPActivity59.Authentication.Username = @"";
            _flow.HTTPActivity59.Authentication.Password = @"";
            _flow.HTTPActivity59.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity59.Timeout = (int)100000;
            _flow.HTTPActivity59.ClientCertificate.Password = @"";
            _flow.HTTPActivity59.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity59.UseClientCertificate = false;
            _flow.HTTPActivity59.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity59.AllowRedirections = true;
            _flow.HTTPActivity59.ReuseCookies = false;
            _flow.HTTPActivity59.ExpectServerError = false;
            XmlDocument HTTPActivity59_XMLBody_Document = new XmlDocument();
            HTTPActivity59_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity59_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.XMLBody = HTTPActivity59_XMLBody_Document;
            XmlDocument HTTPActivity59_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity59_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity59_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity59.RequestMultipartInfoXml = HTTPActivity59_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity59.Multipart=false;
            VTDPropertyInfoBase pi1595 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter812 = new VTDObjectGetter(pi1595);
            VTDPropertyInfoBase pi1596 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter784 = new VTDObjectSetter(pi1596);
            binding_setter784 = new StringFormaterDecorator(binding_setter784,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir784 = new BindDirection(this.DataCursorActivity264,binding_getter812,binding_setter784,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir784);
            VTDPropertyInfoBase pi1597 = new VTDPropertyInfoBase("getUCard");
            VTDBaseGetter binding_getter813 = new VTDObjectGetter(pi1597);
            VTDPropertyInfoBase pi1598 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter785 = new VTDObjectSetter(pi1598);
            binding_setter785 = new StringFormaterDecorator(binding_setter785,"{DataSource.tb_global_table.getUCard}");
            bind_dir785 = new BindDirection(this.DataCursorActivity264,binding_getter813,binding_setter785,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir785);
            VTDPropertyInfoBase pi1599 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter814 = new VTDObjectGetter(pi1599);
            VTDPropertyInfoBase pi1600 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter786 = new VTDObjectSetter(pi1600);
            binding_setter786 = new StringFormaterDecorator(binding_setter786,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir786 = new BindDirection(this.DataCursorActivity264,binding_getter814,binding_setter786,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir786);
            VTDPropertyInfoBase pi1601 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter815 = new VTDObjectGetter(pi1601);
            VTDPropertyInfoBase pi1602 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter787 = new VTDObjectSetter(pi1602);
            binding_setter787 = new StringFormaterDecorator(binding_setter787,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir787 = new BindDirection(this.DataCursorActivity264,binding_getter815,binding_setter787,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir787);
            VTDPropertyInfoBase pi1603 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter816 = new VTDObjectGetter(pi1603);
            VTDPropertyInfoBase pi1604 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter788 = new VTDObjectSetter(pi1604);
            binding_setter788 = new StringFormaterDecorator(binding_setter788,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir788 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter816,binding_setter788,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir788);
            VTDPropertyInfoBase pi1605 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='toJid'][1]");
            VTDBaseGetter binding_getter817 = new VTDXPathGetter(pi1605,XmlTypeCode.String);
            binding_getter817 = new XPathGetterDecorator(binding_getter817,"{Array0}",1);
            VTDPropertyInfoBase pi1606 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter789 = new VTDObjectSetter(pi1606);
            binding_setter789 = new StringFormaterDecorator(binding_setter789,"{Step.OutputProperties.DbFetchData57.ResultTable.Row[1].toJid}");
            bind_dir789 = new BindDirection(_flow.DbFetchData57,binding_getter817,binding_setter789,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir789);
            VTDPropertyInfoBase pi1607 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter818 = new VTDObjectGetter(pi1607);
            VTDPropertyInfoBase pi1608 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter790 = new VTDObjectSetter(pi1608);
            binding_setter790 = new StringFormaterDecorator(binding_setter790,"{Step.OutputProperties.ReplaceStringActivity253.Result}");
            bind_dir790 = new BindDirection(_flow.ReplaceStringActivity253,binding_getter818,binding_setter790,BindTargetType.ToInProperty);
            _flow.HTTPActivity59.InDirections.Add(bind_dir790);
            XmlDocument HTTPActivity59_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseXmlBody = HTTPActivity59_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity59_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity59_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity59.ExpectedResponseJsonBody = HTTPActivity59_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity59_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity59_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity59_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity59.ExpectedOutputProperties = HTTPActivity59_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity60.InputString = @"{Step.OutputProperties.HTTPActivity59.ResponseBody}";
            _flow.StringToJsonActivity60.Comment = @"";
            _flow.StringToJsonActivity60.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity60.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi1609 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter819 = new VTDObjectGetter(pi1609);
            VTDPropertyInfoBase pi1610 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter791 = new VTDObjectSetter(pi1610);
            binding_setter791 = new StringFormaterDecorator(binding_setter791,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir791 = new BindDirection(_flow.HTTPActivity59,binding_getter819,binding_setter791,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity60.InDirections.Add(bind_dir791);
            _flow.DbFetchData61.QueryString = @"UPDATE tb_getUcard_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity59.ResponseBody}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData61.Timeout = (int)30;
            _flow.DbFetchData61.Comment = @"";
            _flow.DbFetchData61.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData61.Name = @"将获取到的JSON插入到sql中";
            VTDPropertyInfoBase pi1611 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter820 = new VTDObjectGetter(pi1611);
            VTDPropertyInfoBase pi1612 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter792 = new VTDObjectSetter(pi1612);
            binding_setter792 = new StringFormaterDecorator(binding_setter792,"{Step.OutputProperties.HTTPActivity59.ResponseBody}");
            bind_dir792 = new BindDirection(_flow.HTTPActivity59,binding_getter820,binding_setter792,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir792);
            VTDPropertyInfoBase pi1613 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter821 = new VTDObjectGetter(pi1613);
            VTDPropertyInfoBase pi1614 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter793 = new VTDObjectSetter(pi1614);
            binding_setter793 = new StringFormaterDecorator(binding_setter793,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir793 = new BindDirection(_flow.Loop56,binding_getter821,binding_setter793,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir793);
            VTDPropertyInfoBase pi1615 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter822 = new VTDObjectGetter(pi1615);
            VTDPropertyInfoBase pi1616 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter794 = new VTDObjectSetter(pi1616);
            bind_dir794 = new BindDirection(_flow.DbOpenConnection39,binding_getter822,binding_setter794,BindTargetType.ToInProperty);
            _flow.DbFetchData61.InDirections.Add(bind_dir794);
            XmlDocument DbFetchData61_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData61_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData61_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData61.ExpectedOutputProperties = DbFetchData61_ExpectedOutputProperties_Document;
            _flow.DbFetchData62.QueryString = @"update tb_getUcard_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity60.errorCode}' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData62.Timeout = (int)30;
            _flow.DbFetchData62.Comment = @"";
            _flow.DbFetchData62.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData62.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi1617 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter823 = new VTDJsonGetter(pi1617);
            VTDPropertyInfoBase pi1618 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter795 = new VTDObjectSetter(pi1618);
            binding_setter795 = new StringFormaterDecorator(binding_setter795,"{Step.JsonContent.StringToJsonActivity60.errorCode}");
            bind_dir795 = new BindDirection(_flow.StringToJsonActivity60,binding_getter823,binding_setter795,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir795);
            VTDPropertyInfoBase pi1619 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter824 = new VTDObjectGetter(pi1619);
            VTDPropertyInfoBase pi1620 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter796 = new VTDObjectSetter(pi1620);
            binding_setter796 = new StringFormaterDecorator(binding_setter796,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir796 = new BindDirection(_flow.Loop56,binding_getter824,binding_setter796,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir796);
            VTDPropertyInfoBase pi1621 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter825 = new VTDObjectGetter(pi1621);
            VTDPropertyInfoBase pi1622 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter797 = new VTDObjectSetter(pi1622);
            bind_dir797 = new BindDirection(_flow.DbOpenConnection39,binding_getter825,binding_setter797,BindTargetType.ToInProperty);
            _flow.DbFetchData62.InDirections.Add(bind_dir797);
            XmlDocument DbFetchData62_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData62_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData62_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData62.ExpectedOutputProperties = DbFetchData62_ExpectedOutputProperties_Document;
            _flow.DbFetchData117.QueryString = @"select OutputValue from tb_getUcard_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData117.Timeout = (int)30;
            _flow.DbFetchData117.Comment = @"";
            _flow.DbFetchData117.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData117.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi1623 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter826 = new VTDObjectGetter(pi1623);
            VTDPropertyInfoBase pi1624 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter798 = new VTDObjectSetter(pi1624);
            binding_setter798 = new StringFormaterDecorator(binding_setter798,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir798 = new BindDirection(_flow.Loop56,binding_getter826,binding_setter798,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir798);
            VTDPropertyInfoBase pi1625 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter827 = new VTDObjectGetter(pi1625);
            VTDPropertyInfoBase pi1626 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter799 = new VTDObjectSetter(pi1626);
            bind_dir799 = new BindDirection(_flow.DbOpenConnection39,binding_getter827,binding_setter799,BindTargetType.ToInProperty);
            _flow.DbFetchData117.InDirections.Add(bind_dir799);
            XmlDocument DbFetchData117_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData117_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData117_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData117.ExpectedOutputProperties = DbFetchData117_ExpectedOutputProperties_Document;
            _flow.DbFetchData63.QueryString = @"select ExpectationValue from tb_getUcard_verification where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData63.Timeout = (int)30;
            _flow.DbFetchData63.Comment = @"";
            _flow.DbFetchData63.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData63.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi1627 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter828 = new VTDObjectGetter(pi1627);
            VTDPropertyInfoBase pi1628 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter800 = new VTDObjectSetter(pi1628);
            binding_setter800 = new StringFormaterDecorator(binding_setter800,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir800 = new BindDirection(_flow.Loop56,binding_getter828,binding_setter800,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir800);
            VTDPropertyInfoBase pi1629 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter829 = new VTDObjectGetter(pi1629);
            VTDPropertyInfoBase pi1630 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter801 = new VTDObjectSetter(pi1630);
            bind_dir801 = new BindDirection(_flow.DbOpenConnection39,binding_getter829,binding_setter801,BindTargetType.ToInProperty);
            _flow.DbFetchData63.InDirections.Add(bind_dir801);
            XmlDocument DbFetchData63_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData63_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData63_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData63.ExpectedOutputProperties = DbFetchData63_ExpectedOutputProperties_Document;
            _flow.IfElse64.ConditionAsString = @"{Step.OutputProperties.DbFetchData117.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData63.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse64.Comment = @"";
            _flow.IfElse64.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse64.Name = @"填写Result";
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch65);
            _flow.IfElse64.Activities.Add (_flow.IfElseBranch66);
            _flow.IfElseBranch65.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi1631 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter830 = new VTDXPathGetter(pi1631,XmlTypeCode.String);
            binding_getter830 = new XPathGetterDecorator(binding_getter830,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData117.GetParam(binding_getter830),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi1632 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter831 = new VTDXPathGetter(pi1632,XmlTypeCode.String);
            binding_getter831 = new XPathGetterDecorator(binding_getter831,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData63.GetParam(binding_getter831),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch65.Comment = @"";
            _flow.IfElseBranch65.IconPath = @"";
            _flow.IfElseBranch65.Name = @"是";
            _flow.IfElseBranch65.Activities.Add (_flow.DbFetchData67);
            _flow.IfElseBranch66.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch66.Comment = @"";
            _flow.IfElseBranch66.IconPath = @"";
            _flow.IfElseBranch66.Name = @"否";
            _flow.IfElseBranch66.Activities.Add (_flow.DbFetchData68);
            _flow.DbFetchData67.QueryString = @"update tb_getUcard_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData67.Timeout = (int)30;
            _flow.DbFetchData67.Comment = @"";
            _flow.DbFetchData67.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData67.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi1633 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter832 = new VTDObjectGetter(pi1633);
            VTDPropertyInfoBase pi1634 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter802 = new VTDObjectSetter(pi1634);
            binding_setter802 = new StringFormaterDecorator(binding_setter802,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir802 = new BindDirection(_flow.Loop56,binding_getter832,binding_setter802,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir802);
            VTDPropertyInfoBase pi1635 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter833 = new VTDObjectGetter(pi1635);
            VTDPropertyInfoBase pi1636 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter803 = new VTDObjectSetter(pi1636);
            bind_dir803 = new BindDirection(_flow.DbOpenConnection39,binding_getter833,binding_setter803,BindTargetType.ToInProperty);
            _flow.DbFetchData67.InDirections.Add(bind_dir803);
            XmlDocument DbFetchData67_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData67_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData67_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData67.ExpectedOutputProperties = DbFetchData67_ExpectedOutputProperties_Document;
            _flow.DbFetchData68.QueryString = @"update tb_getUcard_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop56.CurrentIterationNumber}";
            _flow.DbFetchData68.Timeout = (int)30;
            _flow.DbFetchData68.Comment = @"";
            _flow.DbFetchData68.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData68.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi1637 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter834 = new VTDObjectGetter(pi1637);
            VTDPropertyInfoBase pi1638 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter804 = new VTDObjectSetter(pi1638);
            binding_setter804 = new StringFormaterDecorator(binding_setter804,"{Step.OutputProperties.Loop56.CurrentIterationNumber}");
            bind_dir804 = new BindDirection(_flow.Loop56,binding_getter834,binding_setter804,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir804);
            VTDPropertyInfoBase pi1639 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter835 = new VTDObjectGetter(pi1639);
            VTDPropertyInfoBase pi1640 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter805 = new VTDObjectSetter(pi1640);
            bind_dir805 = new BindDirection(_flow.DbOpenConnection39,binding_getter835,binding_setter805,BindTargetType.ToInProperty);
            _flow.DbFetchData68.InDirections.Add(bind_dir805);
            XmlDocument DbFetchData68_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData68_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData68_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData68.ExpectedOutputProperties = DbFetchData68_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    