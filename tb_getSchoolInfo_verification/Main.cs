/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘tb_getSchoolInfo_verification.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir329 = null;
        public BindDirection bind_dir330 = null;
        public BindDirection bind_dir331 = null;
        public BindDirection bind_dir332 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity259 = null;
        public BindDirection bind_dir333 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity259_Policy = null;
        public BindDirection bind_dir334 = null;
        public BindDirection bind_dir335 = null;
        public BindDirection bind_dir336 = null;
        public BindDirection bind_dir337 = null;
        public BindDirection bind_dir338 = null;
        public BindDirection bind_dir339 = null;
        public BindDirection bind_dir340 = null;
        public BindDirection bind_dir341 = null;
        public BindDirection bind_dir342 = null;
        public BindDirection bind_dir343 = null;
        public BindDirection bind_dir344 = null;
        public BindDirection bind_dir345 = null;
        public BindDirection bind_dir346 = null;
        public BindDirection bind_dir347 = null;
        public BindDirection bind_dir348 = null;
        public BindDirection bind_dir349 = null;
        public BindDirection bind_dir350 = null;
        public BindDirection bind_dir351 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity260 = null;
        public BindDirection bind_dir352 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity260_Policy = null;
        public BindDirection bind_dir353 = null;
        public BindDirection bind_dir354 = null;
        public BindDirection bind_dir355 = null;
        public BindDirection bind_dir356 = null;
        public BindDirection bind_dir357 = null;
        public BindDirection bind_dir358 = null;
        public BindDirection bind_dir359 = null;
        public BindDirection bind_dir360 = null;
        public BindDirection bind_dir361 = null;
        public BindDirection bind_dir362 = null;
        public BindDirection bind_dir363 = null;
        public BindDirection bind_dir364 = null;
        public BindDirection bind_dir365 = null;
        public BindDirection bind_dir366 = null;
        public BindDirection bind_dir367 = null;
        public BindDirection bind_dir368 = null;
        public BindDirection bind_dir369 = null;
        public BindDirection bind_dir370 = null;
        public BindDirection bind_dir371 = null;
        public BindDirection bind_dir372 = null;
        public BindDirection bind_dir373 = null;
        public BindDirection bind_dir374 = null;
        public BindDirection bind_dir375 = null;
        public BindDirection bind_dir376 = null;
        public BindDirection bind_dir377 = null;
        public BindDirection bind_dir378 = null;
        public BindDirection bind_dir379 = null;
        public BindDirection bind_dir380 = null;
        public BindDirection bind_dir381 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity255 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity255");
            _flow.DataFetchActivity252 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity252");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity254 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity254");
            _flow.DataExporterActivity257 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity257");
            _flow.DataExporterCloseActivity258 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity258");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity253 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity253");
            _flow.DataDisconnectActivity256 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity256");
            this.DataCursorActivity259 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity259");
            this.DataCursorActivity259_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence250 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence250");
            _flow.DbOpenConnection39 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection39");
            _flow.DbFetchData79 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData79");
            _flow.Loop78 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop78Input>(_context,"Loop78",LoopType.For);
            _flow.DbFetchData93 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData93");
            _flow.CallQTPTest94 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest94");
            _flow.DbFetchData95 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData95");
            _flow.DbFetchData246 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData246");
            _flow.HTTPActivity92 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity92");
            _flow.StringToJsonActivity115 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity115");
            _flow.DbFetchData247 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData247");
            _flow.DbFetchData96 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData96");
            this.DataCursorActivity260 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity260");
            this.DataCursorActivity260_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence251 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence251");
            _flow.DbFetchData80 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData80");
            _flow.DbFetchData248 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData248");
            _flow.ReplaceStringActivity249 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity249");
            _flow.HTTPActivity81 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity81");
            _flow.StringToJsonActivity82 = new HP.ST.Ext.TransformJsonActivity.StringToJsonActivity(_context,"StringToJsonActivity82");
            _flow.DbFetchData83 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData83");
            _flow.DbFetchData84 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData84");
            _flow.DbFetchData85 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData85");
            _flow.DbFetchData86 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData86");
            _flow.IfElse87 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse87Input>(_context,"IfElse87");
            _flow.IfElseBranch88 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch88");
            _flow.IfElseBranch89 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch89");
            _flow.DbFetchData90 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData90");
            _flow.DbFetchData91 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData91");
            _flow.DataFetchActivity255.Comment = @"";
            _flow.DataFetchActivity255.IconPath = @"";
            _flow.DataFetchActivity255.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity255.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity255_QueryParameters_Document = new XmlDocument();
            DataFetchActivity255_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity255Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>6704d522-5d6d-4d1f-b543-b5d5e85e7f33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=localhost;Uid=root;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_sso_authorize_verification</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>UqIq+/M1hvnEiRgp6HH+dg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity255_QueryParameters_Document.LoadXml(xmlDataFetchActivity255Params);
            _flow.DataFetchActivity255.QueryParameters = DataFetchActivity255_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_sso_authorize_verification", _flow.DataFetchActivity255);
            this.Activities.Add (_flow.DataFetchActivity255);
            _flow.DataFetchActivity252.Comment = @"";
            _flow.DataFetchActivity252.IconPath = @"";
            _flow.DataFetchActivity252.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity252.QueryClassName = @"HP.ST.Ext.CustomDataProviders.DbDataQuery";
            XmlDocument DataFetchActivity252_QueryParameters_Document = new XmlDocument();
            DataFetchActivity252_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity252Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3c16ad12-8441-44fc-ba3f-59f4289acca5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>tb_global_table</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>ConnectionString</Name><Value>DSN=192.168.50.11;Uid=ime;Pwd={PWD};</Value></QueryParameter><QueryParameter><Name>SqlStatement</Name><Value>select * from tb_global_table where TestCase = '1'</Value></QueryParameter><QueryParameter><Name>Password</Name><Value>nS9jToOb4zLJent8hCRcVg==</Value></QueryParameter><QueryParameter><Name>DatabaseType</Name><Value>ODBC</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity252_QueryParameters_Document.LoadXml(xmlDataFetchActivity252Params);
            _flow.DataFetchActivity252.QueryParameters = DataFetchActivity252_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("tb_global_table", _flow.DataFetchActivity252);
            this.Activities.Add (_flow.DataFetchActivity252);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"开始";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"测试流";
            _flow.Loop2.Activities.Add (this.DataCursorActivity259);
            _flow.Loop2.Activities.Add (_flow.Sequence250);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity254.Comment = @"";
            _flow.DataExporterActivity254.IconPath = @"";
            VTDPropertyInfoBase pi669 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter341 = new VTDObjectGetter(pi669);
            VTDPropertyInfoBase pi670 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter329 = new VTDObjectSetter(pi670);
            binding_setter329 = new StringFormaterDecorator(binding_setter329,"{Step.DataFetchActivity252.OutTable}");
            bind_dir329 = new BindDirection(_flow.DataFetchActivity252,binding_getter341,binding_setter329,BindTargetType.ToInProperty);
            _flow.DataExporterActivity254.InDirections.Add(bind_dir329);
            this.Activities.Add (_flow.DataExporterActivity254);
            _flow.DataExporterActivity257.Comment = @"";
            _flow.DataExporterActivity257.IconPath = @"";
            VTDPropertyInfoBase pi671 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter342 = new VTDObjectGetter(pi671);
            VTDPropertyInfoBase pi672 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter330 = new VTDObjectSetter(pi672);
            binding_setter330 = new StringFormaterDecorator(binding_setter330,"{Step.DataFetchActivity255.OutTable}");
            bind_dir330 = new BindDirection(_flow.DataFetchActivity255,binding_getter342,binding_setter330,BindTargetType.ToInProperty);
            _flow.DataExporterActivity257.InDirections.Add(bind_dir330);
            this.Activities.Add (_flow.DataExporterActivity257);
            _flow.DataExporterCloseActivity258.Comment = @"";
            _flow.DataExporterCloseActivity258.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity258);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"结束";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity253.Comment = @"";
            _flow.DataDisconnectActivity253.IconPath = @"";
            VTDPropertyInfoBase pi673 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter343 = new VTDObjectGetter(pi673);
            VTDPropertyInfoBase pi674 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter331 = new VTDObjectSetter(pi674);
            binding_setter331 = new StringFormaterDecorator(binding_setter331,"{Step.DataFetchActivity252.OutTable}");
            bind_dir331 = new BindDirection(_flow.DataFetchActivity252,binding_getter343,binding_setter331,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity253.InDirections.Add(bind_dir331);
            this.Activities.Add (_flow.DataDisconnectActivity253);
            _flow.DataDisconnectActivity256.Comment = @"";
            _flow.DataDisconnectActivity256.IconPath = @"";
            VTDPropertyInfoBase pi675 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter344 = new VTDObjectGetter(pi675);
            VTDPropertyInfoBase pi676 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter332 = new VTDObjectSetter(pi676);
            binding_setter332 = new StringFormaterDecorator(binding_setter332,"{Step.DataFetchActivity255.OutTable}");
            bind_dir332 = new BindDirection(_flow.DataFetchActivity255,binding_getter344,binding_setter332,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity256.InDirections.Add(bind_dir332);
            this.Activities.Add (_flow.DataDisconnectActivity256);
            this.DataCursorActivity259.Comment = @"";
            this.DataCursorActivity259.IconPath = @"";
            VTDPropertyInfoBase pi677 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter345 = new VTDObjectGetter(pi677);
            VTDPropertyInfoBase pi678 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter333 = new VTDObjectSetter(pi678);
            binding_setter333 = new StringFormaterDecorator(binding_setter333,"{Step.DataFetchActivity252.OutTable}");
            bind_dir333 = new BindDirection(_flow.DataFetchActivity252,binding_getter345,binding_setter333,BindTargetType.ToInProperty);
            this.DataCursorActivity259.InDirections.Add(bind_dir333);
            this.DataCursorActivity259_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity259_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity259_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity259_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity259_Policy.StartCondition.Value = "";
            this.DataCursorActivity259_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity259_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity259_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity259_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity259_Policy.EndCondition.Value = "";
            this.DataCursorActivity259_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity259_Policy.StepSize = 1;
            this.DataCursorActivity259_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity259.Policy = this.DataCursorActivity259_Policy;
            this.DataCursorActivity259.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity259.ResetCursor;
            _flow.Sequence250.Comment = @"";
            _flow.Sequence250.IconPath = @"";
            _flow.Sequence250.Name = @"序列250";
            _flow.Sequence250.Activities.Add (_flow.DbOpenConnection39);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData79);
            _flow.Sequence250.Activities.Add (_flow.Loop78);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData93);
            _flow.Sequence250.Activities.Add (_flow.CallQTPTest94);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData95);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData246);
            _flow.Sequence250.Activities.Add (_flow.HTTPActivity92);
            _flow.Sequence250.Activities.Add (_flow.StringToJsonActivity115);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData247);
            _flow.Sequence250.Activities.Add (_flow.DbFetchData96);
            _flow.DbOpenConnection39.ConnectionString = @"DSN=192.168.50.11;Uid=ime;Pwd={PWD};";
            _flow.DbOpenConnection39.Password = @"nS9jToOb4zLJent8hCRcVg==";
            _flow.DbOpenConnection39.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection39.Comment = @"";
            _flow.DbOpenConnection39.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection39.Name = @"连接到mysql数据库";
            _flow.DbFetchData79.QueryString = @"select count(*) as 'Row' from tb_getschoolinfo_verification";
            _flow.DbFetchData79.Timeout = (int)30;
            _flow.DbFetchData79.Comment = @"";
            _flow.DbFetchData79.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData79.Name = @"获取tb_getSchoolInfo_verification有效行数";
            VTDPropertyInfoBase pi679 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter346 = new VTDObjectGetter(pi679);
            VTDPropertyInfoBase pi680 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter334 = new VTDObjectSetter(pi680);
            bind_dir334 = new BindDirection(_flow.DbOpenConnection39,binding_getter346,binding_setter334,BindTargetType.ToInProperty);
            _flow.DbFetchData79.InDirections.Add(bind_dir334);
            XmlDocument DbFetchData79_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData79_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData79_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Row /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData79.ExpectedOutputProperties = DbFetchData79_ExpectedOutputProperties_Document;
            _flow.Loop78.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop78.NumberOfIterations = (int)1;
            _flow.Loop78.Comment = @"";
            _flow.Loop78.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop78.Name = @"循环执行tb_getSchoolInfo_verification中的测试用例";
            VTDPropertyInfoBase pi681 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Row'][1]");
            VTDBaseGetter binding_getter347 = new VTDXPathGetter(pi681,XmlTypeCode.Long);
            binding_getter347 = new XPathGetterDecorator(binding_getter347,"{Array0}",1);
            VTDPropertyInfoBase pi682 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter335 = new VTDObjectSetter(pi682);
            bind_dir335 = new BindDirection(_flow.DbFetchData79,binding_getter347,binding_setter335,BindTargetType.ToInProperty);
            _flow.Loop78.InDirections.Add(bind_dir335);
            _flow.Loop78.Activities.Add (this.DataCursorActivity260);
            _flow.Loop78.Activities.Add (_flow.Sequence251);
            _flow.DbFetchData93.QueryString = @"update tb_global_table set EncryptionStr = '{DataSource.tb_global_table.LoginTeacherUsername}@365ime.comDeVawMFWs6' where TestCase = 1";
            _flow.DbFetchData93.Timeout = (int)30;
            _flow.DbFetchData93.Comment = @"";
            _flow.DbFetchData93.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData93.Name = @"对/jxt/school.php接口token实行加密";
            VTDPropertyInfoBase pi683 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter348 = new VTDObjectGetter(pi683);
            VTDPropertyInfoBase pi684 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter336 = new VTDObjectSetter(pi684);
            binding_setter336 = new StringFormaterDecorator(binding_setter336,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir336 = new BindDirection(this.DataCursorActivity259,binding_getter348,binding_setter336,BindTargetType.ToInProperty);
            _flow.DbFetchData93.InDirections.Add(bind_dir336);
            VTDPropertyInfoBase pi685 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter349 = new VTDObjectGetter(pi685);
            VTDPropertyInfoBase pi686 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter337 = new VTDObjectSetter(pi686);
            bind_dir337 = new BindDirection(_flow.DbOpenConnection39,binding_getter349,binding_setter337,BindTargetType.ToInProperty);
            _flow.DbFetchData93.InDirections.Add(bind_dir337);
            XmlDocument DbFetchData93_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData93_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData93_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData93.ExpectedOutputProperties = DbFetchData93_ExpectedOutputProperties_Document;
            _flow.CallQTPTest94.Comment = @"";
            _flow.CallQTPTest94.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest94.Name = @"Encryption.SHA1";
            _flow.CallQTPTest94.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.ScriptPath}")) ? @"..\Encryption" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.ScriptPath}");
            _flow.CallQTPTest94.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.ActionName}")) ? @"SHA1" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.ActionName}");
            _flow.CallQTPTest94.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.Description}");
            _flow.CallQTPTest94.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.IsActionSelected}");
            _flow.CallQTPTest94.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.ResultLocation}");
            _flow.CallQTPTest94.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest94.QCScriptPath}");
            _flow.DbFetchData95.QueryString = @"select EncryptionResult from tb_global_table where TestCase = 1";
            _flow.DbFetchData95.Timeout = (int)30;
            _flow.DbFetchData95.Comment = @"";
            _flow.DbFetchData95.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData95.Name = @"查询出加密后EncryptionResult字段的值";
            VTDPropertyInfoBase pi687 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter350 = new VTDObjectGetter(pi687);
            VTDPropertyInfoBase pi688 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter338 = new VTDObjectSetter(pi688);
            bind_dir338 = new BindDirection(_flow.DbOpenConnection39,binding_getter350,binding_setter338,BindTargetType.ToInProperty);
            _flow.DbFetchData95.InDirections.Add(bind_dir338);
            XmlDocument DbFetchData95_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData95_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData95_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><EncryptionResult /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData95.ExpectedOutputProperties = DbFetchData95_ExpectedOutputProperties_Document;
            _flow.DbFetchData246.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData246.Timeout = (int)30;
            _flow.DbFetchData246.Comment = @"";
            _flow.DbFetchData246.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData246.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi689 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter351 = new VTDObjectGetter(pi689);
            VTDPropertyInfoBase pi690 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter339 = new VTDObjectSetter(pi690);
            bind_dir339 = new BindDirection(_flow.DbOpenConnection39,binding_getter351,binding_setter339,BindTargetType.ToInProperty);
            _flow.DbFetchData246.InDirections.Add(bind_dir339);
            XmlDocument DbFetchData246_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData246_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData246_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData246.ExpectedOutputProperties = DbFetchData246_ExpectedOutputProperties_Document;
            _flow.HTTPActivity92.TextBody = @"xsid={Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}&myJid={DataSource.tb_global_table.LoginTeacherUsername}@365ime.com&token={Step.OutputProperties.DbFetchData95.ResultTable.Row[1].EncryptionResult}&identity=1";
            _flow.HTTPActivity92.TextXmlBody = @"";
            _flow.HTTPActivity92.FileBody = @"";
            _flow.HTTPActivity92.PostBody = @"";
            _flow.HTTPActivity92.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getSchoolInfo}";
            _flow.HTTPActivity92.HttpMethod = @"POST";
            _flow.HTTPActivity92.HttpVersion = @"1.1";
            _flow.HTTPActivity92.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity92.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity92.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity92.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity92.Comment = @"";
            _flow.HTTPActivity92.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity92.RequestBodyType = @"Text";
            _flow.HTTPActivity92.ResponseType = @"Text";
            _flow.HTTPActivity92.Name = @"调用/jxt/school.php";
            _flow.HTTPActivity92.Proxy.Server = @"";
            _flow.HTTPActivity92.Proxy.Username = @"";
            _flow.HTTPActivity92.Proxy.Password = @"";
            _flow.HTTPActivity92.Authentication.Username = @"";
            _flow.HTTPActivity92.Authentication.Password = @"";
            _flow.HTTPActivity92.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity92.Timeout = (int)100000;
            _flow.HTTPActivity92.ClientCertificate.Password = @"";
            _flow.HTTPActivity92.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity92.UseClientCertificate = false;
            _flow.HTTPActivity92.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity92.AllowRedirections = true;
            _flow.HTTPActivity92.ReuseCookies = false;
            _flow.HTTPActivity92.ExpectServerError = false;
            XmlDocument HTTPActivity92_XMLBody_Document = new XmlDocument();
            HTTPActivity92_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity92_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity92.XMLBody = HTTPActivity92_XMLBody_Document;
            XmlDocument HTTPActivity92_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity92_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity92_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity92.RequestMultipartInfoXml = HTTPActivity92_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity92.Multipart=false;
            VTDPropertyInfoBase pi691 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter352 = new VTDObjectGetter(pi691);
            VTDPropertyInfoBase pi692 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter340 = new VTDObjectSetter(pi692);
            binding_setter340 = new StringFormaterDecorator(binding_setter340,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir340 = new BindDirection(this.DataCursorActivity259,binding_getter352,binding_setter340,BindTargetType.ToInProperty);
            _flow.HTTPActivity92.InDirections.Add(bind_dir340);
            VTDPropertyInfoBase pi693 = new VTDPropertyInfoBase("getSchoolInfo");
            VTDBaseGetter binding_getter353 = new VTDObjectGetter(pi693);
            VTDPropertyInfoBase pi694 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter341 = new VTDObjectSetter(pi694);
            binding_setter341 = new StringFormaterDecorator(binding_setter341,"{DataSource.tb_global_table.getSchoolInfo}");
            bind_dir341 = new BindDirection(this.DataCursorActivity259,binding_getter353,binding_setter341,BindTargetType.ToInProperty);
            _flow.HTTPActivity92.InDirections.Add(bind_dir341);
            VTDPropertyInfoBase pi695 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter354 = new VTDObjectGetter(pi695);
            VTDPropertyInfoBase pi696 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter342 = new VTDObjectSetter(pi696);
            binding_setter342 = new StringFormaterDecorator(binding_setter342,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir342 = new BindDirection(this.DataCursorActivity259,binding_getter354,binding_setter342,BindTargetType.ToInProperty);
            _flow.HTTPActivity92.InDirections.Add(bind_dir342);
            VTDPropertyInfoBase pi697 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter355 = new VTDObjectGetter(pi697);
            VTDPropertyInfoBase pi698 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter343 = new VTDObjectSetter(pi698);
            binding_setter343 = new StringFormaterDecorator(binding_setter343,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir343 = new BindDirection(this.DataCursorActivity259,binding_getter355,binding_setter343,BindTargetType.ToInProperty);
            _flow.HTTPActivity92.InDirections.Add(bind_dir343);
            VTDPropertyInfoBase pi699 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter356 = new VTDXPathGetter(pi699,XmlTypeCode.String);
            binding_getter356 = new XPathGetterDecorator(binding_getter356,"{Array0}",1);
            VTDPropertyInfoBase pi700 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter344 = new VTDObjectSetter(pi700);
            binding_setter344 = new StringFormaterDecorator(binding_setter344,"{Step.OutputProperties.DbFetchData246.ResultTable.Row[1].ResponseXsid}");
            bind_dir344 = new BindDirection(_flow.DbFetchData246,binding_getter356,binding_setter344,BindTargetType.ToInProperty);
            _flow.HTTPActivity92.InDirections.Add(bind_dir344);
            VTDPropertyInfoBase pi701 = new VTDPropertyInfoBase("LoginTeacherUsername");
            VTDBaseGetter binding_getter357 = new VTDObjectGetter(pi701);
            VTDPropertyInfoBase pi702 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter345 = new VTDObjectSetter(pi702);
            binding_setter345 = new StringFormaterDecorator(binding_setter345,"{DataSource.tb_global_table.LoginTeacherUsername}");
            bind_dir345 = new BindDirection(this.DataCursorActivity259,binding_getter357,binding_setter345,BindTargetType.ToInProperty);
            _flow.HTTPActivity92.InDirections.Add(bind_dir345);
            VTDPropertyInfoBase pi703 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='EncryptionResult'][1]");
            VTDBaseGetter binding_getter358 = new VTDXPathGetter(pi703,XmlTypeCode.String);
            binding_getter358 = new XPathGetterDecorator(binding_getter358,"{Array0}",1);
            VTDPropertyInfoBase pi704 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter346 = new VTDObjectSetter(pi704);
            binding_setter346 = new StringFormaterDecorator(binding_setter346,"{Step.OutputProperties.DbFetchData95.ResultTable.Row[1].EncryptionResult}");
            bind_dir346 = new BindDirection(_flow.DbFetchData95,binding_getter358,binding_setter346,BindTargetType.ToInProperty);
            _flow.HTTPActivity92.InDirections.Add(bind_dir346);
            XmlDocument HTTPActivity92_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity92_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity92_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity92.ExpectedResponseXmlBody = HTTPActivity92_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity92_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity92_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity92_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity92.ExpectedResponseJsonBody = HTTPActivity92_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity92_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity92_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity92_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity92.ExpectedOutputProperties = HTTPActivity92_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity115.InputString = @"{Step.OutputProperties.HTTPActivity92.ResponseBody}";
            _flow.StringToJsonActivity115.Comment = @"";
            _flow.StringToJsonActivity115.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity115.Name = @"获取返回值转换为JSON";
            VTDPropertyInfoBase pi705 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter359 = new VTDObjectGetter(pi705);
            VTDPropertyInfoBase pi706 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter347 = new VTDObjectSetter(pi706);
            binding_setter347 = new StringFormaterDecorator(binding_setter347,"{Step.OutputProperties.HTTPActivity92.ResponseBody}");
            bind_dir347 = new BindDirection(_flow.HTTPActivity92,binding_getter359,binding_setter347,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity115.InDirections.Add(bind_dir347);
            _flow.DbFetchData247.QueryString = @"update tb_global_table set schoolCode = '{Step.JsonContent.StringToJsonActivity115.data.Object.schoolCode}' where TestCase = 1";
            _flow.DbFetchData247.Timeout = (int)30;
            _flow.DbFetchData247.Comment = @"";
            _flow.DbFetchData247.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData247.Name = @"将schoolCode更新到全局表";
            VTDPropertyInfoBase pi707 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='data'][1]/*[local-name(.)='Object'][1]/*[local-name(.)='schoolCode'][1]");
            VTDBaseGetter binding_getter360 = new VTDJsonGetter(pi707);
            VTDPropertyInfoBase pi708 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter348 = new VTDObjectSetter(pi708);
            binding_setter348 = new StringFormaterDecorator(binding_setter348,"{Step.JsonContent.StringToJsonActivity115.data.Object.schoolCode}");
            bind_dir348 = new BindDirection(_flow.StringToJsonActivity115,binding_getter360,binding_setter348,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir348);
            VTDPropertyInfoBase pi709 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter361 = new VTDObjectGetter(pi709);
            VTDPropertyInfoBase pi710 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter349 = new VTDObjectSetter(pi710);
            bind_dir349 = new BindDirection(_flow.DbOpenConnection39,binding_getter361,binding_setter349,BindTargetType.ToInProperty);
            _flow.DbFetchData247.InDirections.Add(bind_dir349);
            XmlDocument DbFetchData247_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData247_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData247_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData247.ExpectedOutputProperties = DbFetchData247_ExpectedOutputProperties_Document;
            _flow.DbFetchData96.QueryString = @"update tb_result_table set ResponseJson = '{Step.OutputProperties.HTTPActivity92.ResponseBody}' where InterfaceName = '/jxt/school.php'";
            _flow.DbFetchData96.Timeout = (int)30;
            _flow.DbFetchData96.Comment = @"";
            _flow.DbFetchData96.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData96.Name = @"将接口返回的Json更新至tb_result_table";
            VTDPropertyInfoBase pi711 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter362 = new VTDObjectGetter(pi711);
            VTDPropertyInfoBase pi712 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter350 = new VTDObjectSetter(pi712);
            binding_setter350 = new StringFormaterDecorator(binding_setter350,"{Step.OutputProperties.HTTPActivity92.ResponseBody}");
            bind_dir350 = new BindDirection(_flow.HTTPActivity92,binding_getter362,binding_setter350,BindTargetType.ToInProperty);
            _flow.DbFetchData96.InDirections.Add(bind_dir350);
            VTDPropertyInfoBase pi713 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter363 = new VTDObjectGetter(pi713);
            VTDPropertyInfoBase pi714 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter351 = new VTDObjectSetter(pi714);
            bind_dir351 = new BindDirection(_flow.DbOpenConnection39,binding_getter363,binding_setter351,BindTargetType.ToInProperty);
            _flow.DbFetchData96.InDirections.Add(bind_dir351);
            XmlDocument DbFetchData96_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData96_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData96_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData96.ExpectedOutputProperties = DbFetchData96_ExpectedOutputProperties_Document;
            this.DataCursorActivity260.Comment = @"";
            this.DataCursorActivity260.IconPath = @"";
            VTDPropertyInfoBase pi715 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter364 = new VTDObjectGetter(pi715);
            VTDPropertyInfoBase pi716 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter352 = new VTDObjectSetter(pi716);
            binding_setter352 = new StringFormaterDecorator(binding_setter352,"{Step.DataFetchActivity252.OutTable}");
            bind_dir352 = new BindDirection(_flow.DataFetchActivity252,binding_getter364,binding_setter352,BindTargetType.ToInProperty);
            this.DataCursorActivity260.InDirections.Add(bind_dir352);
            this.DataCursorActivity260_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity260_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity260_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity260_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity260_Policy.StartCondition.Value = "";
            this.DataCursorActivity260_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity260_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity260_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity260_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity260_Policy.EndCondition.Value = "";
            this.DataCursorActivity260_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity260_Policy.StepSize = 1;
            this.DataCursorActivity260_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity260.Policy = this.DataCursorActivity260_Policy;
            this.DataCursorActivity260.ReportStepData = false;
            _flow.Loop78.BeforeExecuteStepEvent += this.DataCursorActivity260.ResetCursor;
            _flow.Sequence251.Comment = @"";
            _flow.Sequence251.IconPath = @"";
            _flow.Sequence251.Name = @"序列251";
            _flow.Sequence251.Activities.Add (_flow.DbFetchData80);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData248);
            _flow.Sequence251.Activities.Add (_flow.ReplaceStringActivity249);
            _flow.Sequence251.Activities.Add (_flow.HTTPActivity81);
            _flow.Sequence251.Activities.Add (_flow.StringToJsonActivity82);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData83);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData84);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData85);
            _flow.Sequence251.Activities.Add (_flow.DbFetchData86);
            _flow.Sequence251.Activities.Add (_flow.IfElse87);
            _flow.DbFetchData80.QueryString = @"select xsid,jid,identity,myJid,token from tb_getschoolinfo_verification where TestCase = {Step.OutputProperties.Loop78.CurrentIterationNumber}";
            _flow.DbFetchData80.Timeout = (int)30;
            _flow.DbFetchData80.Comment = @"";
            _flow.DbFetchData80.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData80.Name = @"查询tb_getSchoolInfo_verification表中数据";
            VTDPropertyInfoBase pi717 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter365 = new VTDObjectGetter(pi717);
            VTDPropertyInfoBase pi718 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter353 = new VTDObjectSetter(pi718);
            binding_setter353 = new StringFormaterDecorator(binding_setter353,"{Step.OutputProperties.Loop78.CurrentIterationNumber}");
            bind_dir353 = new BindDirection(_flow.Loop78,binding_getter365,binding_setter353,BindTargetType.ToInProperty);
            _flow.DbFetchData80.InDirections.Add(bind_dir353);
            VTDPropertyInfoBase pi719 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter366 = new VTDObjectGetter(pi719);
            VTDPropertyInfoBase pi720 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter354 = new VTDObjectSetter(pi720);
            bind_dir354 = new BindDirection(_flow.DbOpenConnection39,binding_getter366,binding_setter354,BindTargetType.ToInProperty);
            _flow.DbFetchData80.InDirections.Add(bind_dir354);
            XmlDocument DbFetchData80_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData80_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData80_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><xsid /><jid /><identity /><myJid /><token /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData80.ExpectedOutputProperties = DbFetchData80_ExpectedOutputProperties_Document;
            _flow.DbFetchData248.QueryString = @"select ResponseXsid from tb_global_table where TestCase = 1";
            _flow.DbFetchData248.Timeout = (int)30;
            _flow.DbFetchData248.Comment = @"";
            _flow.DbFetchData248.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData248.Name = @"查询tb_global_table表中ResponseXsid值";
            VTDPropertyInfoBase pi721 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter367 = new VTDObjectGetter(pi721);
            VTDPropertyInfoBase pi722 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter355 = new VTDObjectSetter(pi722);
            bind_dir355 = new BindDirection(_flow.DbOpenConnection39,binding_getter367,binding_setter355,BindTargetType.ToInProperty);
            _flow.DbFetchData248.InDirections.Add(bind_dir355);
            XmlDocument DbFetchData248_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData248_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData248_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ResponseXsid /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData248.ExpectedOutputProperties = DbFetchData248_ExpectedOutputProperties_Document;
            _flow.ReplaceStringActivity249.SourceString = @"{Step.OutputProperties.DbFetchData80.ResultTable.Row[1].xsid}";
            _flow.ReplaceStringActivity249.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity249.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Key = @"x_1f1a0e62u0t5j480c916h26642tc3didb95f5an861da049516m0y7pd5aiu00";
            _flow.ReplaceStringActivity249.SearchReplaceString[0].Value = @"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}";
            _flow.ReplaceStringActivity249.CaseSensitive = true;
            _flow.ReplaceStringActivity249.Comment = @"";
            _flow.ReplaceStringActivity249.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity249.Name = @"将xsid更新至最新值";
            VTDPropertyInfoBase pi723 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='xsid'][1]");
            VTDBaseGetter binding_getter368 = new VTDXPathGetter(pi723,XmlTypeCode.String);
            binding_getter368 = new XPathGetterDecorator(binding_getter368,"{Array0}",1);
            VTDPropertyInfoBase pi724 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter356 = new VTDObjectSetter(pi724);
            binding_setter356 = new StringFormaterDecorator(binding_setter356,"{Step.OutputProperties.DbFetchData80.ResultTable.Row[1].xsid}");
            bind_dir356 = new BindDirection(_flow.DbFetchData80,binding_getter368,binding_setter356,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir356);
            VTDPropertyInfoBase pi725 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ResponseXsid'][1]");
            VTDBaseGetter binding_getter369 = new VTDXPathGetter(pi725,XmlTypeCode.String);
            binding_getter369 = new XPathGetterDecorator(binding_getter369,"{Array0}",1);
            VTDPropertyInfoBase pi726 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseSetter binding_setter357 = new VTDObjectSetter(pi726);
            binding_setter357 = new StringFormaterDecorator(binding_setter357,"{Step.OutputProperties.DbFetchData248.ResultTable.Row[1].ResponseXsid}");
            bind_dir357 = new BindDirection(_flow.DbFetchData248,binding_getter369,binding_setter357,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity249.InDirections.Add(bind_dir357);
            _flow.HTTPActivity81.TextBody = @"xsid={Step.OutputProperties.ReplaceStringActivity249.Result}&myJid={Step.OutputProperties.DbFetchData80.ResultTable.Row[1].myJid}&token={Step.OutputProperties.DbFetchData80.ResultTable.Row[1].token}&identity={Step.OutputProperties.DbFetchData80.ResultTable.Row[1].identity}&jid={Step.OutputProperties.DbFetchData80.ResultTable.Row[1].jid}";
            _flow.HTTPActivity81.TextXmlBody = @"";
            _flow.HTTPActivity81.FileBody = @"";
            _flow.HTTPActivity81.PostBody = @"";
            _flow.HTTPActivity81.Url = @"{DataSource.tb_global_table.JXTInfoHost}{DataSource.tb_global_table.getSchoolInfo}";
            _flow.HTTPActivity81.HttpMethod = @"POST";
            _flow.HTTPActivity81.HttpVersion = @"1.1";
            _flow.HTTPActivity81.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity81.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity81.RequestHeaders[0].Key = @"{DataSource.tb_global_table.RequestHeadersName}";
            _flow.HTTPActivity81.RequestHeaders[0].Value = @"{DataSource.tb_global_table.RequestHeadersValue}";
            _flow.HTTPActivity81.Comment = @"";
            _flow.HTTPActivity81.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity81.RequestBodyType = @"Text";
            _flow.HTTPActivity81.ResponseType = @"Text";
            _flow.HTTPActivity81.Name = @"调用/jxt/school.php";
            _flow.HTTPActivity81.Proxy.Server = @"";
            _flow.HTTPActivity81.Proxy.Username = @"";
            _flow.HTTPActivity81.Proxy.Password = @"";
            _flow.HTTPActivity81.Authentication.Username = @"";
            _flow.HTTPActivity81.Authentication.Password = @"";
            _flow.HTTPActivity81.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity81.Timeout = (int)100000;
            _flow.HTTPActivity81.ClientCertificate.Password = @"";
            _flow.HTTPActivity81.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity81.UseClientCertificate = false;
            _flow.HTTPActivity81.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity81.AllowRedirections = true;
            _flow.HTTPActivity81.ReuseCookies = false;
            _flow.HTTPActivity81.ExpectServerError = false;
            XmlDocument HTTPActivity81_XMLBody_Document = new XmlDocument();
            HTTPActivity81_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity81_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity81.XMLBody = HTTPActivity81_XMLBody_Document;
            XmlDocument HTTPActivity81_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity81_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity81_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity81.RequestMultipartInfoXml = HTTPActivity81_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity81.Multipart=false;
            VTDPropertyInfoBase pi727 = new VTDPropertyInfoBase("JXTInfoHost");
            VTDBaseGetter binding_getter370 = new VTDObjectGetter(pi727);
            VTDPropertyInfoBase pi728 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter358 = new VTDObjectSetter(pi728);
            binding_setter358 = new StringFormaterDecorator(binding_setter358,"{DataSource.tb_global_table.JXTInfoHost}");
            bind_dir358 = new BindDirection(this.DataCursorActivity260,binding_getter370,binding_setter358,BindTargetType.ToInProperty);
            _flow.HTTPActivity81.InDirections.Add(bind_dir358);
            VTDPropertyInfoBase pi729 = new VTDPropertyInfoBase("getSchoolInfo");
            VTDBaseGetter binding_getter371 = new VTDObjectGetter(pi729);
            VTDPropertyInfoBase pi730 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter359 = new VTDObjectSetter(pi730);
            binding_setter359 = new StringFormaterDecorator(binding_setter359,"{DataSource.tb_global_table.getSchoolInfo}");
            bind_dir359 = new BindDirection(this.DataCursorActivity260,binding_getter371,binding_setter359,BindTargetType.ToInProperty);
            _flow.HTTPActivity81.InDirections.Add(bind_dir359);
            VTDPropertyInfoBase pi731 = new VTDPropertyInfoBase("RequestHeadersValue");
            VTDBaseGetter binding_getter372 = new VTDObjectGetter(pi731);
            VTDPropertyInfoBase pi732 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter360 = new VTDObjectSetter(pi732);
            binding_setter360 = new StringFormaterDecorator(binding_setter360,"{DataSource.tb_global_table.RequestHeadersValue}");
            bind_dir360 = new BindDirection(this.DataCursorActivity260,binding_getter372,binding_setter360,BindTargetType.ToInProperty);
            _flow.HTTPActivity81.InDirections.Add(bind_dir360);
            VTDPropertyInfoBase pi733 = new VTDPropertyInfoBase("RequestHeadersName");
            VTDBaseGetter binding_getter373 = new VTDObjectGetter(pi733);
            VTDPropertyInfoBase pi734 = new VTDPropertyInfoBase("RequestHeaders[0].Key");
            VTDBaseSetter binding_setter361 = new VTDObjectSetter(pi734);
            binding_setter361 = new StringFormaterDecorator(binding_setter361,"{DataSource.tb_global_table.RequestHeadersName}");
            bind_dir361 = new BindDirection(this.DataCursorActivity260,binding_getter373,binding_setter361,BindTargetType.ToInProperty);
            _flow.HTTPActivity81.InDirections.Add(bind_dir361);
            VTDPropertyInfoBase pi735 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter374 = new VTDObjectGetter(pi735);
            VTDPropertyInfoBase pi736 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter362 = new VTDObjectSetter(pi736);
            binding_setter362 = new StringFormaterDecorator(binding_setter362,"{Step.OutputProperties.ReplaceStringActivity249.Result}");
            bind_dir362 = new BindDirection(_flow.ReplaceStringActivity249,binding_getter374,binding_setter362,BindTargetType.ToInProperty);
            _flow.HTTPActivity81.InDirections.Add(bind_dir362);
            VTDPropertyInfoBase pi737 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='myJid'][1]");
            VTDBaseGetter binding_getter375 = new VTDXPathGetter(pi737,XmlTypeCode.String);
            binding_getter375 = new XPathGetterDecorator(binding_getter375,"{Array0}",1);
            VTDPropertyInfoBase pi738 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter363 = new VTDObjectSetter(pi738);
            binding_setter363 = new StringFormaterDecorator(binding_setter363,"{Step.OutputProperties.DbFetchData80.ResultTable.Row[1].myJid}");
            bind_dir363 = new BindDirection(_flow.DbFetchData80,binding_getter375,binding_setter363,BindTargetType.ToInProperty);
            _flow.HTTPActivity81.InDirections.Add(bind_dir363);
            VTDPropertyInfoBase pi739 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='token'][1]");
            VTDBaseGetter binding_getter376 = new VTDXPathGetter(pi739,XmlTypeCode.String);
            binding_getter376 = new XPathGetterDecorator(binding_getter376,"{Array0}",1);
            VTDPropertyInfoBase pi740 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter364 = new VTDObjectSetter(pi740);
            binding_setter364 = new StringFormaterDecorator(binding_setter364,"{Step.OutputProperties.DbFetchData80.ResultTable.Row[1].token}");
            bind_dir364 = new BindDirection(_flow.DbFetchData80,binding_getter376,binding_setter364,BindTargetType.ToInProperty);
            _flow.HTTPActivity81.InDirections.Add(bind_dir364);
            VTDPropertyInfoBase pi741 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='identity'][1]");
            VTDBaseGetter binding_getter377 = new VTDXPathGetter(pi741,XmlTypeCode.String);
            binding_getter377 = new XPathGetterDecorator(binding_getter377,"{Array0}",1);
            VTDPropertyInfoBase pi742 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter365 = new VTDObjectSetter(pi742);
            binding_setter365 = new StringFormaterDecorator(binding_setter365,"{Step.OutputProperties.DbFetchData80.ResultTable.Row[1].identity}");
            bind_dir365 = new BindDirection(_flow.DbFetchData80,binding_getter377,binding_setter365,BindTargetType.ToInProperty);
            _flow.HTTPActivity81.InDirections.Add(bind_dir365);
            VTDPropertyInfoBase pi743 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='jid'][1]");
            VTDBaseGetter binding_getter378 = new VTDXPathGetter(pi743,XmlTypeCode.String);
            binding_getter378 = new XPathGetterDecorator(binding_getter378,"{Array0}",1);
            VTDPropertyInfoBase pi744 = new VTDPropertyInfoBase("TextBody");
            VTDBaseSetter binding_setter366 = new VTDObjectSetter(pi744);
            binding_setter366 = new StringFormaterDecorator(binding_setter366,"{Step.OutputProperties.DbFetchData80.ResultTable.Row[1].jid}");
            bind_dir366 = new BindDirection(_flow.DbFetchData80,binding_getter378,binding_setter366,BindTargetType.ToInProperty);
            _flow.HTTPActivity81.InDirections.Add(bind_dir366);
            XmlDocument HTTPActivity81_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity81_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity81_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity81.ExpectedResponseXmlBody = HTTPActivity81_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity81_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity81_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity81_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity81.ExpectedResponseJsonBody = HTTPActivity81_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity81_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity81_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity81_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity81.ExpectedOutputProperties = HTTPActivity81_ExpectedOutputProperties_Document;
            _flow.StringToJsonActivity82.InputString = @"{Step.OutputProperties.HTTPActivity81.ResponseBody}";
            _flow.StringToJsonActivity82.Comment = @"";
            _flow.StringToJsonActivity82.IconPath = @"AddIns\ServiceTest\TransformJson\ictb_string_to_json_16.png";
            _flow.StringToJsonActivity82.Name = @"将获取的Response转换为JSON";
            VTDPropertyInfoBase pi745 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter379 = new VTDObjectGetter(pi745);
            VTDPropertyInfoBase pi746 = new VTDPropertyInfoBase("InputString");
            VTDBaseSetter binding_setter367 = new VTDObjectSetter(pi746);
            binding_setter367 = new StringFormaterDecorator(binding_setter367,"{Step.OutputProperties.HTTPActivity81.ResponseBody}");
            bind_dir367 = new BindDirection(_flow.HTTPActivity81,binding_getter379,binding_setter367,BindTargetType.ToInProperty);
            _flow.StringToJsonActivity82.InDirections.Add(bind_dir367);
            _flow.DbFetchData83.QueryString = @"update tb_getschoolinfo_verification set InterfaceResponse = '{Step.OutputProperties.HTTPActivity81.ResponseBody}' where TestCase = {Step.OutputProperties.Loop78.CurrentIterationNumber}";
            _flow.DbFetchData83.Timeout = (int)30;
            _flow.DbFetchData83.Comment = @"";
            _flow.DbFetchData83.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData83.Name = @"将Response插入到InterfaceResponse字段中";
            VTDPropertyInfoBase pi747 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseGetter binding_getter380 = new VTDObjectGetter(pi747);
            VTDPropertyInfoBase pi748 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter368 = new VTDObjectSetter(pi748);
            binding_setter368 = new StringFormaterDecorator(binding_setter368,"{Step.OutputProperties.HTTPActivity81.ResponseBody}");
            bind_dir368 = new BindDirection(_flow.HTTPActivity81,binding_getter380,binding_setter368,BindTargetType.ToInProperty);
            _flow.DbFetchData83.InDirections.Add(bind_dir368);
            VTDPropertyInfoBase pi749 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter381 = new VTDObjectGetter(pi749);
            VTDPropertyInfoBase pi750 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter369 = new VTDObjectSetter(pi750);
            binding_setter369 = new StringFormaterDecorator(binding_setter369,"{Step.OutputProperties.Loop78.CurrentIterationNumber}");
            bind_dir369 = new BindDirection(_flow.Loop78,binding_getter381,binding_setter369,BindTargetType.ToInProperty);
            _flow.DbFetchData83.InDirections.Add(bind_dir369);
            VTDPropertyInfoBase pi751 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter382 = new VTDObjectGetter(pi751);
            VTDPropertyInfoBase pi752 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter370 = new VTDObjectSetter(pi752);
            bind_dir370 = new BindDirection(_flow.DbOpenConnection39,binding_getter382,binding_setter370,BindTargetType.ToInProperty);
            _flow.DbFetchData83.InDirections.Add(bind_dir370);
            XmlDocument DbFetchData83_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData83_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData83_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData83.ExpectedOutputProperties = DbFetchData83_ExpectedOutputProperties_Document;
            _flow.DbFetchData84.QueryString = @"update tb_getschoolinfo_verification set OutputValue = 'errorCode={Step.JsonContent.StringToJsonActivity82.errorCode}' where TestCase = {Step.OutputProperties.Loop78.CurrentIterationNumber}";
            _flow.DbFetchData84.Timeout = (int)30;
            _flow.DbFetchData84.Comment = @"";
            _flow.DbFetchData84.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData84.Name = @"将errorcode更新到sql中";
            VTDPropertyInfoBase pi753 = new VTDPropertyInfoBase("JsonContent","/*[local-name(.)='Object'][1]/*[local-name(.)='errorCode'][1]");
            VTDBaseGetter binding_getter383 = new VTDJsonGetter(pi753);
            VTDPropertyInfoBase pi754 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter371 = new VTDObjectSetter(pi754);
            binding_setter371 = new StringFormaterDecorator(binding_setter371,"{Step.JsonContent.StringToJsonActivity82.errorCode}");
            bind_dir371 = new BindDirection(_flow.StringToJsonActivity82,binding_getter383,binding_setter371,BindTargetType.ToInProperty);
            _flow.DbFetchData84.InDirections.Add(bind_dir371);
            VTDPropertyInfoBase pi755 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter384 = new VTDObjectGetter(pi755);
            VTDPropertyInfoBase pi756 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter372 = new VTDObjectSetter(pi756);
            binding_setter372 = new StringFormaterDecorator(binding_setter372,"{Step.OutputProperties.Loop78.CurrentIterationNumber}");
            bind_dir372 = new BindDirection(_flow.Loop78,binding_getter384,binding_setter372,BindTargetType.ToInProperty);
            _flow.DbFetchData84.InDirections.Add(bind_dir372);
            VTDPropertyInfoBase pi757 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter385 = new VTDObjectGetter(pi757);
            VTDPropertyInfoBase pi758 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter373 = new VTDObjectSetter(pi758);
            bind_dir373 = new BindDirection(_flow.DbOpenConnection39,binding_getter385,binding_setter373,BindTargetType.ToInProperty);
            _flow.DbFetchData84.InDirections.Add(bind_dir373);
            XmlDocument DbFetchData84_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData84_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData84_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData84.ExpectedOutputProperties = DbFetchData84_ExpectedOutputProperties_Document;
            _flow.DbFetchData85.QueryString = @"select OutputValue from tb_getschoolinfo_verification where TestCase = {Step.OutputProperties.Loop78.CurrentIterationNumber}";
            _flow.DbFetchData85.Timeout = (int)30;
            _flow.DbFetchData85.Comment = @"";
            _flow.DbFetchData85.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData85.Name = @"获取当前Case的实际值";
            VTDPropertyInfoBase pi759 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter386 = new VTDObjectGetter(pi759);
            VTDPropertyInfoBase pi760 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter374 = new VTDObjectSetter(pi760);
            binding_setter374 = new StringFormaterDecorator(binding_setter374,"{Step.OutputProperties.Loop78.CurrentIterationNumber}");
            bind_dir374 = new BindDirection(_flow.Loop78,binding_getter386,binding_setter374,BindTargetType.ToInProperty);
            _flow.DbFetchData85.InDirections.Add(bind_dir374);
            VTDPropertyInfoBase pi761 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter387 = new VTDObjectGetter(pi761);
            VTDPropertyInfoBase pi762 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter375 = new VTDObjectSetter(pi762);
            bind_dir375 = new BindDirection(_flow.DbOpenConnection39,binding_getter387,binding_setter375,BindTargetType.ToInProperty);
            _flow.DbFetchData85.InDirections.Add(bind_dir375);
            XmlDocument DbFetchData85_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData85_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData85_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OutputValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData85.ExpectedOutputProperties = DbFetchData85_ExpectedOutputProperties_Document;
            _flow.DbFetchData86.QueryString = @"select ExpectationValue from tb_getschoolinfo_verification where TestCase = {Step.OutputProperties.Loop78.CurrentIterationNumber}";
            _flow.DbFetchData86.Timeout = (int)30;
            _flow.DbFetchData86.Comment = @"";
            _flow.DbFetchData86.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData86.Name = @"获取当前Case的期待值";
            VTDPropertyInfoBase pi763 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter388 = new VTDObjectGetter(pi763);
            VTDPropertyInfoBase pi764 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter376 = new VTDObjectSetter(pi764);
            binding_setter376 = new StringFormaterDecorator(binding_setter376,"{Step.OutputProperties.Loop78.CurrentIterationNumber}");
            bind_dir376 = new BindDirection(_flow.Loop78,binding_getter388,binding_setter376,BindTargetType.ToInProperty);
            _flow.DbFetchData86.InDirections.Add(bind_dir376);
            VTDPropertyInfoBase pi765 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter389 = new VTDObjectGetter(pi765);
            VTDPropertyInfoBase pi766 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter377 = new VTDObjectSetter(pi766);
            bind_dir377 = new BindDirection(_flow.DbOpenConnection39,binding_getter389,binding_setter377,BindTargetType.ToInProperty);
            _flow.DbFetchData86.InDirections.Add(bind_dir377);
            XmlDocument DbFetchData86_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData86_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData86_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><ExpectationValue /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData86.ExpectedOutputProperties = DbFetchData86_ExpectedOutputProperties_Document;
            _flow.IfElse87.ConditionAsString = @"{Step.OutputProperties.DbFetchData85.ResultTable.Row[1].OutputValue} Equal {Step.OutputProperties.DbFetchData86.ResultTable.Row[1].ExpectationValue}";
            _flow.IfElse87.Comment = @"";
            _flow.IfElse87.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse87.Name = @"填写Result";
            _flow.IfElse87.Activities.Add (_flow.IfElseBranch88);
            _flow.IfElse87.Activities.Add (_flow.IfElseBranch89);
            _flow.IfElseBranch88.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi767 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OutputValue'][1]");
            VTDBaseGetter binding_getter390 = new VTDXPathGetter(pi767,XmlTypeCode.String);
            binding_getter390 = new XPathGetterDecorator(binding_getter390,"{Array0}",1);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData85.GetParam(binding_getter390),typeof(System.String));
            		var result0 = expr00;
            VTDPropertyInfoBase pi768 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='ExpectationValue'][1]");
            VTDBaseGetter binding_getter391 = new VTDXPathGetter(pi768,XmlTypeCode.String);
            binding_getter391 = new XPathGetterDecorator(binding_getter391,"{Array0}",1);
            		System.String expr10 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.DbFetchData86.GetParam(binding_getter391),typeof(System.String));
            		var result1 = expr10;
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch88.Comment = @"";
            _flow.IfElseBranch88.IconPath = @"";
            _flow.IfElseBranch88.Name = @"是";
            _flow.IfElseBranch88.Activities.Add (_flow.DbFetchData90);
            _flow.IfElseBranch89.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch89.Comment = @"";
            _flow.IfElseBranch89.IconPath = @"";
            _flow.IfElseBranch89.Name = @"否";
            _flow.IfElseBranch89.Activities.Add (_flow.DbFetchData91);
            _flow.DbFetchData90.QueryString = @"update tb_getschoolinfo_verification set Result = 'True' where TestCase = {Step.OutputProperties.Loop78.CurrentIterationNumber}";
            _flow.DbFetchData90.Timeout = (int)30;
            _flow.DbFetchData90.Comment = @"";
            _flow.DbFetchData90.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData90.Name = @"在Result字段插入True";
            VTDPropertyInfoBase pi769 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter392 = new VTDObjectGetter(pi769);
            VTDPropertyInfoBase pi770 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter378 = new VTDObjectSetter(pi770);
            binding_setter378 = new StringFormaterDecorator(binding_setter378,"{Step.OutputProperties.Loop78.CurrentIterationNumber}");
            bind_dir378 = new BindDirection(_flow.Loop78,binding_getter392,binding_setter378,BindTargetType.ToInProperty);
            _flow.DbFetchData90.InDirections.Add(bind_dir378);
            VTDPropertyInfoBase pi771 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter393 = new VTDObjectGetter(pi771);
            VTDPropertyInfoBase pi772 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter379 = new VTDObjectSetter(pi772);
            bind_dir379 = new BindDirection(_flow.DbOpenConnection39,binding_getter393,binding_setter379,BindTargetType.ToInProperty);
            _flow.DbFetchData90.InDirections.Add(bind_dir379);
            XmlDocument DbFetchData90_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData90_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData90_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData90.ExpectedOutputProperties = DbFetchData90_ExpectedOutputProperties_Document;
            _flow.DbFetchData91.QueryString = @"update tb_getschoolinfo_verification set Result = 'False' where TestCase = {Step.OutputProperties.Loop78.CurrentIterationNumber}";
            _flow.DbFetchData91.Timeout = (int)30;
            _flow.DbFetchData91.Comment = @"";
            _flow.DbFetchData91.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData91.Name = @"在Result字段插入False";
            VTDPropertyInfoBase pi773 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter394 = new VTDObjectGetter(pi773);
            VTDPropertyInfoBase pi774 = new VTDPropertyInfoBase("QueryString");
            VTDBaseSetter binding_setter380 = new VTDObjectSetter(pi774);
            binding_setter380 = new StringFormaterDecorator(binding_setter380,"{Step.OutputProperties.Loop78.CurrentIterationNumber}");
            bind_dir380 = new BindDirection(_flow.Loop78,binding_getter394,binding_setter380,BindTargetType.ToInProperty);
            _flow.DbFetchData91.InDirections.Add(bind_dir380);
            VTDPropertyInfoBase pi775 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter395 = new VTDObjectGetter(pi775);
            VTDPropertyInfoBase pi776 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter381 = new VTDObjectSetter(pi776);
            bind_dir381 = new BindDirection(_flow.DbOpenConnection39,binding_getter395,binding_setter381,BindTargetType.ToInProperty);
            _flow.DbFetchData91.InDirections.Add(bind_dir381);
            XmlDocument DbFetchData91_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData91_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData91_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row /></ResultTable></tns:Arguments>");
            _flow.DbFetchData91.ExpectedOutputProperties = DbFetchData91_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    